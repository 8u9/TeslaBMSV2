
C:\Users\tomde\AppData\Local\Temp\arduino\sketches\95606B835E7967C51305A25BFF052F33/TeslaBMSV2.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
  return highestCellVolt[cell];
}

float BMSModule::getLowestCellVolt(int cell)
{
  if (cell < 0 || cell > 5) return 0.0f;
       0:	00 80 00 20 bd 01 00 00 a9 ac 00 00 65 ac 00 00     ... ........e...

void BMSModuleManager::wakeBoards()
{
  uint8_t payload[3];
  uint8_t buff[8];
  payload[0] = 0x7F; //broadcast
      10:	65 ac 00 00 65 ac 00 00 65 ac 00 00 65 ac 00 00     e...e...e...e...
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
      20:	65 ac 00 00 65 ac 00 00 65 ac 00 00 a9 ac 00 00     e...e...e.......
public:
    
    static uint8_t genCRC(uint8_t *input, int lenInput)
    {
        uint8_t generator = 0x07;
        uint8_t crc = 0;
      30:	a9 ac 00 00 65 ac 00 00 71 a1 00 00 75 a1 00 00     ....e...q...u...
                {
                    crc = (uint8_t)((crc << 1) ^ generator);
                }
                else
                {
                    crc <<= 1;
      40:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
        for (int x = 0; x < lenInput; x++)
      50:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
        SERIALBMS.write(addrByte);
        SERIALBMS.write(&data[1], dataLen - 1);  //assumes that there are at least 2 bytes sent every time. There should be, addr and cmd at the least.
        data[0] = addrByte;
        if (isWrite) SERIALBMS.write(genCRC(data, dataLen));        

        if (Logger::isDebug())
      60:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
  payload[1] = REG_IO_CTRL;//IO ctrl start
  payload[2] = 0x00;//write sleep bit
  BMSUtil::sendData(payload, 3, true);
  delay(2);
      70:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
    }

    static int getReply(uint8_t *data, int maxLen)
    { 
        int numBytes = 0; 
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
      80:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
            crc ^= input[x]; /* XOR-in the next input byte */
      90:	c5 87 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
        while (SERIALBMS.available() && numBytes < maxLen)
      a0:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
        {
            data[numBytes] = SERIALBMS.read();
            if (Logger::isDebug()) {
      b0:	a9 ac 00 00 dd 9d 00 00 e9 9d 00 00 ed 9d 00 00     ................
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
      c0:	f9 9d 00 00 fd 9d 00 00 01 9e 00 00 a9 ac 00 00     ................
	virtual int read(void)          { return serial3_getchar(); }
      d0:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
        }
        if (maxLen == numBytes)
        {
            while (SERIALBMS.available()) SERIALBMS.read();
        }
        if (Logger::isDebug()) SERIALCONSOLE.println();
      e0:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
  BMSUtil::getReply(buff, 8);

  payload[0] = 0x7F; //broadcast
  payload[1] = REG_ALERT_STATUS;//Fault Status
  payload[2] = 0x04;//data to cause a reset
      f0:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 cd bb 00 00     ................
					{ serial3_write(buffer, size); return size; }
     100:	a9 ac 00 00 f5 c2 00 00 a9 ac 00 00 a9 ac 00 00     ................
            crc ^= input[x]; /* XOR-in the next input byte */
     110:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
                    crc = (uint8_t)((crc << 1) ^ generator);
     120:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
            crc ^= input[x]; /* XOR-in the next input byte */
     130:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
        if (Logger::isDebug())
     140:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
     150:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     160:	a9 ac 00 00 f5 c5 00 00 a9 ac 00 00 a9 ac 00 00     ................
	virtual int available(void)     { return serial3_available(); }
     170:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
	virtual int read(void)          { return serial3_getchar(); }
     180:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
     190:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
     1a0:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00 a9 ac 00 00     ................
            while (SERIALBMS.available()) SERIALBMS.read();
     1b0:	a9 ac 00 00 a9 ac 00 00 a9 ac 00 00                 ............

000001bc <ResetHandler>:
  BMSUtil::sendData(payload, 3, true);
  delay(2);
  BMSUtil::getReply(buff, 8);
  payload[0] = 0x7F; //broadcast
     1bc:	4b57      	ldr	r3, [pc, #348]	; (31c <ResetHandler+0x160>)
  payload[2] = 0x00;//data to clear
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
  payload[0] = 0x7F; //broadcast
     1c2:	b510      	push	{r4, lr}
     1c4:	81da      	strh	r2, [r3, #14]
  payload[2] = 0x00;//data to clear
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
     1ca:	81da      	strh	r2, [r3, #14]
     1cc:	bf00      	nop
					{ serial3_write(buffer, size); return size; }
     1ce:	bf00      	nop
     1d0:	f00a fd6e 	bl	acb0 <startup_early_hook>
     1d4:	4b52      	ldr	r3, [pc, #328]	; (320 <ResetHandler+0x164>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
        data[0] = addrByte;
     1da:	631a      	str	r2, [r3, #48]	; 0x30
     1dc:	4a51      	ldr	r2, [pc, #324]	; (324 <ResetHandler+0x168>)
        uint8_t crc = 0;
     1de:	639a      	str	r2, [r3, #56]	; 0x38
        data[0] = addrByte;
     1e0:	4a51      	ldr	r2, [pc, #324]	; (328 <ResetHandler+0x16c>)
            crc ^= input[x]; /* XOR-in the next input byte */
     1e2:	63da      	str	r2, [r3, #60]	; 0x3c
     1e4:	4a51      	ldr	r2, [pc, #324]	; (32c <ResetHandler+0x170>)
                    crc = (uint8_t)((crc << 1) ^ generator);
     1e6:	6913      	ldr	r3, [r2, #16]
                if ((crc & 0x80) != 0)
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
                    crc <<= 1;
     1ec:	d103      	bne.n	1f6 <ResetHandler+0x3a>
     1ee:	6153      	str	r3, [r2, #20]
                    crc = (uint8_t)((crc << 1) ^ generator);
     1f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f4:	6113      	str	r3, [r2, #16]
     1f6:	4b4e      	ldr	r3, [pc, #312]	; (330 <ResetHandler+0x174>)
                    crc <<= 1;
     1f8:	789a      	ldrb	r2, [r3, #2]
            for (int i = 0; i < 8; i++)
     1fa:	0711      	lsls	r1, r2, #28
     1fc:	d503      	bpl.n	206 <ResetHandler+0x4a>
        for (int x = 0; x < lenInput; x++)
     1fe:	789a      	ldrb	r2, [r3, #2]
     200:	f042 0208 	orr.w	r2, r2, #8
            crc ^= input[x]; /* XOR-in the next input byte */
     204:	709a      	strb	r2, [r3, #2]
     206:	4b4b      	ldr	r3, [pc, #300]	; (334 <ResetHandler+0x178>)
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
     208:	484b      	ldr	r0, [pc, #300]	; (338 <ResetHandler+0x17c>)
     20a:	222a      	movs	r2, #42	; 0x2a
        if (Logger::isDebug())
     20c:	701a      	strb	r2, [r3, #0]
     20e:	4b4b      	ldr	r3, [pc, #300]	; (33c <ResetHandler+0x180>)
     210:	1cda      	adds	r2, r3, #3
     212:	1a12      	subs	r2, r2, r0
     214:	1ec1      	subs	r1, r0, #3
        data[0] = orig;
     216:	f022 0203 	bic.w	r2, r2, #3
     21a:	4299      	cmp	r1, r3
     21c:	bf88      	it	hi
  BMSUtil::sendData(payload, 3, true);
  delay(2);
     21e:	2200      	movhi	r2, #0
     220:	4947      	ldr	r1, [pc, #284]	; (340 <ResetHandler+0x184>)
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
     222:	f00a fc4b 	bl	aabc <memcpy>
     226:	4b47      	ldr	r3, [pc, #284]	; (344 <ResetHandler+0x188>)
     228:	4847      	ldr	r0, [pc, #284]	; (348 <ResetHandler+0x18c>)
     22a:	1cda      	adds	r2, r3, #3
     22c:	1a12      	subs	r2, r2, r0
     22e:	1ec1      	subs	r1, r0, #3
     230:	f022 0203 	bic.w	r2, r2, #3
            crc ^= input[x]; /* XOR-in the next input byte */
     234:	4299      	cmp	r1, r3
            numBytes++;
     236:	bf88      	it	hi
	virtual int available(void)     { return serial3_available(); }
     238:	2200      	movhi	r2, #0
     23a:	2100      	movs	r1, #0
        while (SERIALBMS.available() && numBytes < maxLen)
     23c:	f00f fc78 	bl	fb30 <memset>
     240:	4942      	ldr	r1, [pc, #264]	; (34c <ResetHandler+0x190>)
	virtual int read(void)          { return serial3_getchar(); }
     242:	4843      	ldr	r0, [pc, #268]	; (350 <ResetHandler+0x194>)
     244:	f44f 72de 	mov.w	r2, #444	; 0x1bc
            data[numBytes] = SERIALBMS.read();
     248:	f00a fc38 	bl	aabc <memcpy>
            if (Logger::isDebug()) {
     24c:	4b41      	ldr	r3, [pc, #260]	; (354 <ResetHandler+0x198>)
     24e:	4a42      	ldr	r2, [pc, #264]	; (358 <ResetHandler+0x19c>)
     250:	2180      	movs	r1, #128	; 0x80
     252:	f803 1b01 	strb.w	r1, [r3], #1
     256:	4293      	cmp	r3, r2
     258:	d1fb      	bne.n	252 <ResetHandler+0x96>
     25a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     25e:	4a3c      	ldr	r2, [pc, #240]	; (350 <ResetHandler+0x194>)
     260:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
     264:	4b3d      	ldr	r3, [pc, #244]	; (35c <ResetHandler+0x1a0>)
     266:	228a      	movs	r2, #138	; 0x8a
     268:	701a      	strb	r2, [r3, #0]
     26a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
	virtual int available(void)     { return serial3_available(); }
     26e:	2224      	movs	r2, #36	; 0x24
     270:	705a      	strb	r2, [r3, #1]
            while (SERIALBMS.available()) SERIALBMS.read();
     272:	22a0      	movs	r2, #160	; 0xa0
     274:	701a      	strb	r2, [r3, #0]
        if (Logger::isDebug()) SERIALCONSOLE.println();
     276:	799a      	ldrb	r2, [r3, #6]
     278:	0792      	lsls	r2, r2, #30
     27a:	d5fc      	bpl.n	276 <ResetHandler+0xba>
  BMSUtil::getReply(buff, 8);
}
     27c:	799a      	ldrb	r2, [r3, #6]
     27e:	06d4      	lsls	r4, r2, #27
     280:	d4fc      	bmi.n	27c <ResetHandler+0xc0>
        if (maxLen == numBytes)
     282:	4b37      	ldr	r3, [pc, #220]	; (360 <ResetHandler+0x1a4>)
     284:	799a      	ldrb	r2, [r3, #6]
        if (Logger::isDebug()) SERIALCONSOLE.println();
     286:	f002 020c 	and.w	r2, r2, #12
     28a:	2a08      	cmp	r2, #8
     28c:	d1fa      	bne.n	284 <ResetHandler+0xc8>
     28e:	2203      	movs	r2, #3
     290:	711a      	strb	r2, [r3, #4]
     292:	2240      	movs	r2, #64	; 0x40
     294:	715a      	strb	r2, [r3, #5]
     296:	799a      	ldrb	r2, [r3, #6]
     298:	0690      	lsls	r0, r2, #26
        if (maxLen == numBytes)
     29a:	d5fc      	bpl.n	296 <ResetHandler+0xda>
     29c:	4a30      	ldr	r2, [pc, #192]	; (360 <ResetHandler+0x1a4>)
     29e:	7993      	ldrb	r3, [r2, #6]
        if (Logger::isDebug()) SERIALCONSOLE.println();
     2a0:	0659      	lsls	r1, r3, #25
     2a2:	d5fc      	bpl.n	29e <ResetHandler+0xe2>
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
     2a6:	492f      	ldr	r1, [pc, #188]	; (364 <ResetHandler+0x1a8>)
     2a8:	6459      	str	r1, [r3, #68]	; 0x44
     2aa:	2102      	movs	r1, #2
     2ac:	6499      	str	r1, [r3, #72]	; 0x48
     2ae:	2120      	movs	r1, #32
        if (maxLen == numBytes)
     2b0:	7011      	strb	r1, [r2, #0]
     2b2:	7991      	ldrb	r1, [r2, #6]
     2b4:	f001 010c 	and.w	r1, r1, #12
        if (Logger::isDebug()) SERIALCONSOLE.println();
     2b8:	290c      	cmp	r1, #12
     2ba:	d1fa      	bne.n	2b2 <ResetHandler+0xf6>
     2bc:	4a2a      	ldr	r2, [pc, #168]	; (368 <ResetHandler+0x1ac>)
     2be:	605a      	str	r2, [r3, #4]
     2c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2c4:	4a29      	ldr	r2, [pc, #164]	; (36c <ResetHandler+0x1b0>)
     2c6:	615a      	str	r2, [r3, #20]
     2c8:	2200      	movs	r2, #0
     2ca:	619a      	str	r2, [r3, #24]
     2cc:	2207      	movs	r2, #7
     2ce:	611a      	str	r2, [r3, #16]
     2d0:	4a27      	ldr	r2, [pc, #156]	; (370 <ResetHandler+0x1b4>)
     2d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
     2d6:	b662      	cpsie	i
     2d8:	f00a fe14 	bl	af04 <_init_Teensyduino_internal_>
     2dc:	4b13      	ldr	r3, [pc, #76]	; (32c <ResetHandler+0x170>)
     2de:	695b      	ldr	r3, [r3, #20]
     2e0:	07da      	lsls	r2, r3, #31
     2e2:	d505      	bpl.n	2f0 <ResetHandler+0x134>
     2e4:	4823      	ldr	r0, [pc, #140]	; (374 <ResetHandler+0x1b8>)
     2e6:	f00a fe01 	bl	aeec <rtc_set>
     2ea:	4b23      	ldr	r3, [pc, #140]	; (378 <ResetHandler+0x1bc>)
     2ec:	4a23      	ldr	r2, [pc, #140]	; (37c <ResetHandler+0x1c0>)
     2ee:	61da      	str	r2, [r3, #28]
     2f0:	4b23      	ldr	r3, [pc, #140]	; (380 <ResetHandler+0x1c4>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	065b      	lsls	r3, r3, #25
     2f6:	d509      	bpl.n	30c <ResetHandler+0x150>
     2f8:	4c1f      	ldr	r4, [pc, #124]	; (378 <ResetHandler+0x1bc>)
     2fa:	4b20      	ldr	r3, [pc, #128]	; (37c <ResetHandler+0x1c0>)
     2fc:	69e2      	ldr	r2, [r4, #28]
     2fe:	429a      	cmp	r2, r3
     300:	d104      	bne.n	30c <ResetHandler+0x150>
     302:	481c      	ldr	r0, [pc, #112]	; (374 <ResetHandler+0x1b8>)
     304:	f00a fdf2 	bl	aeec <rtc_set>
     308:	2300      	movs	r3, #0
     30a:	61e3      	str	r3, [r4, #28]
     30c:	f00a fcd6 	bl	acbc <startup_late_hook>
     310:	f00f fd04 	bl	fd1c <__libc_init_array>
        uint8_t crc = 0;
     314:	f00a fbca 	bl	aaac <main>
     318:	e7fe      	b.n	318 <ResetHandler+0x15c>
     31a:	bf00      	nop
            crc ^= input[x]; /* XOR-in the next input byte */
     31c:	40052000 	.word	0x40052000
     320:	40048000 	.word	0x40048000
                    crc = (uint8_t)((crc << 1) ^ generator);
     324:	00043f82 	.word	0x00043f82
                if ((crc & 0x80) != 0)
     328:	2b000001 	.word	0x2b000001
                    crc <<= 1;
     32c:	4003d000 	.word	0x4003d000
                    crc = (uint8_t)((crc << 1) ^ generator);
     330:	4007d000 	.word	0x4007d000
     334:	4007e000 	.word	0x4007e000
            for (int i = 0; i < 8; i++)
     338:	1fff8720 	.word	0x1fff8720
        for (int x = 0; x < lenInput; x++)
     33c:	1fff9170 	.word	0x1fff9170
     340:	000175c4 	.word	0x000175c4
     344:	1fffbf84 	.word	0x1fffbf84
            SERIALCONSOLE.println();
     348:	1fff9170 	.word	0x1fff9170
     34c:	00000000 	.word	0x00000000
     350:	1fff8200 	.word	0x1fff8200
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	40065000 	.word	0x40065000
     360:	40064000 	.word	0x40064000
     364:	01030000 	.word	0x01030000
     368:	000510c0 	.word	0x000510c0
     36c:	000176ff 	.word	0x000176ff
     370:	20200000 	.word	0x20200000
     374:	645c2179 	.word	0x645c2179
     378:	4003e000 	.word	0x4003e000
     37c:	5a94c3a5 	.word	0x5a94c3a5
     380:	4007f000 	.word	0x4007f000
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
            for (int x = 1; x < dataLen; x++) {
     3b4:	ffffffff 	.word	0xffffffff
        uint8_t crc = 0;
     3b8:	ffffffff 	.word	0xffffffff
            crc ^= input[x]; /* XOR-in the next input byte */
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
                if ((crc & 0x80) != 0)
     3c4:	ffffffff 	.word	0xffffffff
                    crc <<= 1;
     3c8:	ffffffff 	.word	0xffffffff
                    crc = (uint8_t)((crc << 1) ^ generator);
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
                    crc <<= 1;
     3d4:	ffffffff 	.word	0xffffffff
            for (int i = 0; i < 8; i++)
     3d8:	ffffffff 	.word	0xffffffff
        for (int x = 0; x < lenInput; x++)
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
            SERIALCONSOLE.println();
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff9170 	.word	0x1fff9170
     42c:	1fff9170 	.word	0x1fff9170
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
        uint8_t crc = 0;
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
            crc ^= input[x]; /* XOR-in the next input byte */
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff9170 	.word	0x1fff9170
                if ((crc & 0x80) != 0)
     454:	000175c4 	.word	0x000175c4

00000458 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)>:
    }
    
    //Uses above functions to send data then get the response. Will auto retry if response not 
    //the expected return length. This helps to alleviate any comm issues. The Due cannot exactly
    //match the correct comm speed so sometimes there are data glitches.
    static int sendDataWithReply(uint8_t *data, uint8_t dataLen, bool isWrite, uint8_t *retData, int retLen)
     458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     45c:	b087      	sub	sp, #28
     45e:	4e78      	ldr	r6, [pc, #480]	; (640 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x1e8>)
     460:	9c10      	ldr	r4, [sp, #64]	; 0x40
     462:	9304      	str	r3, [sp, #16]
        int attempts = 1;
        int returnedLength;
        while (attempts < 4)
        {
            sendData(data, dataLen, isWrite);
            delay(2 * ((retLen / 8) + 1));
     464:	2c00      	cmp	r4, #0
     466:	bfb4      	ite	lt
     468:	1de3      	addlt	r3, r4, #7
     46a:	4623      	movge	r3, r4
     46c:	10db      	asrs	r3, r3, #3
     46e:	3301      	adds	r3, #1
     470:	005b      	lsls	r3, r3, #1
     472:	9303      	str	r3, [sp, #12]
        SERIALBMS.write(&data[1], dataLen - 1);  //assumes that there are at least 2 bytes sent every time. There should be, addr and cmd at the least.
     474:	2303      	movs	r3, #3
     476:	9300      	str	r3, [sp, #0]
     478:	1c43      	adds	r3, r0, #1
     47a:	9302      	str	r3, [sp, #8]
     47c:	4f71      	ldr	r7, [pc, #452]	; (644 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x1ec>)
    static int sendDataWithReply(uint8_t *data, uint8_t dataLen, bool isWrite, uint8_t *retData, int retLen)
     47e:	9201      	str	r2, [sp, #4]
     480:	1e4b      	subs	r3, r1, #1
     482:	4680      	mov	r8, r0
     484:	4689      	mov	r9, r1
     486:	9305      	str	r3, [sp, #20]
        if (isWrite) addrByte |= 1;
     488:	9b01      	ldr	r3, [sp, #4]
        uint8_t orig = data[0];
     48a:	f898 a000 	ldrb.w	sl, [r8]
        if (isWrite) addrByte |= 1;
     48e:	b34b      	cbz	r3, 4e4 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x8c>
     490:	f04a 0501 	orr.w	r5, sl, #1
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
     494:	4628      	mov	r0, r5
     496:	f00b fe59 	bl	c14c <serial3_putchar>
					{ serial3_write(buffer, size); return size; }
     49a:	f8dd b008 	ldr.w	fp, [sp, #8]
     49e:	9905      	ldr	r1, [sp, #20]
     4a0:	4658      	mov	r0, fp
     4a2:	f00b fe5d 	bl	c160 <serial3_write>
        data[0] = addrByte;
     4a6:	f888 5000 	strb.w	r5, [r8]
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
     4aa:	462b      	mov	r3, r5
        for (int x = 0; x < lenInput; x++)
     4ac:	f1b9 0f00 	cmp.w	r9, #0
     4b0:	f000 8097 	beq.w	5e2 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x18a>
     4b4:	4659      	mov	r1, fp
     4b6:	eb08 0c09 	add.w	ip, r8, r9
        uint8_t crc = 0;
     4ba:	2000      	movs	r0, #0
            crc ^= input[x]; /* XOR-in the next input byte */
     4bc:	4058      	eors	r0, r3
     4be:	2208      	movs	r2, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
     4c0:	0043      	lsls	r3, r0, #1
                if ((crc & 0x80) != 0)
     4c2:	f010 0f80 	tst.w	r0, #128	; 0x80
                    crc <<= 1;
     4c6:	bf08      	it	eq
     4c8:	0040      	lsleq	r0, r0, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
     4ca:	f083 0307 	eor.w	r3, r3, #7
     4ce:	bf14      	ite	ne
     4d0:	b2d8      	uxtbne	r0, r3
                    crc <<= 1;
     4d2:	b2c0      	uxtbeq	r0, r0
            for (int i = 0; i < 8; i++)
     4d4:	3a01      	subs	r2, #1
     4d6:	d1f3      	bne.n	4c0 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x68>
        for (int x = 0; x < lenInput; x++)
     4d8:	4561      	cmp	r1, ip
     4da:	f000 8083 	beq.w	5e4 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x18c>
            crc ^= input[x]; /* XOR-in the next input byte */
     4de:	f811 3b01 	ldrb.w	r3, [r1], #1
     4e2:	e7eb      	b.n	4bc <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x64>
     4e4:	4650      	mov	r0, sl
     4e6:	f00b fe31 	bl	c14c <serial3_putchar>
					{ serial3_write(buffer, size); return size; }
     4ea:	9905      	ldr	r1, [sp, #20]
     4ec:	9802      	ldr	r0, [sp, #8]
     4ee:	f00b fe37 	bl	c160 <serial3_write>
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
     4f2:	4655      	mov	r5, sl
        data[0] = addrByte;
     4f4:	f888 a000 	strb.w	sl, [r8]
        if (Logger::isDebug())
     4f8:	f002 fa76 	bl	29e8 <Logger::isDebug()>
     4fc:	2800      	cmp	r0, #0
     4fe:	d149      	bne.n	594 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x13c>
            delay(2 * ((retLen / 8) + 1));
     500:	9803      	ldr	r0, [sp, #12]
        data[0] = orig;
     502:	f888 a000 	strb.w	sl, [r8]
            delay(2 * ((retLen / 8) + 1));
     506:	f00a ff5b 	bl	b3c0 <delay>
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
     50a:	f002 fa6d 	bl	29e8 <Logger::isDebug()>
     50e:	2800      	cmp	r0, #0
     510:	d13b      	bne.n	58a <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x132>
     512:	9d04      	ldr	r5, [sp, #16]
        for (int x = 0; x < lenInput; x++)
     514:	f04f 0a00 	mov.w	sl, #0
     518:	e002      	b.n	520 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0xc8>
            numBytes++;
     51a:	f10a 0a01 	add.w	sl, sl, #1
     51e:	3501      	adds	r5, #1
	virtual int available(void)     { return serial3_available(); }
     520:	f00b fe56 	bl	c1d0 <serial3_available>
        while (SERIALBMS.available() && numBytes < maxLen)
     524:	b198      	cbz	r0, 54e <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0xf6>
     526:	4554      	cmp	r4, sl
     528:	dd11      	ble.n	54e <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0xf6>
	virtual int read(void)          { return serial3_getchar(); }
     52a:	f00b fe65 	bl	c1f8 <serial3_getchar>
            data[numBytes] = SERIALBMS.read();
     52e:	7028      	strb	r0, [r5, #0]
            if (Logger::isDebug()) {
     530:	f002 fa5a 	bl	29e8 <Logger::isDebug()>
     534:	2800      	cmp	r0, #0
     536:	d0f0      	beq.n	51a <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0xc2>
     538:	7829      	ldrb	r1, [r5, #0]
     53a:	2300      	movs	r3, #0
     53c:	2210      	movs	r2, #16
     53e:	4630      	mov	r0, r6
     540:	f009 fff2 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     544:	2101      	movs	r1, #1
     546:	4638      	mov	r0, r7
     548:	f00c fd1c 	bl	cf84 <usb_serial_write>
     54c:	e7e5      	b.n	51a <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0xc2>
        if (maxLen == numBytes)
     54e:	4554      	cmp	r4, sl
     550:	d00d      	beq.n	56e <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x116>
        if (Logger::isDebug()) SERIALCONSOLE.println();
     552:	f002 fa49 	bl	29e8 <Logger::isDebug()>
     556:	2800      	cmp	r0, #0
     558:	d16d      	bne.n	636 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x1de>
        while (attempts < 4)
     55a:	9b00      	ldr	r3, [sp, #0]
     55c:	3b01      	subs	r3, #1
     55e:	9300      	str	r3, [sp, #0]
     560:	d192      	bne.n	488 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x30>
            returnedLength = getReply(retData, retLen);
            if (returnedLength == retLen) return returnedLength;
            attempts++;
        }
        return returnedLength; //failed to get a proper response.
    }
     562:	4650      	mov	r0, sl
     564:	b007      	add	sp, #28
     566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     56a:	f00b fe45 	bl	c1f8 <serial3_getchar>
	virtual int available(void)     { return serial3_available(); }
     56e:	f00b fe2f 	bl	c1d0 <serial3_available>
            while (SERIALBMS.available()) SERIALBMS.read();
     572:	2800      	cmp	r0, #0
     574:	d1f9      	bne.n	56a <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x112>
        if (Logger::isDebug()) SERIALCONSOLE.println();
     576:	f002 fa37 	bl	29e8 <Logger::isDebug()>
     57a:	b110      	cbz	r0, 582 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x12a>
     57c:	4830      	ldr	r0, [pc, #192]	; (640 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x1e8>)
     57e:	f009 ffbb 	bl	a4f8 <Print::println()>
    }
     582:	4650      	mov	r0, sl
     584:	b007      	add	sp, #28
     586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     58a:	2107      	movs	r1, #7
     58c:	482e      	ldr	r0, [pc, #184]	; (648 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x1f0>)
     58e:	f00c fcf9 	bl	cf84 <usb_serial_write>
     592:	e7be      	b.n	512 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0xba>
     594:	2109      	movs	r1, #9
     596:	482d      	ldr	r0, [pc, #180]	; (64c <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x1f4>)
     598:	f00c fcf4 	bl	cf84 <usb_serial_write>
     59c:	4629      	mov	r1, r5
     59e:	2300      	movs	r3, #0
     5a0:	2210      	movs	r2, #16
     5a2:	4630      	mov	r0, r6
     5a4:	f009 ffc0 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     5a8:	2101      	movs	r1, #1
     5aa:	4638      	mov	r0, r7
     5ac:	f00c fcea 	bl	cf84 <usb_serial_write>
            for (int x = 1; x < dataLen; x++) {
     5b0:	f1b9 0f01 	cmp.w	r9, #1
     5b4:	dd19      	ble.n	5ea <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x192>
     5b6:	9d02      	ldr	r5, [sp, #8]
     5b8:	eb08 0b09 	add.w	fp, r8, r9
     5bc:	f815 1b01 	ldrb.w	r1, [r5], #1
     5c0:	2300      	movs	r3, #0
     5c2:	2210      	movs	r2, #16
     5c4:	4630      	mov	r0, r6
     5c6:	f009 ffaf 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     5ca:	2101      	movs	r1, #1
     5cc:	4638      	mov	r0, r7
     5ce:	f00c fcd9 	bl	cf84 <usb_serial_write>
     5d2:	455d      	cmp	r5, fp
     5d4:	d1f2      	bne.n	5bc <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x164>
            if (isWrite) SERIALCONSOLE.print(genCRC(data, dataLen), HEX);
     5d6:	9b01      	ldr	r3, [sp, #4]
     5d8:	b97b      	cbnz	r3, 5fa <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x1a2>
            SERIALCONSOLE.println();
     5da:	4630      	mov	r0, r6
     5dc:	f009 ff8c 	bl	a4f8 <Print::println()>
     5e0:	e78e      	b.n	500 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0xa8>
        for (int x = 0; x < lenInput; x++)
     5e2:	4648      	mov	r0, r9
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
     5e4:	f00b fdb2 	bl	c14c <serial3_putchar>
     5e8:	e786      	b.n	4f8 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0xa0>
            if (isWrite) SERIALCONSOLE.print(genCRC(data, dataLen), HEX);
     5ea:	9b01      	ldr	r3, [sp, #4]
     5ec:	2b00      	cmp	r3, #0
     5ee:	d0f4      	beq.n	5da <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x182>
        for (int x = 0; x < lenInput; x++)
     5f0:	f1b9 0f01 	cmp.w	r9, #1
     5f4:	bf18      	it	ne
     5f6:	2100      	movne	r1, #0
     5f8:	d117      	bne.n	62a <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x1d2>
     5fa:	f108 30ff 	add.w	r0, r8, #4294967295
     5fe:	2100      	movs	r1, #0
     600:	f1c8 0501 	rsb	r5, r8, #1
            crc ^= input[x]; /* XOR-in the next input byte */
     604:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     608:	2208      	movs	r2, #8
     60a:	4059      	eors	r1, r3
                    crc = (uint8_t)((crc << 1) ^ generator);
     60c:	004b      	lsls	r3, r1, #1
                if ((crc & 0x80) != 0)
     60e:	f011 0f80 	tst.w	r1, #128	; 0x80
                    crc <<= 1;
     612:	bf08      	it	eq
     614:	0049      	lsleq	r1, r1, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
     616:	f083 0307 	eor.w	r3, r3, #7
     61a:	bf14      	ite	ne
     61c:	b2d9      	uxtbne	r1, r3
                    crc <<= 1;
     61e:	b2c9      	uxtbeq	r1, r1
            for (int i = 0; i < 8; i++)
     620:	3a01      	subs	r2, #1
     622:	d1f3      	bne.n	60c <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x1b4>
        for (int x = 0; x < lenInput; x++)
     624:	182b      	adds	r3, r5, r0
     626:	4599      	cmp	r9, r3
     628:	dcec      	bgt.n	604 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x1ac>
     62a:	2300      	movs	r3, #0
     62c:	2210      	movs	r2, #16
     62e:	4630      	mov	r0, r6
     630:	f009 ff7a 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     634:	e7d1      	b.n	5da <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x182>
        if (Logger::isDebug()) SERIALCONSOLE.println();
     636:	4630      	mov	r0, r6
     638:	f009 ff5e 	bl	a4f8 <Print::println()>
            if (returnedLength == retLen) return returnedLength;
     63c:	e78d      	b.n	55a <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)+0x102>
     63e:	bf00      	nop
     640:	1fff89f8 	.word	0x1fff89f8
     644:	0001698c 	.word	0x0001698c
     648:	00015758 	.word	0x00015758
     64c:	0001574c 	.word	0x0001574c

00000650 <BMSModule::BMSModule()>:
BMSModule::BMSModule()
     650:	b538      	push	{r3, r4, r5, lr}
    cellVolt[i] = 0.0f;
     652:	2518      	movs	r5, #24
BMSModule::BMSModule()
     654:	4604      	mov	r4, r0
    cellVolt[i] = 0.0f;
     656:	462a      	mov	r2, r5
     658:	2100      	movs	r1, #0
     65a:	f00f fa69 	bl	fb30 <memset>
    lowestCellVolt[i] = 5.0f;
     65e:	4b0e      	ldr	r3, [pc, #56]	; (698 <BMSModule::BMSModule()+0x48>)
     660:	61a3      	str	r3, [r4, #24]
     662:	61e3      	str	r3, [r4, #28]
     664:	6223      	str	r3, [r4, #32]
     666:	6263      	str	r3, [r4, #36]	; 0x24
     668:	62a3      	str	r3, [r4, #40]	; 0x28
     66a:	62e3      	str	r3, [r4, #44]	; 0x2c
    highestCellVolt[i] = 0.0f;
     66c:	462a      	mov	r2, r5
     66e:	2100      	movs	r1, #0
     670:	f104 0030 	add.w	r0, r4, #48	; 0x30
     674:	f00f fa5c 	bl	fb30 <memset>
  moduleAddress = 0;
     678:	2100      	movs	r1, #0
  moduleVolt = 0.0f;
     67a:	2300      	movs	r3, #0
  lowestTemperature = 200.0f;
     67c:	4a07      	ldr	r2, [pc, #28]	; (69c <BMSModule::BMSModule()+0x4c>)
  highestTemperature = -100.0f;
     67e:	4808      	ldr	r0, [pc, #32]	; (6a0 <BMSModule::BMSModule()+0x50>)
  moduleAddress = 0;
     680:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
  highestTemperature = -100.0f;
     684:	65e0      	str	r0, [r4, #92]	; 0x5c
  moduleVolt = 0.0f;
     686:	64a3      	str	r3, [r4, #72]	; 0x48
  retmoduleVolt = 0.0f;
     688:	64e3      	str	r3, [r4, #76]	; 0x4c
  temperatures[0] = 0.0f;
     68a:	6523      	str	r3, [r4, #80]	; 0x50
  temperatures[1] = 0.0f;
     68c:	6563      	str	r3, [r4, #84]	; 0x54
  lowestTemperature = 200.0f;
     68e:	65a2      	str	r2, [r4, #88]	; 0x58
  lowestModuleVolt = 200.0f;
     690:	6622      	str	r2, [r4, #96]	; 0x60
  highestModuleVolt = 0.0f;
     692:	6663      	str	r3, [r4, #100]	; 0x64
}
     694:	4620      	mov	r0, r4
     696:	bd38      	pop	{r3, r4, r5, pc}
     698:	40a00000 	.word	0x40a00000
     69c:	43480000 	.word	0x43480000
     6a0:	c2c80000 	.word	0xc2c80000

000006a4 <BMSModule::clearmodule()>:
    cellVolt[i] = 0.0f;
     6a4:	2300      	movs	r3, #0
     6a6:	6003      	str	r3, [r0, #0]
     6a8:	6043      	str	r3, [r0, #4]
     6aa:	6083      	str	r3, [r0, #8]
     6ac:	60c3      	str	r3, [r0, #12]
     6ae:	6103      	str	r3, [r0, #16]
     6b0:	6143      	str	r3, [r0, #20]
  moduleVolt = 0.0f;
     6b2:	6483      	str	r3, [r0, #72]	; 0x48
  temperatures[0] = 0.0f;
     6b4:	6503      	str	r3, [r0, #80]	; 0x50
  temperatures[1] = 0.0f;
     6b6:	6543      	str	r3, [r0, #84]	; 0x54
}
     6b8:	4770      	bx	lr
     6ba:	bf00      	nop

000006bc <BMSModule::readStatus()>:
{
     6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  payload[0] = moduleAddress << 1; //adresss
     6be:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
{
     6c2:	b087      	sub	sp, #28
     6c4:	4604      	mov	r4, r0
  payload[1] = REG_DEV_STATUS;//Alert Status start
     6c6:	2500      	movs	r5, #0
  BMSUtil::sendDataWithReply(payload, 3, false, buff, 4);
     6c8:	2604      	movs	r6, #4
  payload[0] = moduleAddress << 1; //adresss
     6ca:	005b      	lsls	r3, r3, #1
  payload[2] = 0x01;
     6cc:	2701      	movs	r7, #1
  payload[0] = moduleAddress << 1; //adresss
     6ce:	f88d 300c 	strb.w	r3, [sp, #12]
  BMSUtil::sendDataWithReply(payload, 3, false, buff, 4);
     6d2:	462a      	mov	r2, r5
     6d4:	ab04      	add	r3, sp, #16
     6d6:	9600      	str	r6, [sp, #0]
     6d8:	2103      	movs	r1, #3
     6da:	a803      	add	r0, sp, #12
  payload[1] = REG_DEV_STATUS;//Alert Status start
     6dc:	f88d 500d 	strb.w	r5, [sp, #13]
  payload[2] = 0x01;
     6e0:	f88d 700e 	strb.w	r7, [sp, #14]
  BMSUtil::sendDataWithReply(payload, 3, false, buff, 4);
     6e4:	f7ff feb8 	bl	458 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)>
  payload[0] = moduleAddress << 1; //adresss
     6e8:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
  payload[2] = 0x04;
     6ec:	f88d 600e 	strb.w	r6, [sp, #14]
  payload[0] = moduleAddress << 1; //adresss
     6f0:	40bb      	lsls	r3, r7
     6f2:	f88d 300c 	strb.w	r3, [sp, #12]
  payload[1] = REG_ALERT_STATUS;//Alert Status start
     6f6:	2020      	movs	r0, #32
  BMSUtil::sendDataWithReply(payload, 3, false, buff, 7);
     6f8:	2307      	movs	r3, #7
     6fa:	9300      	str	r3, [sp, #0]
     6fc:	462a      	mov	r2, r5
     6fe:	ab04      	add	r3, sp, #16
  payload[1] = REG_ALERT_STATUS;//Alert Status start
     700:	f88d 000d 	strb.w	r0, [sp, #13]
  BMSUtil::sendDataWithReply(payload, 3, false, buff, 7);
     704:	2103      	movs	r1, #3
     706:	a803      	add	r0, sp, #12
     708:	f7ff fea6 	bl	458 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)>
  BMSUtil::sendDataWithReply(payload, 3, false, buff, 4);
     70c:	9600      	str	r6, [sp, #0]
     70e:	462a      	mov	r2, r5
  payload[0] = moduleAddress << 1; //adresss
     710:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
  payload[2] = 0x01;
     714:	f88d 700e 	strb.w	r7, [sp, #14]
  payload[0] = moduleAddress << 1; //adresss
     718:	40bd      	lsls	r5, r7
     71a:	f88d 500c 	strb.w	r5, [sp, #12]
  alerts = buff[3];
     71e:	f89d 5013 	ldrb.w	r5, [sp, #19]
     722:	6725      	str	r5, [r4, #112]	; 0x70
  faults = buff[4];
     724:	f89d 5014 	ldrb.w	r5, [sp, #20]
     728:	6765      	str	r5, [r4, #116]	; 0x74
  COVFaults = buff[5];
     72a:	f89d 5015 	ldrb.w	r5, [sp, #21]
     72e:	67a5      	str	r5, [r4, #120]	; 0x78
  CUVFaults = buff[6];
     730:	f89d 5016 	ldrb.w	r5, [sp, #22]
     734:	67e5      	str	r5, [r4, #124]	; 0x7c
  BMSUtil::sendDataWithReply(payload, 3, false, buff, 4);
     736:	ab04      	add	r3, sp, #16
     738:	2103      	movs	r1, #3
     73a:	a803      	add	r0, sp, #12
  payload[1] = REG_BAL_TIME;//Alert Status start
     73c:	2433      	movs	r4, #51	; 0x33
     73e:	f88d 400d 	strb.w	r4, [sp, #13]
  BMSUtil::sendDataWithReply(payload, 3, false, buff, 4);
     742:	f7ff fe89 	bl	458 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)>
}
     746:	b007      	add	sp, #28
     748:	bdf0      	pop	{r4, r5, r6, r7, pc}
     74a:	bf00      	nop

0000074c <BMSModule::getFaults()>:
}
     74c:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
     750:	4770      	bx	lr
     752:	bf00      	nop

00000754 <BMSModule::getAlerts()>:
}
     754:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
     758:	4770      	bx	lr
     75a:	bf00      	nop

0000075c <BMSModule::getCOVCells()>:
}
     75c:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
     760:	4770      	bx	lr
     762:	bf00      	nop

00000764 <BMSModule::getCUVCells()>:
}
     764:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
     768:	4770      	bx	lr
     76a:	bf00      	nop

0000076c <BMSModule::stopBalance()>:
{
     76c:	b500      	push	{lr}
  payload[0] = moduleAddress << 1;
     76e:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
{
     772:	b087      	sub	sp, #28
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 4);
     774:	2304      	movs	r3, #4
  payload[0] = moduleAddress << 1;
     776:	0049      	lsls	r1, r1, #1
  payload[2] = 0; //write balance state to register
     778:	2000      	movs	r0, #0
  payload[1] = REG_BAL_CTRL;
     77a:	f04f 0c32 	mov.w	ip, #50	; 0x32
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 4);
     77e:	9300      	str	r3, [sp, #0]
     780:	2201      	movs	r2, #1
     782:	ab04      	add	r3, sp, #16
  payload[0] = moduleAddress << 1;
     784:	f88d 100c 	strb.w	r1, [sp, #12]
  payload[2] = 0; //write balance state to register
     788:	f88d 000e 	strb.w	r0, [sp, #14]
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 4);
     78c:	2103      	movs	r1, #3
     78e:	a803      	add	r0, sp, #12
  payload[1] = REG_BAL_CTRL;
     790:	f88d c00d 	strb.w	ip, [sp, #13]
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 4);
     794:	f7ff fe60 	bl	458 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)>
  delay(2);
     798:	2002      	movs	r0, #2
     79a:	f00a fe11 	bl	b3c0 <delay>
}
     79e:	b007      	add	sp, #28
     7a0:	f85d fb04 	ldr.w	pc, [sp], #4

000007a4 <BMSModule::readModuleValues()>:
{
     7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     7a8:	4605      	mov	r5, r0
     7aa:	b090      	sub	sp, #64	; 0x40
  payload[0] = moduleAddress << 1;
     7ac:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
  delay(2);
     7b0:	2002      	movs	r0, #2
  payload[0] = moduleAddress << 1;
     7b2:	005b      	lsls	r3, r3, #1
     7b4:	f88d 3008 	strb.w	r3, [sp, #8]
  delay(2);
     7b8:	f00a fe02 	bl	b3c0 <delay>
  payload[0] = moduleAddress << 1;
     7bc:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
  readStatus();
     7c0:	4628      	mov	r0, r5
  payload[0] = moduleAddress << 1;
     7c2:	005b      	lsls	r3, r3, #1
     7c4:	f88d 3008 	strb.w	r3, [sp, #8]
  readStatus();
     7c8:	f7ff ff78 	bl	6bc <BMSModule::readStatus()>
  Logger::debug("Module %i   alerts=%X   faults=%X   COV=%X   CUV=%X", moduleAddress, alerts, faults, COVFaults, CUVFaults);
     7cc:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
     7ce:	6fa9      	ldr	r1, [r5, #120]	; 0x78
     7d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
     7d2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
     7d4:	9001      	str	r0, [sp, #4]
     7d6:	9100      	str	r1, [sp, #0]
     7d8:	f895 1084 	ldrb.w	r1, [r5, #132]	; 0x84
     7dc:	48b0      	ldr	r0, [pc, #704]	; (aa0 <BMSModule::readModuleValues()+0x2fc>)
     7de:	f002 fa33 	bl	2c48 <Logger::debug(char*, ...)>
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
     7e2:	2403      	movs	r4, #3
  payload[1] = REG_ADC_CTRL;
     7e4:	2230      	movs	r2, #48	; 0x30
  payload[2] = 0b00111101; //ADC Auto mode, read every ADC input we can (Both Temps, Pack, 6 cells)
     7e6:	203d      	movs	r0, #61	; 0x3d
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
     7e8:	ab03      	add	r3, sp, #12
  payload[1] = REG_ADC_CTRL;
     7ea:	f88d 2009 	strb.w	r2, [sp, #9]
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
     7ee:	4621      	mov	r1, r4
     7f0:	2201      	movs	r2, #1
  payload[2] = 0b00111101; //ADC Auto mode, read every ADC input we can (Both Temps, Pack, 6 cells)
     7f2:	f88d 000a 	strb.w	r0, [sp, #10]
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
     7f6:	9400      	str	r4, [sp, #0]
     7f8:	a802      	add	r0, sp, #8
     7fa:	f7ff fe2d 	bl	458 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)>
  payload[2] = 1;
     7fe:	2601      	movs	r6, #1
  payload[1] = REG_IO_CTRL;
     800:	2331      	movs	r3, #49	; 0x31
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
     802:	4632      	mov	r2, r6
  payload[1] = REG_IO_CTRL;
     804:	f88d 3009 	strb.w	r3, [sp, #9]
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
     808:	4621      	mov	r1, r4
     80a:	ab03      	add	r3, sp, #12
     80c:	9400      	str	r4, [sp, #0]
     80e:	a802      	add	r0, sp, #8
  payload[2] = 0b00000011; //enable temperature measurement VSS pins
     810:	f88d 400a 	strb.w	r4, [sp, #10]
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
     814:	f7ff fe20 	bl	458 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)>
  payload[1] = REG_ADC_CONV; //start all ADC conversions
     818:	2034      	movs	r0, #52	; 0x34
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
     81a:	4632      	mov	r2, r6
     81c:	ab03      	add	r3, sp, #12
     81e:	4621      	mov	r1, r4
  payload[1] = REG_ADC_CONV; //start all ADC conversions
     820:	f88d 0009 	strb.w	r0, [sp, #9]
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
     824:	9400      	str	r4, [sp, #0]
     826:	a802      	add	r0, sp, #8
  payload[2] = 1;
     828:	f88d 600a 	strb.w	r6, [sp, #10]
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
     82c:	f7ff fe14 	bl	458 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)>
  payload[2] = 0x12; //read 18 bytes (Each value takes 2 - ModuleV, CellV1-6, Temp1, Temp2)
     830:	2312      	movs	r3, #18
     832:	f88d 300a 	strb.w	r3, [sp, #10]
  retLen = BMSUtil::sendDataWithReply(payload, 3, false, buff, 22);
     836:	2316      	movs	r3, #22
     838:	9300      	str	r3, [sp, #0]
     83a:	4621      	mov	r1, r4
     83c:	a802      	add	r0, sp, #8
     83e:	ab03      	add	r3, sp, #12
     840:	2200      	movs	r2, #0
  payload[1] = REG_GPAI; //start reading registers at the module voltage registers
     842:	f88d 6009 	strb.w	r6, [sp, #9]
  retLen = BMSUtil::sendDataWithReply(payload, 3, false, buff, 22);
     846:	f7ff fe07 	bl	458 <BMSUtil::sendDataWithReply(unsigned char*, unsigned char, bool, unsigned char*, int)>
        for (int x = 0; x < lenInput; x++)
     84a:	2801      	cmp	r0, #1
     84c:	4606      	mov	r6, r0
     84e:	dd39      	ble.n	8c4 <BMSModule::readModuleValues()+0x120>
     850:	f10d 030b 	add.w	r3, sp, #11
     854:	a903      	add	r1, sp, #12
     856:	1818      	adds	r0, r3, r0
        uint8_t crc = 0;
     858:	2400      	movs	r4, #0
            crc ^= input[x]; /* XOR-in the next input byte */
     85a:	f811 3b01 	ldrb.w	r3, [r1], #1
     85e:	2208      	movs	r2, #8
     860:	405c      	eors	r4, r3
                    crc = (uint8_t)((crc << 1) ^ generator);
     862:	0063      	lsls	r3, r4, #1
                if ((crc & 0x80) != 0)
     864:	f014 0f80 	tst.w	r4, #128	; 0x80
                    crc <<= 1;
     868:	bf08      	it	eq
     86a:	0064      	lsleq	r4, r4, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
     86c:	f083 0307 	eor.w	r3, r3, #7
     870:	bf14      	ite	ne
     872:	b2dc      	uxtbne	r4, r3
                    crc <<= 1;
     874:	b2e4      	uxtbeq	r4, r4
            for (int i = 0; i < 8; i++)
     876:	3a01      	subs	r2, #1
     878:	d1f3      	bne.n	862 <BMSModule::readModuleValues()+0xbe>
        for (int x = 0; x < lenInput; x++)
     87a:	4288      	cmp	r0, r1
     87c:	d1ed      	bne.n	85a <BMSModule::readModuleValues()+0xb6>
  Logger::debug("Sent CRC: %x     Calculated CRC: %x", buff[21], calcCRC);
     87e:	4627      	mov	r7, r4
     880:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     884:	4887      	ldr	r0, [pc, #540]	; (aa4 <BMSModule::readModuleValues()+0x300>)
     886:	463a      	mov	r2, r7
     888:	f002 f9de 	bl	2c48 <Logger::debug(char*, ...)>
  if ( (retLen == 22) && (buff[21] == calcCRC) )
     88c:	2e16      	cmp	r6, #22
     88e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     892:	d101      	bne.n	898 <BMSModule::readModuleValues()+0xf4>
     894:	42a3      	cmp	r3, r4
     896:	d00a      	beq.n	8ae <BMSModule::readModuleValues()+0x10a>
    Logger::error("Invalid module response received for module %i  len: %i   crc: %i   calc: %i",
     898:	f895 1084 	ldrb.w	r1, [r5, #132]	; 0x84
     89c:	4882      	ldr	r0, [pc, #520]	; (aa8 <BMSModule::readModuleValues()+0x304>)
     89e:	9700      	str	r7, [sp, #0]
     8a0:	4632      	mov	r2, r6
     8a2:	f002 f9f7 	bl	2c94 <Logger::error(char*, ...)>
  bool retVal = false;
     8a6:	2000      	movs	r0, #0
}
     8a8:	b010      	add	sp, #64	; 0x40
     8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (buff[0] == (moduleAddress << 1) && buff[1] == REG_GPAI && buff[2] == 0x12) //Also ensure this is actually the reply to our intended query
     8ae:	f89d 300c 	ldrb.w	r3, [sp, #12]
     8b2:	f895 2084 	ldrb.w	r2, [r5, #132]	; 0x84
     8b6:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
     8ba:	d006      	beq.n	8ca <BMSModule::readModuleValues()+0x126>
  bool retVal = false;
     8bc:	2000      	movs	r0, #0
}
     8be:	b010      	add	sp, #64	; 0x40
     8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     8c4:	2700      	movs	r7, #0
        uint8_t crc = 0;
     8c6:	463c      	mov	r4, r7
     8c8:	e7da      	b.n	880 <BMSModule::readModuleValues()+0xdc>
    if (buff[0] == (moduleAddress << 1) && buff[1] == REG_GPAI && buff[2] == 0x12) //Also ensure this is actually the reply to our intended query
     8ca:	f89d 300d 	ldrb.w	r3, [sp, #13]
     8ce:	2b01      	cmp	r3, #1
     8d0:	d1f4      	bne.n	8bc <BMSModule::readModuleValues()+0x118>
     8d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
     8d6:	2b12      	cmp	r3, #18
     8d8:	d1f0      	bne.n	8bc <BMSModule::readModuleValues()+0x118>
      retmoduleVolt = (buff[3] * 256 + buff[4]) * 0.0020346293922562f;///0.002034609f;
     8da:	f89d 3010 	ldrb.w	r3, [sp, #16]
     8de:	f89d 000f 	ldrb.w	r0, [sp, #15]
     8e2:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     8e6:	f00e f837 	bl	e958 <__aeabi_i2f>
     8ea:	4970      	ldr	r1, [pc, #448]	; (aac <BMSModule::readModuleValues()+0x308>)
     8ec:	f00e f888 	bl	ea00 <__aeabi_fmul>
      if (retmoduleVolt > highestModuleVolt) highestModuleVolt = retmoduleVolt;
     8f0:	6e69      	ldr	r1, [r5, #100]	; 0x64
      retmoduleVolt = (buff[3] * 256 + buff[4]) * 0.0020346293922562f;///0.002034609f;
     8f2:	64e8      	str	r0, [r5, #76]	; 0x4c
     8f4:	4604      	mov	r4, r0
      if (retmoduleVolt > highestModuleVolt) highestModuleVolt = retmoduleVolt;
     8f6:	f00e fa3f 	bl	ed78 <__aeabi_fcmpgt>
     8fa:	b100      	cbz	r0, 8fe <BMSModule::readModuleValues()+0x15a>
     8fc:	666c      	str	r4, [r5, #100]	; 0x64
      if (retmoduleVolt < lowestModuleVolt) lowestModuleVolt = retmoduleVolt;
     8fe:	6e29      	ldr	r1, [r5, #96]	; 0x60
     900:	4620      	mov	r0, r4
     902:	f00e fa1b 	bl	ed3c <__aeabi_fcmplt>
     906:	b100      	cbz	r0, 90a <BMSModule::readModuleValues()+0x166>
     908:	662c      	str	r4, [r5, #96]	; 0x60
     90a:	1f2f      	subs	r7, r5, #4
        cellVolt[i] = (buff[5 + (i * 2)] * 256 + buff[6 + (i * 2)]) * 0.000381493f;
     90c:	f8df a1a0 	ldr.w	sl, [pc, #416]	; ab0 <BMSModule::readModuleValues()+0x30c>
     910:	ac03      	add	r4, sp, #12
     912:	f105 0814 	add.w	r8, r5, #20
     916:	463e      	mov	r6, r7
     918:	79a3      	ldrb	r3, [r4, #6]
     91a:	7960      	ldrb	r0, [r4, #5]
     91c:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     920:	f00e f81a 	bl	e958 <__aeabi_i2f>
     924:	4651      	mov	r1, sl
     926:	f00e f86b 	bl	ea00 <__aeabi_fmul>
     92a:	f846 0f04 	str.w	r0, [r6, #4]!
        if (lowestCellVolt[i] > cellVolt[i] && cellVolt[i] >= IgnoreCell) lowestCellVolt[i] = cellVolt[i];
     92e:	69b1      	ldr	r1, [r6, #24]
        cellVolt[i] = (buff[5 + (i * 2)] * 256 + buff[6 + (i * 2)]) * 0.000381493f;
     930:	4681      	mov	r9, r0
      for (int i = 0; i < 6; i++)
     932:	3402      	adds	r4, #2
        if (lowestCellVolt[i] > cellVolt[i] && cellVolt[i] >= IgnoreCell) lowestCellVolt[i] = cellVolt[i];
     934:	f00e fa02 	bl	ed3c <__aeabi_fcmplt>
     938:	b130      	cbz	r0, 948 <BMSModule::readModuleValues()+0x1a4>
     93a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
     93c:	4648      	mov	r0, r9
     93e:	f00e fa11 	bl	ed64 <__aeabi_fcmpge>
     942:	b108      	cbz	r0, 948 <BMSModule::readModuleValues()+0x1a4>
     944:	f8c6 9018 	str.w	r9, [r6, #24]
        if (highestCellVolt[i] < cellVolt[i]) highestCellVolt[i] = cellVolt[i];
     948:	6b31      	ldr	r1, [r6, #48]	; 0x30
     94a:	4648      	mov	r0, r9
     94c:	f00e fa14 	bl	ed78 <__aeabi_fcmpgt>
     950:	b108      	cbz	r0, 956 <BMSModule::readModuleValues()+0x1b2>
     952:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
      for (int i = 0; i < 6; i++)
     956:	45b0      	cmp	r8, r6
     958:	d1de      	bne.n	918 <BMSModule::readModuleValues()+0x174>
      moduleVolt = 0;
     95a:	2000      	movs	r0, #0
     95c:	64a8      	str	r0, [r5, #72]	; 0x48
        moduleVolt = moduleVolt + cellVolt[i];
     95e:	f857 1f04 	ldr.w	r1, [r7, #4]!
     962:	f00d ff45 	bl	e7f0 <__addsf3>
      for (int i = 0; i < 6; i++)
     966:	45b8      	cmp	r8, r7
     968:	d1f9      	bne.n	95e <BMSModule::readModuleValues()+0x1ba>
      tempTemp = (1.78f / ((buff[17] * 256 + buff[18] + 2) / 33046.0f) - 3.57f);
     96a:	f89d 201d 	ldrb.w	r2, [sp, #29]
     96e:	f89d 301e 	ldrb.w	r3, [sp, #30]
     972:	64a8      	str	r0, [r5, #72]	; 0x48
     974:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     978:	1c98      	adds	r0, r3, #2
     97a:	f00d ffed 	bl	e958 <__aeabi_i2f>
     97e:	494d      	ldr	r1, [pc, #308]	; (ab4 <BMSModule::readModuleValues()+0x310>)
     980:	f00e f8f2 	bl	eb68 <__aeabi_fdiv>
     984:	4601      	mov	r1, r0
     986:	484c      	ldr	r0, [pc, #304]	; (ab8 <BMSModule::readModuleValues()+0x314>)
     988:	f00e f8ee 	bl	eb68 <__aeabi_fdiv>
     98c:	494b      	ldr	r1, [pc, #300]	; (abc <BMSModule::readModuleValues()+0x318>)
     98e:	f00d ff2d 	bl	e7ec <__aeabi_fsub>
      tempTemp *= 1000.0f;
     992:	494b      	ldr	r1, [pc, #300]	; (ac0 <BMSModule::readModuleValues()+0x31c>)
     994:	f00e f834 	bl	ea00 <__aeabi_fmul>
     998:	4606      	mov	r6, r0
      tempCalc =  1.0f / (0.0007610373573f + (0.0002728524832 * logf(tempTemp)) + (powf(logf(tempTemp), 3) * 0.0000001022822735f));
     99a:	f00c fcfb 	bl	d394 <logf>
     99e:	4604      	mov	r4, r0
     9a0:	4630      	mov	r0, r6
     9a2:	f00c fcf7 	bl	d394 <logf>
     9a6:	4947      	ldr	r1, [pc, #284]	; (ac4 <BMSModule::readModuleValues()+0x320>)
     9a8:	f00c fd1e 	bl	d3e8 <powf>
     9ac:	4946      	ldr	r1, [pc, #280]	; (ac8 <BMSModule::readModuleValues()+0x324>)
     9ae:	4606      	mov	r6, r0
     9b0:	4620      	mov	r0, r4
     9b2:	f00e f825 	bl	ea00 <__aeabi_fmul>
     9b6:	4945      	ldr	r1, [pc, #276]	; (acc <BMSModule::readModuleValues()+0x328>)
     9b8:	f00d ff1a 	bl	e7f0 <__addsf3>
     9bc:	4944      	ldr	r1, [pc, #272]	; (ad0 <BMSModule::readModuleValues()+0x32c>)
     9be:	4604      	mov	r4, r0
     9c0:	4630      	mov	r0, r6
     9c2:	f00e f81d 	bl	ea00 <__aeabi_fmul>
     9c6:	4601      	mov	r1, r0
     9c8:	4620      	mov	r0, r4
     9ca:	f00d ff11 	bl	e7f0 <__addsf3>
     9ce:	4601      	mov	r1, r0
     9d0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
     9d4:	f00e f8c8 	bl	eb68 <__aeabi_fdiv>
      temperatures[0] = tempCalc - 273.15f;
     9d8:	493e      	ldr	r1, [pc, #248]	; (ad4 <BMSModule::readModuleValues()+0x330>)
     9da:	f00d ff07 	bl	e7ec <__aeabi_fsub>
      tempTemp = 1.78f / ((buff[19] * 256 + buff[20] + 9) / 33068.0f) - 3.57f;
     9de:	f89d 201f 	ldrb.w	r2, [sp, #31]
     9e2:	f89d 3020 	ldrb.w	r3, [sp, #32]
      temperatures[0] = tempCalc - 273.15f;
     9e6:	6528      	str	r0, [r5, #80]	; 0x50
      tempTemp = 1.78f / ((buff[19] * 256 + buff[20] + 9) / 33068.0f) - 3.57f;
     9e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      temperatures[0] = tempCalc - 273.15f;
     9ec:	4606      	mov	r6, r0
      tempTemp = 1.78f / ((buff[19] * 256 + buff[20] + 9) / 33068.0f) - 3.57f;
     9ee:	f103 0009 	add.w	r0, r3, #9
     9f2:	f00d ffb1 	bl	e958 <__aeabi_i2f>
     9f6:	4938      	ldr	r1, [pc, #224]	; (ad8 <BMSModule::readModuleValues()+0x334>)
     9f8:	f00e f8b6 	bl	eb68 <__aeabi_fdiv>
     9fc:	4601      	mov	r1, r0
     9fe:	482e      	ldr	r0, [pc, #184]	; (ab8 <BMSModule::readModuleValues()+0x314>)
     a00:	f00e f8b2 	bl	eb68 <__aeabi_fdiv>
     a04:	492d      	ldr	r1, [pc, #180]	; (abc <BMSModule::readModuleValues()+0x318>)
     a06:	f00d fef1 	bl	e7ec <__aeabi_fsub>
      tempTemp *= 1000.0f;
     a0a:	492d      	ldr	r1, [pc, #180]	; (ac0 <BMSModule::readModuleValues()+0x31c>)
     a0c:	f00d fff8 	bl	ea00 <__aeabi_fmul>
     a10:	4607      	mov	r7, r0
      tempCalc = 1.0f / (0.0007610373573f + (0.0002728524832 * logf(tempTemp)) + (powf(logf(tempTemp), 3) * 0.0000001022822735f));
     a12:	f00c fcbf 	bl	d394 <logf>
     a16:	4604      	mov	r4, r0
     a18:	4638      	mov	r0, r7
     a1a:	f00c fcbb 	bl	d394 <logf>
     a1e:	4929      	ldr	r1, [pc, #164]	; (ac4 <BMSModule::readModuleValues()+0x320>)
     a20:	f00c fce2 	bl	d3e8 <powf>
     a24:	4928      	ldr	r1, [pc, #160]	; (ac8 <BMSModule::readModuleValues()+0x324>)
     a26:	4607      	mov	r7, r0
     a28:	4620      	mov	r0, r4
     a2a:	f00d ffe9 	bl	ea00 <__aeabi_fmul>
     a2e:	4927      	ldr	r1, [pc, #156]	; (acc <BMSModule::readModuleValues()+0x328>)
     a30:	f00d fede 	bl	e7f0 <__addsf3>
     a34:	4926      	ldr	r1, [pc, #152]	; (ad0 <BMSModule::readModuleValues()+0x32c>)
     a36:	4604      	mov	r4, r0
     a38:	4638      	mov	r0, r7
     a3a:	f00d ffe1 	bl	ea00 <__aeabi_fmul>
     a3e:	4601      	mov	r1, r0
     a40:	4620      	mov	r0, r4
     a42:	f00d fed5 	bl	e7f0 <__addsf3>
     a46:	4601      	mov	r1, r0
     a48:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
     a4c:	f00e f88c 	bl	eb68 <__aeabi_fdiv>
      temperatures[1] = tempCalc - 273.15f;
     a50:	4920      	ldr	r1, [pc, #128]	; (ad4 <BMSModule::readModuleValues()+0x330>)
     a52:	f00d fecb 	bl	e7ec <__aeabi_fsub>
  return lowestTemperature;
}

float BMSModule::getLowTemp()
{
  if (sensor == 0)
     a56:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
      temperatures[1] = tempCalc - 273.15f;
     a5a:	6568      	str	r0, [r5, #84]	; 0x54
     a5c:	4604      	mov	r4, r0
  if (sensor == 0)
     a5e:	2b00      	cmp	r3, #0
     a60:	d146      	bne.n	af0 <BMSModule::readModuleValues()+0x34c>
  {
    return (temperatures[0] < temperatures[1]) ? temperatures[0] : temperatures[1];
     a62:	4601      	mov	r1, r0
     a64:	4630      	mov	r0, r6
     a66:	f00e f969 	bl	ed3c <__aeabi_fcmplt>
     a6a:	2800      	cmp	r0, #0
     a6c:	d038      	beq.n	ae0 <BMSModule::readModuleValues()+0x33c>
      if (getLowTemp() < lowestTemperature) lowestTemperature = getLowTemp();
     a6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
     a70:	4631      	mov	r1, r6
     a72:	f00e f981 	bl	ed78 <__aeabi_fcmpgt>
     a76:	b138      	cbz	r0, a88 <BMSModule::readModuleValues()+0x2e4>
    return (temperatures[0] < temperatures[1]) ? temperatures[0] : temperatures[1];
     a78:	4633      	mov	r3, r6
      if (getLowTemp() < lowestTemperature) lowestTemperature = getLowTemp();
     a7a:	65ab      	str	r3, [r5, #88]	; 0x58

float BMSModule::getHighTemp()
{
  if (sensor == 0)
  {
    return (temperatures[0] < temperatures[1]) ? temperatures[1] : temperatures[0];
     a7c:	4621      	mov	r1, r4
     a7e:	4630      	mov	r0, r6
     a80:	f00e f95c 	bl	ed3c <__aeabi_fcmplt>
     a84:	b900      	cbnz	r0, a88 <BMSModule::readModuleValues()+0x2e4>
     a86:	4634      	mov	r4, r6
      if (getHighTemp() > highestTemperature) highestTemperature = getHighTemp();
     a88:	6de8      	ldr	r0, [r5, #92]	; 0x5c
     a8a:	4621      	mov	r1, r4
     a8c:	f00e f956 	bl	ed3c <__aeabi_fcmplt>
     a90:	b100      	cbz	r0, a94 <BMSModule::readModuleValues()+0x2f0>
     a92:	65ec      	str	r4, [r5, #92]	; 0x5c
      Logger::debug("Got voltage and temperature readings");
     a94:	4811      	ldr	r0, [pc, #68]	; (adc <BMSModule::readModuleValues()+0x338>)
     a96:	f002 f8d7 	bl	2c48 <Logger::debug(char*, ...)>
      retVal = true;
     a9a:	2001      	movs	r0, #1
     a9c:	e704      	b.n	8a8 <BMSModule::readModuleValues()+0x104>
     a9e:	bf00      	nop
     aa0:	00015760 	.word	0x00015760
     aa4:	00015794 	.word	0x00015794
     aa8:	000157e0 	.word	0x000157e0
     aac:	3b05576b 	.word	0x3b05576b
     ab0:	39c80320 	.word	0x39c80320
     ab4:	47011600 	.word	0x47011600
     ab8:	3fe3d70a 	.word	0x3fe3d70a
     abc:	40647ae1 	.word	0x40647ae1
     ac0:	447a0000 	.word	0x447a0000
     ac4:	40400000 	.word	0x40400000
     ac8:	398f0da4 	.word	0x398f0da4
     acc:	3a47805a 	.word	0x3a47805a
     ad0:	33dba646 	.word	0x33dba646
     ad4:	43889333 	.word	0x43889333
     ad8:	47012c00 	.word	0x47012c00
     adc:	000157b8 	.word	0x000157b8
      if (getLowTemp() < lowestTemperature) lowestTemperature = getLowTemp();
     ae0:	6da9      	ldr	r1, [r5, #88]	; 0x58
     ae2:	4620      	mov	r0, r4
     ae4:	f00e f92a 	bl	ed3c <__aeabi_fcmplt>
     ae8:	2800      	cmp	r0, #0
     aea:	d0c7      	beq.n	a7c <BMSModule::readModuleValues()+0x2d8>
    return (temperatures[0] < temperatures[1]) ? temperatures[0] : temperatures[1];
     aec:	4623      	mov	r3, r4
     aee:	e7c4      	b.n	a7a <BMSModule::readModuleValues()+0x2d6>
    return temperatures[sensor - 1];
     af0:	3313      	adds	r3, #19
      if (getLowTemp() < lowestTemperature) lowestTemperature = getLowTemp();
     af2:	6da9      	ldr	r1, [r5, #88]	; 0x58
    return temperatures[sensor - 1];
     af4:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
      if (getLowTemp() < lowestTemperature) lowestTemperature = getLowTemp();
     af8:	4620      	mov	r0, r4
     afa:	f00e f91f 	bl	ed3c <__aeabi_fcmplt>
     afe:	2800      	cmp	r0, #0
     b00:	d0c2      	beq.n	a88 <BMSModule::readModuleValues()+0x2e4>
     b02:	65ac      	str	r4, [r5, #88]	; 0x58
  if (sensor == 0)
     b04:	e7c0      	b.n	a88 <BMSModule::readModuleValues()+0x2e4>
     b06:	bf00      	nop

00000b08 <BMSModule::getCellVoltage(int)>:
  if (cell < 0 || cell > 5) return 0.0f;
     b08:	2905      	cmp	r1, #5
  return cellVolt[cell];
     b0a:	bf94      	ite	ls
     b0c:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
  if (cell < 0 || cell > 5) return 0.0f;
     b10:	2000      	movhi	r0, #0
}
     b12:	4770      	bx	lr

00000b14 <BMSModule::getLowCellV()>:
{
     b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float lowVal = 10.0f;
     b18:	4e0b      	ldr	r6, [pc, #44]	; (b48 <BMSModule::getLowCellV()+0x34>)
{
     b1a:	4607      	mov	r7, r0
     b1c:	1f05      	subs	r5, r0, #4
     b1e:	f100 0814 	add.w	r8, r0, #20
  for (int i = 0; i < 6; i++) if (cellVolt[i] < lowVal && cellVolt[i] > IgnoreCell) lowVal = cellVolt[i];
     b22:	f855 4f04 	ldr.w	r4, [r5, #4]!
     b26:	4631      	mov	r1, r6
     b28:	4620      	mov	r0, r4
     b2a:	f00e f907 	bl	ed3c <__aeabi_fcmplt>
     b2e:	4603      	mov	r3, r0
     b30:	4620      	mov	r0, r4
     b32:	b123      	cbz	r3, b3e <BMSModule::getLowCellV()+0x2a>
     b34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
     b36:	f00e f91f 	bl	ed78 <__aeabi_fcmpgt>
     b3a:	b100      	cbz	r0, b3e <BMSModule::getLowCellV()+0x2a>
     b3c:	4626      	mov	r6, r4
     b3e:	4545      	cmp	r5, r8
     b40:	d1ef      	bne.n	b22 <BMSModule::getLowCellV()+0xe>
}
     b42:	4630      	mov	r0, r6
     b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     b48:	41200000 	.word	0x41200000

00000b4c <BMSModule::getHighCellV()>:
{
     b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (int i = 0; i < 6; i++) if (cellVolt[i] > hiVal && cellVolt[i] < 4.5) hiVal = cellVolt[i];
     b50:	f8df 8030 	ldr.w	r8, [pc, #48]	; b84 <BMSModule::getHighCellV()+0x38>
  float hiVal = 0.0f;
     b54:	2700      	movs	r7, #0
     b56:	1f05      	subs	r5, r0, #4
     b58:	f100 0614 	add.w	r6, r0, #20
  for (int i = 0; i < 6; i++) if (cellVolt[i] > hiVal && cellVolt[i] < 4.5) hiVal = cellVolt[i];
     b5c:	f855 4f04 	ldr.w	r4, [r5, #4]!
     b60:	4639      	mov	r1, r7
     b62:	4620      	mov	r0, r4
     b64:	f00e f908 	bl	ed78 <__aeabi_fcmpgt>
     b68:	4603      	mov	r3, r0
     b6a:	4641      	mov	r1, r8
     b6c:	4620      	mov	r0, r4
     b6e:	b11b      	cbz	r3, b78 <BMSModule::getHighCellV()+0x2c>
     b70:	f00e f8e4 	bl	ed3c <__aeabi_fcmplt>
     b74:	b100      	cbz	r0, b78 <BMSModule::getHighCellV()+0x2c>
     b76:	4627      	mov	r7, r4
     b78:	42b5      	cmp	r5, r6
     b7a:	d1ef      	bne.n	b5c <BMSModule::getHighCellV()+0x10>
}
     b7c:	4638      	mov	r0, r7
     b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     b82:	bf00      	nop
     b84:	40900000 	.word	0x40900000

00000b88 <BMSModule::getAverageV()>:
{
     b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     b8c:	f8d0 a068 	ldr.w	sl, [r0, #104]	; 0x68
     b90:	f8df 8070 	ldr.w	r8, [pc, #112]	; c04 <BMSModule::getAverageV()+0x7c>
{
     b94:	4606      	mov	r6, r0
  float avgVal = 0.0f;
     b96:	2700      	movs	r7, #0
     b98:	1f05      	subs	r5, r0, #4
     b9a:	f100 0914 	add.w	r9, r0, #20
  int x = 0;
     b9e:	f04f 0b00 	mov.w	fp, #0
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     ba2:	f855 4f04 	ldr.w	r4, [r5, #4]!
     ba6:	4651      	mov	r1, sl
     ba8:	4620      	mov	r0, r4
     baa:	f00e f8e5 	bl	ed78 <__aeabi_fcmpgt>
     bae:	4603      	mov	r3, r0
     bb0:	4641      	mov	r1, r8
     bb2:	4620      	mov	r0, r4
     bb4:	b14b      	cbz	r3, bca <BMSModule::getAverageV()+0x42>
     bb6:	f00e f8c1 	bl	ed3c <__aeabi_fcmplt>
     bba:	b130      	cbz	r0, bca <BMSModule::getAverageV()+0x42>
      avgVal += cellVolt[i];
     bbc:	4638      	mov	r0, r7
     bbe:	4621      	mov	r1, r4
     bc0:	f00d fe16 	bl	e7f0 <__addsf3>
      x++;
     bc4:	f10b 0b01 	add.w	fp, fp, #1
      avgVal += cellVolt[i];
     bc8:	4607      	mov	r7, r0
  for (int i = 0; i < 6; i++)
     bca:	454d      	cmp	r5, r9
     bcc:	d1e9      	bne.n	ba2 <BMSModule::getAverageV()+0x1a>
  if (scells != x)
     bce:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
     bd2:	455b      	cmp	r3, fp
     bd4:	d011      	beq.n	bfa <BMSModule::getAverageV()+0x72>
    if (smiss > 2)
     bd6:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
     bda:	2b02      	cmp	r3, #2
      smiss++;
     bdc:	bfd6      	itet	le
     bde:	3301      	addle	r3, #1
      scells = x;
     be0:	f8c6 b088 	strgt.w	fp, [r6, #136]	; 0x88
      smiss++;
     be4:	f8c6 308c 	strle.w	r3, [r6, #140]	; 0x8c
  avgVal /= x;
     be8:	4658      	mov	r0, fp
     bea:	f00d feb5 	bl	e958 <__aeabi_i2f>
     bee:	4601      	mov	r1, r0
     bf0:	4638      	mov	r0, r7
     bf2:	f00d ffb9 	bl	eb68 <__aeabi_fdiv>
}
     bf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    smiss = 0;
     bfa:	2300      	movs	r3, #0
     bfc:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
     c00:	e7f2      	b.n	be8 <BMSModule::getAverageV()+0x60>
     c02:	bf00      	nop
     c04:	42700000 	.word	0x42700000

00000c08 <BMSModule::getscells()>:
}
     c08:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
     c0c:	4770      	bx	lr
     c0e:	bf00      	nop

00000c10 <BMSModule::getLowTemp()>:
{
     c10:	b538      	push	{r3, r4, r5, lr}
  if (sensor == 0)
     c12:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
     c16:	b943      	cbnz	r3, c2a <BMSModule::getLowTemp()+0x1a>
     c18:	6d45      	ldr	r5, [r0, #84]	; 0x54
    return (temperatures[0] < temperatures[1]) ? temperatures[0] : temperatures[1];
     c1a:	6d04      	ldr	r4, [r0, #80]	; 0x50
     c1c:	4629      	mov	r1, r5
     c1e:	4620      	mov	r0, r4
     c20:	f00e f88c 	bl	ed3c <__aeabi_fcmplt>
     c24:	b130      	cbz	r0, c34 <BMSModule::getLowTemp()+0x24>
}
     c26:	4620      	mov	r0, r4
     c28:	bd38      	pop	{r3, r4, r5, pc}
    return temperatures[sensor - 1];
     c2a:	3313      	adds	r3, #19
     c2c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
}
     c30:	4620      	mov	r0, r4
     c32:	bd38      	pop	{r3, r4, r5, pc}
    return (temperatures[0] < temperatures[1]) ? temperatures[0] : temperatures[1];
     c34:	462c      	mov	r4, r5
}
     c36:	4620      	mov	r0, r4
     c38:	bd38      	pop	{r3, r4, r5, pc}
     c3a:	bf00      	nop

00000c3c <BMSModule::getHighTemp()>:
{
     c3c:	b538      	push	{r3, r4, r5, lr}
  if (sensor == 0)
     c3e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
     c42:	b943      	cbnz	r3, c56 <BMSModule::getHighTemp()+0x1a>
     c44:	6d44      	ldr	r4, [r0, #84]	; 0x54
    return (temperatures[0] < temperatures[1]) ? temperatures[1] : temperatures[0];
     c46:	6d05      	ldr	r5, [r0, #80]	; 0x50
     c48:	4621      	mov	r1, r4
     c4a:	4628      	mov	r0, r5
     c4c:	f00e f876 	bl	ed3c <__aeabi_fcmplt>
     c50:	b130      	cbz	r0, c60 <BMSModule::getHighTemp()+0x24>
  else
  {
    return temperatures[sensor - 1];
  }

}
     c52:	4620      	mov	r0, r4
     c54:	bd38      	pop	{r3, r4, r5, pc}
    return temperatures[sensor - 1];
     c56:	3313      	adds	r3, #19
     c58:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
}
     c5c:	4620      	mov	r0, r4
     c5e:	bd38      	pop	{r3, r4, r5, pc}
    return (temperatures[0] < temperatures[1]) ? temperatures[1] : temperatures[0];
     c60:	462c      	mov	r4, r5
}
     c62:	4620      	mov	r0, r4
     c64:	bd38      	pop	{r3, r4, r5, pc}
     c66:	bf00      	nop

00000c68 <BMSModule::getAvgTemp()>:

float BMSModule::getAvgTemp()
{
     c68:	b508      	push	{r3, lr}
  if (sensor == 0)
     c6a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
     c6e:	b943      	cbnz	r3, c82 <BMSModule::getAvgTemp()+0x1a>
  {
    return (temperatures[0] + temperatures[1]) * 0.5f;
     c70:	6d41      	ldr	r1, [r0, #84]	; 0x54
     c72:	6d00      	ldr	r0, [r0, #80]	; 0x50
     c74:	f00d fdbc 	bl	e7f0 <__addsf3>
     c78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     c7c:	f00d fec0 	bl	ea00 <__aeabi_fmul>
  }
  else
  {
    return temperatures[sensor - 1];
  }
}
     c80:	bd08      	pop	{r3, pc}
    return temperatures[sensor - 1];
     c82:	3313      	adds	r3, #19
     c84:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
     c88:	bd08      	pop	{r3, pc}
     c8a:	bf00      	nop

00000c8c <BMSModule::getModuleVoltage()>:

float BMSModule::getModuleVoltage()
{
  return moduleVolt;
}
     c8c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     c8e:	4770      	bx	lr

00000c90 <BMSModule::getTemperature(int)>:

float BMSModule::getTemperature(int temp)
{
  if (temp < 0 || temp > 1) return 0.0f;
     c90:	2901      	cmp	r1, #1
  return temperatures[temp];
     c92:	bf9a      	itte	ls
     c94:	3114      	addls	r1, #20
     c96:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
  if (temp < 0 || temp > 1) return 0.0f;
     c9a:	2000      	movhi	r0, #0
}
     c9c:	4770      	bx	lr
     c9e:	bf00      	nop

00000ca0 <BMSModule::setAddress(int)>:

void BMSModule::setAddress(int newAddr)
{
  if (newAddr < 0 || newAddr > MAX_MODULE_ADDR) return;
     ca0:	293e      	cmp	r1, #62	; 0x3e
  moduleAddress = newAddr;
     ca2:	bf98      	it	ls
     ca4:	f880 1084 	strbls.w	r1, [r0, #132]	; 0x84
}
     ca8:	4770      	bx	lr
     caa:	bf00      	nop

00000cac <BMSModule::isExisting()>:
}

bool BMSModule::isExisting()
{
  return exists;
}
     cac:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
     cb0:	4770      	bx	lr
     cb2:	bf00      	nop

00000cb4 <BMSModule::settempsensor(int)>:

void BMSModule::settempsensor(int tempsensor)
{
  sensor = tempsensor;
     cb4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
}
     cb8:	4770      	bx	lr
     cba:	bf00      	nop

00000cbc <BMSModule::setExists(bool)>:

void BMSModule::setExists(bool ex)
{
  exists = ex;
     cbc:	f880 106c 	strb.w	r1, [r0, #108]	; 0x6c
}
     cc0:	4770      	bx	lr
     cc2:	bf00      	nop

00000cc4 <BMSModule::setIgnoreCell(float)>:

void BMSModule::setIgnoreCell(float Ignore)
{
  IgnoreCell = Ignore;
     cc4:	6681      	str	r1, [r0, #104]	; 0x68
}
     cc6:	4770      	bx	lr

00000cc8 <BMSModuleManager::BMSModuleManager()>:
BMSModuleManager::BMSModuleManager()
     cc8:	b570      	push	{r4, r5, r6, lr}
     cca:	f500 550e 	add.w	r5, r0, #9088	; 0x2380
     cce:	4606      	mov	r6, r0
     cd0:	f100 0428 	add.w	r4, r0, #40	; 0x28
     cd4:	3518      	adds	r5, #24
     cd6:	4620      	mov	r0, r4
     cd8:	3490      	adds	r4, #144	; 0x90
     cda:	f7ff fcb9 	bl	650 <BMSModule::BMSModule()>
     cde:	42ac      	cmp	r4, r5
     ce0:	d1f9      	bne.n	cd6 <BMSModuleManager::BMSModuleManager()+0xe>
     ce2:	f106 05b8 	add.w	r5, r6, #184	; 0xb8
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     ce6:	2401      	movs	r4, #1
    modules[i].setExists(false);
     ce8:	4628      	mov	r0, r5
     cea:	2100      	movs	r1, #0
     cec:	f7ff ffe6 	bl	cbc <BMSModule::setExists(bool)>
    modules[i].setAddress(i);
     cf0:	4621      	mov	r1, r4
     cf2:	4628      	mov	r0, r5
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     cf4:	3401      	adds	r4, #1
    modules[i].setAddress(i);
     cf6:	f7ff ffd3 	bl	ca0 <BMSModule::setAddress(int)>
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     cfa:	2c3f      	cmp	r4, #63	; 0x3f
     cfc:	f105 0590 	add.w	r5, r5, #144	; 0x90
     d00:	d1f2      	bne.n	ce8 <BMSModuleManager::BMSModuleManager()+0x20>
  lowestPackVolt = 1000.0f;
     d02:	4907      	ldr	r1, [pc, #28]	; (d20 <BMSModuleManager::BMSModuleManager()+0x58>)
     d04:	6131      	str	r1, [r6, #16]
  isFaulted = false;
     d06:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
  highestPackVolt = 0.0f;
     d0a:	2200      	movs	r2, #0
     d0c:	6172      	str	r2, [r6, #20]
  lowestPackTemp = 200.0f;
     d0e:	4805      	ldr	r0, [pc, #20]	; (d24 <BMSModuleManager::BMSModuleManager()+0x5c>)
  highestPackTemp = -100.0f;
     d10:	4905      	ldr	r1, [pc, #20]	; (d28 <BMSModuleManager::BMSModuleManager()+0x60>)
  lowestPackTemp = 200.0f;
     d12:	61b0      	str	r0, [r6, #24]
  isFaulted = false;
     d14:	2200      	movs	r2, #0
  highestPackTemp = -100.0f;
     d16:	61f1      	str	r1, [r6, #28]
}
     d18:	4630      	mov	r0, r6
  isFaulted = false;
     d1a:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
}
     d1e:	bd70      	pop	{r4, r5, r6, pc}
     d20:	447a0000 	.word	0x447a0000
     d24:	43480000 	.word	0x43480000
     d28:	c2c80000 	.word	0xc2c80000

00000d2c <BMSModuleManager::clearmodules()>:
{
     d2c:	b538      	push	{r3, r4, r5, lr}
     d2e:	f500 550e 	add.w	r5, r0, #9088	; 0x2380
     d32:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
     d36:	3518      	adds	r5, #24
     d38:	e002      	b.n	d40 <BMSModuleManager::clearmodules()+0x14>
  for (int y = 1; y < 63; y++)
     d3a:	3490      	adds	r4, #144	; 0x90
     d3c:	42ac      	cmp	r4, r5
     d3e:	d00a      	beq.n	d56 <BMSModuleManager::clearmodules()+0x2a>
    if (modules[y].isExisting())
     d40:	4620      	mov	r0, r4
     d42:	f7ff ffb3 	bl	cac <BMSModule::isExisting()>
     d46:	2800      	cmp	r0, #0
     d48:	d0f7      	beq.n	d3a <BMSModuleManager::clearmodules()+0xe>
      modules[y].clearmodule();
     d4a:	4620      	mov	r0, r4
  for (int y = 1; y < 63; y++)
     d4c:	3490      	adds	r4, #144	; 0x90
      modules[y].clearmodule();
     d4e:	f7ff fca9 	bl	6a4 <BMSModule::clearmodule()>
  for (int y = 1; y < 63; y++)
     d52:	42ac      	cmp	r4, r5
     d54:	d1f4      	bne.n	d40 <BMSModuleManager::clearmodules()+0x14>
}
     d56:	bd38      	pop	{r3, r4, r5, pc}

00000d58 <BMSModuleManager::seriescells()>:
{
     d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  spack = 0;
     d5a:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
     d5e:	2300      	movs	r3, #0
     d60:	f500 560e 	add.w	r6, r0, #9088	; 0x2380
     d64:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
  for (int y = 1; y < 63; y++)
     d68:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
     d6c:	3618      	adds	r6, #24
     d6e:	e002      	b.n	d76 <BMSModuleManager::seriescells()+0x1e>
     d70:	3490      	adds	r4, #144	; 0x90
     d72:	42b4      	cmp	r4, r6
     d74:	d00f      	beq.n	d96 <BMSModuleManager::seriescells()+0x3e>
    if (modules[y].isExisting())
     d76:	4620      	mov	r0, r4
     d78:	f7ff ff98 	bl	cac <BMSModule::isExisting()>
     d7c:	2800      	cmp	r0, #0
     d7e:	d0f7      	beq.n	d70 <BMSModuleManager::seriescells()+0x18>
      spack = spack + modules[y].getscells();
     d80:	4620      	mov	r0, r4
     d82:	f8d7 53a4 	ldr.w	r5, [r7, #932]	; 0x3a4
     d86:	f7ff ff3f 	bl	c08 <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
     d8a:	3490      	adds	r4, #144	; 0x90
      spack = spack + modules[y].getscells();
     d8c:	4405      	add	r5, r0
  for (int y = 1; y < 63; y++)
     d8e:	42b4      	cmp	r4, r6
      spack = spack + modules[y].getscells();
     d90:	f8c7 53a4 	str.w	r5, [r7, #932]	; 0x3a4
  for (int y = 1; y < 63; y++)
     d94:	d1ef      	bne.n	d76 <BMSModuleManager::seriescells()+0x1e>
}
     d96:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
     d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000d9c <BMSModuleManager::balanceCells(int, int)>:
{
     d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     da0:	4680      	mov	r8, r0
     da2:	b093      	sub	sp, #76	; 0x4c
  CellsBalancing = 0;
     da4:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
     da8:	2300      	movs	r3, #0
  if (debug == 1)
     daa:	2a01      	cmp	r2, #1
  CellsBalancing = 0;
     dac:	9007      	str	r0, [sp, #28]
{
     dae:	9200      	str	r2, [sp, #0]
  CellsBalancing = 0;
     db0:	f8c0 33a8 	str.w	r3, [r0, #936]	; 0x3a8
{
     db4:	9106      	str	r1, [sp, #24]
  if (debug == 1)
     db6:	f000 820f 	beq.w	11d8 <BMSModuleManager::balanceCells(int, int)+0x43c>
        Serial.println();
     dba:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 10ac <BMSModuleManager::balanceCells(int, int)+0x310>
     dbe:	f108 0ab8 	add.w	sl, r8, #184	; 0xb8
{
     dc2:	f04f 0b01 	mov.w	fp, #1
     dc6:	e007      	b.n	dd8 <BMSModuleManager::balanceCells(int, int)+0x3c>
  for (int y = 1; y < 63; y++)
     dc8:	f10b 0b01 	add.w	fp, fp, #1
     dcc:	f1bb 0f3f 	cmp.w	fp, #63	; 0x3f
     dd0:	f10a 0a90 	add.w	sl, sl, #144	; 0x90
     dd4:	f000 8125 	beq.w	1022 <BMSModuleManager::balanceCells(int, int)+0x286>
    if (modules[y].isExisting() == 1)
     dd8:	4650      	mov	r0, sl
     dda:	f7ff ff67 	bl	cac <BMSModule::isExisting()>
     dde:	2800      	cmp	r0, #0
     de0:	d0f2      	beq.n	dc8 <BMSModuleManager::balanceCells(int, int)+0x2c>
      for (int i = 0; i < 6; i++)
     de2:	2600      	movs	r6, #0
      balance = 0;
     de4:	4634      	mov	r4, r6
          balance = balance | (1 << i);
     de6:	2501      	movs	r5, #1
  return CellsBalancing;
}

float BMSModuleManager::getLowCellVolt()
{
  return LowCellVolt;
     de8:	f8d8 7008 	ldr.w	r7, [r8, #8]
        if (getLowCellVolt() < modules[y].getCellVoltage(i))
     dec:	4631      	mov	r1, r6
     dee:	4650      	mov	r0, sl
     df0:	f7ff fe8a 	bl	b08 <BMSModule::getCellVoltage(int)>
     df4:	4639      	mov	r1, r7
     df6:	f00d ffbf 	bl	ed78 <__aeabi_fcmpgt>
     dfa:	b118      	cbz	r0, e04 <BMSModuleManager::balanceCells(int, int)+0x68>
          balance = balance | (1 << i);
     dfc:	fa05 f306 	lsl.w	r3, r5, r6
     e00:	431c      	orrs	r4, r3
     e02:	b2e4      	uxtb	r4, r4
      for (int i = 0; i < 6; i++)
     e04:	3601      	adds	r6, #1
     e06:	2e06      	cmp	r6, #6
     e08:	d1ee      	bne.n	de8 <BMSModuleManager::balanceCells(int, int)+0x4c>
      if (debug == 1)
     e0a:	9b00      	ldr	r3, [sp, #0]
     e0c:	2b01      	cmp	r3, #1
     e0e:	f000 812d 	beq.w	106c <BMSModuleManager::balanceCells(int, int)+0x2d0>
      if (balance != 0) //only send balance command when needed
     e12:	2c00      	cmp	r4, #0
     e14:	d0d8      	beq.n	dc8 <BMSModuleManager::balanceCells(int, int)+0x2c>
        payload[0] = y << 1;
     e16:	ea4f 034b 	mov.w	r3, fp, lsl #1
     e1a:	b2db      	uxtb	r3, r3
     e1c:	461a      	mov	r2, r3
        if (isWrite) addrByte |= 1;
     e1e:	f042 0601 	orr.w	r6, r2, #1
     e22:	9301      	str	r3, [sp, #4]
        payload[1] = REG_BAL_TIME;
     e24:	2333      	movs	r3, #51	; 0x33
     e26:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
     e2a:	4630      	mov	r0, r6
        payload[2] = duration; //5 second balance limit, if not triggered to balance it will stop after 5 seconds
     e2c:	9b06      	ldr	r3, [sp, #24]
        payload[0] = y << 1;
     e2e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        payload[2] = duration; //5 second balance limit, if not triggered to balance it will stop after 5 seconds
     e32:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
     e36:	f00b f989 	bl	c14c <serial3_putchar>
					{ serial3_write(buffer, size); return size; }
     e3a:	f10d 0025 	add.w	r0, sp, #37	; 0x25
     e3e:	2102      	movs	r1, #2
     e40:	f00b f98e 	bl	c160 <serial3_write>
        data[0] = addrByte;
     e44:	ab09      	add	r3, sp, #36	; 0x24
     e46:	9304      	str	r3, [sp, #16]
     e48:	461a      	mov	r2, r3
     e4a:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
     e4e:	9605      	str	r6, [sp, #20]
     e50:	4633      	mov	r3, r6
        uint8_t crc = 0;
     e52:	2000      	movs	r0, #0
            crc ^= input[x]; /* XOR-in the next input byte */
     e54:	4058      	eors	r0, r3
     e56:	2508      	movs	r5, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
     e58:	0043      	lsls	r3, r0, #1
                if ((crc & 0x80) != 0)
     e5a:	f010 0f80 	tst.w	r0, #128	; 0x80
                    crc <<= 1;
     e5e:	bf08      	it	eq
     e60:	0040      	lsleq	r0, r0, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
     e62:	f083 0307 	eor.w	r3, r3, #7
     e66:	bf14      	ite	ne
     e68:	b2d8      	uxtbne	r0, r3
                    crc <<= 1;
     e6a:	b2c0      	uxtbeq	r0, r0
            for (int i = 0; i < 8; i++)
     e6c:	3d01      	subs	r5, #1
     e6e:	d1f3      	bne.n	e58 <BMSModuleManager::balanceCells(int, int)+0xbc>
        for (int x = 0; x < lenInput; x++)
     e70:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     e74:	429a      	cmp	r2, r3
     e76:	d002      	beq.n	e7e <BMSModuleManager::balanceCells(int, int)+0xe2>
            crc ^= input[x]; /* XOR-in the next input byte */
     e78:	f812 3f01 	ldrb.w	r3, [r2, #1]!
     e7c:	e7ea      	b.n	e54 <BMSModuleManager::balanceCells(int, int)+0xb8>
     e7e:	f00b f965 	bl	c14c <serial3_putchar>
        if (Logger::isDebug())
     e82:	f001 fdb1 	bl	29e8 <Logger::isDebug()>
     e86:	2800      	cmp	r0, #0
     e88:	f040 8163 	bne.w	1152 <BMSModuleManager::balanceCells(int, int)+0x3b6>
        data[0] = orig;
     e8c:	9b01      	ldr	r3, [sp, #4]
     e8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        delay(2);
     e92:	2002      	movs	r0, #2
     e94:	f00a fa94 	bl	b3c0 <delay>
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
     e98:	f001 fda6 	bl	29e8 <Logger::isDebug()>
     e9c:	2800      	cmp	r0, #0
     e9e:	f040 8153 	bne.w	1148 <BMSModuleManager::balanceCells(int, int)+0x3ac>
     ea2:	ab0a      	add	r3, sp, #40	; 0x28
     ea4:	9302      	str	r3, [sp, #8]
            crc ^= input[x]; /* XOR-in the next input byte */
     ea6:	461f      	mov	r7, r3
     ea8:	2500      	movs	r5, #0
     eaa:	9403      	str	r4, [sp, #12]
     eac:	e000      	b.n	eb0 <BMSModuleManager::balanceCells(int, int)+0x114>
            numBytes++;
     eae:	3501      	adds	r5, #1
	virtual int available(void)     { return serial3_available(); }
     eb0:	f00b f98e 	bl	c1d0 <serial3_available>
        while (SERIALBMS.available() && numBytes < maxLen)
     eb4:	b1b0      	cbz	r0, ee4 <BMSModuleManager::balanceCells(int, int)+0x148>
     eb6:	2d1e      	cmp	r5, #30
     eb8:	f000 80f1 	beq.w	109e <BMSModuleManager::balanceCells(int, int)+0x302>
	virtual int read(void)          { return serial3_getchar(); }
     ebc:	f00b f99c 	bl	c1f8 <serial3_getchar>
            data[numBytes] = SERIALBMS.read();
     ec0:	f807 0b01 	strb.w	r0, [r7], #1
     ec4:	4604      	mov	r4, r0
            if (Logger::isDebug()) {
     ec6:	f001 fd8f 	bl	29e8 <Logger::isDebug()>
     eca:	2800      	cmp	r0, #0
     ecc:	d0ef      	beq.n	eae <BMSModuleManager::balanceCells(int, int)+0x112>
     ece:	b2e1      	uxtb	r1, r4
     ed0:	2300      	movs	r3, #0
     ed2:	2210      	movs	r2, #16
     ed4:	4648      	mov	r0, r9
     ed6:	f009 fb27 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     eda:	2101      	movs	r1, #1
     edc:	4874      	ldr	r0, [pc, #464]	; (10b0 <BMSModuleManager::balanceCells(int, int)+0x314>)
     ede:	f00c f851 	bl	cf84 <usb_serial_write>
     ee2:	e7e4      	b.n	eae <BMSModuleManager::balanceCells(int, int)+0x112>
        if (maxLen == numBytes)
     ee4:	2d1e      	cmp	r5, #30
     ee6:	9c03      	ldr	r4, [sp, #12]
     ee8:	d031      	beq.n	f4e <BMSModuleManager::balanceCells(int, int)+0x1b2>
        if (Logger::isDebug()) SERIALCONSOLE.println();
     eea:	f001 fd7d 	bl	29e8 <Logger::isDebug()>
     eee:	2800      	cmp	r0, #0
     ef0:	d135      	bne.n	f5e <BMSModuleManager::balanceCells(int, int)+0x1c2>
        if (debug == 1)
     ef2:	9b00      	ldr	r3, [sp, #0]
     ef4:	2b01      	cmp	r3, #1
     ef6:	d038      	beq.n	f6a <BMSModuleManager::balanceCells(int, int)+0x1ce>
        payload[0] = y << 1;
     ef8:	9b01      	ldr	r3, [sp, #4]
     efa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
     efe:	4630      	mov	r0, r6
        payload[1] = REG_BAL_CTRL;
     f00:	2332      	movs	r3, #50	; 0x32
     f02:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        payload[2] = balance; //write balance state to register
     f06:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
     f0a:	f00b f91f 	bl	c14c <serial3_putchar>
					{ serial3_write(buffer, size); return size; }
     f0e:	f10d 0025 	add.w	r0, sp, #37	; 0x25
     f12:	2102      	movs	r1, #2
     f14:	f00b f924 	bl	c160 <serial3_write>
        data[0] = addrByte;
     f18:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
     f1c:	aa09      	add	r2, sp, #36	; 0x24
        uint8_t crc = 0;
     f1e:	2000      	movs	r0, #0
            crc ^= input[x]; /* XOR-in the next input byte */
     f20:	4070      	eors	r0, r6
     f22:	2508      	movs	r5, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
     f24:	0043      	lsls	r3, r0, #1
                if ((crc & 0x80) != 0)
     f26:	f010 0f80 	tst.w	r0, #128	; 0x80
                    crc <<= 1;
     f2a:	bf08      	it	eq
     f2c:	0040      	lsleq	r0, r0, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
     f2e:	f083 0307 	eor.w	r3, r3, #7
     f32:	bf14      	ite	ne
     f34:	b2d8      	uxtbne	r0, r3
                    crc <<= 1;
     f36:	b2c0      	uxtbeq	r0, r0
            for (int i = 0; i < 8; i++)
     f38:	3d01      	subs	r5, #1
     f3a:	d1f3      	bne.n	f24 <BMSModuleManager::balanceCells(int, int)+0x188>
        for (int x = 0; x < lenInput; x++)
     f3c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     f40:	429a      	cmp	r2, r3
     f42:	d026      	beq.n	f92 <BMSModuleManager::balanceCells(int, int)+0x1f6>
            crc ^= input[x]; /* XOR-in the next input byte */
     f44:	f812 6f01 	ldrb.w	r6, [r2, #1]!
     f48:	e7ea      	b.n	f20 <BMSModuleManager::balanceCells(int, int)+0x184>
	virtual int read(void)          { return serial3_getchar(); }
     f4a:	f00b f955 	bl	c1f8 <serial3_getchar>
	virtual int available(void)     { return serial3_available(); }
     f4e:	f00b f93f 	bl	c1d0 <serial3_available>
            while (SERIALBMS.available()) SERIALBMS.read();
     f52:	2800      	cmp	r0, #0
     f54:	d1f9      	bne.n	f4a <BMSModuleManager::balanceCells(int, int)+0x1ae>
        if (Logger::isDebug()) SERIALCONSOLE.println();
     f56:	f001 fd47 	bl	29e8 <Logger::isDebug()>
     f5a:	2800      	cmp	r0, #0
     f5c:	d0c9      	beq.n	ef2 <BMSModuleManager::balanceCells(int, int)+0x156>
     f5e:	4648      	mov	r0, r9
     f60:	f009 faca 	bl	a4f8 <Print::println()>
        if (debug == 1)
     f64:	9b00      	ldr	r3, [sp, #0]
     f66:	2b01      	cmp	r3, #1
     f68:	d1c6      	bne.n	ef8 <BMSModuleManager::balanceCells(int, int)+0x15c>
     f6a:	9d02      	ldr	r5, [sp, #8]
     f6c:	1d2f      	adds	r7, r5, #4
     f6e:	f815 1b01 	ldrb.w	r1, [r5], #1
     f72:	2300      	movs	r3, #0
     f74:	2210      	movs	r2, #16
     f76:	4648      	mov	r0, r9
     f78:	f009 fad6 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     f7c:	484d      	ldr	r0, [pc, #308]	; (10b4 <BMSModuleManager::balanceCells(int, int)+0x318>)
     f7e:	2101      	movs	r1, #1
     f80:	f00c f800 	bl	cf84 <usb_serial_write>
          for (int z = 0; z < 4; z++)
     f84:	42af      	cmp	r7, r5
     f86:	d1f2      	bne.n	f6e <BMSModuleManager::balanceCells(int, int)+0x1d2>
     f88:	2103      	movs	r1, #3
     f8a:	484b      	ldr	r0, [pc, #300]	; (10b8 <BMSModuleManager::balanceCells(int, int)+0x31c>)
     f8c:	f00b fffa 	bl	cf84 <usb_serial_write>
     f90:	e7b2      	b.n	ef8 <BMSModuleManager::balanceCells(int, int)+0x15c>
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
     f92:	f00b f8db 	bl	c14c <serial3_putchar>
        if (Logger::isDebug())
     f96:	f001 fd27 	bl	29e8 <Logger::isDebug()>
     f9a:	2800      	cmp	r0, #0
     f9c:	f040 8092 	bne.w	10c4 <BMSModuleManager::balanceCells(int, int)+0x328>
        data[0] = orig;
     fa0:	9b01      	ldr	r3, [sp, #4]
     fa2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        delay(2);
     fa6:	2002      	movs	r0, #2
     fa8:	f00a fa0a 	bl	b3c0 <delay>
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
     fac:	f001 fd1c 	bl	29e8 <Logger::isDebug()>
     fb0:	2800      	cmp	r0, #0
     fb2:	d176      	bne.n	10a2 <BMSModuleManager::balanceCells(int, int)+0x306>
            crc ^= input[x]; /* XOR-in the next input byte */
     fb4:	9e02      	ldr	r6, [sp, #8]
     fb6:	2500      	movs	r5, #0
     fb8:	e000      	b.n	fbc <BMSModuleManager::balanceCells(int, int)+0x220>
            numBytes++;
     fba:	3501      	adds	r5, #1
	virtual int available(void)     { return serial3_available(); }
     fbc:	f00b f908 	bl	c1d0 <serial3_available>
        while (SERIALBMS.available() && numBytes < maxLen)
     fc0:	b390      	cbz	r0, 1028 <BMSModuleManager::balanceCells(int, int)+0x28c>
     fc2:	2d1e      	cmp	r5, #30
     fc4:	d015      	beq.n	ff2 <BMSModuleManager::balanceCells(int, int)+0x256>
	virtual int read(void)          { return serial3_getchar(); }
     fc6:	f00b f917 	bl	c1f8 <serial3_getchar>
            data[numBytes] = SERIALBMS.read();
     fca:	f806 0b01 	strb.w	r0, [r6], #1
     fce:	4607      	mov	r7, r0
            if (Logger::isDebug()) {
     fd0:	f001 fd0a 	bl	29e8 <Logger::isDebug()>
     fd4:	2800      	cmp	r0, #0
     fd6:	d0f0      	beq.n	fba <BMSModuleManager::balanceCells(int, int)+0x21e>
     fd8:	b2f9      	uxtb	r1, r7
     fda:	2300      	movs	r3, #0
     fdc:	2210      	movs	r2, #16
     fde:	4648      	mov	r0, r9
     fe0:	f009 faa2 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     fe4:	2101      	movs	r1, #1
     fe6:	4832      	ldr	r0, [pc, #200]	; (10b0 <BMSModuleManager::balanceCells(int, int)+0x314>)
     fe8:	f00b ffcc 	bl	cf84 <usb_serial_write>
     fec:	e7e5      	b.n	fba <BMSModuleManager::balanceCells(int, int)+0x21e>
     fee:	f00b f903 	bl	c1f8 <serial3_getchar>
	virtual int available(void)     { return serial3_available(); }
     ff2:	f00b f8ed 	bl	c1d0 <serial3_available>
            while (SERIALBMS.available()) SERIALBMS.read();
     ff6:	2800      	cmp	r0, #0
     ff8:	d1f9      	bne.n	fee <BMSModuleManager::balanceCells(int, int)+0x252>
        if (Logger::isDebug()) SERIALCONSOLE.println();
     ffa:	f001 fcf5 	bl	29e8 <Logger::isDebug()>
     ffe:	b9c8      	cbnz	r0, 1034 <BMSModuleManager::balanceCells(int, int)+0x298>
        if (debug == 1)
    1000:	9b00      	ldr	r3, [sp, #0]
    1002:	2b01      	cmp	r3, #1
    1004:	d01c      	beq.n	1040 <BMSModuleManager::balanceCells(int, int)+0x2a4>
        CellsBalancing = CellsBalancing + balance;
    1006:	9a07      	ldr	r2, [sp, #28]
    1008:	f8d2 33a8 	ldr.w	r3, [r2, #936]	; 0x3a8
  for (int y = 1; y < 63; y++)
    100c:	f10b 0b01 	add.w	fp, fp, #1
        CellsBalancing = CellsBalancing + balance;
    1010:	4423      	add	r3, r4
  for (int y = 1; y < 63; y++)
    1012:	f1bb 0f3f 	cmp.w	fp, #63	; 0x3f
        CellsBalancing = CellsBalancing + balance;
    1016:	f8c2 33a8 	str.w	r3, [r2, #936]	; 0x3a8
  for (int y = 1; y < 63; y++)
    101a:	f10a 0a90 	add.w	sl, sl, #144	; 0x90
    101e:	f47f aedb 	bne.w	dd8 <BMSModuleManager::balanceCells(int, int)+0x3c>
}
    1022:	b013      	add	sp, #76	; 0x4c
    1024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (maxLen == numBytes)
    1028:	2d1e      	cmp	r5, #30
    102a:	d0e2      	beq.n	ff2 <BMSModuleManager::balanceCells(int, int)+0x256>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    102c:	f001 fcdc 	bl	29e8 <Logger::isDebug()>
    1030:	2800      	cmp	r0, #0
    1032:	d0e5      	beq.n	1000 <BMSModuleManager::balanceCells(int, int)+0x264>
    1034:	4648      	mov	r0, r9
    1036:	f009 fa5f 	bl	a4f8 <Print::println()>
        if (debug == 1)
    103a:	9b00      	ldr	r3, [sp, #0]
    103c:	2b01      	cmp	r3, #1
    103e:	d1e2      	bne.n	1006 <BMSModuleManager::balanceCells(int, int)+0x26a>
    1040:	9e02      	ldr	r6, [sp, #8]
    1042:	1d35      	adds	r5, r6, #4
    1044:	f816 1b01 	ldrb.w	r1, [r6], #1
    1048:	2300      	movs	r3, #0
    104a:	2210      	movs	r2, #16
    104c:	4648      	mov	r0, r9
    104e:	f009 fa6b 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1052:	4818      	ldr	r0, [pc, #96]	; (10b4 <BMSModuleManager::balanceCells(int, int)+0x318>)
    1054:	2101      	movs	r1, #1
    1056:	f00b ff95 	bl	cf84 <usb_serial_write>
          for (int z = 0; z < 4; z++)
    105a:	42b5      	cmp	r5, r6
    105c:	d1f2      	bne.n	1044 <BMSModuleManager::balanceCells(int, int)+0x2a8>
        CellsBalancing = CellsBalancing + balance;
    105e:	9a07      	ldr	r2, [sp, #28]
    1060:	f8d2 33a8 	ldr.w	r3, [r2, #936]	; 0x3a8
    1064:	4423      	add	r3, r4
    1066:	f8c2 33a8 	str.w	r3, [r2, #936]	; 0x3a8
      if (debug == 1)
    106a:	e014      	b.n	1096 <BMSModuleManager::balanceCells(int, int)+0x2fa>
	size_t print(int n)				{ return print((long)n); }
    106c:	4659      	mov	r1, fp
    106e:	4648      	mov	r0, r9
    1070:	f009 fa3a 	bl	a4e8 <Print::print(long)>
    1074:	2103      	movs	r1, #3
    1076:	4811      	ldr	r0, [pc, #68]	; (10bc <BMSModuleManager::balanceCells(int, int)+0x320>)
    1078:	f00b ff84 	bl	cf84 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    107c:	4621      	mov	r1, r4
    107e:	2300      	movs	r3, #0
    1080:	2202      	movs	r2, #2
    1082:	4648      	mov	r0, r9
    1084:	f009 fa50 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1088:	480b      	ldr	r0, [pc, #44]	; (10b8 <BMSModuleManager::balanceCells(int, int)+0x31c>)
    108a:	2103      	movs	r1, #3
    108c:	f00b ff7a 	bl	cf84 <usb_serial_write>
      if (balance != 0) //only send balance command when needed
    1090:	2c00      	cmp	r4, #0
    1092:	f47f aec0 	bne.w	e16 <BMSModuleManager::balanceCells(int, int)+0x7a>
        Serial.println();
    1096:	4648      	mov	r0, r9
    1098:	f009 fa2e 	bl	a4f8 <Print::println()>
    109c:	e694      	b.n	dc8 <BMSModuleManager::balanceCells(int, int)+0x2c>
    109e:	9c03      	ldr	r4, [sp, #12]
    10a0:	e755      	b.n	f4e <BMSModuleManager::balanceCells(int, int)+0x1b2>
    10a2:	2107      	movs	r1, #7
    10a4:	4806      	ldr	r0, [pc, #24]	; (10c0 <BMSModuleManager::balanceCells(int, int)+0x324>)
    10a6:	f00b ff6d 	bl	cf84 <usb_serial_write>
    10aa:	e783      	b.n	fb4 <BMSModuleManager::balanceCells(int, int)+0x218>
    10ac:	1fff89f8 	.word	0x1fff89f8
    10b0:	0001698c 	.word	0x0001698c
    10b4:	00015838 	.word	0x00015838
    10b8:	00015834 	.word	0x00015834
    10bc:	00015830 	.word	0x00015830
    10c0:	00015758 	.word	0x00015758
    10c4:	2109      	movs	r1, #9
    10c6:	4846      	ldr	r0, [pc, #280]	; (11e0 <BMSModuleManager::balanceCells(int, int)+0x444>)
    10c8:	f00b ff5c 	bl	cf84 <usb_serial_write>
    10cc:	462b      	mov	r3, r5
    10ce:	2210      	movs	r2, #16
    10d0:	9905      	ldr	r1, [sp, #20]
    10d2:	4648      	mov	r0, r9
    10d4:	f009 fa28 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    10d8:	2101      	movs	r1, #1
    10da:	4842      	ldr	r0, [pc, #264]	; (11e4 <BMSModuleManager::balanceCells(int, int)+0x448>)
    10dc:	f00b ff52 	bl	cf84 <usb_serial_write>
    10e0:	462b      	mov	r3, r5
    10e2:	2210      	movs	r2, #16
    10e4:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
    10e8:	4648      	mov	r0, r9
    10ea:	f009 fa1d 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    10ee:	2101      	movs	r1, #1
    10f0:	483c      	ldr	r0, [pc, #240]	; (11e4 <BMSModuleManager::balanceCells(int, int)+0x448>)
    10f2:	f00b ff47 	bl	cf84 <usb_serial_write>
    10f6:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    10fa:	462b      	mov	r3, r5
    10fc:	2210      	movs	r2, #16
    10fe:	4648      	mov	r0, r9
    1100:	f009 fa12 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1104:	2101      	movs	r1, #1
    1106:	4837      	ldr	r0, [pc, #220]	; (11e4 <BMSModuleManager::balanceCells(int, int)+0x448>)
    1108:	f00b ff3c 	bl	cf84 <usb_serial_write>
        uint8_t crc = 0;
    110c:	9904      	ldr	r1, [sp, #16]
    110e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
            crc ^= input[x]; /* XOR-in the next input byte */
    1112:	f811 3b01 	ldrb.w	r3, [r1], #1
    1116:	405d      	eors	r5, r3
    1118:	2308      	movs	r3, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    111a:	006a      	lsls	r2, r5, #1
                if ((crc & 0x80) != 0)
    111c:	f015 0f80 	tst.w	r5, #128	; 0x80
                    crc <<= 1;
    1120:	bf08      	it	eq
    1122:	006d      	lsleq	r5, r5, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    1124:	f082 0207 	eor.w	r2, r2, #7
    1128:	bf14      	ite	ne
    112a:	b2d5      	uxtbne	r5, r2
                    crc <<= 1;
    112c:	b2ed      	uxtbeq	r5, r5
            for (int i = 0; i < 8; i++)
    112e:	3b01      	subs	r3, #1
    1130:	d1f3      	bne.n	111a <BMSModuleManager::balanceCells(int, int)+0x37e>
        for (int x = 0; x < lenInput; x++)
    1132:	4288      	cmp	r0, r1
    1134:	d1ed      	bne.n	1112 <BMSModuleManager::balanceCells(int, int)+0x376>
    1136:	4629      	mov	r1, r5
    1138:	2210      	movs	r2, #16
    113a:	4648      	mov	r0, r9
    113c:	f009 f9f4 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            SERIALCONSOLE.println();
    1140:	4648      	mov	r0, r9
    1142:	f009 f9d9 	bl	a4f8 <Print::println()>
    1146:	e72b      	b.n	fa0 <BMSModuleManager::balanceCells(int, int)+0x204>
    1148:	2107      	movs	r1, #7
    114a:	4827      	ldr	r0, [pc, #156]	; (11e8 <BMSModuleManager::balanceCells(int, int)+0x44c>)
    114c:	f00b ff1a 	bl	cf84 <usb_serial_write>
    1150:	e6a7      	b.n	ea2 <BMSModuleManager::balanceCells(int, int)+0x106>
    1152:	2109      	movs	r1, #9
    1154:	4822      	ldr	r0, [pc, #136]	; (11e0 <BMSModuleManager::balanceCells(int, int)+0x444>)
    1156:	f00b ff15 	bl	cf84 <usb_serial_write>
    115a:	462b      	mov	r3, r5
    115c:	2210      	movs	r2, #16
    115e:	4631      	mov	r1, r6
    1160:	4648      	mov	r0, r9
    1162:	f009 f9e1 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1166:	2101      	movs	r1, #1
    1168:	481e      	ldr	r0, [pc, #120]	; (11e4 <BMSModuleManager::balanceCells(int, int)+0x448>)
    116a:	f00b ff0b 	bl	cf84 <usb_serial_write>
    116e:	462b      	mov	r3, r5
    1170:	2210      	movs	r2, #16
    1172:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
    1176:	4648      	mov	r0, r9
    1178:	f009 f9d6 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    117c:	2101      	movs	r1, #1
    117e:	4819      	ldr	r0, [pc, #100]	; (11e4 <BMSModuleManager::balanceCells(int, int)+0x448>)
    1180:	f00b ff00 	bl	cf84 <usb_serial_write>
    1184:	462b      	mov	r3, r5
    1186:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    118a:	2210      	movs	r2, #16
    118c:	4648      	mov	r0, r9
    118e:	f009 f9cb 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1192:	4814      	ldr	r0, [pc, #80]	; (11e4 <BMSModuleManager::balanceCells(int, int)+0x448>)
    1194:	2101      	movs	r1, #1
    1196:	f00b fef5 	bl	cf84 <usb_serial_write>
            for (int x = 1; x < dataLen; x++) {
    119a:	ab09      	add	r3, sp, #36	; 0x24
    119c:	f10d 0727 	add.w	r7, sp, #39	; 0x27
    11a0:	4618      	mov	r0, r3
            crc ^= input[x]; /* XOR-in the next input byte */
    11a2:	f810 3b01 	ldrb.w	r3, [r0], #1
    11a6:	405d      	eors	r5, r3
    11a8:	2308      	movs	r3, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    11aa:	006a      	lsls	r2, r5, #1
                if ((crc & 0x80) != 0)
    11ac:	f015 0f80 	tst.w	r5, #128	; 0x80
                    crc <<= 1;
    11b0:	bf08      	it	eq
    11b2:	006d      	lsleq	r5, r5, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    11b4:	f082 0207 	eor.w	r2, r2, #7
    11b8:	bf14      	ite	ne
    11ba:	b2d5      	uxtbne	r5, r2
                    crc <<= 1;
    11bc:	b2ed      	uxtbeq	r5, r5
            for (int i = 0; i < 8; i++)
    11be:	3b01      	subs	r3, #1
    11c0:	d1f3      	bne.n	11aa <BMSModuleManager::balanceCells(int, int)+0x40e>
        for (int x = 0; x < lenInput; x++)
    11c2:	42b8      	cmp	r0, r7
    11c4:	d1ed      	bne.n	11a2 <BMSModuleManager::balanceCells(int, int)+0x406>
    11c6:	4629      	mov	r1, r5
    11c8:	2210      	movs	r2, #16
    11ca:	4648      	mov	r0, r9
    11cc:	f009 f9ac 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            SERIALCONSOLE.println();
    11d0:	4648      	mov	r0, r9
    11d2:	f009 f991 	bl	a4f8 <Print::println()>
    11d6:	e659      	b.n	e8c <BMSModuleManager::balanceCells(int, int)+0xf0>
    Serial.println();
    11d8:	4804      	ldr	r0, [pc, #16]	; (11ec <BMSModuleManager::balanceCells(int, int)+0x450>)
    11da:	f009 f98d 	bl	a4f8 <Print::println()>
    11de:	e5ec      	b.n	dba <BMSModuleManager::balanceCells(int, int)+0x1e>
    11e0:	0001574c 	.word	0x0001574c
    11e4:	0001698c 	.word	0x0001698c
    11e8:	00015758 	.word	0x00015758
    11ec:	1fff89f8 	.word	0x1fff89f8

000011f0 <BMSModuleManager::setupBoards()>:
{
    11f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11f4:	b087      	sub	sp, #28
    payload[0] = 0;
    11f6:	f04f 0b00 	mov.w	fp, #0
{
    11fa:	9001      	str	r0, [sp, #4]
    11fc:	f8df a32c 	ldr.w	sl, [pc, #812]	; 152c <BMSModuleManager::setupBoards()+0x33c>
    1200:	4fcb      	ldr	r7, [pc, #812]	; (1530 <BMSModuleManager::setupBoards()+0x340>)
    payload[0] = 0;
    1202:	f8ad b008 	strh.w	fp, [sp, #8]
    payload[2] = 1;
    1206:	2301      	movs	r3, #1
    1208:	f88d 300a 	strb.w	r3, [sp, #10]
    120c:	f04f 0903 	mov.w	r9, #3
    1210:	2400      	movs	r4, #0
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    1212:	4620      	mov	r0, r4
    1214:	f00a ff9a 	bl	c14c <serial3_putchar>
					{ serial3_write(buffer, size); return size; }
    1218:	2102      	movs	r1, #2
    121a:	f10d 0009 	add.w	r0, sp, #9
    121e:	f00a ff9f 	bl	c160 <serial3_write>
        data[0] = addrByte;
    1222:	f88d 4008 	strb.w	r4, [sp, #8]
        if (Logger::isDebug())
    1226:	f001 fbdf 	bl	29e8 <Logger::isDebug()>
    122a:	2800      	cmp	r0, #0
    122c:	f040 809d 	bne.w	136a <BMSModuleManager::setupBoards()+0x17a>
            delay(2 * ((retLen / 8) + 1));
    1230:	2002      	movs	r0, #2
        data[0] = orig;
    1232:	f88d 4008 	strb.w	r4, [sp, #8]
            delay(2 * ((retLen / 8) + 1));
    1236:	f00a f8c3 	bl	b3c0 <delay>
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
    123a:	f001 fbd5 	bl	29e8 <Logger::isDebug()>
    123e:	2800      	cmp	r0, #0
    1240:	f040 808e 	bne.w	1360 <BMSModuleManager::setupBoards()+0x170>
    1244:	f10d 080c 	add.w	r8, sp, #12
    1248:	4646      	mov	r6, r8
    124a:	2500      	movs	r5, #0
    124c:	e000      	b.n	1250 <BMSModuleManager::setupBoards()+0x60>
            numBytes++;
    124e:	3501      	adds	r5, #1
	virtual int available(void)     { return serial3_available(); }
    1250:	f00a ffbe 	bl	c1d0 <serial3_available>
        while (SERIALBMS.available() && numBytes < maxLen)
    1254:	2800      	cmp	r0, #0
    1256:	d075      	beq.n	1344 <BMSModuleManager::setupBoards()+0x154>
    1258:	2d04      	cmp	r5, #4
    125a:	d015      	beq.n	1288 <BMSModuleManager::setupBoards()+0x98>
	virtual int read(void)          { return serial3_getchar(); }
    125c:	f00a ffcc 	bl	c1f8 <serial3_getchar>
            data[numBytes] = SERIALBMS.read();
    1260:	f806 0b01 	strb.w	r0, [r6], #1
    1264:	4604      	mov	r4, r0
            if (Logger::isDebug()) {
    1266:	f001 fbbf 	bl	29e8 <Logger::isDebug()>
    126a:	2800      	cmp	r0, #0
    126c:	d0ef      	beq.n	124e <BMSModuleManager::setupBoards()+0x5e>
    126e:	b2e1      	uxtb	r1, r4
    1270:	2300      	movs	r3, #0
    1272:	2210      	movs	r2, #16
    1274:	4650      	mov	r0, sl
    1276:	f009 f957 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    127a:	2101      	movs	r1, #1
    127c:	4638      	mov	r0, r7
    127e:	f00b fe81 	bl	cf84 <usb_serial_write>
    1282:	e7e4      	b.n	124e <BMSModuleManager::setupBoards()+0x5e>
    1284:	f00a ffb8 	bl	c1f8 <serial3_getchar>
	virtual int available(void)     { return serial3_available(); }
    1288:	f00a ffa2 	bl	c1d0 <serial3_available>
            while (SERIALBMS.available()) SERIALBMS.read();
    128c:	4605      	mov	r5, r0
    128e:	2800      	cmp	r0, #0
    1290:	d1f8      	bne.n	1284 <BMSModuleManager::setupBoards()+0x94>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1292:	f001 fba9 	bl	29e8 <Logger::isDebug()>
    1296:	b110      	cbz	r0, 129e <BMSModuleManager::setupBoards()+0xae>
    1298:	4650      	mov	r0, sl
    129a:	f009 f92d 	bl	a4f8 <Print::println()>
      if (buff[0] == 0x80 && buff[1] == 0 && buff[2] == 1)
    129e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    12a2:	2b80      	cmp	r3, #128	; 0x80
    12a4:	f040 813e 	bne.w	1524 <BMSModuleManager::setupBoards()+0x334>
    12a8:	f89d 400d 	ldrb.w	r4, [sp, #13]
    12ac:	2c00      	cmp	r4, #0
    12ae:	f040 8139 	bne.w	1524 <BMSModuleManager::setupBoards()+0x334>
    12b2:	f89d 900e 	ldrb.w	r9, [sp, #14]
    12b6:	f1b9 0f01 	cmp.w	r9, #1
    12ba:	f040 8133 	bne.w	1524 <BMSModuleManager::setupBoards()+0x334>
        Logger::debug("00 found");
    12be:	489d      	ldr	r0, [pc, #628]	; (1534 <BMSModuleManager::setupBoards()+0x344>)
    12c0:	f001 fcc2 	bl	2c48 <Logger::debug(char*, ...)>
        for (int y = 1; y < 63; y++)
    12c4:	9b01      	ldr	r3, [sp, #4]
    12c6:	464e      	mov	r6, r9
    12c8:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
    12cc:	e004      	b.n	12d8 <BMSModuleManager::setupBoards()+0xe8>
    12ce:	3601      	adds	r6, #1
    12d0:	2e3f      	cmp	r6, #63	; 0x3f
    12d2:	f107 0790 	add.w	r7, r7, #144	; 0x90
    12d6:	d093      	beq.n	1200 <BMSModuleManager::setupBoards()+0x10>
          if (!modules[y].isExisting())
    12d8:	4638      	mov	r0, r7
    12da:	f7ff fce7 	bl	cac <BMSModule::isExisting()>
    12de:	2800      	cmp	r0, #0
    12e0:	d1f5      	bne.n	12ce <BMSModuleManager::setupBoards()+0xde>
            payload[0] = 0;
    12e2:	f44f 526c 	mov.w	r2, #15104	; 0x3b00
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    12e6:	9000      	str	r0, [sp, #0]
    12e8:	f8ad 2008 	strh.w	r2, [sp, #8]
    12ec:	2001      	movs	r0, #1
            payload[2] = y | 0x80;
    12ee:	f066 027f 	orn	r2, r6, #127	; 0x7f
    12f2:	f88d 200a 	strb.w	r2, [sp, #10]
    12f6:	f00a ff29 	bl	c14c <serial3_putchar>
					{ serial3_write(buffer, size); return size; }
    12fa:	2102      	movs	r1, #2
    12fc:	f10d 0009 	add.w	r0, sp, #9
    1300:	f00a ff2e 	bl	c160 <serial3_write>
        uint8_t crc = 0;
    1304:	9b00      	ldr	r3, [sp, #0]
        data[0] = addrByte;
    1306:	2201      	movs	r2, #1
    1308:	f10d 0a08 	add.w	sl, sp, #8
    130c:	f88d 2008 	strb.w	r2, [sp, #8]
        uint8_t crc = 0;
    1310:	4618      	mov	r0, r3
    1312:	f10d 010a 	add.w	r1, sp, #10
        data[0] = addrByte;
    1316:	4652      	mov	r2, sl
            crc ^= input[x]; /* XOR-in the next input byte */
    1318:	ea80 0009 	eor.w	r0, r0, r9
    131c:	f04f 0908 	mov.w	r9, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    1320:	0043      	lsls	r3, r0, #1
                if ((crc & 0x80) != 0)
    1322:	f010 0f80 	tst.w	r0, #128	; 0x80
                    crc <<= 1;
    1326:	bf08      	it	eq
    1328:	0040      	lsleq	r0, r0, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    132a:	f083 0307 	eor.w	r3, r3, #7
    132e:	bf14      	ite	ne
    1330:	b2d8      	uxtbne	r0, r3
                    crc <<= 1;
    1332:	b2c0      	uxtbeq	r0, r0
            for (int i = 0; i < 8; i++)
    1334:	f1b9 0901 	subs.w	r9, r9, #1
    1338:	d1f2      	bne.n	1320 <BMSModuleManager::setupBoards()+0x130>
        for (int x = 0; x < lenInput; x++)
    133a:	4291      	cmp	r1, r2
    133c:	d03d      	beq.n	13ba <BMSModuleManager::setupBoards()+0x1ca>
            crc ^= input[x]; /* XOR-in the next input byte */
    133e:	f812 9f01 	ldrb.w	r9, [r2, #1]!
    1342:	e7e9      	b.n	1318 <BMSModuleManager::setupBoards()+0x128>
        if (maxLen == numBytes)
    1344:	2d04      	cmp	r5, #4
    1346:	d09f      	beq.n	1288 <BMSModuleManager::setupBoards()+0x98>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1348:	f001 fb4e 	bl	29e8 <Logger::isDebug()>
    134c:	2800      	cmp	r0, #0
    134e:	f040 80e2 	bne.w	1516 <BMSModuleManager::setupBoards()+0x326>
        while (attempts < 4)
    1352:	f1b9 0901 	subs.w	r9, r9, #1
    1356:	f000 80e5 	beq.w	1524 <BMSModuleManager::setupBoards()+0x334>
        uint8_t orig = data[0];
    135a:	f89d 4008 	ldrb.w	r4, [sp, #8]
    135e:	e758      	b.n	1212 <BMSModuleManager::setupBoards()+0x22>
    1360:	2107      	movs	r1, #7
    1362:	4875      	ldr	r0, [pc, #468]	; (1538 <BMSModuleManager::setupBoards()+0x348>)
    1364:	f00b fe0e 	bl	cf84 <usb_serial_write>
    1368:	e76c      	b.n	1244 <BMSModuleManager::setupBoards()+0x54>
    136a:	2109      	movs	r1, #9
    136c:	4873      	ldr	r0, [pc, #460]	; (153c <BMSModuleManager::setupBoards()+0x34c>)
    136e:	f00b fe09 	bl	cf84 <usb_serial_write>
    1372:	2300      	movs	r3, #0
    1374:	2210      	movs	r2, #16
    1376:	4621      	mov	r1, r4
    1378:	4650      	mov	r0, sl
    137a:	f009 f8d5 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    137e:	2101      	movs	r1, #1
    1380:	4638      	mov	r0, r7
    1382:	f00b fdff 	bl	cf84 <usb_serial_write>
    1386:	f89d 1009 	ldrb.w	r1, [sp, #9]
    138a:	2300      	movs	r3, #0
    138c:	2210      	movs	r2, #16
    138e:	4650      	mov	r0, sl
    1390:	f009 f8ca 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1394:	2101      	movs	r1, #1
    1396:	4638      	mov	r0, r7
    1398:	f00b fdf4 	bl	cf84 <usb_serial_write>
    139c:	f89d 100a 	ldrb.w	r1, [sp, #10]
    13a0:	2300      	movs	r3, #0
    13a2:	2210      	movs	r2, #16
    13a4:	4650      	mov	r0, sl
    13a6:	f009 f8bf 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    13aa:	2101      	movs	r1, #1
    13ac:	4638      	mov	r0, r7
    13ae:	f00b fde9 	bl	cf84 <usb_serial_write>
            SERIALCONSOLE.println();
    13b2:	4650      	mov	r0, sl
    13b4:	f009 f8a0 	bl	a4f8 <Print::println()>
    13b8:	e73a      	b.n	1230 <BMSModuleManager::setupBoards()+0x40>
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    13ba:	f00a fec7 	bl	c14c <serial3_putchar>
        if (Logger::isDebug())
    13be:	f001 fb13 	bl	29e8 <Logger::isDebug()>
    13c2:	2800      	cmp	r0, #0
    13c4:	d162      	bne.n	148c <BMSModuleManager::setupBoards()+0x29c>
            delay(3);
    13c6:	2003      	movs	r0, #3
        data[0] = orig;
    13c8:	f88d b008 	strb.w	fp, [sp, #8]
    13cc:	f009 fff8 	bl	b3c0 <delay>
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
    13d0:	f001 fb0a 	bl	29e8 <Logger::isDebug()>
    13d4:	2800      	cmp	r0, #0
    13d6:	d154      	bne.n	1482 <BMSModuleManager::setupBoards()+0x292>
    13d8:	f8df 9150 	ldr.w	r9, [pc, #336]	; 152c <BMSModuleManager::setupBoards()+0x33c>
    13dc:	4c54      	ldr	r4, [pc, #336]	; (1530 <BMSModuleManager::setupBoards()+0x340>)
    13de:	e000      	b.n	13e2 <BMSModuleManager::setupBoards()+0x1f2>
            numBytes++;
    13e0:	3501      	adds	r5, #1
	virtual int available(void)     { return serial3_available(); }
    13e2:	f00a fef5 	bl	c1d0 <serial3_available>
        while (SERIALBMS.available() && numBytes < maxLen)
    13e6:	2800      	cmp	r0, #0
    13e8:	d041      	beq.n	146e <BMSModuleManager::setupBoards()+0x27e>
    13ea:	2d0a      	cmp	r5, #10
    13ec:	d016      	beq.n	141c <BMSModuleManager::setupBoards()+0x22c>
	virtual int read(void)          { return serial3_getchar(); }
    13ee:	f00a ff03 	bl	c1f8 <serial3_getchar>
            data[numBytes] = SERIALBMS.read();
    13f2:	f808 0b01 	strb.w	r0, [r8], #1
    13f6:	4682      	mov	sl, r0
            if (Logger::isDebug()) {
    13f8:	f001 faf6 	bl	29e8 <Logger::isDebug()>
    13fc:	2800      	cmp	r0, #0
    13fe:	d0ef      	beq.n	13e0 <BMSModuleManager::setupBoards()+0x1f0>
    1400:	fa5f f18a 	uxtb.w	r1, sl
    1404:	2300      	movs	r3, #0
    1406:	2210      	movs	r2, #16
    1408:	4648      	mov	r0, r9
    140a:	f009 f88d 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    140e:	2101      	movs	r1, #1
    1410:	4620      	mov	r0, r4
    1412:	f00b fdb7 	bl	cf84 <usb_serial_write>
    1416:	e7e3      	b.n	13e0 <BMSModuleManager::setupBoards()+0x1f0>
    1418:	f00a feee 	bl	c1f8 <serial3_getchar>
	virtual int available(void)     { return serial3_available(); }
    141c:	f00a fed8 	bl	c1d0 <serial3_available>
            while (SERIALBMS.available()) SERIALBMS.read();
    1420:	2800      	cmp	r0, #0
    1422:	d1f9      	bne.n	1418 <BMSModuleManager::setupBoards()+0x228>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1424:	f001 fae0 	bl	29e8 <Logger::isDebug()>
    1428:	2800      	cmp	r0, #0
    142a:	f040 808b 	bne.w	1544 <BMSModuleManager::setupBoards()+0x354>
              if (buff[0] == (0x81) && buff[1] == REG_ADDR_CTRL && buff[2] == (y + 0x80))
    142e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    1432:	2b81      	cmp	r3, #129	; 0x81
    1434:	f47f aee2 	bne.w	11fc <BMSModuleManager::setupBoards()+0xc>
    1438:	f89d 300d 	ldrb.w	r3, [sp, #13]
    143c:	2b3b      	cmp	r3, #59	; 0x3b
    143e:	f47f aedd 	bne.w	11fc <BMSModuleManager::setupBoards()+0xc>
    1442:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1446:	3680      	adds	r6, #128	; 0x80
    1448:	42b3      	cmp	r3, r6
    144a:	f47f aed7 	bne.w	11fc <BMSModuleManager::setupBoards()+0xc>
                modules[y].setExists(true);
    144e:	4638      	mov	r0, r7
    1450:	2101      	movs	r1, #1
    1452:	f7ff fc33 	bl	cbc <BMSModule::setExists(bool)>
                numFoundModules++;
    1456:	9b01      	ldr	r3, [sp, #4]
                Logger::debug("Address assigned");
    1458:	4839      	ldr	r0, [pc, #228]	; (1540 <BMSModuleManager::setupBoards()+0x350>)
                numFoundModules++;
    145a:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
    145e:	f8d2 339c 	ldr.w	r3, [r2, #924]	; 0x39c
    1462:	3301      	adds	r3, #1
    1464:	f8c2 339c 	str.w	r3, [r2, #924]	; 0x39c
                Logger::debug("Address assigned");
    1468:	f001 fbee 	bl	2c48 <Logger::debug(char*, ...)>
    146c:	e6c6      	b.n	11fc <BMSModuleManager::setupBoards()+0xc>
        if (maxLen == numBytes)
    146e:	2d0a      	cmp	r5, #10
    1470:	d0d4      	beq.n	141c <BMSModuleManager::setupBoards()+0x22c>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1472:	f001 fab9 	bl	29e8 <Logger::isDebug()>
    1476:	2800      	cmp	r0, #0
    1478:	d149      	bne.n	150e <BMSModuleManager::setupBoards()+0x31e>
            if (BMSUtil::getReply(buff, 10) > 2)
    147a:	2d02      	cmp	r5, #2
    147c:	f77f aebe 	ble.w	11fc <BMSModuleManager::setupBoards()+0xc>
    1480:	e7d5      	b.n	142e <BMSModuleManager::setupBoards()+0x23e>
    1482:	2107      	movs	r1, #7
    1484:	482c      	ldr	r0, [pc, #176]	; (1538 <BMSModuleManager::setupBoards()+0x348>)
    1486:	f00b fd7d 	bl	cf84 <usb_serial_write>
    148a:	e7a5      	b.n	13d8 <BMSModuleManager::setupBoards()+0x1e8>
    148c:	2109      	movs	r1, #9
    148e:	482b      	ldr	r0, [pc, #172]	; (153c <BMSModuleManager::setupBoards()+0x34c>)
    1490:	f00b fd78 	bl	cf84 <usb_serial_write>
    1494:	464b      	mov	r3, r9
    1496:	2210      	movs	r2, #16
    1498:	2101      	movs	r1, #1
    149a:	4824      	ldr	r0, [pc, #144]	; (152c <BMSModuleManager::setupBoards()+0x33c>)
    149c:	f009 f844 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    14a0:	2101      	movs	r1, #1
    14a2:	4823      	ldr	r0, [pc, #140]	; (1530 <BMSModuleManager::setupBoards()+0x340>)
    14a4:	f00b fd6e 	bl	cf84 <usb_serial_write>
    14a8:	464b      	mov	r3, r9
    14aa:	2210      	movs	r2, #16
    14ac:	f89d 1009 	ldrb.w	r1, [sp, #9]
    14b0:	481e      	ldr	r0, [pc, #120]	; (152c <BMSModuleManager::setupBoards()+0x33c>)
    14b2:	f009 f839 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    14b6:	2101      	movs	r1, #1
    14b8:	481d      	ldr	r0, [pc, #116]	; (1530 <BMSModuleManager::setupBoards()+0x340>)
    14ba:	f00b fd63 	bl	cf84 <usb_serial_write>
    14be:	f89d 100a 	ldrb.w	r1, [sp, #10]
    14c2:	481a      	ldr	r0, [pc, #104]	; (152c <BMSModuleManager::setupBoards()+0x33c>)
    14c4:	464b      	mov	r3, r9
    14c6:	2210      	movs	r2, #16
    14c8:	f009 f82e 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    14cc:	2101      	movs	r1, #1
    14ce:	4818      	ldr	r0, [pc, #96]	; (1530 <BMSModuleManager::setupBoards()+0x340>)
    14d0:	f00b fd58 	bl	cf84 <usb_serial_write>
            for (int x = 1; x < dataLen; x++) {
    14d4:	f10d 010b 	add.w	r1, sp, #11
            crc ^= input[x]; /* XOR-in the next input byte */
    14d8:	f81a 2b01 	ldrb.w	r2, [sl], #1
    14dc:	2308      	movs	r3, #8
    14de:	4054      	eors	r4, r2
                    crc = (uint8_t)((crc << 1) ^ generator);
    14e0:	0062      	lsls	r2, r4, #1
                if ((crc & 0x80) != 0)
    14e2:	f014 0f80 	tst.w	r4, #128	; 0x80
                    crc <<= 1;
    14e6:	bf08      	it	eq
    14e8:	0064      	lsleq	r4, r4, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    14ea:	f082 0207 	eor.w	r2, r2, #7
    14ee:	bf14      	ite	ne
    14f0:	b2d4      	uxtbne	r4, r2
                    crc <<= 1;
    14f2:	b2e4      	uxtbeq	r4, r4
            for (int i = 0; i < 8; i++)
    14f4:	3b01      	subs	r3, #1
    14f6:	d1f3      	bne.n	14e0 <BMSModuleManager::setupBoards()+0x2f0>
        for (int x = 0; x < lenInput; x++)
    14f8:	458a      	cmp	sl, r1
    14fa:	d1ed      	bne.n	14d8 <BMSModuleManager::setupBoards()+0x2e8>
    14fc:	4621      	mov	r1, r4
    14fe:	2210      	movs	r2, #16
    1500:	480a      	ldr	r0, [pc, #40]	; (152c <BMSModuleManager::setupBoards()+0x33c>)
    1502:	f009 f811 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            SERIALCONSOLE.println();
    1506:	4809      	ldr	r0, [pc, #36]	; (152c <BMSModuleManager::setupBoards()+0x33c>)
    1508:	f008 fff6 	bl	a4f8 <Print::println()>
    150c:	e75b      	b.n	13c6 <BMSModuleManager::setupBoards()+0x1d6>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    150e:	4807      	ldr	r0, [pc, #28]	; (152c <BMSModuleManager::setupBoards()+0x33c>)
    1510:	f008 fff2 	bl	a4f8 <Print::println()>
    1514:	e7b1      	b.n	147a <BMSModuleManager::setupBoards()+0x28a>
    1516:	4650      	mov	r0, sl
    1518:	f008 ffee 	bl	a4f8 <Print::println()>
        while (attempts < 4)
    151c:	f1b9 0901 	subs.w	r9, r9, #1
    1520:	f47f af1b 	bne.w	135a <BMSModuleManager::setupBoards()+0x16a>
}
    1524:	b007      	add	sp, #28
    1526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    152a:	bf00      	nop
    152c:	1fff89f8 	.word	0x1fff89f8
    1530:	0001698c 	.word	0x0001698c
    1534:	0001583c 	.word	0x0001583c
    1538:	00015758 	.word	0x00015758
    153c:	0001574c 	.word	0x0001574c
    1540:	00015848 	.word	0x00015848
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1544:	4801      	ldr	r0, [pc, #4]	; (154c <BMSModuleManager::setupBoards()+0x35c>)
    1546:	f008 ffd7 	bl	a4f8 <Print::println()>
        return numBytes;
    154a:	e770      	b.n	142e <BMSModuleManager::setupBoards()+0x23e>
    154c:	1fff89f8 	.word	0x1fff89f8

00001550 <BMSModuleManager::findBoards()>:
{
    1550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  numFoundModules = 0;
    1554:	f500 5b00 	add.w	fp, r0, #8192	; 0x2000
{
    1558:	b085      	sub	sp, #20
  numFoundModules = 0;
    155a:	2300      	movs	r3, #0
  payload[2] = 1; //read one byte
    155c:	2201      	movs	r2, #1
    155e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 16d0 <BMSModuleManager::findBoards()+0x180>
    1562:	f8df 9170 	ldr.w	r9, [pc, #368]	; 16d4 <BMSModuleManager::findBoards()+0x184>
  numFoundModules = 0;
    1566:	f8cb 339c 	str.w	r3, [fp, #924]	; 0x39c
  payload[0] = 0;
    156a:	f8ad 3004 	strh.w	r3, [sp, #4]
  payload[2] = 1; //read one byte
    156e:	f88d 2006 	strb.w	r2, [sp, #6]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1572:	f100 0ab8 	add.w	sl, r0, #184	; 0xb8
  payload[2] = 1; //read one byte
    1576:	2702      	movs	r7, #2
    modules[x].setExists(false);
    1578:	2100      	movs	r1, #0
    157a:	4650      	mov	r0, sl
    157c:	f7ff fb9e 	bl	cbc <BMSModule::setExists(bool)>
    payload[0] = x << 1;
    1580:	b2fc      	uxtb	r4, r7
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    1582:	4638      	mov	r0, r7
    1584:	f88d 4004 	strb.w	r4, [sp, #4]
    1588:	f00a fde0 	bl	c14c <serial3_putchar>
					{ serial3_write(buffer, size); return size; }
    158c:	2102      	movs	r1, #2
    158e:	f10d 0005 	add.w	r0, sp, #5
    1592:	f00a fde5 	bl	c160 <serial3_write>
        data[0] = addrByte;
    1596:	f88d 4004 	strb.w	r4, [sp, #4]
        if (Logger::isDebug())
    159a:	f001 fa25 	bl	29e8 <Logger::isDebug()>
    159e:	2800      	cmp	r0, #0
    15a0:	d165      	bne.n	166e <BMSModuleManager::findBoards()+0x11e>
    delay(20);
    15a2:	2014      	movs	r0, #20
        data[0] = orig;
    15a4:	f88d 4004 	strb.w	r4, [sp, #4]
    15a8:	f009 ff0a 	bl	b3c0 <delay>
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
    15ac:	f001 fa1c 	bl	29e8 <Logger::isDebug()>
    15b0:	2800      	cmp	r0, #0
    15b2:	d157      	bne.n	1664 <BMSModuleManager::findBoards()+0x114>
    15b4:	f10d 0607 	add.w	r6, sp, #7
  payload[2] = 1; //read one byte
    15b8:	2500      	movs	r5, #0
    15ba:	e000      	b.n	15be <BMSModuleManager::findBoards()+0x6e>
            numBytes++;
    15bc:	3501      	adds	r5, #1
	virtual int available(void)     { return serial3_available(); }
    15be:	f00a fe07 	bl	c1d0 <serial3_available>
        while (SERIALBMS.available() && numBytes < maxLen)
    15c2:	b370      	cbz	r0, 1622 <BMSModuleManager::findBoards()+0xd2>
    15c4:	2d08      	cmp	r5, #8
    15c6:	d015      	beq.n	15f4 <BMSModuleManager::findBoards()+0xa4>
	virtual int read(void)          { return serial3_getchar(); }
    15c8:	f00a fe16 	bl	c1f8 <serial3_getchar>
            data[numBytes] = SERIALBMS.read();
    15cc:	f806 0f01 	strb.w	r0, [r6, #1]!
    15d0:	4604      	mov	r4, r0
            if (Logger::isDebug()) {
    15d2:	f001 fa09 	bl	29e8 <Logger::isDebug()>
    15d6:	2800      	cmp	r0, #0
    15d8:	d0f0      	beq.n	15bc <BMSModuleManager::findBoards()+0x6c>
    15da:	b2e1      	uxtb	r1, r4
    15dc:	2300      	movs	r3, #0
    15de:	2210      	movs	r2, #16
    15e0:	4640      	mov	r0, r8
    15e2:	f008 ffa1 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    15e6:	2101      	movs	r1, #1
    15e8:	4648      	mov	r0, r9
    15ea:	f00b fccb 	bl	cf84 <usb_serial_write>
    15ee:	e7e5      	b.n	15bc <BMSModuleManager::findBoards()+0x6c>
    15f0:	f00a fe02 	bl	c1f8 <serial3_getchar>
	virtual int available(void)     { return serial3_available(); }
    15f4:	f00a fdec 	bl	c1d0 <serial3_available>
            while (SERIALBMS.available()) SERIALBMS.read();
    15f8:	2800      	cmp	r0, #0
    15fa:	d1f9      	bne.n	15f0 <BMSModuleManager::findBoards()+0xa0>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    15fc:	f001 f9f4 	bl	29e8 <Logger::isDebug()>
    1600:	2800      	cmp	r0, #0
    1602:	d160      	bne.n	16c6 <BMSModuleManager::findBoards()+0x176>
      if (buff[0] == (x << 1) && buff[1] == 0 && buff[2] == 1 && buff[4] > 0) {
    1604:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1608:	42bb      	cmp	r3, r7
    160a:	d016      	beq.n	163a <BMSModuleManager::findBoards()+0xea>
    delay(5);
    160c:	2005      	movs	r0, #5
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    160e:	3702      	adds	r7, #2
    delay(5);
    1610:	f009 fed6 	bl	b3c0 <delay>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1614:	2f7e      	cmp	r7, #126	; 0x7e
    1616:	f10a 0a90 	add.w	sl, sl, #144	; 0x90
    161a:	d1ad      	bne.n	1578 <BMSModuleManager::findBoards()+0x28>
}
    161c:	b005      	add	sp, #20
    161e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (maxLen == numBytes)
    1622:	2d08      	cmp	r5, #8
    1624:	d0e6      	beq.n	15f4 <BMSModuleManager::findBoards()+0xa4>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1626:	f001 f9df 	bl	29e8 <Logger::isDebug()>
    162a:	2800      	cmp	r0, #0
    162c:	d147      	bne.n	16be <BMSModuleManager::findBoards()+0x16e>
    if (BMSUtil::getReply(buff, 8) > 4)
    162e:	2d04      	cmp	r5, #4
    1630:	ddec      	ble.n	160c <BMSModuleManager::findBoards()+0xbc>
      if (buff[0] == (x << 1) && buff[1] == 0 && buff[2] == 1 && buff[4] > 0) {
    1632:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1636:	42bb      	cmp	r3, r7
    1638:	d1e8      	bne.n	160c <BMSModuleManager::findBoards()+0xbc>
    163a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    163e:	2b00      	cmp	r3, #0
    1640:	d1e4      	bne.n	160c <BMSModuleManager::findBoards()+0xbc>
    1642:	f89d 100a 	ldrb.w	r1, [sp, #10]
    1646:	2901      	cmp	r1, #1
    1648:	d1e0      	bne.n	160c <BMSModuleManager::findBoards()+0xbc>
    164a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    164e:	2b00      	cmp	r3, #0
    1650:	d0dc      	beq.n	160c <BMSModuleManager::findBoards()+0xbc>
        modules[x].setExists(true);
    1652:	4650      	mov	r0, sl
    1654:	f7ff fb32 	bl	cbc <BMSModule::setExists(bool)>
        numFoundModules++;
    1658:	f8db 339c 	ldr.w	r3, [fp, #924]	; 0x39c
    165c:	3301      	adds	r3, #1
    165e:	f8cb 339c 	str.w	r3, [fp, #924]	; 0x39c
    1662:	e7d3      	b.n	160c <BMSModuleManager::findBoards()+0xbc>
    1664:	2107      	movs	r1, #7
    1666:	481c      	ldr	r0, [pc, #112]	; (16d8 <BMSModuleManager::findBoards()+0x188>)
    1668:	f00b fc8c 	bl	cf84 <usb_serial_write>
    166c:	e7a2      	b.n	15b4 <BMSModuleManager::findBoards()+0x64>
    166e:	2109      	movs	r1, #9
    1670:	481a      	ldr	r0, [pc, #104]	; (16dc <BMSModuleManager::findBoards()+0x18c>)
    1672:	f00b fc87 	bl	cf84 <usb_serial_write>
    1676:	2300      	movs	r3, #0
    1678:	2210      	movs	r2, #16
    167a:	4639      	mov	r1, r7
    167c:	4640      	mov	r0, r8
    167e:	f008 ff53 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1682:	2101      	movs	r1, #1
    1684:	4648      	mov	r0, r9
    1686:	f00b fc7d 	bl	cf84 <usb_serial_write>
    168a:	f89d 1005 	ldrb.w	r1, [sp, #5]
    168e:	2300      	movs	r3, #0
    1690:	2210      	movs	r2, #16
    1692:	4640      	mov	r0, r8
    1694:	f008 ff48 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1698:	2101      	movs	r1, #1
    169a:	4648      	mov	r0, r9
    169c:	f00b fc72 	bl	cf84 <usb_serial_write>
    16a0:	f89d 1006 	ldrb.w	r1, [sp, #6]
    16a4:	2300      	movs	r3, #0
    16a6:	2210      	movs	r2, #16
    16a8:	4640      	mov	r0, r8
    16aa:	f008 ff3d 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    16ae:	2101      	movs	r1, #1
    16b0:	4648      	mov	r0, r9
    16b2:	f00b fc67 	bl	cf84 <usb_serial_write>
            SERIALCONSOLE.println();
    16b6:	4640      	mov	r0, r8
    16b8:	f008 ff1e 	bl	a4f8 <Print::println()>
    16bc:	e771      	b.n	15a2 <BMSModuleManager::findBoards()+0x52>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    16be:	4640      	mov	r0, r8
    16c0:	f008 ff1a 	bl	a4f8 <Print::println()>
    16c4:	e7b3      	b.n	162e <BMSModuleManager::findBoards()+0xde>
    16c6:	4640      	mov	r0, r8
    16c8:	f008 ff16 	bl	a4f8 <Print::println()>
        return numBytes;
    16cc:	e79a      	b.n	1604 <BMSModuleManager::findBoards()+0xb4>
    16ce:	bf00      	nop
    16d0:	1fff89f8 	.word	0x1fff89f8
    16d4:	0001698c 	.word	0x0001698c
    16d8:	00015758 	.word	0x00015758
    16dc:	0001574c 	.word	0x0001574c

000016e0 <BMSModuleManager::renumberBoardIDs()>:
{
    16e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16e4:	f500 550e 	add.w	r5, r0, #9088	; 0x2380
    16e8:	b085      	sub	sp, #20
    16ea:	4681      	mov	r9, r0
    16ec:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
    16f0:	3518      	adds	r5, #24
    16f2:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
    modules[y].setExists(false);
    16f6:	2600      	movs	r6, #0
    16f8:	4620      	mov	r0, r4
    16fa:	2100      	movs	r1, #0
  for (int y = 1; y < 63; y++)
    16fc:	3490      	adds	r4, #144	; 0x90
    modules[y].setExists(false);
    16fe:	f7ff fadd 	bl	cbc <BMSModule::setExists(bool)>
  for (int y = 1; y < 63; y++)
    1702:	42ac      	cmp	r4, r5
    numFoundModules = 0;
    1704:	f8c7 639c 	str.w	r6, [r7, #924]	; 0x39c
  for (int y = 1; y < 63; y++)
    1708:	d1f6      	bne.n	16f8 <BMSModuleManager::renumberBoardIDs()+0x18>
    170a:	f04f 0a02 	mov.w	sl, #2
    170e:	f10d 0606 	add.w	r6, sp, #6
    payload[0] = 0x3F << 1; //broadcast the reset command
    1712:	f643 437e 	movw	r3, #15486	; 0x3c7e
    1716:	f8ad 3004 	strh.w	r3, [sp, #4]
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    171a:	207f      	movs	r0, #127	; 0x7f
    payload[2] = 0xA5;//data to cause a reset
    171c:	23a5      	movs	r3, #165	; 0xa5
    171e:	f88d 3006 	strb.w	r3, [sp, #6]
    1722:	f00a fd13 	bl	c14c <serial3_putchar>
					{ serial3_write(buffer, size); return size; }
    1726:	f10d 0005 	add.w	r0, sp, #5
    172a:	2102      	movs	r1, #2
    172c:	f00a fd18 	bl	c160 <serial3_write>
        data[0] = addrByte;
    1730:	ac01      	add	r4, sp, #4
    1732:	f04f 037f 	mov.w	r3, #127	; 0x7f
    1736:	f88d 3004 	strb.w	r3, [sp, #4]
    173a:	227f      	movs	r2, #127	; 0x7f
    173c:	4623      	mov	r3, r4
        uint8_t crc = 0;
    173e:	2000      	movs	r0, #0
            crc ^= input[x]; /* XOR-in the next input byte */
    1740:	4050      	eors	r0, r2
    1742:	2508      	movs	r5, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    1744:	0042      	lsls	r2, r0, #1
                if ((crc & 0x80) != 0)
    1746:	f010 0f80 	tst.w	r0, #128	; 0x80
                    crc <<= 1;
    174a:	bf08      	it	eq
    174c:	0040      	lsleq	r0, r0, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    174e:	f082 0207 	eor.w	r2, r2, #7
    1752:	bf14      	ite	ne
    1754:	b2d0      	uxtbne	r0, r2
                    crc <<= 1;
    1756:	b2c0      	uxtbeq	r0, r0
            for (int i = 0; i < 8; i++)
    1758:	3d01      	subs	r5, #1
    175a:	d1f3      	bne.n	1744 <BMSModuleManager::renumberBoardIDs()+0x64>
        for (int x = 0; x < lenInput; x++)
    175c:	429e      	cmp	r6, r3
    175e:	d002      	beq.n	1766 <BMSModuleManager::renumberBoardIDs()+0x86>
            crc ^= input[x]; /* XOR-in the next input byte */
    1760:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    1764:	e7ec      	b.n	1740 <BMSModuleManager::renumberBoardIDs()+0x60>
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    1766:	f00a fcf1 	bl	c14c <serial3_putchar>
        if (Logger::isDebug())
    176a:	f001 f93d 	bl	29e8 <Logger::isDebug()>
    176e:	2800      	cmp	r0, #0
    1770:	d15f      	bne.n	1832 <BMSModuleManager::renumberBoardIDs()+0x152>
        data[0] = orig;
    1772:	237e      	movs	r3, #126	; 0x7e
    delay(100);
    1774:	2064      	movs	r0, #100	; 0x64
    1776:	f88d 3004 	strb.w	r3, [sp, #4]
    177a:	f009 fe21 	bl	b3c0 <delay>
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
    177e:	f001 f933 	bl	29e8 <Logger::isDebug()>
    1782:	2800      	cmp	r0, #0
    1784:	f040 8096 	bne.w	18b4 <BMSModuleManager::renumberBoardIDs()+0x1d4>
    1788:	f8df b134 	ldr.w	fp, [pc, #308]	; 18c0 <BMSModuleManager::renumberBoardIDs()+0x1e0>
    178c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 18c4 <BMSModuleManager::renumberBoardIDs()+0x1e4>
    1790:	f10d 0707 	add.w	r7, sp, #7
            crc ^= input[x]; /* XOR-in the next input byte */
    1794:	2500      	movs	r5, #0
    1796:	e000      	b.n	179a <BMSModuleManager::renumberBoardIDs()+0xba>
            numBytes++;
    1798:	3501      	adds	r5, #1
	virtual int available(void)     { return serial3_available(); }
    179a:	f00a fd19 	bl	c1d0 <serial3_available>
        while (SERIALBMS.available() && numBytes < maxLen)
    179e:	b358      	cbz	r0, 17f8 <BMSModuleManager::renumberBoardIDs()+0x118>
    17a0:	2d08      	cmp	r5, #8
    17a2:	d015      	beq.n	17d0 <BMSModuleManager::renumberBoardIDs()+0xf0>
	virtual int read(void)          { return serial3_getchar(); }
    17a4:	f00a fd28 	bl	c1f8 <serial3_getchar>
            data[numBytes] = SERIALBMS.read();
    17a8:	f807 0f01 	strb.w	r0, [r7, #1]!
    17ac:	4604      	mov	r4, r0
            if (Logger::isDebug()) {
    17ae:	f001 f91b 	bl	29e8 <Logger::isDebug()>
    17b2:	2800      	cmp	r0, #0
    17b4:	d0f0      	beq.n	1798 <BMSModuleManager::renumberBoardIDs()+0xb8>
    17b6:	b2e1      	uxtb	r1, r4
    17b8:	2300      	movs	r3, #0
    17ba:	2210      	movs	r2, #16
    17bc:	4658      	mov	r0, fp
    17be:	f008 feb3 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    17c2:	2101      	movs	r1, #1
    17c4:	4640      	mov	r0, r8
    17c6:	f00b fbdd 	bl	cf84 <usb_serial_write>
    17ca:	e7e5      	b.n	1798 <BMSModuleManager::renumberBoardIDs()+0xb8>
    17cc:	f00a fd14 	bl	c1f8 <serial3_getchar>
	virtual int available(void)     { return serial3_available(); }
    17d0:	f00a fcfe 	bl	c1d0 <serial3_available>
            while (SERIALBMS.available()) SERIALBMS.read();
    17d4:	2800      	cmp	r0, #0
    17d6:	d1f9      	bne.n	17cc <BMSModuleManager::renumberBoardIDs()+0xec>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    17d8:	f001 f906 	bl	29e8 <Logger::isDebug()>
    17dc:	b990      	cbnz	r0, 1804 <BMSModuleManager::renumberBoardIDs()+0x124>
    if (buff[0] == 0x7F && buff[1] == 0x3C && buff[2] == 0xA5 && buff[3] == 0x57) break;
    17de:	f89d 3008 	ldrb.w	r3, [sp, #8]
    17e2:	2b7f      	cmp	r3, #127	; 0x7f
    17e4:	d015      	beq.n	1812 <BMSModuleManager::renumberBoardIDs()+0x132>
  while (attempts < 3)
    17e6:	f1ba 0f01 	cmp.w	sl, #1
    17ea:	d11f      	bne.n	182c <BMSModuleManager::renumberBoardIDs()+0x14c>
  setupBoards();
    17ec:	4648      	mov	r0, r9
    17ee:	f7ff fcff 	bl	11f0 <BMSModuleManager::setupBoards()>
}
    17f2:	b005      	add	sp, #20
    17f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (maxLen == numBytes)
    17f8:	2d08      	cmp	r5, #8
    17fa:	d0e9      	beq.n	17d0 <BMSModuleManager::renumberBoardIDs()+0xf0>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    17fc:	f001 f8f4 	bl	29e8 <Logger::isDebug()>
    1800:	2800      	cmp	r0, #0
    1802:	d0ec      	beq.n	17de <BMSModuleManager::renumberBoardIDs()+0xfe>
    1804:	482e      	ldr	r0, [pc, #184]	; (18c0 <BMSModuleManager::renumberBoardIDs()+0x1e0>)
    1806:	f008 fe77 	bl	a4f8 <Print::println()>
    if (buff[0] == 0x7F && buff[1] == 0x3C && buff[2] == 0xA5 && buff[3] == 0x57) break;
    180a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    180e:	2b7f      	cmp	r3, #127	; 0x7f
    1810:	d1e9      	bne.n	17e6 <BMSModuleManager::renumberBoardIDs()+0x106>
    1812:	f89d 3009 	ldrb.w	r3, [sp, #9]
    1816:	2b3c      	cmp	r3, #60	; 0x3c
    1818:	d1e5      	bne.n	17e6 <BMSModuleManager::renumberBoardIDs()+0x106>
    181a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    181e:	2ba5      	cmp	r3, #165	; 0xa5
    1820:	d1e1      	bne.n	17e6 <BMSModuleManager::renumberBoardIDs()+0x106>
    1822:	f89d 300b 	ldrb.w	r3, [sp, #11]
    1826:	2b57      	cmp	r3, #87	; 0x57
    1828:	d1dd      	bne.n	17e6 <BMSModuleManager::renumberBoardIDs()+0x106>
    182a:	e7df      	b.n	17ec <BMSModuleManager::renumberBoardIDs()+0x10c>
    182c:	f04f 0a01 	mov.w	sl, #1
    1830:	e76f      	b.n	1712 <BMSModuleManager::renumberBoardIDs()+0x32>
    1832:	2109      	movs	r1, #9
    1834:	4824      	ldr	r0, [pc, #144]	; (18c8 <BMSModuleManager::renumberBoardIDs()+0x1e8>)
    1836:	f00b fba5 	bl	cf84 <usb_serial_write>
    183a:	462b      	mov	r3, r5
    183c:	2210      	movs	r2, #16
    183e:	217f      	movs	r1, #127	; 0x7f
    1840:	481f      	ldr	r0, [pc, #124]	; (18c0 <BMSModuleManager::renumberBoardIDs()+0x1e0>)
    1842:	f008 fe71 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1846:	2101      	movs	r1, #1
    1848:	481e      	ldr	r0, [pc, #120]	; (18c4 <BMSModuleManager::renumberBoardIDs()+0x1e4>)
    184a:	f00b fb9b 	bl	cf84 <usb_serial_write>
    184e:	462b      	mov	r3, r5
    1850:	2210      	movs	r2, #16
    1852:	f89d 1005 	ldrb.w	r1, [sp, #5]
    1856:	481a      	ldr	r0, [pc, #104]	; (18c0 <BMSModuleManager::renumberBoardIDs()+0x1e0>)
    1858:	f008 fe66 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    185c:	2101      	movs	r1, #1
    185e:	4819      	ldr	r0, [pc, #100]	; (18c4 <BMSModuleManager::renumberBoardIDs()+0x1e4>)
    1860:	f00b fb90 	bl	cf84 <usb_serial_write>
    1864:	f89d 1006 	ldrb.w	r1, [sp, #6]
    1868:	4815      	ldr	r0, [pc, #84]	; (18c0 <BMSModuleManager::renumberBoardIDs()+0x1e0>)
    186a:	462b      	mov	r3, r5
    186c:	2210      	movs	r2, #16
    186e:	f008 fe5b 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1872:	2101      	movs	r1, #1
    1874:	4813      	ldr	r0, [pc, #76]	; (18c4 <BMSModuleManager::renumberBoardIDs()+0x1e4>)
    1876:	f00b fb85 	bl	cf84 <usb_serial_write>
        uint8_t crc = 0;
    187a:	4629      	mov	r1, r5
    187c:	f10d 0007 	add.w	r0, sp, #7
            crc ^= input[x]; /* XOR-in the next input byte */
    1880:	f814 3b01 	ldrb.w	r3, [r4], #1
    1884:	4059      	eors	r1, r3
    1886:	2308      	movs	r3, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    1888:	004a      	lsls	r2, r1, #1
                if ((crc & 0x80) != 0)
    188a:	f011 0f80 	tst.w	r1, #128	; 0x80
                    crc <<= 1;
    188e:	bf08      	it	eq
    1890:	0049      	lsleq	r1, r1, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    1892:	f082 0207 	eor.w	r2, r2, #7
    1896:	bf14      	ite	ne
    1898:	b2d1      	uxtbne	r1, r2
                    crc <<= 1;
    189a:	b2c9      	uxtbeq	r1, r1
            for (int i = 0; i < 8; i++)
    189c:	3b01      	subs	r3, #1
    189e:	d1f3      	bne.n	1888 <BMSModuleManager::renumberBoardIDs()+0x1a8>
        for (int x = 0; x < lenInput; x++)
    18a0:	4284      	cmp	r4, r0
    18a2:	d1ed      	bne.n	1880 <BMSModuleManager::renumberBoardIDs()+0x1a0>
    18a4:	2210      	movs	r2, #16
    18a6:	4806      	ldr	r0, [pc, #24]	; (18c0 <BMSModuleManager::renumberBoardIDs()+0x1e0>)
    18a8:	f008 fe3e 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            SERIALCONSOLE.println();
    18ac:	4804      	ldr	r0, [pc, #16]	; (18c0 <BMSModuleManager::renumberBoardIDs()+0x1e0>)
    18ae:	f008 fe23 	bl	a4f8 <Print::println()>
    18b2:	e75e      	b.n	1772 <BMSModuleManager::renumberBoardIDs()+0x92>
    18b4:	2107      	movs	r1, #7
    18b6:	4805      	ldr	r0, [pc, #20]	; (18cc <BMSModuleManager::renumberBoardIDs()+0x1ec>)
    18b8:	f00b fb64 	bl	cf84 <usb_serial_write>
    18bc:	e764      	b.n	1788 <BMSModuleManager::renumberBoardIDs()+0xa8>
    18be:	bf00      	nop
    18c0:	1fff89f8 	.word	0x1fff89f8
    18c4:	0001698c 	.word	0x0001698c
    18c8:	0001574c 	.word	0x0001574c
    18cc:	00015758 	.word	0x00015758

000018d0 <BMSModuleManager::clearFaults()>:
{
    18d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18d4:	b087      	sub	sp, #28
  payload[0] = 0x7F; //broadcast
    18d6:	f242 027f 	movw	r2, #8319	; 0x207f
  payload[2] = 0xFF;//data to cause a reset
    18da:	23ff      	movs	r3, #255	; 0xff
    18dc:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 1bc0 <BMSModuleManager::clearFaults()+0x2f0>
    18e0:	4cb8      	ldr	r4, [pc, #736]	; (1bc4 <BMSModuleManager::clearFaults()+0x2f4>)
    18e2:	4db9      	ldr	r5, [pc, #740]	; (1bc8 <BMSModuleManager::clearFaults()+0x2f8>)
{
    18e4:	9001      	str	r0, [sp, #4]
  payload[0] = 0x7F; //broadcast
    18e6:	f8ad 200c 	strh.w	r2, [sp, #12]
  payload[2] = 0xFF;//data to cause a reset
    18ea:	f88d 300e 	strb.w	r3, [sp, #14]
    18ee:	2703      	movs	r7, #3
    18f0:	f04f 087f 	mov.w	r8, #127	; 0x7f
    18f4:	f10d 060e 	add.w	r6, sp, #14
        if (isWrite) addrByte |= 1;
    18f8:	f048 0b01 	orr.w	fp, r8, #1
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    18fc:	4658      	mov	r0, fp
    18fe:	f00a fc25 	bl	c14c <serial3_putchar>
					{ serial3_write(buffer, size); return size; }
    1902:	f10d 000d 	add.w	r0, sp, #13
    1906:	2102      	movs	r1, #2
    1908:	f00a fc2a 	bl	c160 <serial3_write>
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    190c:	46d9      	mov	r9, fp
        data[0] = addrByte;
    190e:	f88d b00c 	strb.w	fp, [sp, #12]
    1912:	aa03      	add	r2, sp, #12
        uint8_t crc = 0;
    1914:	2000      	movs	r0, #0
    1916:	e001      	b.n	191c <BMSModuleManager::clearFaults()+0x4c>
            crc ^= input[x]; /* XOR-in the next input byte */
    1918:	f812 bf01 	ldrb.w	fp, [r2, #1]!
    191c:	ea8b 0000 	eor.w	r0, fp, r0
    1920:	f04f 0b08 	mov.w	fp, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    1924:	0043      	lsls	r3, r0, #1
                if ((crc & 0x80) != 0)
    1926:	f010 0f80 	tst.w	r0, #128	; 0x80
                    crc <<= 1;
    192a:	bf08      	it	eq
    192c:	0040      	lsleq	r0, r0, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    192e:	f083 0307 	eor.w	r3, r3, #7
    1932:	bf14      	ite	ne
    1934:	b2d8      	uxtbne	r0, r3
                    crc <<= 1;
    1936:	b2c0      	uxtbeq	r0, r0
            for (int i = 0; i < 8; i++)
    1938:	f1bb 0b01 	subs.w	fp, fp, #1
    193c:	d1f2      	bne.n	1924 <BMSModuleManager::clearFaults()+0x54>
        for (int x = 0; x < lenInput; x++)
    193e:	42b2      	cmp	r2, r6
    1940:	d1ea      	bne.n	1918 <BMSModuleManager::clearFaults()+0x48>
    1942:	f00a fc03 	bl	c14c <serial3_putchar>
        if (Logger::isDebug())
    1946:	f001 f84f 	bl	29e8 <Logger::isDebug()>
    194a:	2800      	cmp	r0, #0
    194c:	f040 81d6 	bne.w	1cfc <BMSModuleManager::clearFaults()+0x42c>
            delay(2 * ((retLen / 8) + 1));
    1950:	2002      	movs	r0, #2
        data[0] = orig;
    1952:	f88d 800c 	strb.w	r8, [sp, #12]
            delay(2 * ((retLen / 8) + 1));
    1956:	f009 fd33 	bl	b3c0 <delay>
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
    195a:	f001 f845 	bl	29e8 <Logger::isDebug()>
    195e:	2800      	cmp	r0, #0
    1960:	f040 8214 	bne.w	1d8c <BMSModuleManager::clearFaults()+0x4bc>
            crc ^= input[x]; /* XOR-in the next input byte */
    1964:	f10d 0b10 	add.w	fp, sp, #16
    1968:	f04f 0900 	mov.w	r9, #0
    196c:	e001      	b.n	1972 <BMSModuleManager::clearFaults()+0xa2>
            numBytes++;
    196e:	f109 0901 	add.w	r9, r9, #1
	virtual int available(void)     { return serial3_available(); }
    1972:	f00a fc2d 	bl	c1d0 <serial3_available>
        while (SERIALBMS.available() && numBytes < maxLen)
    1976:	2800      	cmp	r0, #0
    1978:	f000 81b1 	beq.w	1cde <BMSModuleManager::clearFaults()+0x40e>
    197c:	f1b9 0f04 	cmp.w	r9, #4
    1980:	d016      	beq.n	19b0 <BMSModuleManager::clearFaults()+0xe0>
	virtual int read(void)          { return serial3_getchar(); }
    1982:	f00a fc39 	bl	c1f8 <serial3_getchar>
            data[numBytes] = SERIALBMS.read();
    1986:	f80b 0b01 	strb.w	r0, [fp], #1
    198a:	4680      	mov	r8, r0
            if (Logger::isDebug()) {
    198c:	f001 f82c 	bl	29e8 <Logger::isDebug()>
    1990:	2800      	cmp	r0, #0
    1992:	d0ec      	beq.n	196e <BMSModuleManager::clearFaults()+0x9e>
    1994:	fa5f f188 	uxtb.w	r1, r8
    1998:	2300      	movs	r3, #0
    199a:	2210      	movs	r2, #16
    199c:	4620      	mov	r0, r4
    199e:	f008 fdc3 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    19a2:	2101      	movs	r1, #1
    19a4:	4628      	mov	r0, r5
    19a6:	f00b faed 	bl	cf84 <usb_serial_write>
    19aa:	e7e0      	b.n	196e <BMSModuleManager::clearFaults()+0x9e>
    19ac:	f00a fc24 	bl	c1f8 <serial3_getchar>
	virtual int available(void)     { return serial3_available(); }
    19b0:	f00a fc0e 	bl	c1d0 <serial3_available>
            while (SERIALBMS.available()) SERIALBMS.read();
    19b4:	2800      	cmp	r0, #0
    19b6:	d1f9      	bne.n	19ac <BMSModuleManager::clearFaults()+0xdc>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    19b8:	f001 f816 	bl	29e8 <Logger::isDebug()>
    19bc:	b110      	cbz	r0, 19c4 <BMSModuleManager::clearFaults()+0xf4>
    19be:	4881      	ldr	r0, [pc, #516]	; (1bc4 <BMSModuleManager::clearFaults()+0x2f4>)
    19c0:	f008 fd9a 	bl	a4f8 <Print::println()>
  payload[0] = 0x7F; //broadcast
    19c4:	277f      	movs	r7, #127	; 0x7f
  payload[2] = 0x00;//data to clear
    19c6:	2300      	movs	r3, #0
    19c8:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 1bc0 <BMSModuleManager::clearFaults()+0x2f0>
    19cc:	4c7d      	ldr	r4, [pc, #500]	; (1bc4 <BMSModuleManager::clearFaults()+0x2f4>)
    19ce:	4d7e      	ldr	r5, [pc, #504]	; (1bc8 <BMSModuleManager::clearFaults()+0x2f8>)
  payload[0] = 0x7F; //broadcast
    19d0:	f88d 700c 	strb.w	r7, [sp, #12]
  payload[2] = 0x00;//data to clear
    19d4:	f88d 300e 	strb.w	r3, [sp, #14]
    19d8:	f04f 0803 	mov.w	r8, #3
        if (isWrite) addrByte |= 1;
    19dc:	f047 0b01 	orr.w	fp, r7, #1
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    19e0:	4658      	mov	r0, fp
    19e2:	f00a fbb3 	bl	c14c <serial3_putchar>
					{ serial3_write(buffer, size); return size; }
    19e6:	f10d 000d 	add.w	r0, sp, #13
    19ea:	2102      	movs	r1, #2
    19ec:	f00a fbb8 	bl	c160 <serial3_write>
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    19f0:	46d9      	mov	r9, fp
        data[0] = addrByte;
    19f2:	f88d b00c 	strb.w	fp, [sp, #12]
    19f6:	aa03      	add	r2, sp, #12
        uint8_t crc = 0;
    19f8:	2000      	movs	r0, #0
    19fa:	e001      	b.n	1a00 <BMSModuleManager::clearFaults()+0x130>
            crc ^= input[x]; /* XOR-in the next input byte */
    19fc:	f812 bf01 	ldrb.w	fp, [r2, #1]!
    1a00:	ea8b 0000 	eor.w	r0, fp, r0
    1a04:	f04f 0b08 	mov.w	fp, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    1a08:	0043      	lsls	r3, r0, #1
                if ((crc & 0x80) != 0)
    1a0a:	f010 0f80 	tst.w	r0, #128	; 0x80
                    crc <<= 1;
    1a0e:	bf08      	it	eq
    1a10:	0040      	lsleq	r0, r0, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    1a12:	f083 0307 	eor.w	r3, r3, #7
    1a16:	bf14      	ite	ne
    1a18:	b2d8      	uxtbne	r0, r3
                    crc <<= 1;
    1a1a:	b2c0      	uxtbeq	r0, r0
            for (int i = 0; i < 8; i++)
    1a1c:	f1bb 0b01 	subs.w	fp, fp, #1
    1a20:	d1f2      	bne.n	1a08 <BMSModuleManager::clearFaults()+0x138>
        for (int x = 0; x < lenInput; x++)
    1a22:	42b2      	cmp	r2, r6
    1a24:	d1ea      	bne.n	19fc <BMSModuleManager::clearFaults()+0x12c>
    1a26:	f00a fb91 	bl	c14c <serial3_putchar>
        if (Logger::isDebug())
    1a2a:	f000 ffdd 	bl	29e8 <Logger::isDebug()>
    1a2e:	2800      	cmp	r0, #0
    1a30:	f040 8250 	bne.w	1ed4 <BMSModuleManager::clearFaults()+0x604>
            delay(2 * ((retLen / 8) + 1));
    1a34:	2002      	movs	r0, #2
        data[0] = orig;
    1a36:	f88d 700c 	strb.w	r7, [sp, #12]
            delay(2 * ((retLen / 8) + 1));
    1a3a:	f009 fcc1 	bl	b3c0 <delay>
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
    1a3e:	f000 ffd3 	bl	29e8 <Logger::isDebug()>
    1a42:	2800      	cmp	r0, #0
    1a44:	f040 8241 	bne.w	1eca <BMSModuleManager::clearFaults()+0x5fa>
            crc ^= input[x]; /* XOR-in the next input byte */
    1a48:	f10d 0b10 	add.w	fp, sp, #16
    1a4c:	f04f 0900 	mov.w	r9, #0
    1a50:	e001      	b.n	1a56 <BMSModuleManager::clearFaults()+0x186>
            numBytes++;
    1a52:	f109 0901 	add.w	r9, r9, #1
	virtual int available(void)     { return serial3_available(); }
    1a56:	f00a fbbb 	bl	c1d0 <serial3_available>
        while (SERIALBMS.available() && numBytes < maxLen)
    1a5a:	2800      	cmp	r0, #0
    1a5c:	f000 812f 	beq.w	1cbe <BMSModuleManager::clearFaults()+0x3ee>
    1a60:	f1b9 0f04 	cmp.w	r9, #4
    1a64:	d015      	beq.n	1a92 <BMSModuleManager::clearFaults()+0x1c2>
	virtual int read(void)          { return serial3_getchar(); }
    1a66:	f00a fbc7 	bl	c1f8 <serial3_getchar>
            data[numBytes] = SERIALBMS.read();
    1a6a:	f80b 0b01 	strb.w	r0, [fp], #1
    1a6e:	4607      	mov	r7, r0
            if (Logger::isDebug()) {
    1a70:	f000 ffba 	bl	29e8 <Logger::isDebug()>
    1a74:	2800      	cmp	r0, #0
    1a76:	d0ec      	beq.n	1a52 <BMSModuleManager::clearFaults()+0x182>
    1a78:	b2f9      	uxtb	r1, r7
    1a7a:	2300      	movs	r3, #0
    1a7c:	2210      	movs	r2, #16
    1a7e:	4620      	mov	r0, r4
    1a80:	f008 fd52 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1a84:	2101      	movs	r1, #1
    1a86:	4628      	mov	r0, r5
    1a88:	f00b fa7c 	bl	cf84 <usb_serial_write>
    1a8c:	e7e1      	b.n	1a52 <BMSModuleManager::clearFaults()+0x182>
    1a8e:	f00a fbb3 	bl	c1f8 <serial3_getchar>
	virtual int available(void)     { return serial3_available(); }
    1a92:	f00a fb9d 	bl	c1d0 <serial3_available>
            while (SERIALBMS.available()) SERIALBMS.read();
    1a96:	2800      	cmp	r0, #0
    1a98:	d1f9      	bne.n	1a8e <BMSModuleManager::clearFaults()+0x1be>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1a9a:	f000 ffa5 	bl	29e8 <Logger::isDebug()>
    1a9e:	b110      	cbz	r0, 1aa6 <BMSModuleManager::clearFaults()+0x1d6>
    1aa0:	4848      	ldr	r0, [pc, #288]	; (1bc4 <BMSModuleManager::clearFaults()+0x2f4>)
    1aa2:	f008 fd29 	bl	a4f8 <Print::println()>
  payload[0] = 0x7F; //broadcast
    1aa6:	f242 137f 	movw	r3, #8575	; 0x217f
    1aaa:	f8ad 300c 	strh.w	r3, [sp, #12]
    1aae:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1bc4 <BMSModuleManager::clearFaults()+0x2f4>
    1ab2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 1bc8 <BMSModuleManager::clearFaults()+0x2f8>
  payload[2] = 0xFF;//data to cause a reset
    1ab6:	23ff      	movs	r3, #255	; 0xff
    1ab8:	f88d 300e 	strb.w	r3, [sp, #14]
    1abc:	f04f 0a03 	mov.w	sl, #3
    1ac0:	257f      	movs	r5, #127	; 0x7f
        if (isWrite) addrByte |= 1;
    1ac2:	f045 0b01 	orr.w	fp, r5, #1
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    1ac6:	4658      	mov	r0, fp
    1ac8:	f00a fb40 	bl	c14c <serial3_putchar>
					{ serial3_write(buffer, size); return size; }
    1acc:	f10d 000d 	add.w	r0, sp, #13
    1ad0:	2102      	movs	r1, #2
    1ad2:	f00a fb45 	bl	c160 <serial3_write>
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    1ad6:	465f      	mov	r7, fp
        data[0] = addrByte;
    1ad8:	f88d b00c 	strb.w	fp, [sp, #12]
    1adc:	ac03      	add	r4, sp, #12
        uint8_t crc = 0;
    1ade:	2000      	movs	r0, #0
    1ae0:	e001      	b.n	1ae6 <BMSModuleManager::clearFaults()+0x216>
            crc ^= input[x]; /* XOR-in the next input byte */
    1ae2:	f814 bf01 	ldrb.w	fp, [r4, #1]!
    1ae6:	ea8b 0000 	eor.w	r0, fp, r0
    1aea:	f04f 0b08 	mov.w	fp, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    1aee:	0043      	lsls	r3, r0, #1
                if ((crc & 0x80) != 0)
    1af0:	f010 0f80 	tst.w	r0, #128	; 0x80
                    crc <<= 1;
    1af4:	bf08      	it	eq
    1af6:	0040      	lsleq	r0, r0, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    1af8:	f083 0307 	eor.w	r3, r3, #7
    1afc:	bf14      	ite	ne
    1afe:	b2d8      	uxtbne	r0, r3
                    crc <<= 1;
    1b00:	b2c0      	uxtbeq	r0, r0
            for (int i = 0; i < 8; i++)
    1b02:	f1bb 0b01 	subs.w	fp, fp, #1
    1b06:	d1f2      	bne.n	1aee <BMSModuleManager::clearFaults()+0x21e>
        for (int x = 0; x < lenInput; x++)
    1b08:	42a6      	cmp	r6, r4
    1b0a:	d1ea      	bne.n	1ae2 <BMSModuleManager::clearFaults()+0x212>
    1b0c:	f00a fb1e 	bl	c14c <serial3_putchar>
        if (Logger::isDebug())
    1b10:	f000 ff6a 	bl	29e8 <Logger::isDebug()>
    1b14:	2800      	cmp	r0, #0
    1b16:	f040 818b 	bne.w	1e30 <BMSModuleManager::clearFaults()+0x560>
            delay(2 * ((retLen / 8) + 1));
    1b1a:	2002      	movs	r0, #2
        data[0] = orig;
    1b1c:	f88d 500c 	strb.w	r5, [sp, #12]
            delay(2 * ((retLen / 8) + 1));
    1b20:	f009 fc4e 	bl	b3c0 <delay>
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
    1b24:	f000 ff60 	bl	29e8 <Logger::isDebug()>
    1b28:	2800      	cmp	r0, #0
    1b2a:	f040 81c9 	bne.w	1ec0 <BMSModuleManager::clearFaults()+0x5f0>
            crc ^= input[x]; /* XOR-in the next input byte */
    1b2e:	f10d 0b10 	add.w	fp, sp, #16
    1b32:	2700      	movs	r7, #0
    1b34:	e000      	b.n	1b38 <BMSModuleManager::clearFaults()+0x268>
            numBytes++;
    1b36:	3701      	adds	r7, #1
	virtual int available(void)     { return serial3_available(); }
    1b38:	f00a fb4a 	bl	c1d0 <serial3_available>
        while (SERIALBMS.available() && numBytes < maxLen)
    1b3c:	2800      	cmp	r0, #0
    1b3e:	f000 80af 	beq.w	1ca0 <BMSModuleManager::clearFaults()+0x3d0>
    1b42:	2f04      	cmp	r7, #4
    1b44:	d015      	beq.n	1b72 <BMSModuleManager::clearFaults()+0x2a2>
	virtual int read(void)          { return serial3_getchar(); }
    1b46:	f00a fb57 	bl	c1f8 <serial3_getchar>
            data[numBytes] = SERIALBMS.read();
    1b4a:	f80b 0b01 	strb.w	r0, [fp], #1
    1b4e:	4605      	mov	r5, r0
            if (Logger::isDebug()) {
    1b50:	f000 ff4a 	bl	29e8 <Logger::isDebug()>
    1b54:	2800      	cmp	r0, #0
    1b56:	d0ee      	beq.n	1b36 <BMSModuleManager::clearFaults()+0x266>
    1b58:	b2e9      	uxtb	r1, r5
    1b5a:	2300      	movs	r3, #0
    1b5c:	2210      	movs	r2, #16
    1b5e:	4640      	mov	r0, r8
    1b60:	f008 fce2 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b64:	2101      	movs	r1, #1
    1b66:	4648      	mov	r0, r9
    1b68:	f00b fa0c 	bl	cf84 <usb_serial_write>
    1b6c:	e7e3      	b.n	1b36 <BMSModuleManager::clearFaults()+0x266>
    1b6e:	f00a fb43 	bl	c1f8 <serial3_getchar>
	virtual int available(void)     { return serial3_available(); }
    1b72:	f00a fb2d 	bl	c1d0 <serial3_available>
            while (SERIALBMS.available()) SERIALBMS.read();
    1b76:	2800      	cmp	r0, #0
    1b78:	d1f9      	bne.n	1b6e <BMSModuleManager::clearFaults()+0x29e>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1b7a:	f000 ff35 	bl	29e8 <Logger::isDebug()>
    1b7e:	b110      	cbz	r0, 1b86 <BMSModuleManager::clearFaults()+0x2b6>
    1b80:	4810      	ldr	r0, [pc, #64]	; (1bc4 <BMSModuleManager::clearFaults()+0x2f4>)
    1b82:	f008 fcb9 	bl	a4f8 <Print::println()>
  payload[0] = 0x7F; //broadcast
    1b86:	277f      	movs	r7, #127	; 0x7f
  payload[2] = 0x00;//data to clear
    1b88:	2300      	movs	r3, #0
    1b8a:	f8df a034 	ldr.w	sl, [pc, #52]	; 1bc0 <BMSModuleManager::clearFaults()+0x2f0>
    1b8e:	4d0d      	ldr	r5, [pc, #52]	; (1bc4 <BMSModuleManager::clearFaults()+0x2f4>)
    1b90:	4e0d      	ldr	r6, [pc, #52]	; (1bc8 <BMSModuleManager::clearFaults()+0x2f8>)
  payload[0] = 0x7F; //broadcast
    1b92:	f88d 700c 	strb.w	r7, [sp, #12]
  payload[2] = 0x00;//data to clear
    1b96:	f88d 300e 	strb.w	r3, [sp, #14]
    1b9a:	f04f 0803 	mov.w	r8, #3
        if (isWrite) addrByte |= 1;
    1b9e:	f047 0b01 	orr.w	fp, r7, #1
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    1ba2:	4658      	mov	r0, fp
    1ba4:	f00a fad2 	bl	c14c <serial3_putchar>
					{ serial3_write(buffer, size); return size; }
    1ba8:	f10d 000d 	add.w	r0, sp, #13
    1bac:	2102      	movs	r1, #2
    1bae:	f00a fad7 	bl	c160 <serial3_write>
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    1bb2:	46d9      	mov	r9, fp
        data[0] = addrByte;
    1bb4:	f88d b00c 	strb.w	fp, [sp, #12]
    1bb8:	aa03      	add	r2, sp, #12
        uint8_t crc = 0;
    1bba:	2000      	movs	r0, #0
    1bbc:	e008      	b.n	1bd0 <BMSModuleManager::clearFaults()+0x300>
    1bbe:	bf00      	nop
    1bc0:	0001574c 	.word	0x0001574c
    1bc4:	1fff89f8 	.word	0x1fff89f8
    1bc8:	0001698c 	.word	0x0001698c
            crc ^= input[x]; /* XOR-in the next input byte */
    1bcc:	f812 bf01 	ldrb.w	fp, [r2, #1]!
    1bd0:	ea8b 0000 	eor.w	r0, fp, r0
    1bd4:	f04f 0b08 	mov.w	fp, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    1bd8:	0043      	lsls	r3, r0, #1
                if ((crc & 0x80) != 0)
    1bda:	f010 0f80 	tst.w	r0, #128	; 0x80
                    crc <<= 1;
    1bde:	bf08      	it	eq
    1be0:	0040      	lsleq	r0, r0, #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    1be2:	f083 0307 	eor.w	r3, r3, #7
    1be6:	bf14      	ite	ne
    1be8:	b2d8      	uxtbne	r0, r3
                    crc <<= 1;
    1bea:	b2c0      	uxtbeq	r0, r0
            for (int i = 0; i < 8; i++)
    1bec:	f1bb 0b01 	subs.w	fp, fp, #1
    1bf0:	d1f2      	bne.n	1bd8 <BMSModuleManager::clearFaults()+0x308>
        for (int x = 0; x < lenInput; x++)
    1bf2:	42a2      	cmp	r2, r4
    1bf4:	d1ea      	bne.n	1bcc <BMSModuleManager::clearFaults()+0x2fc>
    1bf6:	f00a faa9 	bl	c14c <serial3_putchar>
        if (Logger::isDebug())
    1bfa:	f000 fef5 	bl	29e8 <Logger::isDebug()>
    1bfe:	2800      	cmp	r0, #0
    1c00:	f040 80ce 	bne.w	1da0 <BMSModuleManager::clearFaults()+0x4d0>
            delay(2 * ((retLen / 8) + 1));
    1c04:	2002      	movs	r0, #2
        data[0] = orig;
    1c06:	f88d 700c 	strb.w	r7, [sp, #12]
            delay(2 * ((retLen / 8) + 1));
    1c0a:	f009 fbd9 	bl	b3c0 <delay>
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
    1c0e:	f000 feeb 	bl	29e8 <Logger::isDebug()>
    1c12:	2800      	cmp	r0, #0
    1c14:	f040 80bf 	bne.w	1d96 <BMSModuleManager::clearFaults()+0x4c6>
            crc ^= input[x]; /* XOR-in the next input byte */
    1c18:	f10d 0b10 	add.w	fp, sp, #16
    1c1c:	f04f 0900 	mov.w	r9, #0
    1c20:	e001      	b.n	1c26 <BMSModuleManager::clearFaults()+0x356>
            numBytes++;
    1c22:	f109 0901 	add.w	r9, r9, #1
	virtual int available(void)     { return serial3_available(); }
    1c26:	f00a fad3 	bl	c1d0 <serial3_available>
        while (SERIALBMS.available() && numBytes < maxLen)
    1c2a:	b358      	cbz	r0, 1c84 <BMSModuleManager::clearFaults()+0x3b4>
    1c2c:	f1b9 0f04 	cmp.w	r9, #4
    1c30:	d015      	beq.n	1c5e <BMSModuleManager::clearFaults()+0x38e>
	virtual int read(void)          { return serial3_getchar(); }
    1c32:	f00a fae1 	bl	c1f8 <serial3_getchar>
            data[numBytes] = SERIALBMS.read();
    1c36:	f80b 0b01 	strb.w	r0, [fp], #1
    1c3a:	4607      	mov	r7, r0
            if (Logger::isDebug()) {
    1c3c:	f000 fed4 	bl	29e8 <Logger::isDebug()>
    1c40:	2800      	cmp	r0, #0
    1c42:	d0ee      	beq.n	1c22 <BMSModuleManager::clearFaults()+0x352>
    1c44:	b2f9      	uxtb	r1, r7
    1c46:	2300      	movs	r3, #0
    1c48:	2210      	movs	r2, #16
    1c4a:	4628      	mov	r0, r5
    1c4c:	f008 fc6c 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c50:	2101      	movs	r1, #1
    1c52:	4630      	mov	r0, r6
    1c54:	f00b f996 	bl	cf84 <usb_serial_write>
    1c58:	e7e3      	b.n	1c22 <BMSModuleManager::clearFaults()+0x352>
    1c5a:	f00a facd 	bl	c1f8 <serial3_getchar>
	virtual int available(void)     { return serial3_available(); }
    1c5e:	f00a fab7 	bl	c1d0 <serial3_available>
            while (SERIALBMS.available()) SERIALBMS.read();
    1c62:	2800      	cmp	r0, #0
    1c64:	d1f9      	bne.n	1c5a <BMSModuleManager::clearFaults()+0x38a>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1c66:	f000 febf 	bl	29e8 <Logger::isDebug()>
    1c6a:	b110      	cbz	r0, 1c72 <BMSModuleManager::clearFaults()+0x3a2>
    1c6c:	48c5      	ldr	r0, [pc, #788]	; (1f84 <BMSModuleManager::clearFaults()+0x6b4>)
    1c6e:	f008 fc43 	bl	a4f8 <Print::println()>
  isFaulted = false;
    1c72:	9b01      	ldr	r3, [sp, #4]
    1c74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    1c78:	2200      	movs	r2, #0
    1c7a:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
}
    1c7e:	b007      	add	sp, #28
    1c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (maxLen == numBytes)
    1c84:	f1b9 0f04 	cmp.w	r9, #4
    1c88:	d0e9      	beq.n	1c5e <BMSModuleManager::clearFaults()+0x38e>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1c8a:	f000 fead 	bl	29e8 <Logger::isDebug()>
    1c8e:	2800      	cmp	r0, #0
    1c90:	f040 8168 	bne.w	1f64 <BMSModuleManager::clearFaults()+0x694>
        while (attempts < 4)
    1c94:	f1b8 0801 	subs.w	r8, r8, #1
    1c98:	d0eb      	beq.n	1c72 <BMSModuleManager::clearFaults()+0x3a2>
        uint8_t orig = data[0];
    1c9a:	f89d 700c 	ldrb.w	r7, [sp, #12]
    1c9e:	e77e      	b.n	1b9e <BMSModuleManager::clearFaults()+0x2ce>
        if (maxLen == numBytes)
    1ca0:	2f04      	cmp	r7, #4
    1ca2:	f43f af66 	beq.w	1b72 <BMSModuleManager::clearFaults()+0x2a2>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1ca6:	f000 fe9f 	bl	29e8 <Logger::isDebug()>
    1caa:	2800      	cmp	r0, #0
    1cac:	f040 815e 	bne.w	1f6c <BMSModuleManager::clearFaults()+0x69c>
        while (attempts < 4)
    1cb0:	f1ba 0a01 	subs.w	sl, sl, #1
    1cb4:	f43f af67 	beq.w	1b86 <BMSModuleManager::clearFaults()+0x2b6>
        uint8_t orig = data[0];
    1cb8:	f89d 500c 	ldrb.w	r5, [sp, #12]
    1cbc:	e701      	b.n	1ac2 <BMSModuleManager::clearFaults()+0x1f2>
        if (maxLen == numBytes)
    1cbe:	f1b9 0f04 	cmp.w	r9, #4
    1cc2:	f43f aee6 	beq.w	1a92 <BMSModuleManager::clearFaults()+0x1c2>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1cc6:	f000 fe8f 	bl	29e8 <Logger::isDebug()>
    1cca:	2800      	cmp	r0, #0
    1ccc:	f040 8152 	bne.w	1f74 <BMSModuleManager::clearFaults()+0x6a4>
        while (attempts < 4)
    1cd0:	f1b8 0801 	subs.w	r8, r8, #1
    1cd4:	f43f aee7 	beq.w	1aa6 <BMSModuleManager::clearFaults()+0x1d6>
        uint8_t orig = data[0];
    1cd8:	f89d 700c 	ldrb.w	r7, [sp, #12]
    1cdc:	e67e      	b.n	19dc <BMSModuleManager::clearFaults()+0x10c>
        if (maxLen == numBytes)
    1cde:	f1b9 0f04 	cmp.w	r9, #4
    1ce2:	f43f ae65 	beq.w	19b0 <BMSModuleManager::clearFaults()+0xe0>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1ce6:	f000 fe7f 	bl	29e8 <Logger::isDebug()>
    1cea:	2800      	cmp	r0, #0
    1cec:	f040 8146 	bne.w	1f7c <BMSModuleManager::clearFaults()+0x6ac>
        while (attempts < 4)
    1cf0:	3f01      	subs	r7, #1
    1cf2:	f43f ae67 	beq.w	19c4 <BMSModuleManager::clearFaults()+0xf4>
        uint8_t orig = data[0];
    1cf6:	f89d 800c 	ldrb.w	r8, [sp, #12]
    1cfa:	e5fd      	b.n	18f8 <BMSModuleManager::clearFaults()+0x28>
    1cfc:	2109      	movs	r1, #9
    1cfe:	4650      	mov	r0, sl
    1d00:	f00b f940 	bl	cf84 <usb_serial_write>
    1d04:	465b      	mov	r3, fp
    1d06:	2210      	movs	r2, #16
    1d08:	4649      	mov	r1, r9
    1d0a:	4620      	mov	r0, r4
    1d0c:	f008 fc0c 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1d10:	2101      	movs	r1, #1
    1d12:	4628      	mov	r0, r5
    1d14:	f00b f936 	bl	cf84 <usb_serial_write>
    1d18:	465b      	mov	r3, fp
    1d1a:	2210      	movs	r2, #16
    1d1c:	f89d 100d 	ldrb.w	r1, [sp, #13]
    1d20:	4620      	mov	r0, r4
    1d22:	f008 fc01 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1d26:	2101      	movs	r1, #1
    1d28:	4628      	mov	r0, r5
    1d2a:	f00b f92b 	bl	cf84 <usb_serial_write>
    1d2e:	465b      	mov	r3, fp
    1d30:	f89d 100e 	ldrb.w	r1, [sp, #14]
    1d34:	2210      	movs	r2, #16
    1d36:	4620      	mov	r0, r4
    1d38:	f008 fbf6 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1d3c:	2101      	movs	r1, #1
    1d3e:	4628      	mov	r0, r5
    1d40:	f00b f920 	bl	cf84 <usb_serial_write>
            for (int x = 1; x < dataLen; x++) {
    1d44:	ab03      	add	r3, sp, #12
    1d46:	f10d 0c0f 	add.w	ip, sp, #15
    1d4a:	4618      	mov	r0, r3
            crc ^= input[x]; /* XOR-in the next input byte */
    1d4c:	f810 3b01 	ldrb.w	r3, [r0], #1
    1d50:	ea83 0b0b 	eor.w	fp, r3, fp
    1d54:	2308      	movs	r3, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    1d56:	ea4f 024b 	mov.w	r2, fp, lsl #1
                if ((crc & 0x80) != 0)
    1d5a:	f01b 0f80 	tst.w	fp, #128	; 0x80
                    crc <<= 1;
    1d5e:	bf08      	it	eq
    1d60:	ea4f 0b4b 	moveq.w	fp, fp, lsl #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    1d64:	f082 0207 	eor.w	r2, r2, #7
    1d68:	bf14      	ite	ne
    1d6a:	fa5f fb82 	uxtbne.w	fp, r2
                    crc <<= 1;
    1d6e:	fa5f fb8b 	uxtbeq.w	fp, fp
            for (int i = 0; i < 8; i++)
    1d72:	3b01      	subs	r3, #1
    1d74:	d1ef      	bne.n	1d56 <BMSModuleManager::clearFaults()+0x486>
        for (int x = 0; x < lenInput; x++)
    1d76:	4560      	cmp	r0, ip
    1d78:	d1e8      	bne.n	1d4c <BMSModuleManager::clearFaults()+0x47c>
    1d7a:	4659      	mov	r1, fp
    1d7c:	2210      	movs	r2, #16
    1d7e:	4620      	mov	r0, r4
    1d80:	f008 fbd2 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            SERIALCONSOLE.println();
    1d84:	4620      	mov	r0, r4
    1d86:	f008 fbb7 	bl	a4f8 <Print::println()>
    1d8a:	e5e1      	b.n	1950 <BMSModuleManager::clearFaults()+0x80>
    1d8c:	2107      	movs	r1, #7
    1d8e:	487e      	ldr	r0, [pc, #504]	; (1f88 <BMSModuleManager::clearFaults()+0x6b8>)
    1d90:	f00b f8f8 	bl	cf84 <usb_serial_write>
    1d94:	e5e6      	b.n	1964 <BMSModuleManager::clearFaults()+0x94>
    1d96:	2107      	movs	r1, #7
    1d98:	487b      	ldr	r0, [pc, #492]	; (1f88 <BMSModuleManager::clearFaults()+0x6b8>)
    1d9a:	f00b f8f3 	bl	cf84 <usb_serial_write>
    1d9e:	e73b      	b.n	1c18 <BMSModuleManager::clearFaults()+0x348>
    1da0:	2109      	movs	r1, #9
    1da2:	4650      	mov	r0, sl
    1da4:	f00b f8ee 	bl	cf84 <usb_serial_write>
    1da8:	465b      	mov	r3, fp
    1daa:	2210      	movs	r2, #16
    1dac:	4649      	mov	r1, r9
    1dae:	4628      	mov	r0, r5
    1db0:	f008 fbba 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1db4:	2101      	movs	r1, #1
    1db6:	4630      	mov	r0, r6
    1db8:	f00b f8e4 	bl	cf84 <usb_serial_write>
    1dbc:	465b      	mov	r3, fp
    1dbe:	2210      	movs	r2, #16
    1dc0:	f89d 100d 	ldrb.w	r1, [sp, #13]
    1dc4:	4628      	mov	r0, r5
    1dc6:	f008 fbaf 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1dca:	2101      	movs	r1, #1
    1dcc:	4630      	mov	r0, r6
    1dce:	f00b f8d9 	bl	cf84 <usb_serial_write>
    1dd2:	465b      	mov	r3, fp
    1dd4:	f89d 100e 	ldrb.w	r1, [sp, #14]
    1dd8:	2210      	movs	r2, #16
    1dda:	4628      	mov	r0, r5
    1ddc:	f008 fba4 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1de0:	2101      	movs	r1, #1
    1de2:	4630      	mov	r0, r6
    1de4:	f00b f8ce 	bl	cf84 <usb_serial_write>
            for (int x = 1; x < dataLen; x++) {
    1de8:	ab03      	add	r3, sp, #12
    1dea:	f10d 0c0f 	add.w	ip, sp, #15
    1dee:	4618      	mov	r0, r3
            crc ^= input[x]; /* XOR-in the next input byte */
    1df0:	f810 3b01 	ldrb.w	r3, [r0], #1
    1df4:	ea83 0b0b 	eor.w	fp, r3, fp
    1df8:	2308      	movs	r3, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    1dfa:	ea4f 024b 	mov.w	r2, fp, lsl #1
                if ((crc & 0x80) != 0)
    1dfe:	f01b 0f80 	tst.w	fp, #128	; 0x80
                    crc <<= 1;
    1e02:	bf08      	it	eq
    1e04:	ea4f 0b4b 	moveq.w	fp, fp, lsl #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    1e08:	f082 0207 	eor.w	r2, r2, #7
    1e0c:	bf14      	ite	ne
    1e0e:	fa5f fb82 	uxtbne.w	fp, r2
                    crc <<= 1;
    1e12:	fa5f fb8b 	uxtbeq.w	fp, fp
            for (int i = 0; i < 8; i++)
    1e16:	3b01      	subs	r3, #1
    1e18:	d1ef      	bne.n	1dfa <BMSModuleManager::clearFaults()+0x52a>
        for (int x = 0; x < lenInput; x++)
    1e1a:	4560      	cmp	r0, ip
    1e1c:	d1e8      	bne.n	1df0 <BMSModuleManager::clearFaults()+0x520>
    1e1e:	4659      	mov	r1, fp
    1e20:	2210      	movs	r2, #16
    1e22:	4628      	mov	r0, r5
    1e24:	f008 fb80 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            SERIALCONSOLE.println();
    1e28:	4628      	mov	r0, r5
    1e2a:	f008 fb65 	bl	a4f8 <Print::println()>
    1e2e:	e6e9      	b.n	1c04 <BMSModuleManager::clearFaults()+0x334>
    1e30:	2109      	movs	r1, #9
    1e32:	4856      	ldr	r0, [pc, #344]	; (1f8c <BMSModuleManager::clearFaults()+0x6bc>)
    1e34:	f00b f8a6 	bl	cf84 <usb_serial_write>
    1e38:	465b      	mov	r3, fp
    1e3a:	4639      	mov	r1, r7
    1e3c:	2210      	movs	r2, #16
    1e3e:	4640      	mov	r0, r8
    1e40:	f008 fb72 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e44:	2101      	movs	r1, #1
    1e46:	4648      	mov	r0, r9
    1e48:	f00b f89c 	bl	cf84 <usb_serial_write>
    1e4c:	465b      	mov	r3, fp
    1e4e:	2210      	movs	r2, #16
    1e50:	f89d 100d 	ldrb.w	r1, [sp, #13]
    1e54:	4640      	mov	r0, r8
    1e56:	f008 fb67 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e5a:	2101      	movs	r1, #1
    1e5c:	4648      	mov	r0, r9
    1e5e:	f00b f891 	bl	cf84 <usb_serial_write>
    1e62:	465b      	mov	r3, fp
    1e64:	f89d 100e 	ldrb.w	r1, [sp, #14]
    1e68:	2210      	movs	r2, #16
    1e6a:	4640      	mov	r0, r8
    1e6c:	f008 fb5c 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e70:	2101      	movs	r1, #1
    1e72:	4648      	mov	r0, r9
    1e74:	f00b f886 	bl	cf84 <usb_serial_write>
            for (int x = 1; x < dataLen; x++) {
    1e78:	ab03      	add	r3, sp, #12
    1e7a:	f10d 070f 	add.w	r7, sp, #15
    1e7e:	4618      	mov	r0, r3
            crc ^= input[x]; /* XOR-in the next input byte */
    1e80:	f810 3b01 	ldrb.w	r3, [r0], #1
    1e84:	ea83 0b0b 	eor.w	fp, r3, fp
    1e88:	2308      	movs	r3, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    1e8a:	ea4f 024b 	mov.w	r2, fp, lsl #1
                if ((crc & 0x80) != 0)
    1e8e:	f01b 0f80 	tst.w	fp, #128	; 0x80
                    crc <<= 1;
    1e92:	bf08      	it	eq
    1e94:	ea4f 0b4b 	moveq.w	fp, fp, lsl #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    1e98:	f082 0207 	eor.w	r2, r2, #7
    1e9c:	bf14      	ite	ne
    1e9e:	fa5f fb82 	uxtbne.w	fp, r2
                    crc <<= 1;
    1ea2:	fa5f fb8b 	uxtbeq.w	fp, fp
            for (int i = 0; i < 8; i++)
    1ea6:	3b01      	subs	r3, #1
    1ea8:	d1ef      	bne.n	1e8a <BMSModuleManager::clearFaults()+0x5ba>
        for (int x = 0; x < lenInput; x++)
    1eaa:	42b8      	cmp	r0, r7
    1eac:	d1e8      	bne.n	1e80 <BMSModuleManager::clearFaults()+0x5b0>
    1eae:	4659      	mov	r1, fp
    1eb0:	2210      	movs	r2, #16
    1eb2:	4640      	mov	r0, r8
    1eb4:	f008 fb38 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            SERIALCONSOLE.println();
    1eb8:	4640      	mov	r0, r8
    1eba:	f008 fb1d 	bl	a4f8 <Print::println()>
    1ebe:	e62c      	b.n	1b1a <BMSModuleManager::clearFaults()+0x24a>
    1ec0:	2107      	movs	r1, #7
    1ec2:	4831      	ldr	r0, [pc, #196]	; (1f88 <BMSModuleManager::clearFaults()+0x6b8>)
    1ec4:	f00b f85e 	bl	cf84 <usb_serial_write>
    1ec8:	e631      	b.n	1b2e <BMSModuleManager::clearFaults()+0x25e>
    1eca:	2107      	movs	r1, #7
    1ecc:	482e      	ldr	r0, [pc, #184]	; (1f88 <BMSModuleManager::clearFaults()+0x6b8>)
    1ece:	f00b f859 	bl	cf84 <usb_serial_write>
    1ed2:	e5b9      	b.n	1a48 <BMSModuleManager::clearFaults()+0x178>
    1ed4:	2109      	movs	r1, #9
    1ed6:	4650      	mov	r0, sl
    1ed8:	f00b f854 	bl	cf84 <usb_serial_write>
    1edc:	465b      	mov	r3, fp
    1ede:	2210      	movs	r2, #16
    1ee0:	4649      	mov	r1, r9
    1ee2:	4620      	mov	r0, r4
    1ee4:	f008 fb20 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ee8:	2101      	movs	r1, #1
    1eea:	4628      	mov	r0, r5
    1eec:	f00b f84a 	bl	cf84 <usb_serial_write>
    1ef0:	465b      	mov	r3, fp
    1ef2:	2210      	movs	r2, #16
    1ef4:	f89d 100d 	ldrb.w	r1, [sp, #13]
    1ef8:	4620      	mov	r0, r4
    1efa:	f008 fb15 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1efe:	2101      	movs	r1, #1
    1f00:	4628      	mov	r0, r5
    1f02:	f00b f83f 	bl	cf84 <usb_serial_write>
    1f06:	465b      	mov	r3, fp
    1f08:	f89d 100e 	ldrb.w	r1, [sp, #14]
    1f0c:	2210      	movs	r2, #16
    1f0e:	4620      	mov	r0, r4
    1f10:	f008 fb0a 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1f14:	2101      	movs	r1, #1
    1f16:	4628      	mov	r0, r5
    1f18:	f00b f834 	bl	cf84 <usb_serial_write>
            for (int x = 1; x < dataLen; x++) {
    1f1c:	ab03      	add	r3, sp, #12
    1f1e:	f10d 0c0f 	add.w	ip, sp, #15
    1f22:	4618      	mov	r0, r3
            crc ^= input[x]; /* XOR-in the next input byte */
    1f24:	f810 3b01 	ldrb.w	r3, [r0], #1
    1f28:	ea83 0b0b 	eor.w	fp, r3, fp
    1f2c:	2308      	movs	r3, #8
                    crc = (uint8_t)((crc << 1) ^ generator);
    1f2e:	ea4f 024b 	mov.w	r2, fp, lsl #1
                if ((crc & 0x80) != 0)
    1f32:	f01b 0f80 	tst.w	fp, #128	; 0x80
                    crc <<= 1;
    1f36:	bf08      	it	eq
    1f38:	ea4f 0b4b 	moveq.w	fp, fp, lsl #1
                    crc = (uint8_t)((crc << 1) ^ generator);
    1f3c:	f082 0207 	eor.w	r2, r2, #7
    1f40:	bf14      	ite	ne
    1f42:	fa5f fb82 	uxtbne.w	fp, r2
                    crc <<= 1;
    1f46:	fa5f fb8b 	uxtbeq.w	fp, fp
            for (int i = 0; i < 8; i++)
    1f4a:	3b01      	subs	r3, #1
    1f4c:	d1ef      	bne.n	1f2e <BMSModuleManager::clearFaults()+0x65e>
        for (int x = 0; x < lenInput; x++)
    1f4e:	4584      	cmp	ip, r0
    1f50:	d1e8      	bne.n	1f24 <BMSModuleManager::clearFaults()+0x654>
    1f52:	4659      	mov	r1, fp
    1f54:	2210      	movs	r2, #16
    1f56:	4620      	mov	r0, r4
    1f58:	f008 fae6 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            SERIALCONSOLE.println();
    1f5c:	4620      	mov	r0, r4
    1f5e:	f008 facb 	bl	a4f8 <Print::println()>
    1f62:	e567      	b.n	1a34 <BMSModuleManager::clearFaults()+0x164>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1f64:	4628      	mov	r0, r5
    1f66:	f008 fac7 	bl	a4f8 <Print::println()>
            if (returnedLength == retLen) return returnedLength;
    1f6a:	e693      	b.n	1c94 <BMSModuleManager::clearFaults()+0x3c4>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1f6c:	4640      	mov	r0, r8
    1f6e:	f008 fac3 	bl	a4f8 <Print::println()>
            if (returnedLength == retLen) return returnedLength;
    1f72:	e69d      	b.n	1cb0 <BMSModuleManager::clearFaults()+0x3e0>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1f74:	4620      	mov	r0, r4
    1f76:	f008 fabf 	bl	a4f8 <Print::println()>
            if (returnedLength == retLen) return returnedLength;
    1f7a:	e6a9      	b.n	1cd0 <BMSModuleManager::clearFaults()+0x400>
        if (Logger::isDebug()) SERIALCONSOLE.println();
    1f7c:	4620      	mov	r0, r4
    1f7e:	f008 fabb 	bl	a4f8 <Print::println()>
            if (returnedLength == retLen) return returnedLength;
    1f82:	e6b5      	b.n	1cf0 <BMSModuleManager::clearFaults()+0x420>
    1f84:	1fff89f8 	.word	0x1fff89f8
    1f88:	00015758 	.word	0x00015758
    1f8c:	0001574c 	.word	0x0001574c

00001f90 <BMSModuleManager::StopBalancing()>:
{
    1f90:	b538      	push	{r3, r4, r5, lr}
    1f92:	f500 550e 	add.w	r5, r0, #9088	; 0x2380
    1f96:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
    1f9a:	3518      	adds	r5, #24
    1f9c:	e002      	b.n	1fa4 <BMSModuleManager::StopBalancing()+0x14>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1f9e:	3490      	adds	r4, #144	; 0x90
    1fa0:	42ac      	cmp	r4, r5
    1fa2:	d00a      	beq.n	1fba <BMSModuleManager::StopBalancing()+0x2a>
    if (modules[x].isExisting())
    1fa4:	4620      	mov	r0, r4
    1fa6:	f7fe fe81 	bl	cac <BMSModule::isExisting()>
    1faa:	2800      	cmp	r0, #0
    1fac:	d0f7      	beq.n	1f9e <BMSModuleManager::StopBalancing()+0xe>
      modules[x].stopBalance();
    1fae:	4620      	mov	r0, r4
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1fb0:	3490      	adds	r4, #144	; 0x90
      modules[x].stopBalance();
    1fb2:	f7fe fbdb 	bl	76c <BMSModule::stopBalance()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1fb6:	42ac      	cmp	r4, r5
    1fb8:	d1f4      	bne.n	1fa4 <BMSModuleManager::StopBalancing()+0x14>
}
    1fba:	bd38      	pop	{r3, r4, r5, pc}

00001fbc <BMSModuleManager::getAllVoltTemp()>:
{
    1fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  packVolt = 0.0f;
    1fc0:	4605      	mov	r5, r0
    1fc2:	2300      	movs	r3, #0
    1fc4:	f845 3bb8 	str.w	r3, [r5], #184
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1fc8:	f500 570e 	add.w	r7, r0, #9088	; 0x2380
{
    1fcc:	b087      	sub	sp, #28
    1fce:	4680      	mov	r8, r0
    1fd0:	3718      	adds	r7, #24
  packVolt = 0.0f;
    1fd2:	462c      	mov	r4, r5
    1fd4:	e002      	b.n	1fdc <BMSModuleManager::getAllVoltTemp()+0x20>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1fd6:	3490      	adds	r4, #144	; 0x90
    1fd8:	42bc      	cmp	r4, r7
    1fda:	d00a      	beq.n	1ff2 <BMSModuleManager::getAllVoltTemp()+0x36>
    if (modules[x].isExisting())
    1fdc:	4620      	mov	r0, r4
    1fde:	f7fe fe65 	bl	cac <BMSModule::isExisting()>
    1fe2:	2800      	cmp	r0, #0
    1fe4:	d0f7      	beq.n	1fd6 <BMSModuleManager::getAllVoltTemp()+0x1a>
      modules[x].stopBalance();
    1fe6:	4620      	mov	r0, r4
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1fe8:	3490      	adds	r4, #144	; 0x90
      modules[x].stopBalance();
    1fea:	f7fe fbbf 	bl	76c <BMSModule::stopBalance()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1fee:	42bc      	cmp	r4, r7
    1ff0:	d1f4      	bne.n	1fdc <BMSModuleManager::getAllVoltTemp()+0x20>
  if (numFoundModules < 8)
    1ff2:	f508 5300 	add.w	r3, r8, #8192	; 0x2000
    1ff6:	9304      	str	r3, [sp, #16]
    1ff8:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
    1ffc:	2b07      	cmp	r3, #7
    1ffe:	f300 8108 	bgt.w	2212 <BMSModuleManager::getAllVoltTemp()+0x256>
    delay(200);
    2002:	20c8      	movs	r0, #200	; 0xc8
    2004:	f009 f9dc 	bl	b3c0 <delay>
      Logger::debug("");
    2008:	f8df a220 	ldr.w	sl, [pc, #544]	; 222c <BMSModuleManager::getAllVoltTemp()+0x270>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
    200c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 2230 <BMSModuleManager::getAllVoltTemp()+0x274>
    2010:	9505      	str	r5, [sp, #20]
  packVolt = 0.0f;
    2012:	462c      	mov	r4, r5
    2014:	2601      	movs	r6, #1
    2016:	e004      	b.n	2022 <BMSModuleManager::getAllVoltTemp()+0x66>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    2018:	3601      	adds	r6, #1
    201a:	2e3f      	cmp	r6, #63	; 0x3f
    201c:	f104 0490 	add.w	r4, r4, #144	; 0x90
    2020:	d07d      	beq.n	211e <BMSModuleManager::getAllVoltTemp()+0x162>
    if (modules[x].isExisting())
    2022:	4620      	mov	r0, r4
    2024:	f7fe fe42 	bl	cac <BMSModule::isExisting()>
    2028:	2800      	cmp	r0, #0
    202a:	d0f5      	beq.n	2018 <BMSModuleManager::getAllVoltTemp()+0x5c>
      Logger::debug("");
    202c:	4650      	mov	r0, sl
    202e:	f000 fe0b 	bl	2c48 <Logger::debug(char*, ...)>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
    2032:	4631      	mov	r1, r6
    2034:	4648      	mov	r0, r9
    2036:	f000 fe07 	bl	2c48 <Logger::debug(char*, ...)>
      modules[x].readModuleValues();
    203a:	4620      	mov	r0, r4
    203c:	f7fe fbb2 	bl	7a4 <BMSModule::readModuleValues()>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
    2040:	4620      	mov	r0, r4
    2042:	f7fe fe23 	bl	c8c <BMSModule::getModuleVoltage()>
    2046:	f00c fab7 	bl	e5b8 <__aeabi_f2d>
    204a:	4602      	mov	r2, r0
    204c:	460b      	mov	r3, r1
    204e:	4879      	ldr	r0, [pc, #484]	; (2234 <BMSModuleManager::getAllVoltTemp()+0x278>)
    2050:	f000 fdfa 	bl	2c48 <Logger::debug(char*, ...)>
      Logger::debug("Lowest Cell V: %f     Highest Cell V: %f", modules[x].getLowCellV(), modules[x].getHighCellV());
    2054:	4620      	mov	r0, r4
    2056:	f7fe fd5d 	bl	b14 <BMSModule::getLowCellV()>
    205a:	4605      	mov	r5, r0
    205c:	4620      	mov	r0, r4
    205e:	f7fe fd75 	bl	b4c <BMSModule::getHighCellV()>
    2062:	4683      	mov	fp, r0
    2064:	4628      	mov	r0, r5
    2066:	f00c faa7 	bl	e5b8 <__aeabi_f2d>
    206a:	4602      	mov	r2, r0
    206c:	460b      	mov	r3, r1
    206e:	4658      	mov	r0, fp
    2070:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2074:	f00c faa0 	bl	e5b8 <__aeabi_f2d>
    2078:	468c      	mov	ip, r1
    207a:	4683      	mov	fp, r0
    207c:	e9cd bc00 	strd	fp, ip, [sp]
    2080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2084:	486c      	ldr	r0, [pc, #432]	; (2238 <BMSModuleManager::getAllVoltTemp()+0x27c>)
    2086:	f000 fddf 	bl	2c48 <Logger::debug(char*, ...)>
      Logger::debug("Temp1: %f       Temp2: %f", modules[x].getTemperature(0), modules[x].getTemperature(1));
    208a:	2100      	movs	r1, #0
    208c:	4620      	mov	r0, r4
    208e:	f7fe fdff 	bl	c90 <BMSModule::getTemperature(int)>
    2092:	2101      	movs	r1, #1
    2094:	4605      	mov	r5, r0
    2096:	4620      	mov	r0, r4
    2098:	f7fe fdfa 	bl	c90 <BMSModule::getTemperature(int)>
    209c:	4683      	mov	fp, r0
    209e:	4628      	mov	r0, r5
    20a0:	f00c fa8a 	bl	e5b8 <__aeabi_f2d>
    20a4:	4602      	mov	r2, r0
    20a6:	460b      	mov	r3, r1
    20a8:	4658      	mov	r0, fp
    20aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    20ae:	f00c fa83 	bl	e5b8 <__aeabi_f2d>
    20b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    20b6:	e9cd 0100 	strd	r0, r1, [sp]
    20ba:	4860      	ldr	r0, [pc, #384]	; (223c <BMSModuleManager::getAllVoltTemp()+0x280>)
    20bc:	f000 fdc4 	bl	2c48 <Logger::debug(char*, ...)>
      packVolt += modules[x].getModuleVoltage();
    20c0:	4620      	mov	r0, r4
    20c2:	f7fe fde3 	bl	c8c <BMSModule::getModuleVoltage()>
    20c6:	4601      	mov	r1, r0
    20c8:	f8d8 0000 	ldr.w	r0, [r8]
    20cc:	f00c fb90 	bl	e7f0 <__addsf3>
    20d0:	f8c8 0000 	str.w	r0, [r8]
      if (modules[x].getLowTemp() < lowestPackTemp && modules[x].getLowTemp() > -70) lowestPackTemp = modules[x].getLowTemp();
    20d4:	4620      	mov	r0, r4
    20d6:	f7fe fd9b 	bl	c10 <BMSModule::getLowTemp()>
    20da:	f8d8 1018 	ldr.w	r1, [r8, #24]
    20de:	f00c fe2d 	bl	ed3c <__aeabi_fcmplt>
    20e2:	2800      	cmp	r0, #0
    20e4:	f040 8083 	bne.w	21ee <BMSModuleManager::getAllVoltTemp()+0x232>
      if (modules[x].getHighTemp() > highestPackTemp && modules[x].getLowTemp() > -70) highestPackTemp = modules[x].getHighTemp();
    20e8:	4620      	mov	r0, r4
    20ea:	f7fe fda7 	bl	c3c <BMSModule::getHighTemp()>
    20ee:	f8d8 101c 	ldr.w	r1, [r8, #28]
    20f2:	f00c fe41 	bl	ed78 <__aeabi_fcmpgt>
    20f6:	2800      	cmp	r0, #0
    20f8:	d08e      	beq.n	2018 <BMSModuleManager::getAllVoltTemp()+0x5c>
    20fa:	4620      	mov	r0, r4
    20fc:	f7fe fd88 	bl	c10 <BMSModule::getLowTemp()>
    2100:	494f      	ldr	r1, [pc, #316]	; (2240 <BMSModuleManager::getAllVoltTemp()+0x284>)
    2102:	f00c fe39 	bl	ed78 <__aeabi_fcmpgt>
    2106:	2800      	cmp	r0, #0
    2108:	d086      	beq.n	2018 <BMSModuleManager::getAllVoltTemp()+0x5c>
    210a:	4620      	mov	r0, r4
    210c:	f7fe fd96 	bl	c3c <BMSModule::getHighTemp()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    2110:	3601      	adds	r6, #1
    2112:	2e3f      	cmp	r6, #63	; 0x3f
      if (modules[x].getHighTemp() > highestPackTemp && modules[x].getLowTemp() > -70) highestPackTemp = modules[x].getHighTemp();
    2114:	f8c8 001c 	str.w	r0, [r8, #28]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    2118:	f104 0490 	add.w	r4, r4, #144	; 0x90
    211c:	d181      	bne.n	2022 <BMSModuleManager::getAllVoltTemp()+0x66>
  packVolt = packVolt / Pstring;
    211e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    2122:	9d05      	ldr	r5, [sp, #20]
    2124:	f00c fc18 	bl	e958 <__aeabi_i2f>
    2128:	4601      	mov	r1, r0
    212a:	f8d8 0000 	ldr.w	r0, [r8]
    212e:	f00c fd1b 	bl	eb68 <__aeabi_fdiv>
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
    2132:	f8d8 1014 	ldr.w	r1, [r8, #20]
  packVolt = packVolt / Pstring;
    2136:	f8c8 0000 	str.w	r0, [r8]
    213a:	4604      	mov	r4, r0
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
    213c:	f00c fe1c 	bl	ed78 <__aeabi_fcmpgt>
    2140:	b108      	cbz	r0, 2146 <BMSModuleManager::getAllVoltTemp()+0x18a>
    2142:	f8c8 4014 	str.w	r4, [r8, #20]
  if (packVolt < lowestPackVolt) lowestPackVolt = packVolt;
    2146:	f8d8 1010 	ldr.w	r1, [r8, #16]
    214a:	4620      	mov	r0, r4
    214c:	f00c fdf6 	bl	ed3c <__aeabi_fcmplt>
    2150:	b108      	cbz	r0, 2156 <BMSModuleManager::getAllVoltTemp()+0x19a>
    2152:	f8c8 4010 	str.w	r4, [r8, #16]
  if (digitalRead(11) == LOW) {
    2156:	200b      	movs	r0, #11
    2158:	f009 f8c8 	bl	b2ec <digitalRead>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    215c:	9b04      	ldr	r3, [sp, #16]
    215e:	f893 33a0 	ldrb.w	r3, [r3, #928]	; 0x3a0
  if (digitalRead(11) == LOW) {
    2162:	2800      	cmp	r0, #0
    2164:	d152      	bne.n	220c <BMSModuleManager::getAllVoltTemp()+0x250>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    2166:	2b00      	cmp	r3, #0
    2168:	d05c      	beq.n	2224 <BMSModuleManager::getAllVoltTemp()+0x268>
    isFaulted = true;
    216a:	2301      	movs	r3, #1
    216c:	9a04      	ldr	r2, [sp, #16]
    216e:	f882 33a0 	strb.w	r3, [r2, #928]	; 0x3a0
  HighCellVolt = 0.0;
    2172:	2300      	movs	r3, #0
    2174:	f8c8 300c 	str.w	r3, [r8, #12]
    2178:	462c      	mov	r4, r5
    217a:	e002      	b.n	2182 <BMSModuleManager::getAllVoltTemp()+0x1c6>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    217c:	3490      	adds	r4, #144	; 0x90
    217e:	42bc      	cmp	r4, r7
    2180:	d015      	beq.n	21ae <BMSModuleManager::getAllVoltTemp()+0x1f2>
    if (modules[x].isExisting())
    2182:	4620      	mov	r0, r4
    2184:	f7fe fd92 	bl	cac <BMSModule::isExisting()>
    2188:	2800      	cmp	r0, #0
    218a:	d0f7      	beq.n	217c <BMSModuleManager::getAllVoltTemp()+0x1c0>
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
    218c:	4620      	mov	r0, r4
    218e:	f7fe fcdd 	bl	b4c <BMSModule::getHighCellV()>
    2192:	f8d8 100c 	ldr.w	r1, [r8, #12]
    2196:	f00c fdef 	bl	ed78 <__aeabi_fcmpgt>
    219a:	2800      	cmp	r0, #0
    219c:	d0ee      	beq.n	217c <BMSModuleManager::getAllVoltTemp()+0x1c0>
    219e:	4620      	mov	r0, r4
    21a0:	f7fe fcd4 	bl	b4c <BMSModule::getHighCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    21a4:	3490      	adds	r4, #144	; 0x90
    21a6:	42bc      	cmp	r4, r7
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
    21a8:	f8c8 000c 	str.w	r0, [r8, #12]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    21ac:	d1e9      	bne.n	2182 <BMSModuleManager::getAllVoltTemp()+0x1c6>
  LowCellVolt = 5.0;
    21ae:	4b25      	ldr	r3, [pc, #148]	; (2244 <BMSModuleManager::getAllVoltTemp()+0x288>)
    21b0:	f8c8 3008 	str.w	r3, [r8, #8]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    21b4:	e002      	b.n	21bc <BMSModuleManager::getAllVoltTemp()+0x200>
    21b6:	3590      	adds	r5, #144	; 0x90
    21b8:	42bd      	cmp	r5, r7
    21ba:	d015      	beq.n	21e8 <BMSModuleManager::getAllVoltTemp()+0x22c>
    if (modules[x].isExisting())
    21bc:	4628      	mov	r0, r5
    21be:	f7fe fd75 	bl	cac <BMSModule::isExisting()>
    21c2:	2800      	cmp	r0, #0
    21c4:	d0f7      	beq.n	21b6 <BMSModuleManager::getAllVoltTemp()+0x1fa>
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
    21c6:	4628      	mov	r0, r5
    21c8:	f7fe fca4 	bl	b14 <BMSModule::getLowCellV()>
    21cc:	f8d8 1008 	ldr.w	r1, [r8, #8]
    21d0:	f00c fdb4 	bl	ed3c <__aeabi_fcmplt>
    21d4:	2800      	cmp	r0, #0
    21d6:	d0ee      	beq.n	21b6 <BMSModuleManager::getAllVoltTemp()+0x1fa>
    21d8:	4628      	mov	r0, r5
    21da:	f7fe fc9b 	bl	b14 <BMSModule::getLowCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    21de:	3590      	adds	r5, #144	; 0x90
    21e0:	42bd      	cmp	r5, r7
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
    21e2:	f8c8 0008 	str.w	r0, [r8, #8]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    21e6:	d1e9      	bne.n	21bc <BMSModuleManager::getAllVoltTemp()+0x200>
}
    21e8:	b007      	add	sp, #28
    21ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (modules[x].getLowTemp() < lowestPackTemp && modules[x].getLowTemp() > -70) lowestPackTemp = modules[x].getLowTemp();
    21ee:	4620      	mov	r0, r4
    21f0:	f7fe fd0e 	bl	c10 <BMSModule::getLowTemp()>
    21f4:	4912      	ldr	r1, [pc, #72]	; (2240 <BMSModuleManager::getAllVoltTemp()+0x284>)
    21f6:	f00c fdbf 	bl	ed78 <__aeabi_fcmpgt>
    21fa:	2800      	cmp	r0, #0
    21fc:	f43f af74 	beq.w	20e8 <BMSModuleManager::getAllVoltTemp()+0x12c>
    2200:	4620      	mov	r0, r4
    2202:	f7fe fd05 	bl	c10 <BMSModule::getLowTemp()>
    2206:	f8c8 0018 	str.w	r0, [r8, #24]
    220a:	e76d      	b.n	20e8 <BMSModuleManager::getAllVoltTemp()+0x12c>
    if (isFaulted) Logger::info("All modules have exited a faulted state");
    220c:	b92b      	cbnz	r3, 221a <BMSModuleManager::getAllVoltTemp()+0x25e>
    isFaulted = false;
    220e:	2300      	movs	r3, #0
    2210:	e7ac      	b.n	216c <BMSModuleManager::getAllVoltTemp()+0x1b0>
    delay(50);
    2212:	2032      	movs	r0, #50	; 0x32
    2214:	f009 f8d4 	bl	b3c0 <delay>
    2218:	e6f6      	b.n	2008 <BMSModuleManager::getAllVoltTemp()+0x4c>
    if (isFaulted) Logger::info("All modules have exited a faulted state");
    221a:	480b      	ldr	r0, [pc, #44]	; (2248 <BMSModuleManager::getAllVoltTemp()+0x28c>)
    221c:	f000 fd26 	bl	2c6c <Logger::info(char*, ...)>
    isFaulted = false;
    2220:	2300      	movs	r3, #0
    2222:	e7a3      	b.n	216c <BMSModuleManager::getAllVoltTemp()+0x1b0>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    2224:	4809      	ldr	r0, [pc, #36]	; (224c <BMSModuleManager::getAllVoltTemp()+0x290>)
    2226:	f000 fd35 	bl	2c94 <Logger::error(char*, ...)>
    222a:	e79e      	b.n	216a <BMSModuleManager::getAllVoltTemp()+0x1ae>
    222c:	00015cd4 	.word	0x00015cd4
    2230:	0001585c 	.word	0x0001585c
    2234:	00015898 	.word	0x00015898
    2238:	000158ac 	.word	0x000158ac
    223c:	000158d8 	.word	0x000158d8
    2240:	c28c0000 	.word	0xc28c0000
    2244:	40a00000 	.word	0x40a00000
    2248:	0001592c 	.word	0x0001592c
    224c:	000158f4 	.word	0x000158f4

00002250 <BMSModuleManager::getBalancing()>:
  return CellsBalancing;
    2250:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
}
    2254:	f8d0 03a8 	ldr.w	r0, [r0, #936]	; 0x3a8
    2258:	4770      	bx	lr
    225a:	bf00      	nop

0000225c <BMSModuleManager::getLowCellVolt()>:
}
    225c:	6880      	ldr	r0, [r0, #8]
    225e:	4770      	bx	lr

00002260 <BMSModuleManager::getNumModules()>:

int BMSModuleManager::getNumModules()
{
  return numFoundModules;
    2260:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
}
    2264:	f8d0 039c 	ldr.w	r0, [r0, #924]	; 0x39c
    2268:	4770      	bx	lr
    226a:	bf00      	nop

0000226c <BMSModuleManager::getHighCellVolt()>:

float BMSModuleManager::getHighCellVolt()
{
  return HighCellVolt;
}
    226c:	68c0      	ldr	r0, [r0, #12]
    226e:	4770      	bx	lr

00002270 <BMSModuleManager::getPackVoltage()>:

float BMSModuleManager::getPackVoltage()
{
  return packVolt;
}
    2270:	6800      	ldr	r0, [r0, #0]
    2272:	4770      	bx	lr

00002274 <BMSModuleManager::setPstrings(int)>:
  batteryID = id;
}

void BMSModuleManager::setPstrings(int Pstrings)
{
  Pstring = Pstrings;
    2274:	6041      	str	r1, [r0, #4]
}
    2276:	4770      	bx	lr

00002278 <BMSModuleManager::setSensors(int, float)>:

void BMSModuleManager::setSensors(int sensor, float Ignore)
{
    2278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    227a:	f500 550e 	add.w	r5, r0, #9088	; 0x2380
    227e:	460f      	mov	r7, r1
    2280:	4616      	mov	r6, r2
    2282:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
    2286:	3518      	adds	r5, #24
    2288:	e002      	b.n	2290 <BMSModuleManager::setSensors(int, float)+0x18>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    228a:	3490      	adds	r4, #144	; 0x90
    228c:	42ac      	cmp	r4, r5
    228e:	d00f      	beq.n	22b0 <BMSModuleManager::setSensors(int, float)+0x38>
  {
    if (modules[x].isExisting())
    2290:	4620      	mov	r0, r4
    2292:	f7fe fd0b 	bl	cac <BMSModule::isExisting()>
    2296:	2800      	cmp	r0, #0
    2298:	d0f7      	beq.n	228a <BMSModuleManager::setSensors(int, float)+0x12>
    {
      modules[x].settempsensor(sensor);
    229a:	4620      	mov	r0, r4
    229c:	4639      	mov	r1, r7
    229e:	f7fe fd09 	bl	cb4 <BMSModule::settempsensor(int)>
      modules[x].setIgnoreCell(Ignore);
    22a2:	4620      	mov	r0, r4
    22a4:	4631      	mov	r1, r6
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    22a6:	3490      	adds	r4, #144	; 0x90
      modules[x].setIgnoreCell(Ignore);
    22a8:	f7fe fd0c 	bl	cc4 <BMSModule::setIgnoreCell(float)>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    22ac:	42ac      	cmp	r4, r5
    22ae:	d1ef      	bne.n	2290 <BMSModuleManager::setSensors(int, float)+0x18>
    }
  }
}
    22b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22b2:	bf00      	nop

000022b4 <BMSModuleManager::getAvgTemperature()>:

float BMSModuleManager::getAvgTemperature()
{
    22b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  float avg = 0.0f;
  lowTemp = 999.0f;
    22b8:	4a2a      	ldr	r2, [pc, #168]	; (2364 <BMSModuleManager::getAvgTemperature()+0xb0>)
  highTemp = -999.0f;
    22ba:	4b2b      	ldr	r3, [pc, #172]	; (2368 <BMSModuleManager::getAvgTemperature()+0xb4>)
  int y = 0; //counter for modules below -70 (no sensors connected)
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
  {
    if (modules[x].isExisting())
    {
      if (modules[x].getAvgTemp() > -70)
    22bc:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 236c <BMSModuleManager::getAvgTemperature()+0xb8>
  lowTemp = 999.0f;
    22c0:	6242      	str	r2, [r0, #36]	; 0x24
  highTemp = -999.0f;
    22c2:	f500 550e 	add.w	r5, r0, #9088	; 0x2380
{
    22c6:	4680      	mov	r8, r0
  highTemp = -999.0f;
    22c8:	6203      	str	r3, [r0, #32]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    22ca:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
    22ce:	3518      	adds	r5, #24
  int y = 0; //counter for modules below -70 (no sensors connected)
    22d0:	2600      	movs	r6, #0
  float avg = 0.0f;
    22d2:	2700      	movs	r7, #0
    22d4:	e002      	b.n	22dc <BMSModuleManager::getAvgTemperature()+0x28>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    22d6:	3490      	adds	r4, #144	; 0x90
    22d8:	42a5      	cmp	r5, r4
    22da:	d010      	beq.n	22fe <BMSModuleManager::getAvgTemperature()+0x4a>
    if (modules[x].isExisting())
    22dc:	4620      	mov	r0, r4
    22de:	f7fe fce5 	bl	cac <BMSModule::isExisting()>
    22e2:	2800      	cmp	r0, #0
    22e4:	d0f7      	beq.n	22d6 <BMSModuleManager::getAvgTemperature()+0x22>
      if (modules[x].getAvgTemp() > -70)
    22e6:	4620      	mov	r0, r4
    22e8:	f7fe fcbe 	bl	c68 <BMSModule::getAvgTemp()>
    22ec:	4649      	mov	r1, r9
    22ee:	f00c fd43 	bl	ed78 <__aeabi_fcmpgt>
    22f2:	b988      	cbnz	r0, 2318 <BMSModuleManager::getAvgTemperature()+0x64>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    22f4:	3490      	adds	r4, #144	; 0x90
    22f6:	42a5      	cmp	r5, r4
          lowTemp = modules[x].getLowTemp();
        }
      }
      else
      {
        y++;
    22f8:	f106 0601 	add.w	r6, r6, #1
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    22fc:	d1ee      	bne.n	22dc <BMSModuleManager::getAvgTemperature()+0x28>
      }
    }
  }
  avg = avg / (float)(numFoundModules - y);
    22fe:	f508 5800 	add.w	r8, r8, #8192	; 0x2000
    2302:	f8d8 039c 	ldr.w	r0, [r8, #924]	; 0x39c
    2306:	1b80      	subs	r0, r0, r6
    2308:	f00c fb26 	bl	e958 <__aeabi_i2f>
    230c:	4601      	mov	r1, r0
    230e:	4638      	mov	r0, r7
    2310:	f00c fc2a 	bl	eb68 <__aeabi_fdiv>

  return avg;
}
    2314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        avg += modules[x].getAvgTemp();
    2318:	4620      	mov	r0, r4
    231a:	f7fe fca5 	bl	c68 <BMSModule::getAvgTemp()>
    231e:	4601      	mov	r1, r0
    2320:	4638      	mov	r0, r7
    2322:	f00c fa65 	bl	e7f0 <__addsf3>
    2326:	4607      	mov	r7, r0
        if (modules[x].getHighTemp() > highTemp)
    2328:	4620      	mov	r0, r4
    232a:	f7fe fc87 	bl	c3c <BMSModule::getHighTemp()>
    232e:	f8d8 1020 	ldr.w	r1, [r8, #32]
    2332:	f00c fd21 	bl	ed78 <__aeabi_fcmpgt>
    2336:	b970      	cbnz	r0, 2356 <BMSModuleManager::getAvgTemperature()+0xa2>
        if (modules[x].getLowTemp() < lowTemp)
    2338:	4620      	mov	r0, r4
    233a:	f7fe fc69 	bl	c10 <BMSModule::getLowTemp()>
    233e:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    2342:	f00c fcfb 	bl	ed3c <__aeabi_fcmplt>
    2346:	2800      	cmp	r0, #0
    2348:	d0c5      	beq.n	22d6 <BMSModuleManager::getAvgTemperature()+0x22>
          lowTemp = modules[x].getLowTemp();
    234a:	4620      	mov	r0, r4
    234c:	f7fe fc60 	bl	c10 <BMSModule::getLowTemp()>
    2350:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    2354:	e7bf      	b.n	22d6 <BMSModuleManager::getAvgTemperature()+0x22>
          highTemp = modules[x].getHighTemp();
    2356:	4620      	mov	r0, r4
    2358:	f7fe fc70 	bl	c3c <BMSModule::getHighTemp()>
    235c:	f8c8 0020 	str.w	r0, [r8, #32]
    2360:	e7ea      	b.n	2338 <BMSModuleManager::getAvgTemperature()+0x84>
    2362:	bf00      	nop
    2364:	4479c000 	.word	0x4479c000
    2368:	c479c000 	.word	0xc479c000
    236c:	c28c0000 	.word	0xc28c0000

00002370 <BMSModuleManager::getHighTemperature()>:

float BMSModuleManager::getHighTemperature()
{
  return highTemp;
}
    2370:	6a00      	ldr	r0, [r0, #32]
    2372:	4770      	bx	lr

00002374 <BMSModuleManager::getLowTemperature()>:

float BMSModuleManager::getLowTemperature()
{
  return lowTemp;
}
    2374:	6a40      	ldr	r0, [r0, #36]	; 0x24
    2376:	4770      	bx	lr

00002378 <BMSModuleManager::getAvgCellVolt()>:

float BMSModuleManager::getAvgCellVolt()
{
    2378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    237a:	f500 560e 	add.w	r6, r0, #9088	; 0x2380
    237e:	4607      	mov	r7, r0
  float avg = 0.0f;
    2380:	2500      	movs	r5, #0
    2382:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
    2386:	3618      	adds	r6, #24
    2388:	e002      	b.n	2390 <BMSModuleManager::getAvgCellVolt()+0x18>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    238a:	3490      	adds	r4, #144	; 0x90
    238c:	42b4      	cmp	r4, r6
    238e:	d00f      	beq.n	23b0 <BMSModuleManager::getAvgCellVolt()+0x38>
  {
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
    2390:	4620      	mov	r0, r4
    2392:	f7fe fc8b 	bl	cac <BMSModule::isExisting()>
    2396:	2800      	cmp	r0, #0
    2398:	d0f7      	beq.n	238a <BMSModuleManager::getAvgCellVolt()+0x12>
    239a:	4620      	mov	r0, r4
    239c:	f7fe fbf4 	bl	b88 <BMSModule::getAverageV()>
    23a0:	4601      	mov	r1, r0
    23a2:	4628      	mov	r0, r5
    23a4:	f00c fa24 	bl	e7f0 <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    23a8:	3490      	adds	r4, #144	; 0x90
    23aa:	42b4      	cmp	r4, r6
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
    23ac:	4605      	mov	r5, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    23ae:	d1ef      	bne.n	2390 <BMSModuleManager::getAvgCellVolt()+0x18>
  }
  avg = avg / (float)numFoundModules;
    23b0:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
    23b4:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
    23b8:	f00c face 	bl	e958 <__aeabi_i2f>
    23bc:	4601      	mov	r1, r0
    23be:	4628      	mov	r0, r5
    23c0:	f00c fbd2 	bl	eb68 <__aeabi_fdiv>

  return avg;
}
    23c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23c6:	bf00      	nop

000023c8 <BMSModuleManager::printPackDetails(int)>:
    }
  }
}

void BMSModuleManager::printPackDetails(int digits)
{
    23c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23cc:	b093      	sub	sp, #76	; 0x4c
    23ce:	4680      	mov	r8, r0
  uint8_t alerts;
  uint8_t COV;
  uint8_t CUV;
  int cellNum = 0;

  Logger::console("");
    23d0:	489b      	ldr	r0, [pc, #620]	; (2640 <BMSModuleManager::printPackDetails(int)+0x278>)
{
    23d2:	910d      	str	r1, [sp, #52]	; 0x34
  Logger::console("");
  Logger::console("");
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    23d4:	f508 5700 	add.w	r7, r8, #8192	; 0x2000
  Logger::console("");
    23d8:	f000 fbdc 	bl	2b94 <Logger::console(char*, ...)>
  Logger::console("");
    23dc:	4898      	ldr	r0, [pc, #608]	; (2640 <BMSModuleManager::printPackDetails(int)+0x278>)
    23de:	f000 fbd9 	bl	2b94 <Logger::console(char*, ...)>
  Logger::console("");
    23e2:	4897      	ldr	r0, [pc, #604]	; (2640 <BMSModuleManager::printPackDetails(int)+0x278>)
    23e4:	f000 fbd6 	bl	2b94 <Logger::console(char*, ...)>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    23e8:	f108 04b8 	add.w	r4, r8, #184	; 0xb8
    23ec:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
    23f0:	920c      	str	r2, [sp, #48]	; 0x30
  spack = 0;
    23f2:	2300      	movs	r3, #0
    23f4:	f508 550e 	add.w	r5, r8, #9088	; 0x2380
    23f8:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
  for (int y = 1; y < 63; y++)
    23fc:	3518      	adds	r5, #24
  spack = 0;
    23fe:	4626      	mov	r6, r4
    2400:	46a1      	mov	r9, r4
    2402:	e002      	b.n	240a <BMSModuleManager::printPackDetails(int)+0x42>
  for (int y = 1; y < 63; y++)
    2404:	3690      	adds	r6, #144	; 0x90
    2406:	42ae      	cmp	r6, r5
    2408:	d00f      	beq.n	242a <BMSModuleManager::printPackDetails(int)+0x62>
    if (modules[y].isExisting())
    240a:	4630      	mov	r0, r6
    240c:	f7fe fc4e 	bl	cac <BMSModule::isExisting()>
    2410:	2800      	cmp	r0, #0
    2412:	d0f7      	beq.n	2404 <BMSModuleManager::printPackDetails(int)+0x3c>
      spack = spack + modules[y].getscells();
    2414:	4630      	mov	r0, r6
    2416:	f8d7 43a4 	ldr.w	r4, [r7, #932]	; 0x3a4
    241a:	f7fe fbf5 	bl	c08 <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
    241e:	3690      	adds	r6, #144	; 0x90
      spack = spack + modules[y].getscells();
    2420:	4420      	add	r0, r4
  for (int y = 1; y < 63; y++)
    2422:	42ae      	cmp	r6, r5
      spack = spack + modules[y].getscells();
    2424:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
  for (int y = 1; y < 63; y++)
    2428:	d1ef      	bne.n	240a <BMSModuleManager::printPackDetails(int)+0x42>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    242a:	f8d8 0000 	ldr.w	r0, [r8]
    242e:	f00c f8c3 	bl	e5b8 <__aeabi_f2d>
    2432:	464c      	mov	r4, r9
    2434:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  return spack;
    2438:	f8d7 b3a4 	ldr.w	fp, [r7, #932]	; 0x3a4
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    243c:	f8d8 a004 	ldr.w	sl, [r8, #4]
  float avg = 0.0f;
    2440:	2600      	movs	r6, #0
    2442:	e003      	b.n	244c <BMSModuleManager::printPackDetails(int)+0x84>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    2444:	f109 0990 	add.w	r9, r9, #144	; 0x90
    2448:	45a9      	cmp	r9, r5
    244a:	d010      	beq.n	246e <BMSModuleManager::printPackDetails(int)+0xa6>
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
    244c:	4648      	mov	r0, r9
    244e:	f7fe fc2d 	bl	cac <BMSModule::isExisting()>
    2452:	2800      	cmp	r0, #0
    2454:	d0f6      	beq.n	2444 <BMSModuleManager::printPackDetails(int)+0x7c>
    2456:	4648      	mov	r0, r9
    2458:	f7fe fb96 	bl	b88 <BMSModule::getAverageV()>
    245c:	4601      	mov	r1, r0
    245e:	4630      	mov	r0, r6
    2460:	f00c f9c6 	bl	e7f0 <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    2464:	f109 0990 	add.w	r9, r9, #144	; 0x90
    2468:	45a9      	cmp	r9, r5
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
    246a:	4606      	mov	r6, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    246c:	d1ee      	bne.n	244c <BMSModuleManager::printPackDetails(int)+0x84>
  avg = avg / (float)numFoundModules;
    246e:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
	size_t print(int n)				{ return print((long)n); }
    2472:	4f74      	ldr	r7, [pc, #464]	; (2644 <BMSModuleManager::printPackDetails(int)+0x27c>)
    2474:	f00c fa70 	bl	e958 <__aeabi_i2f>
    2478:	4601      	mov	r1, r0
    247a:	4630      	mov	r0, r6
    247c:	f00c fb74 	bl	eb68 <__aeabi_fdiv>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    2480:	f00c f89a 	bl	e5b8 <__aeabi_f2d>
    2484:	4602      	mov	r2, r0
    2486:	460b      	mov	r3, r1
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    2488:	4640      	mov	r0, r8
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    248a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    248e:	f8d8 600c 	ldr.w	r6, [r8, #12]
    2492:	f8d8 5008 	ldr.w	r5, [r8, #8]
    2496:	f7ff ff0d 	bl	22b4 <BMSModuleManager::getAvgTemperature()>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    249a:	f00c f88d 	bl	e5b8 <__aeabi_f2d>
    249e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    24a2:	4629      	mov	r1, r5
    24a4:	4630      	mov	r0, r6
    24a6:	f00c f9a1 	bl	e7ec <__aeabi_fsub>
    24aa:	4967      	ldr	r1, [pc, #412]	; (2648 <BMSModuleManager::printPackDetails(int)+0x280>)
    24ac:	f00c faa8 	bl	ea00 <__aeabi_fmul>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    24b0:	f00c f882 	bl	e5b8 <__aeabi_f2d>
    24b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
    24b8:	4630      	mov	r0, r6
    24ba:	f00c f87d 	bl	e5b8 <__aeabi_f2d>
    24be:	e9cd 0106 	strd	r0, r1, [sp, #24]
    24c2:	4628      	mov	r0, r5
    24c4:	f00c f878 	bl	e5b8 <__aeabi_f2d>
    24c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    24cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    24d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    24d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    24d8:	e9cd 2300 	strd	r2, r3, [sp]
    24dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    24de:	485b      	ldr	r0, [pc, #364]	; (264c <BMSModuleManager::printPackDetails(int)+0x284>)
    24e0:	4653      	mov	r3, sl
    24e2:	465a      	mov	r2, fp
    24e4:	f000 fb56 	bl	2b94 <Logger::console(char*, ...)>
  Logger::console("");
    24e8:	4855      	ldr	r0, [pc, #340]	; (2640 <BMSModuleManager::printPackDetails(int)+0x278>)
    24ea:	f000 fb53 	bl	2b94 <Logger::console(char*, ...)>
  int cellNum = 0;
    24ee:	2300      	movs	r3, #0
  for (int y = 1; y < 63; y++)
    24f0:	2601      	movs	r6, #1
  int cellNum = 0;
    24f2:	930c      	str	r3, [sp, #48]	; 0x30
    24f4:	e005      	b.n	2502 <BMSModuleManager::printPackDetails(int)+0x13a>
  for (int y = 1; y < 63; y++)
    24f6:	3601      	adds	r6, #1
    24f8:	2e3f      	cmp	r6, #63	; 0x3f
    24fa:	f104 0490 	add.w	r4, r4, #144	; 0x90
    24fe:	f000 8096 	beq.w	262e <BMSModuleManager::printPackDetails(int)+0x266>
  {
    if (modules[y].isExisting())
    2502:	4620      	mov	r0, r4
    2504:	f7fe fbd2 	bl	cac <BMSModule::isExisting()>
    2508:	2800      	cmp	r0, #0
    250a:	d0f4      	beq.n	24f6 <BMSModuleManager::printPackDetails(int)+0x12e>
    {
      faults = modules[y].getFaults();
    250c:	4620      	mov	r0, r4
    250e:	f7fe f91d 	bl	74c <BMSModule::getFaults()>
      alerts = modules[y].getAlerts();
    2512:	4620      	mov	r0, r4
    2514:	f7fe f91e 	bl	754 <BMSModule::getAlerts()>
      COV = modules[y].getCOVCells();
    2518:	4620      	mov	r0, r4
    251a:	f7fe f91f 	bl	75c <BMSModule::getCOVCells()>
      CUV = modules[y].getCUVCells();
    251e:	4620      	mov	r0, r4
    2520:	f7fe f920 	bl	764 <BMSModule::getCUVCells()>
    2524:	2108      	movs	r1, #8
    2526:	484a      	ldr	r0, [pc, #296]	; (2650 <BMSModuleManager::printPackDetails(int)+0x288>)
    2528:	f00a fd2c 	bl	cf84 <usb_serial_write>
    252c:	4631      	mov	r1, r6
    252e:	4638      	mov	r0, r7
    2530:	f007 ffda 	bl	a4e8 <Print::print(long)>

      SERIALCONSOLE.print("Module #");
      SERIALCONSOLE.print(y);
      if (y < 10) SERIALCONSOLE.print(" ");
    2534:	2e09      	cmp	r6, #9
    2536:	dd7d      	ble.n	2634 <BMSModuleManager::printPackDetails(int)+0x26c>
    2538:	2102      	movs	r1, #2
    253a:	4846      	ldr	r0, [pc, #280]	; (2654 <BMSModuleManager::printPackDetails(int)+0x28c>)
    253c:	f8df b118 	ldr.w	fp, [pc, #280]	; 2658 <BMSModuleManager::printPackDetails(int)+0x290>
    2540:	f00a fd20 	bl	cf84 <usb_serial_write>
      SERIALCONSOLE.print("  ");
      SERIALCONSOLE.print(modules[y].getModuleVoltage(), digits);
    2544:	4620      	mov	r0, r4
    2546:	f7fe fba1 	bl	c8c <BMSModule::getModuleVoltage()>
    254a:	f00c f835 	bl	e5b8 <__aeabi_f2d>
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    254e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    2552:	f8cd 9000 	str.w	r9, [sp]
    2556:	460b      	mov	r3, r1
    2558:	4602      	mov	r2, r0
    255a:	4638      	mov	r0, r7
    255c:	f007 fff0 	bl	a540 <Print::printFloat(double, unsigned char)>
    2560:	483e      	ldr	r0, [pc, #248]	; (265c <BMSModuleManager::printPackDetails(int)+0x294>)
    2562:	2101      	movs	r1, #1
    2564:	f00a fd0e 	bl	cf84 <usb_serial_write>
      SERIALCONSOLE.print("V");
      for (int i = 0; i < 6; i++)
    2568:	4623      	mov	r3, r4
    256a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    256e:	464c      	mov	r4, r9
    2570:	2500      	movs	r5, #0
    2572:	4699      	mov	r9, r3
    2574:	e01f      	b.n	25b6 <BMSModuleManager::printPackDetails(int)+0x1ee>
    2576:	2106      	movs	r1, #6
    2578:	4839      	ldr	r0, [pc, #228]	; (2660 <BMSModuleManager::printPackDetails(int)+0x298>)
    257a:	f00a fd03 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    257e:	4651      	mov	r1, sl
    2580:	4638      	mov	r0, r7
    2582:	f007 ffb1 	bl	a4e8 <Print::print(long)>
    2586:	2102      	movs	r1, #2
    2588:	4836      	ldr	r0, [pc, #216]	; (2664 <BMSModuleManager::printPackDetails(int)+0x29c>)
    258a:	f00a fcfb 	bl	cf84 <usb_serial_write>
      {
        if (cellNum < 10) SERIALCONSOLE.print(" ");
        SERIALCONSOLE.print("  Cell");
        SERIALCONSOLE.print(cellNum++);
        SERIALCONSOLE.print(": ");
        SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    258e:	4629      	mov	r1, r5
    2590:	4648      	mov	r0, r9
    2592:	f7fe fab9 	bl	b08 <BMSModule::getCellVoltage(int)>
    2596:	f00c f80f 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    259a:	9400      	str	r4, [sp, #0]
    259c:	4602      	mov	r2, r0
    259e:	460b      	mov	r3, r1
    25a0:	4638      	mov	r0, r7
    25a2:	f007 ffcd 	bl	a540 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 6; i++)
    25a6:	3501      	adds	r5, #1
    25a8:	482c      	ldr	r0, [pc, #176]	; (265c <BMSModuleManager::printPackDetails(int)+0x294>)
    25aa:	2101      	movs	r1, #1
    25ac:	f00a fcea 	bl	cf84 <usb_serial_write>
    25b0:	2d06      	cmp	r5, #6
    25b2:	d00a      	beq.n	25ca <BMSModuleManager::printPackDetails(int)+0x202>
        SERIALCONSOLE.print(cellNum++);
    25b4:	46c2      	mov	sl, r8
        if (cellNum < 10) SERIALCONSOLE.print(" ");
    25b6:	f1ba 0f09 	cmp.w	sl, #9
        SERIALCONSOLE.print(cellNum++);
    25ba:	f10a 0801 	add.w	r8, sl, #1
        if (cellNum < 10) SERIALCONSOLE.print(" ");
    25be:	dcda      	bgt.n	2576 <BMSModuleManager::printPackDetails(int)+0x1ae>
    25c0:	2101      	movs	r1, #1
    25c2:	4658      	mov	r0, fp
    25c4:	f00a fcde 	bl	cf84 <usb_serial_write>
    25c8:	e7d5      	b.n	2576 <BMSModuleManager::printPackDetails(int)+0x1ae>
    25ca:	2111      	movs	r1, #17
    25cc:	4826      	ldr	r0, [pc, #152]	; (2668 <BMSModuleManager::printPackDetails(int)+0x2a0>)
    25ce:	f00a fcd9 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print("V");
      }
      SERIALCONSOLE.print("  Neg Term Temp: ");
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    25d2:	2100      	movs	r1, #0
    25d4:	4648      	mov	r0, r9
    25d6:	f7fe fb5b 	bl	c90 <BMSModule::getTemperature(int)>
    25da:	f00b ffed 	bl	e5b8 <__aeabi_f2d>
    25de:	2502      	movs	r5, #2
    25e0:	4602      	mov	r2, r0
    25e2:	460b      	mov	r3, r1
    25e4:	9500      	str	r5, [sp, #0]
    25e6:	4638      	mov	r0, r7
    25e8:	f007 ffaa 	bl	a540 <Print::printFloat(double, unsigned char)>
    25ec:	2112      	movs	r1, #18
    25ee:	481f      	ldr	r0, [pc, #124]	; (266c <BMSModuleManager::printPackDetails(int)+0x2a4>)
    25f0:	f00a fcc8 	bl	cf84 <usb_serial_write>
      SERIALCONSOLE.print("C  Pos Term Temp: ");
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    25f4:	2101      	movs	r1, #1
    25f6:	4648      	mov	r0, r9
    25f8:	f7fe fb4a 	bl	c90 <BMSModule::getTemperature(int)>
    25fc:	f00b ffdc 	bl	e5b8 <__aeabi_f2d>
    2600:	9500      	str	r5, [sp, #0]
    2602:	4602      	mov	r2, r0
    2604:	460b      	mov	r3, r1
    2606:	4638      	mov	r0, r7
    2608:	f007 ff9a 	bl	a540 <Print::printFloat(double, unsigned char)>
    260c:	2101      	movs	r1, #1
    260e:	4818      	ldr	r0, [pc, #96]	; (2670 <BMSModuleManager::printPackDetails(int)+0x2a8>)
    2610:	f00a fcb8 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(cellNum++);
    2614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2616:	4638      	mov	r0, r7
    2618:	3306      	adds	r3, #6
  for (int y = 1; y < 63; y++)
    261a:	3601      	adds	r6, #1
    261c:	464c      	mov	r4, r9
        SERIALCONSOLE.print(cellNum++);
    261e:	930c      	str	r3, [sp, #48]	; 0x30
    2620:	f007 ff6a 	bl	a4f8 <Print::println()>
  for (int y = 1; y < 63; y++)
    2624:	2e3f      	cmp	r6, #63	; 0x3f
    2626:	f104 0490 	add.w	r4, r4, #144	; 0x90
    262a:	f47f af6a 	bne.w	2502 <BMSModuleManager::printPackDetails(int)+0x13a>
      SERIALCONSOLE.println("C");

    }
  }
}
    262e:	b013      	add	sp, #76	; 0x4c
    2630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2634:	2101      	movs	r1, #1
    2636:	4808      	ldr	r0, [pc, #32]	; (2658 <BMSModuleManager::printPackDetails(int)+0x290>)
    2638:	f00a fca4 	bl	cf84 <usb_serial_write>
    263c:	e77c      	b.n	2538 <BMSModuleManager::printPackDetails(int)+0x170>
    263e:	bf00      	nop
    2640:	00015cd4 	.word	0x00015cd4
    2644:	1fff89f8 	.word	0x1fff89f8
    2648:	447a0000 	.word	0x447a0000
    264c:	00015954 	.word	0x00015954
    2650:	000159f4 	.word	0x000159f4
    2654:	00016af4 	.word	0x00016af4
    2658:	0001698c 	.word	0x0001698c
    265c:	00015a00 	.word	0x00015a00
    2660:	00015a04 	.word	0x00015a04
    2664:	00015aa0 	.word	0x00015aa0
    2668:	00015a0c 	.word	0x00015a0c
    266c:	00015a20 	.word	0x00015a20
    2670:	00015a34 	.word	0x00015a34

00002674 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)>:

void BMSModuleManager::printAllCSV(unsigned long timestamp, float current, int SOC, int delim)
{
    2674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2678:	b087      	sub	sp, #28
    267a:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
    267e:	462e      	mov	r6, r5
  for (int y = 1; y < 63; y++)
    2680:	9505      	str	r5, [sp, #20]
{
    2682:	9f10      	ldr	r7, [sp, #64]	; 0x40
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2684:	f8df 9344 	ldr.w	r9, [pc, #836]	; 29cc <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x358>
    2688:	f8df a344 	ldr.w	sl, [pc, #836]	; 29d0 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x35c>
    268c:	f8df b344 	ldr.w	fp, [pc, #836]	; 29d4 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x360>
    2690:	9104      	str	r1, [sp, #16]
    2692:	9202      	str	r2, [sp, #8]
    2694:	9303      	str	r3, [sp, #12]
  for (int y = 1; y < 63; y++)
    2696:	f04f 0801 	mov.w	r8, #1
    269a:	460d      	mov	r5, r1
    269c:	e007      	b.n	26ae <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x3a>
    269e:	f108 0801 	add.w	r8, r8, #1
    26a2:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    26a6:	f106 0690 	add.w	r6, r6, #144	; 0x90
    26aa:	f000 8086 	beq.w	27ba <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x146>
  {
    if (modules[y].isExisting())
    26ae:	4630      	mov	r0, r6
    26b0:	f7fe fafc 	bl	cac <BMSModule::isExisting()>
    26b4:	2800      	cmp	r0, #0
    26b6:	d0f2      	beq.n	269e <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x2a>
    26b8:	2300      	movs	r3, #0
    26ba:	220a      	movs	r2, #10
    26bc:	4629      	mov	r1, r5
    26be:	4648      	mov	r0, r9
    26c0:	f007 ff32 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    {
      SERIALCONSOLE.print(timestamp);
      if (delim == 1)
    26c4:	2f01      	cmp	r7, #1
    26c6:	f000 8110 	beq.w	28ea <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x276>
    26ca:	2101      	movs	r1, #1
    26cc:	4650      	mov	r0, sl
    26ce:	f00a fc59 	bl	cf84 <usb_serial_write>
      }
      else
      {
        SERIALCONSOLE.print(",");
      }
      SERIALCONSOLE.print(current, 0);
    26d2:	9802      	ldr	r0, [sp, #8]
    26d4:	f00b ff70 	bl	e5b8 <__aeabi_f2d>
    26d8:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    26da:	2100      	movs	r1, #0
    26dc:	4602      	mov	r2, r0
    26de:	9100      	str	r1, [sp, #0]
    26e0:	4648      	mov	r0, r9
    26e2:	f007 ff2d 	bl	a540 <Print::printFloat(double, unsigned char)>
    26e6:	2101      	movs	r1, #1
    26e8:	4650      	mov	r0, sl
    26ea:	f00a fc4b 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    26ee:	9903      	ldr	r1, [sp, #12]
    26f0:	4648      	mov	r0, r9
    26f2:	f007 fef9 	bl	a4e8 <Print::print(long)>
    26f6:	2101      	movs	r1, #1
    26f8:	4650      	mov	r0, sl
    26fa:	f00a fc43 	bl	cf84 <usb_serial_write>
    26fe:	4641      	mov	r1, r8
    2700:	4648      	mov	r0, r9
    2702:	f007 fef1 	bl	a4e8 <Print::print(long)>
    2706:	2101      	movs	r1, #1
    2708:	4650      	mov	r0, sl
    270a:	f00a fc3b 	bl	cf84 <usb_serial_write>
  for (int y = 1; y < 63; y++)
    270e:	2400      	movs	r4, #0
      }       else       {
        SERIALCONSOLE.print(",");
      }
      for (int i = 0; i < 8; i++)
      {
        SERIALCONSOLE.print(modules[y].getCellVoltage(i));
    2710:	4621      	mov	r1, r4
    2712:	4630      	mov	r0, r6
    2714:	f7fe f9f8 	bl	b08 <BMSModule::getCellVoltage(int)>
    2718:	f00b ff4e 	bl	e5b8 <__aeabi_f2d>
    271c:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    271e:	2102      	movs	r1, #2
    2720:	4602      	mov	r2, r0
    2722:	9100      	str	r1, [sp, #0]
    2724:	4648      	mov	r0, r9
    2726:	f007 ff0b 	bl	a540 <Print::printFloat(double, unsigned char)>
        if (delim == 1)       {
    272a:	2f01      	cmp	r7, #1
    272c:	f04f 0101 	mov.w	r1, #1
    2730:	4650      	mov	r0, sl
    2732:	bf04      	itt	eq
    2734:	4639      	moveq	r1, r7
    2736:	4658      	moveq	r0, fp
      for (int i = 0; i < 8; i++)
    2738:	3401      	adds	r4, #1
    273a:	f00a fc23 	bl	cf84 <usb_serial_write>
    273e:	2c08      	cmp	r4, #8
    2740:	d1e6      	bne.n	2710 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x9c>
          SERIALCONSOLE.print(" ");
        }       else       {
          SERIALCONSOLE.print(",");
        }
      }
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    2742:	2100      	movs	r1, #0
    2744:	4630      	mov	r0, r6
    2746:	f7fe faa3 	bl	c90 <BMSModule::getTemperature(int)>
    274a:	f00b ff35 	bl	e5b8 <__aeabi_f2d>
    274e:	2402      	movs	r4, #2
    2750:	4602      	mov	r2, r0
    2752:	460b      	mov	r3, r1
    2754:	9400      	str	r4, [sp, #0]
    2756:	4648      	mov	r0, r9
    2758:	f007 fef2 	bl	a540 <Print::printFloat(double, unsigned char)>
      if (delim == 1)       {
    275c:	2f01      	cmp	r7, #1
    275e:	f000 80e7 	beq.w	2930 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x2bc>
    2762:	2101      	movs	r1, #1
    2764:	4650      	mov	r0, sl
    2766:	f00a fc0d 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(" ");
      }       else       {
        SERIALCONSOLE.print(",");
      }
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    276a:	2101      	movs	r1, #1
    276c:	4630      	mov	r0, r6
    276e:	f7fe fa8f 	bl	c90 <BMSModule::getTemperature(int)>
    2772:	f00b ff21 	bl	e5b8 <__aeabi_f2d>
    2776:	9400      	str	r4, [sp, #0]
    2778:	4602      	mov	r2, r0
    277a:	460b      	mov	r3, r1
    277c:	4648      	mov	r0, r9
    277e:	f007 fedf 	bl	a540 <Print::printFloat(double, unsigned char)>
    2782:	2101      	movs	r1, #1
    2784:	4650      	mov	r0, sl
    2786:	f00a fbfd 	bl	cf84 <usb_serial_write>
      if (delim == 1)       {
        SERIALCONSOLE.print(" ");
      }       else       {
        SERIALCONSOLE.print(",");
      }
      SERIALCONSOLE.print(modules[y].getTemperature(2));
    278a:	2102      	movs	r1, #2
    278c:	4630      	mov	r0, r6
    278e:	f7fe fa7f 	bl	c90 <BMSModule::getTemperature(int)>
    2792:	f00b ff11 	bl	e5b8 <__aeabi_f2d>
    2796:	460b      	mov	r3, r1
    2798:	2102      	movs	r1, #2
    279a:	4602      	mov	r2, r0
    279c:	9100      	str	r1, [sp, #0]
    279e:	4648      	mov	r0, r9
    27a0:	f007 fece 	bl	a540 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    27a4:	f108 0801 	add.w	r8, r8, #1
      SERIALCONSOLE.println();
    27a8:	4648      	mov	r0, r9
    27aa:	f007 fea5 	bl	a4f8 <Print::println()>
  for (int y = 1; y < 63; y++)
    27ae:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    27b2:	f106 0690 	add.w	r6, r6, #144	; 0x90
    27b6:	f47f af7a 	bne.w	26ae <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x3a>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    27ba:	9d05      	ldr	r5, [sp, #20]
    27bc:	f8df 8218 	ldr.w	r8, [pc, #536]	; 29d8 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x364>
					{ serial2_write(buffer, size); return size; }
    27c0:	f8df 920c 	ldr.w	r9, [pc, #524]	; 29d0 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x35c>
    27c4:	f8df a20c 	ldr.w	sl, [pc, #524]	; 29d4 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x360>
    }
  }
  for (int y = 1; y < 63; y++)
    27c8:	f8dd b010 	ldr.w	fp, [sp, #16]
    27cc:	2601      	movs	r6, #1
    27ce:	e005      	b.n	27dc <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x168>
    27d0:	3601      	adds	r6, #1
    27d2:	2e3f      	cmp	r6, #63	; 0x3f
    27d4:	f105 0590 	add.w	r5, r5, #144	; 0x90
    27d8:	f000 8084 	beq.w	28e4 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x270>
  {
    if (modules[y].isExisting())
    27dc:	4628      	mov	r0, r5
    27de:	f7fe fa65 	bl	cac <BMSModule::isExisting()>
    27e2:	2800      	cmp	r0, #0
    27e4:	d0f4      	beq.n	27d0 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x15c>
    27e6:	2300      	movs	r3, #0
    27e8:	220a      	movs	r2, #10
    27ea:	4659      	mov	r1, fp
    27ec:	4640      	mov	r0, r8
    27ee:	f007 fe9b 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    {
      Serial2.print(timestamp);
      if (delim == 1)
    27f2:	2f01      	cmp	r7, #1
    27f4:	f000 80b1 	beq.w	295a <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x2e6>
    27f8:	2101      	movs	r1, #1
    27fa:	4648      	mov	r0, r9
    27fc:	f009 f896 	bl	b92c <serial2_write>
      }
      else
      {
        Serial2.print(",");
      }
      Serial2.print(current, 0);
    2800:	9802      	ldr	r0, [sp, #8]
    2802:	f00b fed9 	bl	e5b8 <__aeabi_f2d>
    2806:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2808:	2100      	movs	r1, #0
    280a:	4602      	mov	r2, r0
    280c:	9100      	str	r1, [sp, #0]
    280e:	4640      	mov	r0, r8
    2810:	f007 fe96 	bl	a540 <Print::printFloat(double, unsigned char)>
    2814:	2101      	movs	r1, #1
    2816:	4648      	mov	r0, r9
    2818:	f009 f888 	bl	b92c <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    281c:	9903      	ldr	r1, [sp, #12]
    281e:	4640      	mov	r0, r8
    2820:	f007 fe62 	bl	a4e8 <Print::print(long)>
    2824:	2101      	movs	r1, #1
    2826:	4648      	mov	r0, r9
    2828:	f009 f880 	bl	b92c <serial2_write>
    282c:	4631      	mov	r1, r6
    282e:	4640      	mov	r0, r8
    2830:	f007 fe5a 	bl	a4e8 <Print::print(long)>
    2834:	2101      	movs	r1, #1
    2836:	4648      	mov	r0, r9
    2838:	f009 f878 	bl	b92c <serial2_write>
  for (int y = 1; y < 63; y++)
    283c:	2400      	movs	r4, #0
      }       else       {
        Serial2.print(",");
      }
      for (int i = 0; i < 8; i++)
      {
        Serial2.print(modules[y].getCellVoltage(i));
    283e:	4621      	mov	r1, r4
    2840:	4628      	mov	r0, r5
    2842:	f7fe f961 	bl	b08 <BMSModule::getCellVoltage(int)>
    2846:	f00b feb7 	bl	e5b8 <__aeabi_f2d>
    284a:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    284c:	2102      	movs	r1, #2
    284e:	4602      	mov	r2, r0
    2850:	9100      	str	r1, [sp, #0]
    2852:	4640      	mov	r0, r8
    2854:	f007 fe74 	bl	a540 <Print::printFloat(double, unsigned char)>
        if (delim == 1)       {
    2858:	2f01      	cmp	r7, #1
    285a:	f04f 0101 	mov.w	r1, #1
    285e:	4648      	mov	r0, r9
    2860:	bf04      	itt	eq
    2862:	4639      	moveq	r1, r7
    2864:	4650      	moveq	r0, sl
      for (int i = 0; i < 8; i++)
    2866:	3401      	adds	r4, #1
    2868:	f009 f860 	bl	b92c <serial2_write>
    286c:	2c08      	cmp	r4, #8
    286e:	d1e6      	bne.n	283e <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x1ca>
          Serial2.print(" ");
        }       else       {
          Serial2.print(",");
        }
      }
      Serial2.print(modules[y].getTemperature(0));
    2870:	2100      	movs	r1, #0
    2872:	4628      	mov	r0, r5
    2874:	f7fe fa0c 	bl	c90 <BMSModule::getTemperature(int)>
    2878:	f00b fe9e 	bl	e5b8 <__aeabi_f2d>
    287c:	2402      	movs	r4, #2
    287e:	4602      	mov	r2, r0
    2880:	460b      	mov	r3, r1
    2882:	9400      	str	r4, [sp, #0]
    2884:	4640      	mov	r0, r8
    2886:	f007 fe5b 	bl	a540 <Print::printFloat(double, unsigned char)>
      if (delim == 1)       {
    288a:	2f01      	cmp	r7, #1
    288c:	f000 8088 	beq.w	29a0 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x32c>
    2890:	2101      	movs	r1, #1
    2892:	4648      	mov	r0, r9
    2894:	f009 f84a 	bl	b92c <serial2_write>
        Serial2.print(" ");
      }       else       {
        Serial2.print(",");
      }
      Serial2.print(modules[y].getTemperature(1));
    2898:	2101      	movs	r1, #1
    289a:	4628      	mov	r0, r5
    289c:	f7fe f9f8 	bl	c90 <BMSModule::getTemperature(int)>
    28a0:	f00b fe8a 	bl	e5b8 <__aeabi_f2d>
    28a4:	9400      	str	r4, [sp, #0]
    28a6:	4602      	mov	r2, r0
    28a8:	460b      	mov	r3, r1
    28aa:	4640      	mov	r0, r8
    28ac:	f007 fe48 	bl	a540 <Print::printFloat(double, unsigned char)>
    28b0:	2101      	movs	r1, #1
    28b2:	4648      	mov	r0, r9
    28b4:	f009 f83a 	bl	b92c <serial2_write>
      if (delim == 1)       {
        Serial2.print(" ");
      }       else       {
        Serial2.print(",");
      }
      Serial2.print(modules[y].getTemperature(2));
    28b8:	2102      	movs	r1, #2
    28ba:	4628      	mov	r0, r5
    28bc:	f7fe f9e8 	bl	c90 <BMSModule::getTemperature(int)>
    28c0:	f00b fe7a 	bl	e5b8 <__aeabi_f2d>
    28c4:	460b      	mov	r3, r1
    28c6:	2102      	movs	r1, #2
    28c8:	4602      	mov	r2, r0
    28ca:	9100      	str	r1, [sp, #0]
    28cc:	4640      	mov	r0, r8
    28ce:	f007 fe37 	bl	a540 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    28d2:	3601      	adds	r6, #1
      Serial2.println();
    28d4:	4640      	mov	r0, r8
    28d6:	f007 fe0f 	bl	a4f8 <Print::println()>
  for (int y = 1; y < 63; y++)
    28da:	2e3f      	cmp	r6, #63	; 0x3f
    28dc:	f105 0590 	add.w	r5, r5, #144	; 0x90
    28e0:	f47f af7c 	bne.w	27dc <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x168>
    }
  }
}
    28e4:	b007      	add	sp, #28
    28e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28ea:	4639      	mov	r1, r7
    28ec:	4658      	mov	r0, fp
    28ee:	f00a fb49 	bl	cf84 <usb_serial_write>
      SERIALCONSOLE.print(current, 0);
    28f2:	9802      	ldr	r0, [sp, #8]
    28f4:	f00b fe60 	bl	e5b8 <__aeabi_f2d>
    28f8:	460b      	mov	r3, r1
    28fa:	2100      	movs	r1, #0
    28fc:	4602      	mov	r2, r0
    28fe:	9100      	str	r1, [sp, #0]
    2900:	4648      	mov	r0, r9
    2902:	f007 fe1d 	bl	a540 <Print::printFloat(double, unsigned char)>
    2906:	4639      	mov	r1, r7
    2908:	4658      	mov	r0, fp
    290a:	f00a fb3b 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    290e:	9903      	ldr	r1, [sp, #12]
    2910:	4648      	mov	r0, r9
    2912:	f007 fde9 	bl	a4e8 <Print::print(long)>
    2916:	4639      	mov	r1, r7
    2918:	4658      	mov	r0, fp
    291a:	f00a fb33 	bl	cf84 <usb_serial_write>
    291e:	4641      	mov	r1, r8
    2920:	4648      	mov	r0, r9
    2922:	f007 fde1 	bl	a4e8 <Print::print(long)>
    2926:	4639      	mov	r1, r7
    2928:	4658      	mov	r0, fp
    292a:	f00a fb2b 	bl	cf84 <usb_serial_write>
    292e:	e6ee      	b.n	270e <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x9a>
    2930:	4639      	mov	r1, r7
    2932:	4658      	mov	r0, fp
    2934:	f00a fb26 	bl	cf84 <usb_serial_write>
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    2938:	4639      	mov	r1, r7
    293a:	4630      	mov	r0, r6
    293c:	f7fe f9a8 	bl	c90 <BMSModule::getTemperature(int)>
    2940:	f00b fe3a 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2944:	9400      	str	r4, [sp, #0]
    2946:	4602      	mov	r2, r0
    2948:	460b      	mov	r3, r1
    294a:	4648      	mov	r0, r9
    294c:	f007 fdf8 	bl	a540 <Print::printFloat(double, unsigned char)>
    2950:	4639      	mov	r1, r7
    2952:	4658      	mov	r0, fp
    2954:	f00a fb16 	bl	cf84 <usb_serial_write>
    2958:	e717      	b.n	278a <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x116>
    295a:	4639      	mov	r1, r7
    295c:	4650      	mov	r0, sl
    295e:	f008 ffe5 	bl	b92c <serial2_write>
      Serial2.print(current, 0);
    2962:	9802      	ldr	r0, [sp, #8]
    2964:	f00b fe28 	bl	e5b8 <__aeabi_f2d>
    2968:	460b      	mov	r3, r1
    296a:	2100      	movs	r1, #0
    296c:	4602      	mov	r2, r0
    296e:	9100      	str	r1, [sp, #0]
    2970:	4640      	mov	r0, r8
    2972:	f007 fde5 	bl	a540 <Print::printFloat(double, unsigned char)>
    2976:	4639      	mov	r1, r7
    2978:	4650      	mov	r0, sl
    297a:	f008 ffd7 	bl	b92c <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    297e:	9903      	ldr	r1, [sp, #12]
    2980:	4640      	mov	r0, r8
    2982:	f007 fdb1 	bl	a4e8 <Print::print(long)>
    2986:	4639      	mov	r1, r7
    2988:	4650      	mov	r0, sl
    298a:	f008 ffcf 	bl	b92c <serial2_write>
    298e:	4631      	mov	r1, r6
    2990:	4640      	mov	r0, r8
    2992:	f007 fda9 	bl	a4e8 <Print::print(long)>
    2996:	4639      	mov	r1, r7
    2998:	4650      	mov	r0, sl
    299a:	f008 ffc7 	bl	b92c <serial2_write>
    299e:	e74d      	b.n	283c <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x1c8>
    29a0:	4639      	mov	r1, r7
    29a2:	4650      	mov	r0, sl
    29a4:	f008 ffc2 	bl	b92c <serial2_write>
      Serial2.print(modules[y].getTemperature(1));
    29a8:	4639      	mov	r1, r7
    29aa:	4628      	mov	r0, r5
    29ac:	f7fe f970 	bl	c90 <BMSModule::getTemperature(int)>
    29b0:	f00b fe02 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    29b4:	9400      	str	r4, [sp, #0]
    29b6:	4602      	mov	r2, r0
    29b8:	460b      	mov	r3, r1
    29ba:	4640      	mov	r0, r8
    29bc:	f007 fdc0 	bl	a540 <Print::printFloat(double, unsigned char)>
    29c0:	4639      	mov	r1, r7
    29c2:	4650      	mov	r0, sl
    29c4:	f008 ffb2 	bl	b92c <serial2_write>
    29c8:	e776      	b.n	28b8 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)+0x244>
    29ca:	bf00      	nop
    29cc:	1fff89f8 	.word	0x1fff89f8
    29d0:	00015a38 	.word	0x00015a38
    29d4:	0001698c 	.word	0x0001698c
    29d8:	1fff88b8 	.word	0x1fff88b8

000029dc <Logger::setLoglevel(Logger::LogLevel)>:

/*
   Set the log level. Any output below the specified log level will be omitted.
*/
void Logger::setLoglevel(LogLevel level) {
  logLevel = level;
    29dc:	4b01      	ldr	r3, [pc, #4]	; (29e4 <Logger::setLoglevel(Logger::LogLevel)+0x8>)
    29de:	7018      	strb	r0, [r3, #0]
}
    29e0:	4770      	bx	lr
    29e2:	bf00      	nop
    29e4:	1fff8824 	.word	0x1fff8824

000029e8 <Logger::isDebug()>:
   if (Logger::isDebug()) {
      Logger::debug("current time: %d", millis());
   }
*/
boolean Logger::isDebug() {
  return logLevel == Debug;
    29e8:	4b02      	ldr	r3, [pc, #8]	; (29f4 <Logger::isDebug()+0xc>)
    29ea:	7818      	ldrb	r0, [r3, #0]
}
    29ec:	fab0 f080 	clz	r0, r0
    29f0:	0940      	lsrs	r0, r0, #5
    29f2:	4770      	bx	lr
    29f4:	1fff8824 	.word	0x1fff8824

000029f8 <Logger::logMessage(char*, std::__va_list)>:
   %c - prints the next parameter as a character
   %t - prints the next parameter as boolean ('T' or 'F')
   %T - prints the next parameter as boolean ('true' or 'false')
*/
void Logger::logMessage(char *format, va_list args) {
  for (; *format != 0; ++format) {
    29f8:	7802      	ldrb	r2, [r0, #0]
    29fa:	2a00      	cmp	r2, #0
    29fc:	f000 80b8 	beq.w	2b70 <Logger::logMessage(char*, std::__va_list)+0x178>
void Logger::logMessage(char *format, va_list args) {
    2a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2a04:	4f5c      	ldr	r7, [pc, #368]	; (2b78 <Logger::logMessage(char*, std::__va_list)+0x180>)
    2a06:	f8df 8174 	ldr.w	r8, [pc, #372]	; 2b7c <Logger::logMessage(char*, std::__va_list)+0x184>
    2a0a:	4e5d      	ldr	r6, [pc, #372]	; (2b80 <Logger::logMessage(char*, std::__va_list)+0x188>)
    2a0c:	b083      	sub	sp, #12
    2a0e:	4603      	mov	r3, r0
    2a10:	460d      	mov	r5, r1
    if (*format == '%') {
    2a12:	2a25      	cmp	r2, #37	; 0x25
    2a14:	d134      	bne.n	2a80 <Logger::logMessage(char*, std::__va_list)+0x88>
      ++format;
      if (*format == '\0')
    2a16:	7858      	ldrb	r0, [r3, #1]
      ++format;
    2a18:	1c5c      	adds	r4, r3, #1
      if (*format == '\0')
    2a1a:	2800      	cmp	r0, #0
    2a1c:	d038      	beq.n	2a90 <Logger::logMessage(char*, std::__va_list)+0x98>
        break;
      if (*format == '%') {
    2a1e:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    2a22:	2b55      	cmp	r3, #85	; 0x55
    2a24:	d82e      	bhi.n	2a84 <Logger::logMessage(char*, std::__va_list)+0x8c>
    2a26:	e8df f003 	tbb	[pc, r3]
    2a2a:	2d9f      	.short	0x2d9f
    2a2c:	2d2d2d2d 	.word	0x2d2d2d2d
    2a30:	2d2d2d2d 	.word	0x2d2d2d2d
    2a34:	2d2d2d2d 	.word	0x2d2d2d2d
    2a38:	2d2d2d2d 	.word	0x2d2d2d2d
    2a3c:	2d2d2d2d 	.word	0x2d2d2d2d
    2a40:	2d2d2d2d 	.word	0x2d2d2d2d
    2a44:	932d2d2d 	.word	0x932d2d2d
    2a48:	2d2d2d2d 	.word	0x2d2d2d2d
    2a4c:	2d2d2d2d 	.word	0x2d2d2d2d
    2a50:	2d2d2d2d 	.word	0x2d2d2d2d
    2a54:	2d2d2d2d 	.word	0x2d2d2d2d
    2a58:	2d2d882d 	.word	0x2d2d882d
    2a5c:	2d2d7c2d 	.word	0x2d2d7c2d
    2a60:	2d2d2d2d 	.word	0x2d2d2d2d
    2a64:	742d2d2d 	.word	0x742d2d2d
    2a68:	5e2d3939 	.word	0x5e2d3939
    2a6c:	2d392d2d 	.word	0x2d392d2d
    2a70:	2d2d392d 	.word	0x2d2d392d
    2a74:	2d2d2d2d 	.word	0x2d2d2d2d
    2a78:	2d2d3f49 	.word	0x2d2d3f49
    2a7c:	692d562d 	.word	0x692d562d
        }
        continue;
      }

    }
    SERIALCONSOLE.print(*format);
    2a80:	7818      	ldrb	r0, [r3, #0]
    2a82:	461c      	mov	r4, r3
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2a84:	f00a fb02 	bl	d08c <usb_serial_putchar>
  for (; *format != 0; ++format) {
    2a88:	7862      	ldrb	r2, [r4, #1]
    2a8a:	1c63      	adds	r3, r4, #1
    2a8c:	2a00      	cmp	r2, #0
    2a8e:	d1c0      	bne.n	2a12 <Logger::logMessage(char*, std::__va_list)+0x1a>
  }
  SERIALCONSOLE.println();
    2a90:	483c      	ldr	r0, [pc, #240]	; (2b84 <Logger::logMessage(char*, std::__va_list)+0x18c>)
}
    2a92:	b003      	add	sp, #12
    2a94:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SERIALCONSOLE.println();
    2a98:	f007 bd2e 	b.w	a4f8 <Print::println()>
	size_t print(int n)				{ return print((long)n); }
    2a9c:	f855 1b04 	ldr.w	r1, [r5], #4
    2aa0:	4838      	ldr	r0, [pc, #224]	; (2b84 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2aa2:	f007 fd21 	bl	a4e8 <Print::print(long)>
        continue;
    2aa6:	e7ef      	b.n	2a88 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    2aa8:	f855 1b04 	ldr.w	r1, [r5], #4
    2aac:	2901      	cmp	r1, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2aae:	bf0e      	itee	eq
    2ab0:	4835      	ldreq	r0, [pc, #212]	; (2b88 <Logger::logMessage(char*, std::__va_list)+0x190>)
    2ab2:	2101      	movne	r1, #1
    2ab4:	4630      	movne	r0, r6
    2ab6:	f00a fa65 	bl	cf84 <usb_serial_write>
    2aba:	e7e5      	b.n	2a88 <Logger::logMessage(char*, std::__va_list)+0x90>
        register char *s = (char *) va_arg( args, int );
    2abc:	f855 9b04 	ldr.w	r9, [r5], #4
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2ac0:	f1b9 0f00 	cmp.w	r9, #0
    2ac4:	d0e0      	beq.n	2a88 <Logger::logMessage(char*, std::__va_list)+0x90>
							  return write((const uint8_t *)str, strlen(str)); }
    2ac6:	4648      	mov	r0, r9
    2ac8:	f00d f95a 	bl	fd80 <strlen>
    2acc:	4601      	mov	r1, r0
    2ace:	4648      	mov	r0, r9
    2ad0:	f00a fa58 	bl	cf84 <usb_serial_write>
    2ad4:	e7d8      	b.n	2a88 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    2ad6:	f855 1b04 	ldr.w	r1, [r5], #4
    2ada:	482a      	ldr	r0, [pc, #168]	; (2b84 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2adc:	2300      	movs	r3, #0
    2ade:	2210      	movs	r2, #16
    2ae0:	f007 fd22 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    2ae4:	e7d0      	b.n	2a88 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 3);
    2ae6:	3507      	adds	r5, #7
    2ae8:	f025 0507 	bic.w	r5, r5, #7
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2aec:	2103      	movs	r1, #3
    2aee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    2af2:	4824      	ldr	r0, [pc, #144]	; (2b84 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2af4:	9100      	str	r1, [sp, #0]
    2af6:	f007 fd23 	bl	a540 <Print::printFloat(double, unsigned char)>
        continue;
    2afa:	e7c5      	b.n	2a88 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 0);
    2afc:	3507      	adds	r5, #7
    2afe:	f025 0507 	bic.w	r5, r5, #7
    2b02:	2100      	movs	r1, #0
    2b04:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    2b08:	481e      	ldr	r0, [pc, #120]	; (2b84 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2b0a:	9100      	str	r1, [sp, #0]
    2b0c:	f007 fd18 	bl	a540 <Print::printFloat(double, unsigned char)>
        continue;
    2b10:	e7ba      	b.n	2a88 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    2b12:	f855 1b04 	ldr.w	r1, [r5], #4
    2b16:	481b      	ldr	r0, [pc, #108]	; (2b84 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2b18:	2300      	movs	r3, #0
    2b1a:	2202      	movs	r2, #2
    2b1c:	f007 fd04 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    2b20:	e7b2      	b.n	2a88 <Logger::logMessage(char*, std::__va_list)+0x90>
    2b22:	2102      	movs	r1, #2
    2b24:	4819      	ldr	r0, [pc, #100]	; (2b8c <Logger::logMessage(char*, std::__va_list)+0x194>)
    2b26:	f00a fa2d 	bl	cf84 <usb_serial_write>
    2b2a:	f855 1b04 	ldr.w	r1, [r5], #4
    2b2e:	4815      	ldr	r0, [pc, #84]	; (2b84 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2b30:	2300      	movs	r3, #0
    2b32:	2210      	movs	r2, #16
    2b34:	f007 fcf8 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    2b38:	e7a6      	b.n	2a88 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    2b3a:	f855 3b04 	ldr.w	r3, [r5], #4
    2b3e:	2b01      	cmp	r3, #1
    2b40:	bf07      	ittee	eq
    2b42:	2104      	moveq	r1, #4
    2b44:	4640      	moveq	r0, r8
    2b46:	2105      	movne	r1, #5
    2b48:	4638      	movne	r0, r7
    2b4a:	f00a fa1b 	bl	cf84 <usb_serial_write>
    2b4e:	e79b      	b.n	2a88 <Logger::logMessage(char*, std::__va_list)+0x90>
    2b50:	2102      	movs	r1, #2
    2b52:	480f      	ldr	r0, [pc, #60]	; (2b90 <Logger::logMessage(char*, std::__va_list)+0x198>)
    2b54:	f00a fa16 	bl	cf84 <usb_serial_write>
    2b58:	f855 1b04 	ldr.w	r1, [r5], #4
    2b5c:	4809      	ldr	r0, [pc, #36]	; (2b84 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2b5e:	2300      	movs	r3, #0
    2b60:	2202      	movs	r2, #2
    2b62:	f007 fce1 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    2b66:	e78f      	b.n	2a88 <Logger::logMessage(char*, std::__va_list)+0x90>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2b68:	2025      	movs	r0, #37	; 0x25
    2b6a:	f00a fa8f 	bl	d08c <usb_serial_putchar>
        continue;
    2b6e:	e78b      	b.n	2a88 <Logger::logMessage(char*, std::__va_list)+0x90>
  SERIALCONSOLE.println();
    2b70:	4804      	ldr	r0, [pc, #16]	; (2b84 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2b72:	f007 bcc1 	b.w	a4f8 <Print::println()>
    2b76:	bf00      	nop
    2b78:	00015a54 	.word	0x00015a54
    2b7c:	00015a4c 	.word	0x00015a4c
    2b80:	00015a48 	.word	0x00015a48
    2b84:	1fff89f8 	.word	0x1fff89f8
    2b88:	00015a44 	.word	0x00015a44
    2b8c:	00015a3c 	.word	0x00015a3c
    2b90:	00015a40 	.word	0x00015a40

00002b94 <Logger::console(char*, ...)>:
void Logger::console(char *message, ...) {
    2b94:	b40f      	push	{r0, r1, r2, r3}
    2b96:	b500      	push	{lr}
    2b98:	b083      	sub	sp, #12
    2b9a:	a904      	add	r1, sp, #16
    2b9c:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, message);
    2ba0:	9101      	str	r1, [sp, #4]
  Logger::logMessage(message, args);
    2ba2:	f7ff ff29 	bl	29f8 <Logger::logMessage(char*, std::__va_list)>
}
    2ba6:	b003      	add	sp, #12
    2ba8:	f85d eb04 	ldr.w	lr, [sp], #4
    2bac:	b004      	add	sp, #16
    2bae:	4770      	bx	lr

00002bb0 <Logger::log(Logger::LogLevel, char*, std::__va_list)>:
void Logger::log(LogLevel level, char *format, va_list args) {
    2bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2bb2:	4b1c      	ldr	r3, [pc, #112]	; (2c24 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x74>)
  lastLogTime = millis();
    2bb4:	4f1c      	ldr	r7, [pc, #112]	; (2c28 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x78>)
    2bb6:	681b      	ldr	r3, [r3, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    2bb8:	b083      	sub	sp, #12
    2bba:	4604      	mov	r4, r0
    2bbc:	9301      	str	r3, [sp, #4]
	return ret;
    2bbe:	9b01      	ldr	r3, [sp, #4]
  lastLogTime = millis();
    2bc0:	603b      	str	r3, [r7, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    2bc2:	460d      	mov	r5, r1
    2bc4:	4616      	mov	r6, r2
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2bc6:	4619      	mov	r1, r3
    2bc8:	220a      	movs	r2, #10
    2bca:	2300      	movs	r3, #0
    2bcc:	4817      	ldr	r0, [pc, #92]	; (2c2c <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x7c>)
    2bce:	f007 fcab 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2bd2:	2103      	movs	r1, #3
    2bd4:	4816      	ldr	r0, [pc, #88]	; (2c30 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x80>)
    2bd6:	f00a f9d5 	bl	cf84 <usb_serial_write>
  switch (level) {
    2bda:	2c03      	cmp	r4, #3
    2bdc:	d807      	bhi.n	2bee <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    2bde:	e8df f004 	tbb	[pc, r4]
    2be2:	161b      	.short	0x161b
    2be4:	1102      	.short	0x1102
    2be6:	4813      	ldr	r0, [pc, #76]	; (2c34 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x84>)
    2be8:	2107      	movs	r1, #7
    2bea:	f00a f9cb 	bl	cf84 <usb_serial_write>
    2bee:	2102      	movs	r1, #2
    2bf0:	4811      	ldr	r0, [pc, #68]	; (2c38 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x88>)
    2bf2:	f00a f9c7 	bl	cf84 <usb_serial_write>
  logMessage(format, args);
    2bf6:	4631      	mov	r1, r6
    2bf8:	4628      	mov	r0, r5
}
    2bfa:	b003      	add	sp, #12
    2bfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  logMessage(format, args);
    2c00:	f7ff befa 	b.w	29f8 <Logger::logMessage(char*, std::__va_list)>
    2c04:	2105      	movs	r1, #5
    2c06:	480d      	ldr	r0, [pc, #52]	; (2c3c <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x8c>)
    2c08:	f00a f9bc 	bl	cf84 <usb_serial_write>
    2c0c:	e7ef      	b.n	2bee <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    2c0e:	2104      	movs	r1, #4
    2c10:	480b      	ldr	r0, [pc, #44]	; (2c40 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x90>)
    2c12:	f00a f9b7 	bl	cf84 <usb_serial_write>
    2c16:	e7ea      	b.n	2bee <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    2c18:	2105      	movs	r1, #5
    2c1a:	480a      	ldr	r0, [pc, #40]	; (2c44 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x94>)
    2c1c:	f00a f9b2 	bl	cf84 <usb_serial_write>
    2c20:	e7e5      	b.n	2bee <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    2c22:	bf00      	nop
    2c24:	1fffba38 	.word	0x1fffba38
    2c28:	1fff9188 	.word	0x1fff9188
    2c2c:	1fff89f8 	.word	0x1fff89f8
    2c30:	00015830 	.word	0x00015830
    2c34:	00015a6c 	.word	0x00015a6c
    2c38:	00015aa0 	.word	0x00015aa0
    2c3c:	00015a74 	.word	0x00015a74
    2c40:	00015a64 	.word	0x00015a64
    2c44:	00015a5c 	.word	0x00015a5c

00002c48 <Logger::debug(char*, ...)>:
void Logger::debug(char *message, ...) {
    2c48:	b40f      	push	{r0, r1, r2, r3}
    2c4a:	b500      	push	{lr}
  if (logLevel > Debug)
    2c4c:	4b06      	ldr	r3, [pc, #24]	; (2c68 <Logger::debug(char*, ...)+0x20>)
    2c4e:	7818      	ldrb	r0, [r3, #0]
void Logger::debug(char *message, ...) {
    2c50:	b083      	sub	sp, #12
  if (logLevel > Debug)
    2c52:	b920      	cbnz	r0, 2c5e <Logger::debug(char*, ...)+0x16>
  va_start(args, message);
    2c54:	aa05      	add	r2, sp, #20
  Logger::log(Debug, message, args);
    2c56:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    2c58:	9201      	str	r2, [sp, #4]
  Logger::log(Debug, message, args);
    2c5a:	f7ff ffa9 	bl	2bb0 <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    2c5e:	b003      	add	sp, #12
    2c60:	f85d eb04 	ldr.w	lr, [sp], #4
    2c64:	b004      	add	sp, #16
    2c66:	4770      	bx	lr
    2c68:	1fff8824 	.word	0x1fff8824

00002c6c <Logger::info(char*, ...)>:
void Logger::info(char *message, ...) {
    2c6c:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Info)
    2c6e:	4b08      	ldr	r3, [pc, #32]	; (2c90 <Logger::info(char*, ...)+0x24>)
void Logger::info(char *message, ...) {
    2c70:	b500      	push	{lr}
  if (logLevel > Info)
    2c72:	781b      	ldrb	r3, [r3, #0]
    2c74:	2b01      	cmp	r3, #1
void Logger::info(char *message, ...) {
    2c76:	b083      	sub	sp, #12
  if (logLevel > Info)
    2c78:	d805      	bhi.n	2c86 <Logger::info(char*, ...)+0x1a>
  va_start(args, message);
    2c7a:	aa05      	add	r2, sp, #20
  Logger::log(Info, message, args);
    2c7c:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    2c7e:	9201      	str	r2, [sp, #4]
  Logger::log(Info, message, args);
    2c80:	2001      	movs	r0, #1
    2c82:	f7ff ff95 	bl	2bb0 <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    2c86:	b003      	add	sp, #12
    2c88:	f85d eb04 	ldr.w	lr, [sp], #4
    2c8c:	b004      	add	sp, #16
    2c8e:	4770      	bx	lr
    2c90:	1fff8824 	.word	0x1fff8824

00002c94 <Logger::error(char*, ...)>:
void Logger::error(char *message, ...) {
    2c94:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Error)
    2c96:	4b08      	ldr	r3, [pc, #32]	; (2cb8 <Logger::error(char*, ...)+0x24>)
void Logger::error(char *message, ...) {
    2c98:	b500      	push	{lr}
  if (logLevel > Error)
    2c9a:	781b      	ldrb	r3, [r3, #0]
    2c9c:	2b03      	cmp	r3, #3
void Logger::error(char *message, ...) {
    2c9e:	b083      	sub	sp, #12
  if (logLevel > Error)
    2ca0:	d805      	bhi.n	2cae <Logger::error(char*, ...)+0x1a>
  va_start(args, message);
    2ca2:	aa05      	add	r2, sp, #20
  Logger::log(Error, message, args);
    2ca4:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    2ca6:	9201      	str	r2, [sp, #4]
  Logger::log(Error, message, args);
    2ca8:	2003      	movs	r0, #3
    2caa:	f7ff ff81 	bl	2bb0 <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    2cae:	b003      	add	sp, #12
    2cb0:	f85d eb04 	ldr.w	lr, [sp], #4
    2cb4:	b004      	add	sp, #16
    2cb6:	4770      	bx	lr
    2cb8:	1fff8824 	.word	0x1fff8824

00002cbc <SerialConsole::SerialConsole()>:

bool printPrettyDisplay;
uint32_t prettyCounter;
int whichDisplay;

SerialConsole::SerialConsole() {
    2cbc:	b430      	push	{r4, r5}
    //State variables for serial console
    ptrBuffer = 0;
    state = STATE_ROOT_MENU;
    loopcount=0;
    cancel=false;
    printPrettyDisplay = false;
    2cbe:	4d07      	ldr	r5, [pc, #28]	; (2cdc <SerialConsole::SerialConsole()+0x20>)
    prettyCounter = 0;
    2cc0:	4c07      	ldr	r4, [pc, #28]	; (2ce0 <SerialConsole::SerialConsole()+0x24>)
    whichDisplay = 0;
    2cc2:	4908      	ldr	r1, [pc, #32]	; (2ce4 <SerialConsole::SerialConsole()+0x28>)
    ptrBuffer = 0;
    2cc4:	2300      	movs	r3, #0
    printPrettyDisplay = false;
    2cc6:	702b      	strb	r3, [r5, #0]
    prettyCounter = 0;
    2cc8:	6023      	str	r3, [r4, #0]
    ptrBuffer = 0;
    2cca:	6503      	str	r3, [r0, #80]	; 0x50
}
    2ccc:	bc30      	pop	{r4, r5}
    state = STATE_ROOT_MENU;
    2cce:	6543      	str	r3, [r0, #84]	; 0x54
    loopcount=0;
    2cd0:	6583      	str	r3, [r0, #88]	; 0x58
    cancel=false;
    2cd2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    whichDisplay = 0;
    2cd6:	600b      	str	r3, [r1, #0]
}
    2cd8:	4770      	bx	lr
    2cda:	bf00      	nop
    2cdc:	1fff9190 	.word	0x1fff9190
    2ce0:	1fff918c 	.word	0x1fff918c
    2ce4:	1fff9194 	.word	0x1fff9194

00002ce8 <isrCP()>:
  }
}


void isrCP ()
{
    2ce8:	b570      	push	{r4, r5, r6, lr}
  if (  digitalRead(IN4) == LOW)
    2cea:	2013      	movs	r0, #19
    2cec:	f008 fafe 	bl	b2ec <digitalRead>
    2cf0:	b958      	cbnz	r0, 2d0a <isrCP()+0x22>
  {
    duration = micros() - pilottimer;
    2cf2:	4c11      	ldr	r4, [pc, #68]	; (2d38 <isrCP()+0x50>)
    2cf4:	f008 fb44 	bl	b380 <micros>
    2cf8:	6822      	ldr	r2, [r4, #0]
    2cfa:	4b10      	ldr	r3, [pc, #64]	; (2d3c <isrCP()+0x54>)
    2cfc:	1a80      	subs	r0, r0, r2
    2cfe:	b280      	uxth	r0, r0
    2d00:	8018      	strh	r0, [r3, #0]
    pilottimer = micros();
    2d02:	f008 fb3d 	bl	b380 <micros>
    2d06:	6020      	str	r0, [r4, #0]
  }
  else
  {
    accurlim = ((duration - (micros() - pilottimer + 35)) * 60) / duration; //pilottimer + "xx" optocoupler decade ms
  }
}  // ******** end of isr CP ********
    2d08:	bd70      	pop	{r4, r5, r6, pc}
    accurlim = ((duration - (micros() - pilottimer + 35)) * 60) / duration; //pilottimer + "xx" optocoupler decade ms
    2d0a:	4d0c      	ldr	r5, [pc, #48]	; (2d3c <isrCP()+0x54>)
    2d0c:	4b0a      	ldr	r3, [pc, #40]	; (2d38 <isrCP()+0x50>)
    2d0e:	882c      	ldrh	r4, [r5, #0]
    2d10:	681e      	ldr	r6, [r3, #0]
    2d12:	f008 fb35 	bl	b380 <micros>
    2d16:	b2a4      	uxth	r4, r4
    2d18:	4434      	add	r4, r6
    2d1a:	1a20      	subs	r0, r4, r0
    2d1c:	882a      	ldrh	r2, [r5, #0]
    2d1e:	4908      	ldr	r1, [pc, #32]	; (2d40 <isrCP()+0x58>)
    2d20:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
    2d24:	009b      	lsls	r3, r3, #2
    2d26:	b292      	uxth	r2, r2
    2d28:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
    2d2c:	fbb3 f3f2 	udiv	r3, r3, r2
    2d30:	b29b      	uxth	r3, r3
    2d32:	800b      	strh	r3, [r1, #0]
}  // ******** end of isr CP ********
    2d34:	bd70      	pop	{r4, r5, r6, pc}
    2d36:	bf00      	nop
    2d38:	1fffb730 	.word	0x1fffb730
    2d3c:	1fffb63a 	.word	0x1fffb63a
    2d40:	1fff91d8 	.word	0x1fff91d8

00002d44 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>:
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
	long in_range = in_max - in_min;
	long out_range = out_max - out_min;
    2d44:	f8dd c000 	ldr.w	ip, [sp]
	if (in_range == 0) return out_min + out_range / 2;
    2d48:	1a52      	subs	r2, r2, r1
	long out_range = out_max - out_min;
    2d4a:	ebac 0c03 	sub.w	ip, ip, r3
	if (in_range == 0) return out_min + out_range / 2;
    2d4e:	d01c      	beq.n	2d8a <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x46>
	long num = (x - in_min) * out_range;
    2d50:	1a40      	subs	r0, r0, r1
	if (out_range >= 0) {
    2d52:	f1bc 0f00 	cmp.w	ip, #0
	long num = (x - in_min) * out_range;
    2d56:	fb0c f000 	mul.w	r0, ip, r0
		num += in_range / 2;
    2d5a:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
	if (out_range >= 0) {
    2d5e:	db09      	blt.n	2d74 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x30>
		num += in_range / 2;
    2d60:	eb00 0061 	add.w	r0, r0, r1, asr #1
	} else {
		num -= in_range / 2;
	}
	long result = num / in_range + out_min;
	if (out_range >= 0) {
		if (in_range * num < 0) return result - 1;
    2d64:	fb00 f102 	mul.w	r1, r0, r2
    2d68:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    2d6a:	fb90 f0f2 	sdiv	r0, r0, r2
    2d6e:	4418      	add	r0, r3
		if (in_range * num < 0) return result - 1;
    2d70:	db10      	blt.n	2d94 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x50>
		if (in_range * num >= 0) return result + 1;
	}
	return result;
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
}
    2d72:	4770      	bx	lr
		num -= in_range / 2;
    2d74:	eba0 0061 	sub.w	r0, r0, r1, asr #1
		if (in_range * num >= 0) return result + 1;
    2d78:	fb00 f102 	mul.w	r1, r0, r2
    2d7c:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    2d7e:	fb90 f0f2 	sdiv	r0, r0, r2
    2d82:	4418      	add	r0, r3
		if (in_range * num >= 0) return result + 1;
    2d84:	dbf5      	blt.n	2d72 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x2e>
    2d86:	3001      	adds	r0, #1
}
    2d88:	4770      	bx	lr
	if (in_range == 0) return out_min + out_range / 2;
    2d8a:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
    2d8e:	eb03 006c 	add.w	r0, r3, ip, asr #1
    2d92:	4770      	bx	lr
		if (in_range * num < 0) return result - 1;
    2d94:	3801      	subs	r0, #1
    2d96:	4770      	bx	lr

00002d98 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    2d98:	b538      	push	{r3, r4, r5, lr}
    2d9a:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2d9c:	b149      	cbz	r1, 2db2 <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    2d9e:	4608      	mov	r0, r1
    2da0:	460d      	mov	r5, r1
    2da2:	f00c ffed 	bl	fd80 <strlen>
    2da6:	6823      	ldr	r3, [r4, #0]
    2da8:	4602      	mov	r2, r0
    2daa:	685b      	ldr	r3, [r3, #4]
    2dac:	4629      	mov	r1, r5
    2dae:	4620      	mov	r0, r4
    2db0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    2db2:	4620      	mov	r0, r4
    2db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2db8:	f007 bb9e 	b.w	a4f8 <Print::println()>

00002dbc <loadSettings()>:
{
    2dbc:	b538      	push	{r3, r4, r5, lr}
  Logger::console("Resetting to factory defaults");
    2dbe:	4847      	ldr	r0, [pc, #284]	; (2edc <loadSettings()+0x120>)
  settings.OverVSetpoint = 4.2f;
    2dc0:	4c47      	ldr	r4, [pc, #284]	; (2ee0 <loadSettings()+0x124>)
  Logger::console("Resetting to factory defaults");
    2dc2:	f7ff fee7 	bl	2b94 <Logger::console(char*, ...)>
  settings.version = EEPROM_VERSION;
    2dc6:	4b47      	ldr	r3, [pc, #284]	; (2ee4 <loadSettings()+0x128>)
  settings.ChargeHys = 0.2f; // voltage drop required for charger to kick back on
    2dc8:	4847      	ldr	r0, [pc, #284]	; (2ee8 <loadSettings()+0x12c>)
  settings.OverVSetpoint = 4.2f;
    2dca:	60dc      	str	r4, [r3, #12]
  settings.UnderVSetpoint = 3.0f;
    2dcc:	4c47      	ldr	r4, [pc, #284]	; (2eec <loadSettings()+0x130>)
    2dce:	611c      	str	r4, [r3, #16]
  settings.ChargeVsetpoint = 4.1f;
    2dd0:	4c47      	ldr	r4, [pc, #284]	; (2ef0 <loadSettings()+0x134>)
    2dd2:	619c      	str	r4, [r3, #24]
  settings.WarnOff = 0.1f; //voltage offset to raise a warning
    2dd4:	4c47      	ldr	r4, [pc, #284]	; (2ef4 <loadSettings()+0x138>)
    2dd6:	629c      	str	r4, [r3, #40]	; 0x28
  settings.DischVsetpoint = 3.2f;
    2dd8:	4c47      	ldr	r4, [pc, #284]	; (2ef8 <loadSettings()+0x13c>)
    2dda:	61dc      	str	r4, [r3, #28]
  settings.OverTSetpoint = 65.0f;
    2ddc:	4c47      	ldr	r4, [pc, #284]	; (2efc <loadSettings()+0x140>)
    2dde:	62dc      	str	r4, [r3, #44]	; 0x2c
  settings.UnderTSetpoint = -10.0f;
    2de0:	4c47      	ldr	r4, [pc, #284]	; (2f00 <loadSettings()+0x144>)
    2de2:	631c      	str	r4, [r3, #48]	; 0x30
  settings.ChargeTSetpoint = 0.0f;
    2de4:	2400      	movs	r4, #0
    2de6:	639c      	str	r4, [r3, #56]	; 0x38
  settings.triptime = 500;//mS of delay before counting over or undervoltage
    2de8:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
    2dec:	869c      	strh	r4, [r3, #52]	; 0x34
  settings.DisTSetpoint = 40.0f;
    2dee:	4c45      	ldr	r4, [pc, #276]	; (2f04 <loadSettings()+0x148>)
    2df0:	63dc      	str	r4, [r3, #60]	; 0x3c
  settings.WarnToff = 5.0f; //temp offset before raising warning
    2df2:	4c45      	ldr	r4, [pc, #276]	; (2f08 <loadSettings()+0x14c>)
    2df4:	641c      	str	r4, [r3, #64]	; 0x40
  settings.canSpeed = 500000;
    2df6:	4c45      	ldr	r4, [pc, #276]	; (2f0c <loadSettings()+0x150>)
    2df8:	605c      	str	r4, [r3, #4]
  settings.batteryID = 0x01; //in the future should be 0xFF to force it to ask for an address
    2dfa:	f240 2401 	movw	r4, #513	; 0x201
    2dfe:	811c      	strh	r4, [r3, #8]
  settings.StoreVsetpoint = 3.8; // V storage mode charge max
    2e00:	4c43      	ldr	r4, [pc, #268]	; (2f10 <loadSettings()+0x154>)
    2e02:	625c      	str	r4, [r3, #36]	; 0x24
  settings.chargereff = 85; //% effiecency of charger
    2e04:	2455      	movs	r4, #85	; 0x55
    2e06:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  settings.IgnoreVolt = 0.5;//
    2e0a:	f04f 547c 	mov.w	r4, #1056964608	; 0x3f000000
    2e0e:	64dc      	str	r4, [r3, #76]	; 0x4c
  settings.balanceVoltage = 3.9f;
    2e10:	4c40      	ldr	r4, [pc, #256]	; (2f14 <loadSettings()+0x158>)
    2e12:	651c      	str	r4, [r3, #80]	; 0x50
  settings.balanceHyst = 0.04f;
    2e14:	4c40      	ldr	r4, [pc, #256]	; (2f18 <loadSettings()+0x15c>)
    2e16:	655c      	str	r4, [r3, #84]	; 0x54
  settings.Scells = 12;//Cells in series
    2e18:	240c      	movs	r4, #12
    2e1a:	659c      	str	r4, [r3, #88]	; 0x58
  settings.chargecurrentmax = 300; //max charge current in 0.1A
    2e1c:	4c3f      	ldr	r4, [pc, #252]	; (2f1c <loadSettings()+0x160>)
    2e1e:	665c      	str	r4, [r3, #100]	; 0x64
  settings.chargecurrentend = 50; //end charge current in 0.1A
    2e20:	4c3f      	ldr	r4, [pc, #252]	; (2f20 <loadSettings()+0x164>)
  settings.ChargeHys = 0.2f; // voltage drop required for charger to kick back on
    2e22:	6218      	str	r0, [r3, #32]
  settings.version = EEPROM_VERSION;
    2e24:	f44f 7505 	mov.w	r5, #532	; 0x214
  settings.DischHys = 0.2f; // Discharge voltage offset
    2e28:	6158      	str	r0, [r3, #20]
  settings.CellGap = 0.2f; //max delta between high and low cell
    2e2a:	6458      	str	r0, [r3, #68]	; 0x44
  settings.chargecurrentend = 50; //end charge current in 0.1A
    2e2c:	669c      	str	r4, [r3, #104]	; 0x68
  settings.PulseCh = 600; //Peak Charge current in 0.1A
    2e2e:	483d      	ldr	r0, [pc, #244]	; (2f24 <loadSettings()+0x168>)
  settings.version = EEPROM_VERSION;
    2e30:	801d      	strh	r5, [r3, #0]
  settings.socvolt[0] = 3100; //Voltage and SOC curve for voltage based SOC calc
    2e32:	f640 441c 	movw	r4, #3100	; 0xc1c
  settings.IgnoreTemp = 0; // 0 - use both sensors, 1 or 2 only use that sensor
    2e36:	2200      	movs	r2, #0
  settings.Pstrings = 1; // strings in parallel used to divide voltage of pack
    2e38:	2101      	movs	r1, #1
  settings.PulseCh = 600; //Peak Charge current in 0.1A
    2e3a:	f8c3 00d0 	str.w	r0, [r3, #208]	; 0xd0
  settings.PulseDi = 600; //Peak Charge current in 0.1A
    2e3e:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
  settings.chargerACv = 240;// AC input voltage into Charger
    2e42:	25f0      	movs	r5, #240	; 0xf0
  settings.CAP = 100; //battery size in Ah
    2e44:	2064      	movs	r0, #100	; 0x64
  settings.socvolt[0] = 3100; //Voltage and SOC curve for voltage based SOC calc
    2e46:	66dc      	str	r4, [r3, #108]	; 0x6c
  settings.socvolt[1] = 10; //Voltage and SOC curve for voltage based SOC calc
    2e48:	240a      	movs	r4, #10
  settings.IgnoreTemp = 0; // 0 - use both sensors, 1 or 2 only use that sensor
    2e4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  settings.chargerACv = 240;// AC input voltage into Charger
    2e4e:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
  settings.Pstrings = 1; // strings in parallel used to divide voltage of pack
    2e52:	65d9      	str	r1, [r3, #92]	; 0x5c
  settings.CAP = 100; //battery size in Ah
    2e54:	6618      	str	r0, [r3, #96]	; 0x60
  settings.socvolt[1] = 10; //Voltage and SOC curve for voltage based SOC calc
    2e56:	671c      	str	r4, [r3, #112]	; 0x70
  settings.curcan = LemCAB300;
    2e58:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  settings.ncur = 1; //number of multiples to use for current measurement
    2e5c:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
  settings.tripcont = 1; //in ESSmode 1 - Main contactor function, 0 - Trip function
    2e60:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
  settings.convhigh = 580; // mV/A current sensor high range channel
    2e64:	4930      	ldr	r1, [pc, #192]	; (2f28 <loadSettings()+0x16c>)
  settings.invertcur = 0; //Invert current sensor direction
    2e66:	67da      	str	r2, [r3, #124]	; 0x7c
  settings.voltsoc = 0; //SOC purely voltage based
    2e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  settings.ESSmode = 0; //activate ESS mode
    2e6c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  settings.ExpMess = 0; //send alternate victron info
    2e70:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
  settings.SerialCan = 0; //Serial canbus or display: 0-display 1- canbus expansion
    2e74:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
  settings.convhigh = 580; // mV/A current sensor high range channel
    2e78:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
  settings.conthold = 50; //holding duty cycle for contactor 0-255
    2e7c:	2232      	movs	r2, #50	; 0x32
  settings.changecur = 20000;//mA change overpoint
    2e7e:	f644 6120 	movw	r1, #20000	; 0x4e20
  settings.UnderDur = 5000; //ms of allowed undervoltage before throwing open stopping discharge.
    2e82:	4c2a      	ldr	r4, [pc, #168]	; (2f2c <loadSettings()+0x170>)
  settings.chargerspd = 100; //ms per message
    2e84:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
  settings.conthold = 50; //holding duty cycle for contactor 0-255
    2e88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  settings.DisTaper = 0.3f; //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    2e8c:	4828      	ldr	r0, [pc, #160]	; (2f30 <loadSettings()+0x174>)
  settings.changecur = 20000;//mA change overpoint
    2e8e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
  settings.balanceDuty = 50;
    2e92:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  settings.gaugehigh = 255; //full fuel gauge pwm
    2e96:	21ff      	movs	r1, #255	; 0xff
  settings.gaugelow = 50; //empty fuel gauge pwm
    2e98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  settings.cursens = 2;
    2e9c:	2202      	movs	r2, #2
  settings.convlow = 6430; // mV/A current sensor low range channel
    2e9e:	f8df c094 	ldr.w	ip, [pc, #148]	; 2f34 <loadSettings()+0x178>
  settings.UnderDur = 5000; //ms of allowed undervoltage before throwing open stopping discharge.
    2ea2:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
  settings.socvolt[2] = 4100; //Voltage and SOC curve for voltage based SOC calc
    2ea6:	f241 0504 	movw	r5, #4100	; 0x1004
  settings.DisTaper = 0.3f; //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    2eaa:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  settings.Precurrent = 1000; //ma before closing main contator
    2eae:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
  settings.offset1 = 1750; //mV mid point of channel 1
    2eb2:	4821      	ldr	r0, [pc, #132]	; (2f38 <loadSettings()+0x17c>)
  settings.gaugehigh = 255; //full fuel gauge pwm
    2eb4:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
  settings.cursens = 2;
    2eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  settings.Pretime = 5000; //ms of precharge time
    2ebc:	f241 3188 	movw	r1, #5000	; 0x1388
  settings.chargertype = 2; // 1 - Brusa NLG5xx 2 - Volt charger 0 -No Charger
    2ec0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  settings.socvolt[3] = 90; //Voltage and SOC curve for voltage based SOC calc
    2ec4:	225a      	movs	r2, #90	; 0x5a
  settings.socvolt[2] = 4100; //Voltage and SOC curve for voltage based SOC calc
    2ec6:	675d      	str	r5, [r3, #116]	; 0x74
  settings.Precurrent = 1000; //ma before closing main contator
    2ec8:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  settings.convlow = 6430; // mV/A current sensor low range channel
    2ecc:	f8c3 c09c 	str.w	ip, [r3, #156]	; 0x9c
  settings.offset1 = 1750; //mV mid point of channel 1
    2ed0:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  settings.Pretime = 5000; //ms of precharge time
    2ed4:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  settings.socvolt[3] = 90; //Voltage and SOC curve for voltage based SOC calc
    2ed8:	679a      	str	r2, [r3, #120]	; 0x78
}
    2eda:	bd38      	pop	{r3, r4, r5, pc}
    2edc:	00015a7c 	.word	0x00015a7c
    2ee0:	40866666 	.word	0x40866666
    2ee4:	1fffb73c 	.word	0x1fffb73c
    2ee8:	3e4ccccd 	.word	0x3e4ccccd
    2eec:	40400000 	.word	0x40400000
    2ef0:	40833333 	.word	0x40833333
    2ef4:	3dcccccd 	.word	0x3dcccccd
    2ef8:	404ccccd 	.word	0x404ccccd
    2efc:	42820000 	.word	0x42820000
    2f00:	c1200000 	.word	0xc1200000
    2f04:	42200000 	.word	0x42200000
    2f08:	40a00000 	.word	0x40a00000
    2f0c:	0007a120 	.word	0x0007a120
    2f10:	40733333 	.word	0x40733333
    2f14:	4079999a 	.word	0x4079999a
    2f18:	3d23d70a 	.word	0x3d23d70a
    2f1c:	0096012c 	.word	0x0096012c
    2f20:	012c0032 	.word	0x012c0032
    2f24:	13880258 	.word	0x13880258
    2f28:	44110000 	.word	0x44110000
    2f2c:	00051388 	.word	0x00051388
    2f30:	3e99999a 	.word	0x3e99999a
    2f34:	45c8f000 	.word	0x45c8f000
    2f38:	06d606d6 	.word	0x06d606d6

00002f3c <alarmupdate()>:
{
    2f3c:	b570      	push	{r4, r5, r6, lr}
  alarm[0] = 0x00;
    2f3e:	4d45      	ldr	r5, [pc, #276]	; (3054 <alarmupdate()+0x118>)
  if (settings.OverVSetpoint < bms.getHighCellVolt())
    2f40:	4c45      	ldr	r4, [pc, #276]	; (3058 <alarmupdate()+0x11c>)
    2f42:	4846      	ldr	r0, [pc, #280]	; (305c <alarmupdate()+0x120>)
    2f44:	68e6      	ldr	r6, [r4, #12]
  alarm[0] = 0x00;
    2f46:	2300      	movs	r3, #0
    2f48:	702b      	strb	r3, [r5, #0]
  if (settings.OverVSetpoint < bms.getHighCellVolt())
    2f4a:	f7ff f98f 	bl	226c <BMSModuleManager::getHighCellVolt()>
    2f4e:	4601      	mov	r1, r0
    2f50:	4630      	mov	r0, r6
    2f52:	f00b fef3 	bl	ed3c <__aeabi_fcmplt>
    2f56:	b108      	cbz	r0, 2f5c <alarmupdate()+0x20>
    alarm[0] = 0x04;
    2f58:	2304      	movs	r3, #4
    2f5a:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < settings.UnderVSetpoint)
    2f5c:	483f      	ldr	r0, [pc, #252]	; (305c <alarmupdate()+0x120>)
    2f5e:	f7ff f97d 	bl	225c <BMSModuleManager::getLowCellVolt()>
    2f62:	6921      	ldr	r1, [r4, #16]
    2f64:	f00b feea 	bl	ed3c <__aeabi_fcmplt>
    2f68:	b118      	cbz	r0, 2f72 <alarmupdate()+0x36>
    alarm[0] |= 0x10;
    2f6a:	782b      	ldrb	r3, [r5, #0]
    2f6c:	f043 0310 	orr.w	r3, r3, #16
    2f70:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > settings.OverTSetpoint)
    2f72:	483a      	ldr	r0, [pc, #232]	; (305c <alarmupdate()+0x120>)
    2f74:	f7ff f9fc 	bl	2370 <BMSModuleManager::getHighTemperature()>
    2f78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    2f7a:	f00b fefd 	bl	ed78 <__aeabi_fcmpgt>
    2f7e:	b118      	cbz	r0, 2f88 <alarmupdate()+0x4c>
    alarm[0] |= 0x40;
    2f80:	782b      	ldrb	r3, [r5, #0]
    2f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2f86:	702b      	strb	r3, [r5, #0]
  alarm[1] = 0;
    2f88:	2300      	movs	r3, #0
  if (bms.getLowTemperature() < settings.UnderTSetpoint)
    2f8a:	4834      	ldr	r0, [pc, #208]	; (305c <alarmupdate()+0x120>)
  alarm[1] = 0;
    2f8c:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < settings.UnderTSetpoint)
    2f8e:	f7ff f9f1 	bl	2374 <BMSModuleManager::getLowTemperature()>
    2f92:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2f94:	f00b fed2 	bl	ed3c <__aeabi_fcmplt>
    2f98:	b108      	cbz	r0, 2f9e <alarmupdate()+0x62>
    alarm[1] = 0x01;
    2f9a:	2301      	movs	r3, #1
    2f9c:	706b      	strb	r3, [r5, #1]
  alarm[3] = 0;
    2f9e:	2300      	movs	r3, #0
    2fa0:	70eb      	strb	r3, [r5, #3]
  if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap)
    2fa2:	482e      	ldr	r0, [pc, #184]	; (305c <alarmupdate()+0x120>)
    2fa4:	f7ff f962 	bl	226c <BMSModuleManager::getHighCellVolt()>
    2fa8:	4606      	mov	r6, r0
    2faa:	482c      	ldr	r0, [pc, #176]	; (305c <alarmupdate()+0x120>)
    2fac:	f7ff f956 	bl	225c <BMSModuleManager::getLowCellVolt()>
    2fb0:	4601      	mov	r1, r0
    2fb2:	4630      	mov	r0, r6
    2fb4:	f00b fc1a 	bl	e7ec <__aeabi_fsub>
    2fb8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    2fba:	f00b fedd 	bl	ed78 <__aeabi_fcmpgt>
    2fbe:	b108      	cbz	r0, 2fc4 <alarmupdate()+0x88>
    alarm[3] = 0x01;
    2fc0:	2301      	movs	r3, #1
    2fc2:	70eb      	strb	r3, [r5, #3]
  warning[0] = 0;
    2fc4:	4d26      	ldr	r5, [pc, #152]	; (3060 <alarmupdate()+0x124>)
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff))
    2fc6:	4825      	ldr	r0, [pc, #148]	; (305c <alarmupdate()+0x120>)
  warning[0] = 0;
    2fc8:	2300      	movs	r3, #0
    2fca:	702b      	strb	r3, [r5, #0]
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff))
    2fcc:	f7ff f94e 	bl	226c <BMSModuleManager::getHighCellVolt()>
    2fd0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2fd2:	4606      	mov	r6, r0
    2fd4:	68e0      	ldr	r0, [r4, #12]
    2fd6:	f00b fc09 	bl	e7ec <__aeabi_fsub>
    2fda:	4601      	mov	r1, r0
    2fdc:	4630      	mov	r0, r6
    2fde:	f00b fecb 	bl	ed78 <__aeabi_fcmpgt>
    2fe2:	b108      	cbz	r0, 2fe8 <alarmupdate()+0xac>
    warning[0] = 0x04;
    2fe4:	2304      	movs	r3, #4
    2fe6:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < (settings.UnderVSetpoint + settings.WarnOff))
    2fe8:	481c      	ldr	r0, [pc, #112]	; (305c <alarmupdate()+0x120>)
    2fea:	f7ff f937 	bl	225c <BMSModuleManager::getLowCellVolt()>
    2fee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2ff0:	4606      	mov	r6, r0
    2ff2:	6920      	ldr	r0, [r4, #16]
    2ff4:	f00b fbfc 	bl	e7f0 <__addsf3>
    2ff8:	4601      	mov	r1, r0
    2ffa:	4630      	mov	r0, r6
    2ffc:	f00b fe9e 	bl	ed3c <__aeabi_fcmplt>
    3000:	b118      	cbz	r0, 300a <alarmupdate()+0xce>
    warning[0] |= 0x10;
    3002:	782b      	ldrb	r3, [r5, #0]
    3004:	f043 0310 	orr.w	r3, r3, #16
    3008:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > (settings.OverTSetpoint - settings.WarnToff))
    300a:	4814      	ldr	r0, [pc, #80]	; (305c <alarmupdate()+0x120>)
    300c:	f7ff f9b0 	bl	2370 <BMSModuleManager::getHighTemperature()>
    3010:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3012:	4606      	mov	r6, r0
    3014:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3016:	f00b fbe9 	bl	e7ec <__aeabi_fsub>
    301a:	4601      	mov	r1, r0
    301c:	4630      	mov	r0, r6
    301e:	f00b feab 	bl	ed78 <__aeabi_fcmpgt>
    3022:	b118      	cbz	r0, 302c <alarmupdate()+0xf0>
    warning[0] |= 0x40;
    3024:	782b      	ldrb	r3, [r5, #0]
    3026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    302a:	702b      	strb	r3, [r5, #0]
  warning[1] = 0;
    302c:	2300      	movs	r3, #0
    302e:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < (settings.UnderTSetpoint + settings.WarnToff))
    3030:	480a      	ldr	r0, [pc, #40]	; (305c <alarmupdate()+0x120>)
    3032:	f7ff f99f 	bl	2374 <BMSModuleManager::getLowTemperature()>
    3036:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3038:	4603      	mov	r3, r0
    303a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    303c:	461c      	mov	r4, r3
    303e:	f00b fbd7 	bl	e7f0 <__addsf3>
    3042:	4601      	mov	r1, r0
    3044:	4620      	mov	r0, r4
    3046:	f00b fe79 	bl	ed3c <__aeabi_fcmplt>
    304a:	b108      	cbz	r0, 3050 <alarmupdate()+0x114>
    warning[1] = 0x01;
    304c:	2301      	movs	r3, #1
    304e:	706b      	strb	r3, [r5, #1]
}
    3050:	bd70      	pop	{r4, r5, r6, pc}
    3052:	bf00      	nop
    3054:	1fff91e0 	.word	0x1fff91e0
    3058:	1fffb73c 	.word	0x1fffb73c
    305c:	1fff91ec 	.word	0x1fff91ec
    3060:	1fffb83c 	.word	0x1fffb83c

00003064 <gaugeupdate()>:
{
    3064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (gaugedebug == 1)
    3068:	4c7e      	ldr	r4, [pc, #504]	; (3264 <gaugeupdate()+0x200>)
    306a:	6823      	ldr	r3, [r4, #0]
    306c:	2b01      	cmp	r3, #1
{
    306e:	b082      	sub	sp, #8
  if (gaugedebug == 1)
    3070:	d047      	beq.n	3102 <gaugeupdate()+0x9e>
  if (gaugedebug == 2)
    3072:	2b02      	cmp	r3, #2
    3074:	d074      	beq.n	3160 <gaugeupdate()+0xfc>
  if (gaugedebug == 3)
    3076:	2b03      	cmp	r3, #3
    3078:	d003      	beq.n	3082 <gaugeupdate()+0x1e>
  if (gaugedebug == 0)
    307a:	b32b      	cbz	r3, 30c8 <gaugeupdate()+0x64>
}
    307c:	b002      	add	sp, #8
    307e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SOCtest = 1000;
    3082:	4b79      	ldr	r3, [pc, #484]	; (3268 <gaugeupdate()+0x204>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    3084:	4e79      	ldr	r6, [pc, #484]	; (326c <gaugeupdate()+0x208>)
    SOCtest = 1000;
    3086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    308a:	601a      	str	r2, [r3, #0]
// when the input is a float or double, do all math using the input's type
template <class T, class A, class B, class C, class D>
T map(T x, A in_min, B in_max, C out_min, D out_max, typename std::enable_if<std::is_floating_point<T>::value >::type* = 0)
{
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    308c:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    3090:	f00b fc62 	bl	e958 <__aeabi_i2f>
    3094:	4605      	mov	r5, r0
    3096:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
    309a:	f00b fc5d 	bl	e958 <__aeabi_i2f>
    309e:	4629      	mov	r1, r5
    30a0:	f00b fba4 	bl	e7ec <__aeabi_fsub>
    30a4:	4972      	ldr	r1, [pc, #456]	; (3270 <gaugeupdate()+0x20c>)
    30a6:	f00b fcab 	bl	ea00 <__aeabi_fmul>
    30aa:	4971      	ldr	r1, [pc, #452]	; (3270 <gaugeupdate()+0x20c>)
    30ac:	f00b fd5c 	bl	eb68 <__aeabi_fdiv>
    30b0:	4629      	mov	r1, r5
    30b2:	f00b fb9d 	bl	e7f0 <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    30b6:	f00b fe7f 	bl	edb8 <__aeabi_f2iz>
    30ba:	4601      	mov	r1, r0
    30bc:	2006      	movs	r0, #6
    30be:	f007 ff73 	bl	afa8 <analogWrite>
  if (gaugedebug == 0)
    30c2:	6823      	ldr	r3, [r4, #0]
    30c4:	2b00      	cmp	r3, #0
    30c6:	d1d9      	bne.n	307c <gaugeupdate()+0x18>
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    30c8:	4b68      	ldr	r3, [pc, #416]	; (326c <gaugeupdate()+0x208>)
    30ca:	486a      	ldr	r0, [pc, #424]	; (3274 <gaugeupdate()+0x210>)
    30cc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
	long out_range = out_max - out_min;
    30d0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
	long num = (x - in_min) * out_range;
    30d4:	6803      	ldr	r3, [r0, #0]
	long result = num / in_range + out_min;
    30d6:	4868      	ldr	r0, [pc, #416]	; (3278 <gaugeupdate()+0x214>)
	long out_range = out_max - out_min;
    30d8:	1a52      	subs	r2, r2, r1
	if (out_range >= 0) {
    30da:	2a00      	cmp	r2, #0
	long num = (x - in_min) * out_range;
    30dc:	fb02 f303 	mul.w	r3, r2, r3
	if (out_range >= 0) {
    30e0:	db64      	blt.n	31ac <gaugeupdate()+0x148>
		num += in_range / 2;
    30e2:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
    30e4:	fb80 2003 	smull	r2, r0, r0, r3
    30e8:	17da      	asrs	r2, r3, #31
    30ea:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num < 0) return result - 1;
    30ee:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    30f0:	4411      	add	r1, r2
		if (in_range * num < 0) return result - 1;
    30f2:	f2c0 80b5 	blt.w	3260 <gaugeupdate()+0x1fc>
    30f6:	2006      	movs	r0, #6
}
    30f8:	b002      	add	sp, #8
    30fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    30fe:	f007 bf53 	b.w	afa8 <analogWrite>
    SOCtest = SOCtest + 10;
    3102:	4f59      	ldr	r7, [pc, #356]	; (3268 <gaugeupdate()+0x204>)
    3104:	6838      	ldr	r0, [r7, #0]
    3106:	300a      	adds	r0, #10
    if (SOCtest > 1000)
    3108:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    310c:	dc49      	bgt.n	31a2 <gaugeupdate()+0x13e>
    SOCtest = SOCtest + 10;
    310e:	6038      	str	r0, [r7, #0]
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    3110:	f00b fc22 	bl	e958 <__aeabi_i2f>
    3114:	4959      	ldr	r1, [pc, #356]	; (327c <gaugeupdate()+0x218>)
    3116:	f00b fc73 	bl	ea00 <__aeabi_fmul>
    311a:	4680      	mov	r8, r0
    311c:	4e53      	ldr	r6, [pc, #332]	; (326c <gaugeupdate()+0x208>)
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    311e:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    3122:	f00b fc19 	bl	e958 <__aeabi_i2f>
    3126:	4605      	mov	r5, r0
    3128:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
    312c:	f00b fc14 	bl	e958 <__aeabi_i2f>
    3130:	4629      	mov	r1, r5
    3132:	f00b fb5b 	bl	e7ec <__aeabi_fsub>
    3136:	4641      	mov	r1, r8
    3138:	f00b fc62 	bl	ea00 <__aeabi_fmul>
    313c:	494c      	ldr	r1, [pc, #304]	; (3270 <gaugeupdate()+0x20c>)
    313e:	f00b fd13 	bl	eb68 <__aeabi_fdiv>
    3142:	4629      	mov	r1, r5
    3144:	f00b fb54 	bl	e7f0 <__addsf3>
    3148:	f00b fe36 	bl	edb8 <__aeabi_f2iz>
    314c:	4601      	mov	r1, r0
    314e:	2006      	movs	r0, #6
    3150:	f007 ff2a 	bl	afa8 <analogWrite>
    if (debug != 0)
    3154:	4b4a      	ldr	r3, [pc, #296]	; (3280 <gaugeupdate()+0x21c>)
    3156:	681b      	ldr	r3, [r3, #0]
    3158:	bb9b      	cbnz	r3, 31c2 <gaugeupdate()+0x15e>
  if (gaugedebug == 2)
    315a:	6823      	ldr	r3, [r4, #0]
    315c:	2b02      	cmp	r3, #2
    315e:	d18a      	bne.n	3076 <gaugeupdate()+0x12>
    SOCtest = 0;
    3160:	4b41      	ldr	r3, [pc, #260]	; (3268 <gaugeupdate()+0x204>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    3162:	4e42      	ldr	r6, [pc, #264]	; (326c <gaugeupdate()+0x208>)
    SOCtest = 0;
    3164:	2200      	movs	r2, #0
    3166:	601a      	str	r2, [r3, #0]
    3168:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    316c:	f00b fbf4 	bl	e958 <__aeabi_i2f>
    3170:	4605      	mov	r5, r0
    3172:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
    3176:	f00b fbef 	bl	e958 <__aeabi_i2f>
    317a:	4629      	mov	r1, r5
    317c:	f00b fb36 	bl	e7ec <__aeabi_fsub>
    3180:	2100      	movs	r1, #0
    3182:	f00b fc3d 	bl	ea00 <__aeabi_fmul>
    3186:	493a      	ldr	r1, [pc, #232]	; (3270 <gaugeupdate()+0x20c>)
    3188:	f00b fcee 	bl	eb68 <__aeabi_fdiv>
    318c:	4629      	mov	r1, r5
    318e:	f00b fb2f 	bl	e7f0 <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    3192:	f00b fe11 	bl	edb8 <__aeabi_f2iz>
    3196:	4601      	mov	r1, r0
    3198:	2006      	movs	r0, #6
    319a:	f007 ff05 	bl	afa8 <analogWrite>
  if (gaugedebug == 3)
    319e:	6823      	ldr	r3, [r4, #0]
    31a0:	e769      	b.n	3076 <gaugeupdate()+0x12>
      SOCtest = 0;
    31a2:	2300      	movs	r3, #0
    31a4:	f04f 0800 	mov.w	r8, #0
    31a8:	603b      	str	r3, [r7, #0]
    31aa:	e7b7      	b.n	311c <gaugeupdate()+0xb8>
		num -= in_range / 2;
    31ac:	3b32      	subs	r3, #50	; 0x32
	long result = num / in_range + out_min;
    31ae:	fb80 2003 	smull	r2, r0, r0, r3
    31b2:	17da      	asrs	r2, r3, #31
    31b4:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num >= 0) return result + 1;
    31b8:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    31ba:	4411      	add	r1, r2
		if (in_range * num >= 0) return result + 1;
    31bc:	db9b      	blt.n	30f6 <gaugeupdate()+0x92>
    31be:	3101      	adds	r1, #1
    31c0:	e799      	b.n	30f6 <gaugeupdate()+0x92>
    31c2:	2102      	movs	r1, #2
    31c4:	482f      	ldr	r0, [pc, #188]	; (3284 <gaugeupdate()+0x220>)
    31c6:	f009 fedd 	bl	cf84 <usb_serial_write>
    31ca:	482f      	ldr	r0, [pc, #188]	; (3288 <gaugeupdate()+0x224>)
    31cc:	f007 f994 	bl	a4f8 <Print::println()>
    31d0:	2106      	movs	r1, #6
    31d2:	482e      	ldr	r0, [pc, #184]	; (328c <gaugeupdate()+0x228>)
    31d4:	f009 fed6 	bl	cf84 <usb_serial_write>
      SERIALCONSOLE.print(SOCtest * 0.1);
    31d8:	6838      	ldr	r0, [r7, #0]
    31da:	f00b fbbd 	bl	e958 <__aeabi_i2f>
    31de:	4927      	ldr	r1, [pc, #156]	; (327c <gaugeupdate()+0x218>)
    31e0:	f00b fc0e 	bl	ea00 <__aeabi_fmul>
    31e4:	f00b f9e8 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    31e8:	f04f 0802 	mov.w	r8, #2
    31ec:	4602      	mov	r2, r0
    31ee:	460b      	mov	r3, r1
    31f0:	f8cd 8000 	str.w	r8, [sp]
    31f4:	4824      	ldr	r0, [pc, #144]	; (3288 <gaugeupdate()+0x224>)
    31f6:	f007 f9a3 	bl	a540 <Print::printFloat(double, unsigned char)>
    31fa:	210d      	movs	r1, #13
    31fc:	4824      	ldr	r0, [pc, #144]	; (3290 <gaugeupdate()+0x22c>)
    31fe:	f009 fec1 	bl	cf84 <usb_serial_write>
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    3202:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    3206:	f00b fba7 	bl	e958 <__aeabi_i2f>
    320a:	4605      	mov	r5, r0
      SERIALCONSOLE.print(map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    320c:	6838      	ldr	r0, [r7, #0]
    320e:	f00b fba3 	bl	e958 <__aeabi_i2f>
    3212:	491a      	ldr	r1, [pc, #104]	; (327c <gaugeupdate()+0x218>)
    3214:	f00b fbf4 	bl	ea00 <__aeabi_fmul>
    3218:	4603      	mov	r3, r0
    321a:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
    321e:	461e      	mov	r6, r3
    3220:	f00b fb9a 	bl	e958 <__aeabi_i2f>
    3224:	4629      	mov	r1, r5
    3226:	f00b fae1 	bl	e7ec <__aeabi_fsub>
    322a:	4601      	mov	r1, r0
    322c:	4630      	mov	r0, r6
    322e:	f00b fbe7 	bl	ea00 <__aeabi_fmul>
    3232:	490f      	ldr	r1, [pc, #60]	; (3270 <gaugeupdate()+0x20c>)
    3234:	f00b fc98 	bl	eb68 <__aeabi_fdiv>
    3238:	4629      	mov	r1, r5
    323a:	f00b fad9 	bl	e7f0 <__addsf3>
    323e:	f00b f9bb 	bl	e5b8 <__aeabi_f2d>
    3242:	f8cd 8000 	str.w	r8, [sp]
    3246:	4602      	mov	r2, r0
    3248:	460b      	mov	r3, r1
    324a:	480f      	ldr	r0, [pc, #60]	; (3288 <gaugeupdate()+0x224>)
    324c:	f007 f978 	bl	a540 <Print::printFloat(double, unsigned char)>
    3250:	4641      	mov	r1, r8
    3252:	480c      	ldr	r0, [pc, #48]	; (3284 <gaugeupdate()+0x220>)
    3254:	f009 fe96 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3258:	480b      	ldr	r0, [pc, #44]	; (3288 <gaugeupdate()+0x224>)
    325a:	f007 f94d 	bl	a4f8 <Print::println()>
    325e:	e77c      	b.n	315a <gaugeupdate()+0xf6>
		if (in_range * num < 0) return result - 1;
    3260:	3901      	subs	r1, #1
    3262:	e748      	b.n	30f6 <gaugeupdate()+0x92>
    3264:	1fffb63c 	.word	0x1fffb63c
    3268:	1fff91d0 	.word	0x1fff91d0
    326c:	1fffb73c 	.word	0x1fffb73c
    3270:	42c80000 	.word	0x42c80000
    3274:	1fff8828 	.word	0x1fff8828
    3278:	51eb851f 	.word	0x51eb851f
    327c:	3dcccccd 	.word	0x3dcccccd
    3280:	1fff8848 	.word	0x1fff8848
    3284:	00016af4 	.word	0x00016af4
    3288:	1fff89f8 	.word	0x1fff89f8
    328c:	00015a9c 	.word	0x00015a9c
    3290:	00015aa4 	.word	0x00015aa4

00003294 <printbmsstat()>:
{
    3294:	b530      	push	{r4, r5, lr}
  SERIALCONSOLE.println();
    3296:	48aa      	ldr	r0, [pc, #680]	; (3540 <printbmsstat()+0x2ac>)
  if (settings.ESSmode == 1)
    3298:	4caa      	ldr	r4, [pc, #680]	; (3544 <printbmsstat()+0x2b0>)
{
    329a:	b083      	sub	sp, #12
  SERIALCONSOLE.println();
    329c:	f007 f92c 	bl	a4f8 <Print::println()>
  SERIALCONSOLE.println();
    32a0:	48a7      	ldr	r0, [pc, #668]	; (3540 <printbmsstat()+0x2ac>)
    32a2:	f007 f929 	bl	a4f8 <Print::println()>
  SERIALCONSOLE.println(testcount);
    32a6:	4ba8      	ldr	r3, [pc, #672]	; (3548 <printbmsstat()+0x2b4>)
	size_t print(int n)				{ return print((long)n); }
    32a8:	48a5      	ldr	r0, [pc, #660]	; (3540 <printbmsstat()+0x2ac>)
    32aa:	6819      	ldr	r1, [r3, #0]
    32ac:	f007 f91c 	bl	a4e8 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    32b0:	48a3      	ldr	r0, [pc, #652]	; (3540 <printbmsstat()+0x2ac>)
    32b2:	f007 f921 	bl	a4f8 <Print::println()>
    32b6:	48a5      	ldr	r0, [pc, #660]	; (354c <printbmsstat()+0x2b8>)
    32b8:	210d      	movs	r1, #13
    32ba:	f009 fe63 	bl	cf84 <usb_serial_write>
  if (settings.ESSmode == 1)
    32be:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    32c2:	2b01      	cmp	r3, #1
    32c4:	d011      	beq.n	32ea <printbmsstat()+0x56>
    SERIALCONSOLE.print(bmsstatus);
    32c6:	4da2      	ldr	r5, [pc, #648]	; (3550 <printbmsstat()+0x2bc>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    32c8:	489d      	ldr	r0, [pc, #628]	; (3540 <printbmsstat()+0x2ac>)
    32ca:	7829      	ldrb	r1, [r5, #0]
    32cc:	2300      	movs	r3, #0
    32ce:	220a      	movs	r2, #10
    32d0:	f007 f92a 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    switch (bmsstatus)
    32d4:	782b      	ldrb	r3, [r5, #0]
    32d6:	2b05      	cmp	r3, #5
    32d8:	d84f      	bhi.n	337a <printbmsstat()+0xe6>
    32da:	e8df f013 	tbh	[pc, r3, lsl #1]
    32de:	01aa      	.short	0x01aa
    32e0:	01b401af 	.word	0x01b401af
    32e4:	01a501a0 	.word	0x01a501a0
    32e8:	019b      	.short	0x019b
    32ea:	2109      	movs	r1, #9
    32ec:	4899      	ldr	r0, [pc, #612]	; (3554 <printbmsstat()+0x2c0>)
    32ee:	f009 fe49 	bl	cf84 <usb_serial_write>
    if (bms.getLowCellVolt() < settings.UnderVSetpoint)
    32f2:	4899      	ldr	r0, [pc, #612]	; (3558 <printbmsstat()+0x2c4>)
    32f4:	f7fe ffb2 	bl	225c <BMSModuleManager::getLowCellVolt()>
    32f8:	6921      	ldr	r1, [r4, #16]
    32fa:	f00b fd1f 	bl	ed3c <__aeabi_fcmplt>
    32fe:	2800      	cmp	r0, #0
    3300:	f040 81c4 	bne.w	368c <printbmsstat()+0x3f8>
    if (bms.getHighCellVolt() > settings.OverVSetpoint)
    3304:	4894      	ldr	r0, [pc, #592]	; (3558 <printbmsstat()+0x2c4>)
    3306:	f7fe ffb1 	bl	226c <BMSModuleManager::getHighCellVolt()>
    330a:	68e1      	ldr	r1, [r4, #12]
    330c:	f00b fd34 	bl	ed78 <__aeabi_fcmpgt>
    3310:	2800      	cmp	r0, #0
    3312:	f040 81cf 	bne.w	36b4 <printbmsstat()+0x420>
    if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap)
    3316:	4890      	ldr	r0, [pc, #576]	; (3558 <printbmsstat()+0x2c4>)
    3318:	f7fe ffa8 	bl	226c <BMSModuleManager::getHighCellVolt()>
    331c:	4605      	mov	r5, r0
    331e:	488e      	ldr	r0, [pc, #568]	; (3558 <printbmsstat()+0x2c4>)
    3320:	f7fe ff9c 	bl	225c <BMSModuleManager::getLowCellVolt()>
    3324:	4601      	mov	r1, r0
    3326:	4628      	mov	r0, r5
    3328:	f00b fa60 	bl	e7ec <__aeabi_fsub>
    332c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    332e:	f00b fd23 	bl	ed78 <__aeabi_fcmpgt>
    3332:	2800      	cmp	r0, #0
    3334:	f040 81b9 	bne.w	36aa <printbmsstat()+0x416>
    if (bms.getAvgTemperature() > settings.OverTSetpoint)
    3338:	4887      	ldr	r0, [pc, #540]	; (3558 <printbmsstat()+0x2c4>)
    333a:	f7fe ffbb 	bl	22b4 <BMSModuleManager::getAvgTemperature()>
    333e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    3340:	f00b fd1a 	bl	ed78 <__aeabi_fcmpgt>
    3344:	2800      	cmp	r0, #0
    3346:	f040 81ab 	bne.w	36a0 <printbmsstat()+0x40c>
    if (bms.getAvgTemperature() < settings.UnderTSetpoint)
    334a:	4883      	ldr	r0, [pc, #524]	; (3558 <printbmsstat()+0x2c4>)
    334c:	f7fe ffb2 	bl	22b4 <BMSModuleManager::getAvgTemperature()>
    3350:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3352:	f00b fcf3 	bl	ed3c <__aeabi_fcmplt>
    3356:	2800      	cmp	r0, #0
    3358:	f040 819d 	bne.w	3696 <printbmsstat()+0x402>
    if (storagemode == 1)
    335c:	4b7f      	ldr	r3, [pc, #508]	; (355c <printbmsstat()+0x2c8>)
      if (bms.getLowCellVolt() > settings.StoreVsetpoint)
    335e:	487e      	ldr	r0, [pc, #504]	; (3558 <printbmsstat()+0x2c4>)
    if (storagemode == 1)
    3360:	681b      	ldr	r3, [r3, #0]
    3362:	2b01      	cmp	r3, #1
    3364:	f000 8186 	beq.w	3674 <printbmsstat()+0x3e0>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint)
    3368:	f7fe ff78 	bl	225c <BMSModuleManager::getLowCellVolt()>
    336c:	6921      	ldr	r1, [r4, #16]
    336e:	f00b fd03 	bl	ed78 <__aeabi_fcmpgt>
    3372:	2800      	cmp	r0, #0
    3374:	f040 816c 	bne.w	3650 <printbmsstat()+0x3bc>
    3378:	4d75      	ldr	r5, [pc, #468]	; (3550 <printbmsstat()+0x2bc>)
    337a:	4879      	ldr	r0, [pc, #484]	; (3560 <printbmsstat()+0x2cc>)
    337c:	2102      	movs	r1, #2
    337e:	f009 fe01 	bl	cf84 <usb_serial_write>
  if (digitalRead(IN3) == HIGH)
    3382:	2012      	movs	r0, #18
    3384:	f007 ffb2 	bl	b2ec <digitalRead>
    3388:	2801      	cmp	r0, #1
    338a:	f000 810d 	beq.w	35a8 <printbmsstat()+0x314>
  if (digitalRead(IN1) == HIGH)
    338e:	2011      	movs	r0, #17
    3390:	f007 ffac 	bl	b2ec <digitalRead>
    3394:	2801      	cmp	r0, #1
    3396:	f000 8111 	beq.w	35bc <printbmsstat()+0x328>
  if (balancecells == 1)
    339a:	4b72      	ldr	r3, [pc, #456]	; (3564 <printbmsstat()+0x2d0>)
    339c:	681b      	ldr	r3, [r3, #0]
    339e:	2b01      	cmp	r3, #1
    33a0:	f000 8115 	beq.w	35ce <printbmsstat()+0x33a>
    33a4:	2102      	movs	r1, #2
    33a6:	486e      	ldr	r0, [pc, #440]	; (3560 <printbmsstat()+0x2cc>)
  if ((contstat & 1) == 1)
    33a8:	4c6f      	ldr	r4, [pc, #444]	; (3568 <printbmsstat()+0x2d4>)
    33aa:	f009 fdeb 	bl	cf84 <usb_serial_write>
  SERIALCONSOLE.print(cellspresent);
    33ae:	4b6f      	ldr	r3, [pc, #444]	; (356c <printbmsstat()+0x2d8>)
	size_t print(int n)				{ return print((long)n); }
    33b0:	4863      	ldr	r0, [pc, #396]	; (3540 <printbmsstat()+0x2ac>)
    33b2:	6819      	ldr	r1, [r3, #0]
    33b4:	f007 f898 	bl	a4e8 <Print::print(long)>
  SERIALCONSOLE.println();
    33b8:	4861      	ldr	r0, [pc, #388]	; (3540 <printbmsstat()+0x2ac>)
    33ba:	f007 f89d 	bl	a4f8 <Print::println()>
    33be:	2104      	movs	r1, #4
    33c0:	486b      	ldr	r0, [pc, #428]	; (3570 <printbmsstat()+0x2dc>)
    33c2:	f009 fddf 	bl	cf84 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(OUT1));
    33c6:	200b      	movs	r0, #11
    33c8:	f007 ff90 	bl	b2ec <digitalRead>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    33cc:	2300      	movs	r3, #0
    33ce:	4601      	mov	r1, r0
    33d0:	220a      	movs	r2, #10
    33d2:	485b      	ldr	r0, [pc, #364]	; (3540 <printbmsstat()+0x2ac>)
    33d4:	f007 f8a8 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT2));
    33d8:	200c      	movs	r0, #12
    33da:	f007 ff87 	bl	b2ec <digitalRead>
    33de:	2300      	movs	r3, #0
    33e0:	4601      	mov	r1, r0
    33e2:	220a      	movs	r2, #10
    33e4:	4856      	ldr	r0, [pc, #344]	; (3540 <printbmsstat()+0x2ac>)
    33e6:	f007 f89f 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT3));
    33ea:	2014      	movs	r0, #20
    33ec:	f007 ff7e 	bl	b2ec <digitalRead>
    33f0:	2300      	movs	r3, #0
    33f2:	4601      	mov	r1, r0
    33f4:	220a      	movs	r2, #10
    33f6:	4852      	ldr	r0, [pc, #328]	; (3540 <printbmsstat()+0x2ac>)
    33f8:	f007 f896 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT4));
    33fc:	2015      	movs	r0, #21
    33fe:	f007 ff75 	bl	b2ec <digitalRead>
    3402:	220a      	movs	r2, #10
    3404:	4601      	mov	r1, r0
    3406:	2300      	movs	r3, #0
    3408:	484d      	ldr	r0, [pc, #308]	; (3540 <printbmsstat()+0x2ac>)
    340a:	f007 f88d 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    340e:	2106      	movs	r1, #6
    3410:	4858      	ldr	r0, [pc, #352]	; (3574 <printbmsstat()+0x2e0>)
    3412:	f009 fdb7 	bl	cf84 <usb_serial_write>
  if ((contstat & 1) == 1)
    3416:	6823      	ldr	r3, [r4, #0]
    3418:	07d8      	lsls	r0, r3, #31
    341a:	bf4b      	itete	mi
    341c:	2101      	movmi	r1, #1
    341e:	2101      	movpl	r1, #1
    3420:	4855      	ldrmi	r0, [pc, #340]	; (3578 <printbmsstat()+0x2e4>)
    3422:	4856      	ldrpl	r0, [pc, #344]	; (357c <printbmsstat()+0x2e8>)
    3424:	f009 fdae 	bl	cf84 <usb_serial_write>
  if ((contstat & 2) == 2)
    3428:	6823      	ldr	r3, [r4, #0]
    342a:	0799      	lsls	r1, r3, #30
    342c:	bf4b      	itete	mi
    342e:	2101      	movmi	r1, #1
    3430:	2101      	movpl	r1, #1
    3432:	4851      	ldrmi	r0, [pc, #324]	; (3578 <printbmsstat()+0x2e4>)
    3434:	4851      	ldrpl	r0, [pc, #324]	; (357c <printbmsstat()+0x2e8>)
    3436:	f009 fda5 	bl	cf84 <usb_serial_write>
  if ((contstat & 4) == 4)
    343a:	6823      	ldr	r3, [r4, #0]
    343c:	075a      	lsls	r2, r3, #29
    343e:	bf4b      	itete	mi
    3440:	2101      	movmi	r1, #1
    3442:	2101      	movpl	r1, #1
    3444:	484c      	ldrmi	r0, [pc, #304]	; (3578 <printbmsstat()+0x2e4>)
    3446:	484d      	ldrpl	r0, [pc, #308]	; (357c <printbmsstat()+0x2e8>)
    3448:	f009 fd9c 	bl	cf84 <usb_serial_write>
  if ((contstat & 8) == 8)
    344c:	6823      	ldr	r3, [r4, #0]
    344e:	071b      	lsls	r3, r3, #28
    3450:	bf4b      	itete	mi
    3452:	2101      	movmi	r1, #1
    3454:	2101      	movpl	r1, #1
    3456:	4848      	ldrmi	r0, [pc, #288]	; (3578 <printbmsstat()+0x2e4>)
    3458:	4848      	ldrpl	r0, [pc, #288]	; (357c <printbmsstat()+0x2e8>)
    345a:	f009 fd93 	bl	cf84 <usb_serial_write>
    345e:	2104      	movs	r1, #4
    3460:	4847      	ldr	r0, [pc, #284]	; (3580 <printbmsstat()+0x2ec>)
    3462:	f009 fd8f 	bl	cf84 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(IN1));
    3466:	2011      	movs	r0, #17
    3468:	f007 ff40 	bl	b2ec <digitalRead>
    346c:	2300      	movs	r3, #0
    346e:	4601      	mov	r1, r0
    3470:	220a      	movs	r2, #10
    3472:	4833      	ldr	r0, [pc, #204]	; (3540 <printbmsstat()+0x2ac>)
    3474:	f007 f858 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN2));
    3478:	2010      	movs	r0, #16
    347a:	f007 ff37 	bl	b2ec <digitalRead>
    347e:	2300      	movs	r3, #0
    3480:	4601      	mov	r1, r0
    3482:	220a      	movs	r2, #10
    3484:	482e      	ldr	r0, [pc, #184]	; (3540 <printbmsstat()+0x2ac>)
    3486:	f007 f84f 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN3));
    348a:	2012      	movs	r0, #18
    348c:	f007 ff2e 	bl	b2ec <digitalRead>
    3490:	2300      	movs	r3, #0
    3492:	4601      	mov	r1, r0
    3494:	220a      	movs	r2, #10
    3496:	482a      	ldr	r0, [pc, #168]	; (3540 <printbmsstat()+0x2ac>)
    3498:	f007 f846 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN4));
    349c:	2013      	movs	r0, #19
    349e:	f007 ff25 	bl	b2ec <digitalRead>
    34a2:	220a      	movs	r2, #10
    34a4:	4601      	mov	r1, r0
    34a6:	2300      	movs	r3, #0
    34a8:	4825      	ldr	r0, [pc, #148]	; (3540 <printbmsstat()+0x2ac>)
    34aa:	f007 f83d 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    34ae:	2118      	movs	r1, #24
    34b0:	4834      	ldr	r0, [pc, #208]	; (3584 <printbmsstat()+0x2f0>)
    34b2:	f009 fd67 	bl	cf84 <usb_serial_write>
  SERIALCONSOLE.print(chargecurrent * 0.1, 0);
    34b6:	4b34      	ldr	r3, [pc, #208]	; (3588 <printbmsstat()+0x2f4>)
    34b8:	8818      	ldrh	r0, [r3, #0]
    34ba:	f00b fa4d 	bl	e958 <__aeabi_i2f>
    34be:	4933      	ldr	r1, [pc, #204]	; (358c <printbmsstat()+0x2f8>)
    34c0:	f00b fa9e 	bl	ea00 <__aeabi_fmul>
    34c4:	f00b f878 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    34c8:	2400      	movs	r4, #0
    34ca:	4602      	mov	r2, r0
    34cc:	460b      	mov	r3, r1
    34ce:	9400      	str	r4, [sp, #0]
    34d0:	481b      	ldr	r0, [pc, #108]	; (3540 <printbmsstat()+0x2ac>)
    34d2:	f007 f835 	bl	a540 <Print::printFloat(double, unsigned char)>
    34d6:	211d      	movs	r1, #29
    34d8:	482d      	ldr	r0, [pc, #180]	; (3590 <printbmsstat()+0x2fc>)
    34da:	f009 fd53 	bl	cf84 <usb_serial_write>
  SERIALCONSOLE.print(discurrent * 0.1, 0);
    34de:	4b2d      	ldr	r3, [pc, #180]	; (3594 <printbmsstat()+0x300>)
    34e0:	8818      	ldrh	r0, [r3, #0]
    34e2:	f00b fa39 	bl	e958 <__aeabi_i2f>
    34e6:	4929      	ldr	r1, [pc, #164]	; (358c <printbmsstat()+0x2f8>)
    34e8:	f00b fa8a 	bl	ea00 <__aeabi_fmul>
    34ec:	f00b f864 	bl	e5b8 <__aeabi_f2d>
    34f0:	9400      	str	r4, [sp, #0]
    34f2:	460b      	mov	r3, r1
    34f4:	4602      	mov	r2, r0
    34f6:	4812      	ldr	r0, [pc, #72]	; (3540 <printbmsstat()+0x2ac>)
    34f8:	4c27      	ldr	r4, [pc, #156]	; (3598 <printbmsstat()+0x304>)
    34fa:	f007 f821 	bl	a540 <Print::printFloat(double, unsigned char)>
    34fe:	4827      	ldr	r0, [pc, #156]	; (359c <printbmsstat()+0x308>)
    3500:	2102      	movs	r1, #2
    3502:	f009 fd3f 	bl	cf84 <usb_serial_write>
  if (bmsstatus == Charge || accurlim > 0)
    3506:	782b      	ldrb	r3, [r5, #0]
    3508:	2b03      	cmp	r3, #3
    350a:	d002      	beq.n	3512 <printbmsstat()+0x27e>
    350c:	8823      	ldrh	r3, [r4, #0]
    350e:	b29b      	uxth	r3, r3
    3510:	b19b      	cbz	r3, 353a <printbmsstat()+0x2a6>
    3512:	2117      	movs	r1, #23
    3514:	4822      	ldr	r0, [pc, #136]	; (35a0 <printbmsstat()+0x30c>)
    3516:	f009 fd35 	bl	cf84 <usb_serial_write>
    Serial.print(accurlim);
    351a:	8821      	ldrh	r1, [r4, #0]
	size_t print(int n)				{ return print((long)n); }
    351c:	4808      	ldr	r0, [pc, #32]	; (3540 <printbmsstat()+0x2ac>)
    351e:	b289      	uxth	r1, r1
    3520:	f006 ffe2 	bl	a4e8 <Print::print(long)>
    3524:	481d      	ldr	r0, [pc, #116]	; (359c <printbmsstat()+0x308>)
    3526:	2102      	movs	r1, #2
    3528:	f009 fd2c 	bl	cf84 <usb_serial_write>
  if (bmsstatus == Charge && CPdebug == 1)
    352c:	782b      	ldrb	r3, [r5, #0]
    352e:	2b03      	cmp	r3, #3
    3530:	d103      	bne.n	353a <printbmsstat()+0x2a6>
    3532:	4b1c      	ldr	r3, [pc, #112]	; (35a4 <printbmsstat()+0x310>)
    3534:	781b      	ldrb	r3, [r3, #0]
    3536:	2b00      	cmp	r3, #0
    3538:	d14e      	bne.n	35d8 <printbmsstat()+0x344>
}
    353a:	b003      	add	sp, #12
    353c:	bd30      	pop	{r4, r5, pc}
    353e:	bf00      	nop
    3540:	1fff89f8 	.word	0x1fff89f8
    3544:	1fffb73c 	.word	0x1fffb73c
    3548:	1fffb828 	.word	0x1fffb828
    354c:	00015ab4 	.word	0x00015ab4
    3550:	1fffb598 	.word	0x1fffb598
    3554:	00015ac4 	.word	0x00015ac4
    3558:	1fff91ec 	.word	0x1fff91ec
    355c:	1fffb820 	.word	0x1fffb820
    3560:	00016af4 	.word	0x00016af4
    3564:	1fff91e8 	.word	0x1fff91e8
    3568:	1fffb61c 	.word	0x1fffb61c
    356c:	1fffb5a0 	.word	0x1fffb5a0
    3570:	00015bbc 	.word	0x00015bbc
    3574:	00015bc4 	.word	0x00015bc4
    3578:	00015bcc 	.word	0x00015bcc
    357c:	00015bd0 	.word	0x00015bd0
    3580:	00015bd4 	.word	0x00015bd4
    3584:	00015bdc 	.word	0x00015bdc
    3588:	1fffb5a4 	.word	0x1fffb5a4
    358c:	3dcccccd 	.word	0x3dcccccd
    3590:	00015bf8 	.word	0x00015bf8
    3594:	1fffb638 	.word	0x1fffb638
    3598:	1fff91d8 	.word	0x1fff91d8
    359c:	00015c18 	.word	0x00015c18
    35a0:	00015c1c 	.word	0x00015c1c
    35a4:	1fff919c 	.word	0x1fff919c
    35a8:	210e      	movs	r1, #14
    35aa:	484b      	ldr	r0, [pc, #300]	; (36d8 <printbmsstat()+0x444>)
    35ac:	f009 fcea 	bl	cf84 <usb_serial_write>
  if (digitalRead(IN1) == HIGH)
    35b0:	2011      	movs	r0, #17
    35b2:	f007 fe9b 	bl	b2ec <digitalRead>
    35b6:	2801      	cmp	r0, #1
    35b8:	f47f aeef 	bne.w	339a <printbmsstat()+0x106>
    35bc:	4847      	ldr	r0, [pc, #284]	; (36dc <printbmsstat()+0x448>)
    35be:	210a      	movs	r1, #10
    35c0:	f009 fce0 	bl	cf84 <usb_serial_write>
  if (balancecells == 1)
    35c4:	4b46      	ldr	r3, [pc, #280]	; (36e0 <printbmsstat()+0x44c>)
    35c6:	681b      	ldr	r3, [r3, #0]
    35c8:	2b01      	cmp	r3, #1
    35ca:	f47f aeeb 	bne.w	33a4 <printbmsstat()+0x110>
    35ce:	2111      	movs	r1, #17
    35d0:	4844      	ldr	r0, [pc, #272]	; (36e4 <printbmsstat()+0x450>)
    35d2:	f009 fcd7 	bl	cf84 <usb_serial_write>
    35d6:	e6e5      	b.n	33a4 <printbmsstat()+0x110>
    35d8:	210b      	movs	r1, #11
    35da:	4843      	ldr	r0, [pc, #268]	; (36e8 <printbmsstat()+0x454>)
    35dc:	f009 fcd2 	bl	cf84 <usb_serial_write>
    Serial.print(duration);
    35e0:	4b42      	ldr	r3, [pc, #264]	; (36ec <printbmsstat()+0x458>)
    35e2:	4843      	ldr	r0, [pc, #268]	; (36f0 <printbmsstat()+0x45c>)
    35e4:	8819      	ldrh	r1, [r3, #0]
    35e6:	b289      	uxth	r1, r1
    35e8:	f006 ff7e 	bl	a4e8 <Print::print(long)>
    35ec:	2111      	movs	r1, #17
    35ee:	4841      	ldr	r0, [pc, #260]	; (36f4 <printbmsstat()+0x460>)
    35f0:	f009 fcc8 	bl	cf84 <usb_serial_write>
    Serial.print(chargerpower);
    35f4:	4b40      	ldr	r3, [pc, #256]	; (36f8 <printbmsstat()+0x464>)
    35f6:	483e      	ldr	r0, [pc, #248]	; (36f0 <printbmsstat()+0x45c>)
    35f8:	8819      	ldrh	r1, [r3, #0]
    35fa:	f006 ff75 	bl	a4e8 <Print::print(long)>
    if (chargecurrentlimit == false)
    35fe:	4b3f      	ldr	r3, [pc, #252]	; (36fc <printbmsstat()+0x468>)
    3600:	781b      	ldrb	r3, [r3, #0]
    3602:	2b00      	cmp	r3, #0
    3604:	d165      	bne.n	36d2 <printbmsstat()+0x43e>
    3606:	483e      	ldr	r0, [pc, #248]	; (3700 <printbmsstat()+0x46c>)
    3608:	2119      	movs	r1, #25
}
    360a:	b003      	add	sp, #12
    360c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3610:	f009 bcb8 	b.w	cf84 <usb_serial_write>
    3614:	2107      	movs	r1, #7
    3616:	483b      	ldr	r0, [pc, #236]	; (3704 <printbmsstat()+0x470>)
    3618:	f009 fcb4 	bl	cf84 <usb_serial_write>
    361c:	e6ad      	b.n	337a <printbmsstat()+0xe6>
    361e:	2108      	movs	r1, #8
    3620:	4839      	ldr	r0, [pc, #228]	; (3708 <printbmsstat()+0x474>)
    3622:	f009 fcaf 	bl	cf84 <usb_serial_write>
    3626:	e6a8      	b.n	337a <printbmsstat()+0xe6>
    3628:	210b      	movs	r1, #11
    362a:	4838      	ldr	r0, [pc, #224]	; (370c <printbmsstat()+0x478>)
    362c:	f009 fcaa 	bl	cf84 <usb_serial_write>
    3630:	e6a3      	b.n	337a <printbmsstat()+0xe6>
    3632:	2106      	movs	r1, #6
    3634:	4836      	ldr	r0, [pc, #216]	; (3710 <printbmsstat()+0x47c>)
    3636:	f009 fca5 	bl	cf84 <usb_serial_write>
    363a:	e69e      	b.n	337a <printbmsstat()+0xe6>
    363c:	2107      	movs	r1, #7
    363e:	4835      	ldr	r0, [pc, #212]	; (3714 <printbmsstat()+0x480>)
    3640:	f009 fca0 	bl	cf84 <usb_serial_write>
    3644:	e699      	b.n	337a <printbmsstat()+0xe6>
    3646:	2107      	movs	r1, #7
    3648:	4833      	ldr	r0, [pc, #204]	; (3718 <printbmsstat()+0x484>)
    364a:	f009 fc9b 	bl	cf84 <usb_serial_write>
    364e:	e694      	b.n	337a <printbmsstat()+0xe6>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint)
    3650:	4832      	ldr	r0, [pc, #200]	; (371c <printbmsstat()+0x488>)
        if ( bmsstatus == Error)
    3652:	4d33      	ldr	r5, [pc, #204]	; (3720 <printbmsstat()+0x48c>)
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint)
    3654:	f7fe fe0a 	bl	226c <BMSModuleManager::getHighCellVolt()>
    3658:	68e1      	ldr	r1, [r4, #12]
    365a:	f00b fb6f 	bl	ed3c <__aeabi_fcmplt>
    365e:	2800      	cmp	r0, #0
    3660:	f43f ae8b 	beq.w	337a <printbmsstat()+0xe6>
        if ( bmsstatus == Error)
    3664:	782b      	ldrb	r3, [r5, #0]
    3666:	2b05      	cmp	r3, #5
    3668:	d10b      	bne.n	3682 <printbmsstat()+0x3ee>
    366a:	210a      	movs	r1, #10
    366c:	482d      	ldr	r0, [pc, #180]	; (3724 <printbmsstat()+0x490>)
    366e:	f009 fc89 	bl	cf84 <usb_serial_write>
    3672:	e682      	b.n	337a <printbmsstat()+0xe6>
      if (bms.getLowCellVolt() > settings.StoreVsetpoint)
    3674:	f7fe fdf2 	bl	225c <BMSModuleManager::getLowCellVolt()>
    3678:	6a61      	ldr	r1, [r4, #36]	; 0x24
    367a:	f00b fb7d 	bl	ed78 <__aeabi_fcmpgt>
    367e:	b9f0      	cbnz	r0, 36be <printbmsstat()+0x42a>
    3680:	4d27      	ldr	r5, [pc, #156]	; (3720 <printbmsstat()+0x48c>)
    3682:	4829      	ldr	r0, [pc, #164]	; (3728 <printbmsstat()+0x494>)
    3684:	2108      	movs	r1, #8
    3686:	f009 fc7d 	bl	cf84 <usb_serial_write>
    368a:	e676      	b.n	337a <printbmsstat()+0xe6>
    368c:	210f      	movs	r1, #15
    368e:	4827      	ldr	r0, [pc, #156]	; (372c <printbmsstat()+0x498>)
    3690:	f009 fc78 	bl	cf84 <usb_serial_write>
    3694:	e636      	b.n	3304 <printbmsstat()+0x70>
    3696:	210d      	movs	r1, #13
    3698:	4825      	ldr	r0, [pc, #148]	; (3730 <printbmsstat()+0x49c>)
    369a:	f009 fc73 	bl	cf84 <usb_serial_write>
    369e:	e65d      	b.n	335c <printbmsstat()+0xc8>
    36a0:	210c      	movs	r1, #12
    36a2:	4824      	ldr	r0, [pc, #144]	; (3734 <printbmsstat()+0x4a0>)
    36a4:	f009 fc6e 	bl	cf84 <usb_serial_write>
    36a8:	e64f      	b.n	334a <printbmsstat()+0xb6>
    36aa:	2111      	movs	r1, #17
    36ac:	4822      	ldr	r0, [pc, #136]	; (3738 <printbmsstat()+0x4a4>)
    36ae:	f009 fc69 	bl	cf84 <usb_serial_write>
    36b2:	e641      	b.n	3338 <printbmsstat()+0xa4>
    36b4:	210e      	movs	r1, #14
    36b6:	4821      	ldr	r0, [pc, #132]	; (373c <printbmsstat()+0x4a8>)
    36b8:	f009 fc64 	bl	cf84 <usb_serial_write>
    36bc:	e62b      	b.n	3316 <printbmsstat()+0x82>
    36be:	2116      	movs	r1, #22
    36c0:	481f      	ldr	r0, [pc, #124]	; (3740 <printbmsstat()+0x4ac>)
    36c2:	4d17      	ldr	r5, [pc, #92]	; (3720 <printbmsstat()+0x48c>)
    36c4:	f009 fc5e 	bl	cf84 <usb_serial_write>
    36c8:	4816      	ldr	r0, [pc, #88]	; (3724 <printbmsstat()+0x490>)
    36ca:	210a      	movs	r1, #10
    36cc:	f009 fc5a 	bl	cf84 <usb_serial_write>
    36d0:	e653      	b.n	337a <printbmsstat()+0xe6>
    36d2:	481c      	ldr	r0, [pc, #112]	; (3744 <printbmsstat()+0x4b0>)
    36d4:	211d      	movs	r1, #29
    36d6:	e798      	b.n	360a <printbmsstat()+0x376>
    36d8:	00015b8c 	.word	0x00015b8c
    36dc:	00015b9c 	.word	0x00015b9c
    36e0:	1fff91e8 	.word	0x1fff91e8
    36e4:	00015ba8 	.word	0x00015ba8
    36e8:	00015c34 	.word	0x00015c34
    36ec:	1fffb63a 	.word	0x1fffb63a
    36f0:	1fff89f8 	.word	0x1fff89f8
    36f4:	00015c40 	.word	0x00015c40
    36f8:	1fffb5b0 	.word	0x1fffb5b0
    36fc:	1fffb5a6 	.word	0x1fffb5a6
    3700:	00015c54 	.word	0x00015c54
    3704:	00015b84 	.word	0x00015b84
    3708:	00015b78 	.word	0x00015b78
    370c:	00015b64 	.word	0x00015b64
    3710:	00015b54 	.word	0x00015b54
    3714:	00015b5c 	.word	0x00015b5c
    3718:	00015b70 	.word	0x00015b70
    371c:	1fff91ec 	.word	0x1fff91ec
    3720:	1fffb598 	.word	0x1fffb598
    3724:	00015b3c 	.word	0x00015b3c
    3728:	00015b48 	.word	0x00015b48
    372c:	00015ad0 	.word	0x00015ad0
    3730:	00015b14 	.word	0x00015b14
    3734:	00015b04 	.word	0x00015b04
    3738:	00015af0 	.word	0x00015af0
    373c:	00015ae0 	.word	0x00015ae0
    3740:	00015b24 	.word	0x00015b24
    3744:	00015c70 	.word	0x00015c70

00003748 <getcurrent()>:
{
    3748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ( settings.cursens == Analoguedual || settings.cursens == Analoguesing)
    374c:	4cb5      	ldr	r4, [pc, #724]	; (3a24 <getcurrent()+0x2dc>)
    374e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    3752:	2e01      	cmp	r6, #1
{
    3754:	b08c      	sub	sp, #48	; 0x30
  if ( settings.cursens == Analoguedual || settings.cursens == Analoguesing)
    3756:	f000 8144 	beq.w	39e2 <getcurrent()+0x29a>
    375a:	2e03      	cmp	r6, #3
    375c:	d05c      	beq.n	3818 <getcurrent()+0xd0>
    375e:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 3a28 <getcurrent()+0x2e0>
    3762:	4fb2      	ldr	r7, [pc, #712]	; (3a2c <getcurrent()+0x2e4>)
    3764:	4eb2      	ldr	r6, [pc, #712]	; (3a30 <getcurrent()+0x2e8>)
  if (settings.invertcur == 1)
    3766:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  lowpassFilter.input(RawCur);
    3768:	48b2      	ldr	r0, [pc, #712]	; (3a34 <getcurrent()+0x2ec>)
  if (settings.invertcur == 1)
    376a:	2b01      	cmp	r3, #1
    RawCur = RawCur * -1;
    376c:	bf09      	itett	eq
    376e:	6831      	ldreq	r1, [r6, #0]
    3770:	6831      	ldrne	r1, [r6, #0]
    3772:	f101 4100 	addeq.w	r1, r1, #2147483648	; 0x80000000
    3776:	6031      	streq	r1, [r6, #0]
  lowpassFilter.input(RawCur);
    3778:	f006 fc62 	bl	a040 <FilterOnePole::input(float)>
  if (debugCur != 0)
    377c:	683b      	ldr	r3, [r7, #0]
    377e:	2b00      	cmp	r3, #0
    3780:	f040 8115 	bne.w	39ae <getcurrent()+0x266>
  currentact = lowpassFilter.output();
    3784:	48ab      	ldr	r0, [pc, #684]	; (3a34 <getcurrent()+0x2ec>)
    3786:	f006 fc2f 	bl	9fe8 <FilterOnePole::output()>
  if (debugCur != 0)
    378a:	683b      	ldr	r3, [r7, #0]
  currentact = lowpassFilter.output();
    378c:	f8c8 0000 	str.w	r0, [r8]
    3790:	4605      	mov	r5, r0
  if (debugCur != 0)
    3792:	2b00      	cmp	r3, #0
    3794:	f040 80fb 	bne.w	398e <getcurrent()+0x246>
  if ( settings.cursens == Analoguedual)
    3798:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    379c:	2b01      	cmp	r3, #1
    379e:	f000 80ba 	beq.w	3916 <getcurrent()+0x1ce>
    if (currentact > 500 || currentact < -500 )
    37a2:	49a5      	ldr	r1, [pc, #660]	; (3a38 <getcurrent()+0x2f0>)
    37a4:	4628      	mov	r0, r5
    37a6:	f00b fae7 	bl	ed78 <__aeabi_fcmpgt>
    37aa:	b930      	cbnz	r0, 37ba <getcurrent()+0x72>
    37ac:	49a3      	ldr	r1, [pc, #652]	; (3a3c <getcurrent()+0x2f4>)
    37ae:	4628      	mov	r0, r5
    37b0:	f00b fac4 	bl	ed3c <__aeabi_fcmplt>
    37b4:	2800      	cmp	r0, #0
    37b6:	f000 81e0 	beq.w	3b7a <getcurrent()+0x432>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37ba:	f8df a284 	ldr.w	sl, [pc, #644]	; 3a40 <getcurrent()+0x2f8>
      ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    37be:	f8df 9284 	ldr.w	r9, [pc, #644]	; 3a44 <getcurrent()+0x2fc>
    37c2:	f8da 3000 	ldr.w	r3, [sl]
    37c6:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    37c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    37ca:	f8d9 3000 	ldr.w	r3, [r9]
    37ce:	4f9e      	ldr	r7, [pc, #632]	; (3a48 <getcurrent()+0x300>)
    37d0:	1ac0      	subs	r0, r0, r3
    37d2:	f00b f8bd 	bl	e950 <__aeabi_ui2f>
    37d6:	4629      	mov	r1, r5
    37d8:	f00b f912 	bl	ea00 <__aeabi_fmul>
    37dc:	499b      	ldr	r1, [pc, #620]	; (3a4c <getcurrent()+0x304>)
    37de:	f00b f9c3 	bl	eb68 <__aeabi_fdiv>
    37e2:	499a      	ldr	r1, [pc, #616]	; (3a4c <getcurrent()+0x304>)
    37e4:	f00b f9c0 	bl	eb68 <__aeabi_fdiv>
    37e8:	6839      	ldr	r1, [r7, #0]
    37ea:	f00b f801 	bl	e7f0 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37ee:	f8da 3000 	ldr.w	r3, [sl]
    37f2:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    37f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    37f6:	6038      	str	r0, [r7, #0]
      lasttime = millis();
    37f8:	f8c9 3000 	str.w	r3, [r9]
  currentact = settings.ncur * currentact;
    37fc:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    3800:	f00b f8aa 	bl	e958 <__aeabi_i2f>
    3804:	4629      	mov	r1, r5
    3806:	f00b f8fb 	bl	ea00 <__aeabi_fmul>
  RawCur = 0;
    380a:	2300      	movs	r3, #0
  currentact = settings.ncur * currentact;
    380c:	f8c8 0000 	str.w	r0, [r8]
  RawCur = 0;
    3810:	6033      	str	r3, [r6, #0]
}
    3812:	b00c      	add	sp, #48	; 0x30
    3814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      adc->adc0->startContinuous(ACUR1);
    3818:	4d8d      	ldr	r5, [pc, #564]	; (3a50 <getcurrent()+0x308>)
      sensor = 1;
    381a:	4f8e      	ldr	r7, [pc, #568]	; (3a54 <getcurrent()+0x30c>)
      adc->adc0->startContinuous(ACUR1);
    381c:	682a      	ldr	r2, [r5, #0]
    381e:	f8df 8208 	ldr.w	r8, [pc, #520]	; 3a28 <getcurrent()+0x2e0>
    3822:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      sensor = 1;
    3826:	2301      	movs	r3, #1
      adc->adc0->startContinuous(ACUR1);
    3828:	210f      	movs	r1, #15
      sensor = 1;
    382a:	603b      	str	r3, [r7, #0]
      adc->adc0->startContinuous(ACUR1);
    382c:	f005 fda8 	bl	9380 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1)
    3830:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0)
    3832:	4f7e      	ldr	r7, [pc, #504]	; (3a2c <getcurrent()+0x2e4>)
    if (sensor == 1)
    3834:	2b01      	cmp	r3, #1
      if (debugCur != 0)
    3836:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1)
    3838:	f000 812c 	beq.w	3a94 <getcurrent()+0x34c>
      if (debugCur != 0)
    383c:	2b00      	cmp	r3, #0
    383e:	f040 81af 	bne.w	3ba0 <getcurrent()+0x458>
      value = (uint16_t)adc->adc0->analogReadContinuous(); // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3842:	682b      	ldr	r3, [r5, #0]
    3844:	f8df 9210 	ldr.w	r9, [pc, #528]	; 3a58 <getcurrent()+0x310>
    3848:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    int analogReadContinuous() __attribute__((always_inline))
    {
#ifdef ADC_TEENSY_4
        return (int16_t)(int32_t)adc_regs.R0;
#else
        return (int16_t)(int32_t)adc_regs.RA;
    384c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    384e:	691e      	ldr	r6, [r3, #16]
    3850:	b2b6      	uxth	r6, r6
    3852:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh *  0.0000066);
    3856:	f005 fadb 	bl	8e10 <ADC_Module::getMaxValue()>
    385a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
    385e:	f640 43e4 	movw	r3, #3300	; 0xce4
    3862:	fb06 f303 	mul.w	r3, r6, r3
    3866:	fbb3 f0f0 	udiv	r0, r3, r0
    386a:	1a80      	subs	r0, r0, r2
    386c:	b200      	sxth	r0, r0
    386e:	f00b f873 	bl	e958 <__aeabi_i2f>
    3872:	497a      	ldr	r1, [pc, #488]	; (3a5c <getcurrent()+0x314>)
    3874:	4606      	mov	r6, r0
    3876:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    387a:	f00b f8c1 	bl	ea00 <__aeabi_fmul>
    387e:	4601      	mov	r1, r0
    3880:	4630      	mov	r0, r6
    3882:	f00b f971 	bl	eb68 <__aeabi_fdiv>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100))
    3886:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh *  0.0000066);
    388a:	4e69      	ldr	r6, [pc, #420]	; (3a30 <getcurrent()+0x2e8>)
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100))
    388c:	2b63      	cmp	r3, #99	; 0x63
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh *  0.0000066);
    388e:	6030      	str	r0, [r6, #0]
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100))
    3890:	f300 817a 	bgt.w	3b88 <getcurrent()+0x440>
        RawCur = 0;
    3894:	2300      	movs	r3, #0
    3896:	6033      	str	r3, [r6, #0]
      if (debugCur != 0)
    3898:	683b      	ldr	r3, [r7, #0]
    389a:	2b00      	cmp	r3, #0
    389c:	f43f af63 	beq.w	3766 <getcurrent()+0x1e>
    38a0:	2102      	movs	r1, #2
    38a2:	486f      	ldr	r0, [pc, #444]	; (3a60 <getcurrent()+0x318>)
    38a4:	f009 fb6e 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print((float(value * 3300 / adc->adc0->getMaxValue()) - settings.offset2));
    38a8:	682b      	ldr	r3, [r5, #0]
    38aa:	f8d9 5000 	ldr.w	r5, [r9]
    38ae:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    38b2:	f640 43e4 	movw	r3, #3300	; 0xce4
    38b6:	fb03 f505 	mul.w	r5, r3, r5
    38ba:	f005 faa9 	bl	8e10 <ADC_Module::getMaxValue()>
    38be:	fbb5 f0f0 	udiv	r0, r5, r0
    38c2:	f00b f845 	bl	e950 <__aeabi_ui2f>
    38c6:	4605      	mov	r5, r0
    38c8:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    38cc:	f00b f844 	bl	e958 <__aeabi_i2f>
    38d0:	4601      	mov	r1, r0
    38d2:	4628      	mov	r0, r5
    38d4:	f00a ff8a 	bl	e7ec <__aeabi_fsub>
    38d8:	f00a fe6e 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    38dc:	2502      	movs	r5, #2
    38de:	4602      	mov	r2, r0
    38e0:	460b      	mov	r3, r1
    38e2:	9500      	str	r5, [sp, #0]
    38e4:	485f      	ldr	r0, [pc, #380]	; (3a64 <getcurrent()+0x31c>)
    38e6:	f006 fe2b 	bl	a540 <Print::printFloat(double, unsigned char)>
    38ea:	4629      	mov	r1, r5
    38ec:	485c      	ldr	r0, [pc, #368]	; (3a60 <getcurrent()+0x318>)
    38ee:	f009 fb49 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    38f2:	6830      	ldr	r0, [r6, #0]
    38f4:	f00a fe60 	bl	e5b8 <__aeabi_f2d>
    38f8:	9500      	str	r5, [sp, #0]
    38fa:	4602      	mov	r2, r0
    38fc:	460b      	mov	r3, r1
    38fe:	4859      	ldr	r0, [pc, #356]	; (3a64 <getcurrent()+0x31c>)
    3900:	f006 fe1e 	bl	a540 <Print::printFloat(double, unsigned char)>
    3904:	4629      	mov	r1, r5
    3906:	4858      	ldr	r0, [pc, #352]	; (3a68 <getcurrent()+0x320>)
    3908:	f009 fb3c 	bl	cf84 <usb_serial_write>
    390c:	4629      	mov	r1, r5
    390e:	4854      	ldr	r0, [pc, #336]	; (3a60 <getcurrent()+0x318>)
    3910:	f009 fb38 	bl	cf84 <usb_serial_write>
    3914:	e727      	b.n	3766 <getcurrent()+0x1e>
    if (sensor == 1)
    3916:	4b4f      	ldr	r3, [pc, #316]	; (3a54 <getcurrent()+0x30c>)
    3918:	681b      	ldr	r3, [r3, #0]
    391a:	2b01      	cmp	r3, #1
    391c:	f000 8175 	beq.w	3c0a <getcurrent()+0x4c2>
    if (sensor == 2)
    3920:	2b02      	cmp	r3, #2
    3922:	f47f af6b 	bne.w	37fc <getcurrent()+0xb4>
      if (currentact > settings.changecur || currentact < (settings.changecur * -1) )
    3926:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
    392a:	4638      	mov	r0, r7
    392c:	f00b f814 	bl	e958 <__aeabi_i2f>
    3930:	4629      	mov	r1, r5
    3932:	f00b fa03 	bl	ed3c <__aeabi_fcmplt>
    3936:	b940      	cbnz	r0, 394a <getcurrent()+0x202>
    3938:	4278      	negs	r0, r7
    393a:	f00b f80d 	bl	e958 <__aeabi_i2f>
    393e:	4629      	mov	r1, r5
    3940:	f00b fa1a 	bl	ed78 <__aeabi_fcmpgt>
    3944:	2800      	cmp	r0, #0
    3946:	f000 81ce 	beq.w	3ce6 <getcurrent()+0x59e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    394a:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 3a40 <getcurrent()+0x2f8>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    394e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 3a44 <getcurrent()+0x2fc>
    3952:	f8da 3000 	ldr.w	r3, [sl]
    3956:	9307      	str	r3, [sp, #28]
	return ret;
    3958:	9807      	ldr	r0, [sp, #28]
    395a:	f8d9 3000 	ldr.w	r3, [r9]
    395e:	4f3a      	ldr	r7, [pc, #232]	; (3a48 <getcurrent()+0x300>)
    3960:	1ac0      	subs	r0, r0, r3
    3962:	f00a fff5 	bl	e950 <__aeabi_ui2f>
    3966:	4629      	mov	r1, r5
    3968:	f00b f84a 	bl	ea00 <__aeabi_fmul>
    396c:	4937      	ldr	r1, [pc, #220]	; (3a4c <getcurrent()+0x304>)
    396e:	f00b f8fb 	bl	eb68 <__aeabi_fdiv>
    3972:	4936      	ldr	r1, [pc, #216]	; (3a4c <getcurrent()+0x304>)
    3974:	f00b f8f8 	bl	eb68 <__aeabi_fdiv>
    3978:	6839      	ldr	r1, [r7, #0]
    397a:	f00a ff39 	bl	e7f0 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    397e:	f8da 3000 	ldr.w	r3, [sl]
    3982:	9306      	str	r3, [sp, #24]
	return ret;
    3984:	9b06      	ldr	r3, [sp, #24]
    3986:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    3988:	f8c9 3000 	str.w	r3, [r9]
    398c:	e736      	b.n	37fc <getcurrent()+0xb4>
    SERIALCONSOLE.print(currentact);
    398e:	f00a fe13 	bl	e5b8 <__aeabi_f2d>
    3992:	460b      	mov	r3, r1
    3994:	2102      	movs	r1, #2
    3996:	4602      	mov	r2, r0
    3998:	9100      	str	r1, [sp, #0]
    399a:	4832      	ldr	r0, [pc, #200]	; (3a64 <getcurrent()+0x31c>)
    399c:	f006 fdd0 	bl	a540 <Print::printFloat(double, unsigned char)>
    39a0:	4832      	ldr	r0, [pc, #200]	; (3a6c <getcurrent()+0x324>)
    39a2:	2104      	movs	r1, #4
    39a4:	f009 faee 	bl	cf84 <usb_serial_write>
      if (currentact > 500 || currentact < -500 )
    39a8:	f8d8 5000 	ldr.w	r5, [r8]
    39ac:	e6f4      	b.n	3798 <getcurrent()+0x50>
    SERIALCONSOLE.print(lowpassFilter.output());
    39ae:	4821      	ldr	r0, [pc, #132]	; (3a34 <getcurrent()+0x2ec>)
    39b0:	f006 fb1a 	bl	9fe8 <FilterOnePole::output()>
    39b4:	f00a fe00 	bl	e5b8 <__aeabi_f2d>
    39b8:	460b      	mov	r3, r1
    39ba:	2102      	movs	r1, #2
    39bc:	4602      	mov	r2, r0
    39be:	9100      	str	r1, [sp, #0]
    39c0:	4828      	ldr	r0, [pc, #160]	; (3a64 <getcurrent()+0x31c>)
    39c2:	f006 fdbd 	bl	a540 <Print::printFloat(double, unsigned char)>
    39c6:	2103      	movs	r1, #3
    39c8:	4829      	ldr	r0, [pc, #164]	; (3a70 <getcurrent()+0x328>)
    39ca:	f009 fadb 	bl	cf84 <usb_serial_write>
    SERIALCONSOLE.print(settings.changecur);
    39ce:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    39d2:	4824      	ldr	r0, [pc, #144]	; (3a64 <getcurrent()+0x31c>)
    39d4:	f006 fd88 	bl	a4e8 <Print::print(long)>
    39d8:	2103      	movs	r1, #3
    39da:	4825      	ldr	r0, [pc, #148]	; (3a70 <getcurrent()+0x328>)
    39dc:	f009 fad2 	bl	cf84 <usb_serial_write>
    39e0:	e6d0      	b.n	3784 <getcurrent()+0x3c>
      if (currentact < settings.changecur && currentact > (settings.changecur * -1))
    39e2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3a28 <getcurrent()+0x2e0>
    39e6:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
    39ea:	f8d8 5000 	ldr.w	r5, [r8]
    39ee:	4638      	mov	r0, r7
    39f0:	f00a ffb2 	bl	e958 <__aeabi_i2f>
    39f4:	4629      	mov	r1, r5
    39f6:	f00b f9bf 	bl	ed78 <__aeabi_fcmpgt>
    39fa:	2800      	cmp	r0, #0
    39fc:	d03a      	beq.n	3a74 <getcurrent()+0x32c>
    39fe:	4278      	negs	r0, r7
    3a00:	f00a ffaa 	bl	e958 <__aeabi_i2f>
    3a04:	4601      	mov	r1, r0
    3a06:	4628      	mov	r0, r5
    3a08:	f00b f9b6 	bl	ed78 <__aeabi_fcmpgt>
    3a0c:	b390      	cbz	r0, 3a74 <getcurrent()+0x32c>
        adc->adc0->startContinuous(ACUR1);
    3a0e:	4d10      	ldr	r5, [pc, #64]	; (3a50 <getcurrent()+0x308>)
        sensor = 1;
    3a10:	4f10      	ldr	r7, [pc, #64]	; (3a54 <getcurrent()+0x30c>)
        adc->adc0->startContinuous(ACUR1);
    3a12:	682b      	ldr	r3, [r5, #0]
        sensor = 1;
    3a14:	603e      	str	r6, [r7, #0]
        adc->adc0->startContinuous(ACUR1);
    3a16:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3a1a:	210f      	movs	r1, #15
    3a1c:	f005 fcb0 	bl	9380 <ADC_Module::startContinuous(unsigned char)>
    3a20:	e706      	b.n	3830 <getcurrent()+0xe8>
    3a22:	bf00      	nop
    3a24:	1fffb73c 	.word	0x1fffb73c
    3a28:	1fffb62c 	.word	0x1fffb62c
    3a2c:	1fffb630 	.word	0x1fffb630
    3a30:	1fff91c4 	.word	0x1fff91c4
    3a34:	1fffb66c 	.word	0x1fffb66c
    3a38:	43fa0000 	.word	0x43fa0000
    3a3c:	c3fa0000 	.word	0xc3fa0000
    3a40:	1fffba38 	.word	0x1fffba38
    3a44:	1fffb660 	.word	0x1fffb660
    3a48:	1fff91e4 	.word	0x1fff91e4
    3a4c:	447a0000 	.word	0x447a0000
    3a50:	1fff91dc 	.word	0x1fff91dc
    3a54:	1fff8874 	.word	0x1fff8874
    3a58:	1fffb830 	.word	0x1fffb830
    3a5c:	36dd7591 	.word	0x36dd7591
    3a60:	00016af4 	.word	0x00016af4
    3a64:	1fff89f8 	.word	0x1fff89f8
    3a68:	00015ccc 	.word	0x00015ccc
    3a6c:	00015cd0 	.word	0x00015cd0
    3a70:	00015834 	.word	0x00015834
        sensor = 2;
    3a74:	4f9f      	ldr	r7, [pc, #636]	; (3cf4 <getcurrent()+0x5ac>)
        adc->adc0->startContinuous(ACUR2);
    3a76:	4da0      	ldr	r5, [pc, #640]	; (3cf8 <getcurrent()+0x5b0>)
        sensor = 2;
    3a78:	2302      	movs	r3, #2
    3a7a:	603b      	str	r3, [r7, #0]
        adc->adc0->startContinuous(ACUR2);
    3a7c:	682b      	ldr	r3, [r5, #0]
    3a7e:	210e      	movs	r1, #14
    3a80:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3a84:	f005 fc7c 	bl	9380 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1)
    3a88:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0)
    3a8a:	4f9c      	ldr	r7, [pc, #624]	; (3cfc <getcurrent()+0x5b4>)
    if (sensor == 1)
    3a8c:	2b01      	cmp	r3, #1
      if (debugCur != 0)
    3a8e:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1)
    3a90:	f47f aed4 	bne.w	383c <getcurrent()+0xf4>
      if (debugCur != 0)
    3a94:	2b00      	cmp	r3, #0
    3a96:	f040 80e5 	bne.w	3c64 <getcurrent()+0x51c>
      value = (uint16_t)adc->adc0->analogReadContinuous(); // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3a9a:	682b      	ldr	r3, [r5, #0]
    3a9c:	f8df 9260 	ldr.w	r9, [pc, #608]	; 3d00 <getcurrent()+0x5b8>
    3aa0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3aa4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3aa6:	691e      	ldr	r6, [r3, #16]
    3aa8:	b2b6      	uxth	r6, r6
    3aaa:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    3aae:	f005 f9af 	bl	8e10 <ADC_Module::getMaxValue()>
    3ab2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    3ab6:	f640 4ae4 	movw	sl, #3300	; 0xce4
    3aba:	fb0a f606 	mul.w	r6, sl, r6
    3abe:	fbb6 f6f0 	udiv	r6, r6, r0
    3ac2:	1af0      	subs	r0, r6, r3
    3ac4:	b200      	sxth	r0, r0
    3ac6:	f00a ff47 	bl	e958 <__aeabi_i2f>
    3aca:	498e      	ldr	r1, [pc, #568]	; (3d04 <getcurrent()+0x5bc>)
    3acc:	4606      	mov	r6, r0
    3ace:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    3ad2:	f00a ff95 	bl	ea00 <__aeabi_fmul>
    3ad6:	4601      	mov	r1, r0
    3ad8:	4630      	mov	r0, r6
    3ada:	f00b f845 	bl	eb68 <__aeabi_fdiv>
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) <  settings.CurDead)
    3ade:	682b      	ldr	r3, [r5, #0]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    3ae0:	4e89      	ldr	r6, [pc, #548]	; (3d08 <getcurrent()+0x5c0>)
    3ae2:	4602      	mov	r2, r0
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) <  settings.CurDead)
    3ae4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3ae8:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    3aec:	6032      	str	r2, [r6, #0]
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) <  settings.CurDead)
    3aee:	fb0a fa03 	mul.w	sl, sl, r3
    3af2:	f005 f98d 	bl	8e10 <ADC_Module::getMaxValue()>
    3af6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    3afa:	fbba f3f0 	udiv	r3, sl, r0
    3afe:	b21b      	sxth	r3, r3
    3b00:	1a9b      	subs	r3, r3, r2
    3b02:	2b00      	cmp	r3, #0
    3b04:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    3b08:	bfb8      	it	lt
    3b0a:	425b      	neglt	r3, r3
    3b0c:	429a      	cmp	r2, r3
        RawCur = 0;
    3b0e:	bfc4      	itt	gt
    3b10:	2300      	movgt	r3, #0
    3b12:	6033      	strgt	r3, [r6, #0]
      if (debugCur != 0)
    3b14:	683b      	ldr	r3, [r7, #0]
    3b16:	2b00      	cmp	r3, #0
    3b18:	f43f ae25 	beq.w	3766 <getcurrent()+0x1e>
    3b1c:	2102      	movs	r1, #2
    3b1e:	487b      	ldr	r0, [pc, #492]	; (3d0c <getcurrent()+0x5c4>)
    3b20:	f009 fa30 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1);
    3b24:	682b      	ldr	r3, [r5, #0]
    3b26:	f8d9 5000 	ldr.w	r5, [r9]
    3b2a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3b2e:	f640 43e4 	movw	r3, #3300	; 0xce4
    3b32:	fb03 f505 	mul.w	r5, r3, r5
    3b36:	f005 f96b 	bl	8e10 <ADC_Module::getMaxValue()>
    3b3a:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    3b3e:	fbb5 f5f0 	udiv	r5, r5, r0
    3b42:	b22d      	sxth	r5, r5
	size_t print(int n)				{ return print((long)n); }
    3b44:	1a69      	subs	r1, r5, r1
    3b46:	4872      	ldr	r0, [pc, #456]	; (3d10 <getcurrent()+0x5c8>)
    3b48:	f006 fcce 	bl	a4e8 <Print::print(long)>
    3b4c:	2102      	movs	r1, #2
    3b4e:	486f      	ldr	r0, [pc, #444]	; (3d0c <getcurrent()+0x5c4>)
    3b50:	f009 fa18 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    3b54:	6830      	ldr	r0, [r6, #0]
    3b56:	f00a fd2f 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3b5a:	2502      	movs	r5, #2
    3b5c:	4602      	mov	r2, r0
    3b5e:	460b      	mov	r3, r1
    3b60:	9500      	str	r5, [sp, #0]
    3b62:	486b      	ldr	r0, [pc, #428]	; (3d10 <getcurrent()+0x5c8>)
    3b64:	f006 fcec 	bl	a540 <Print::printFloat(double, unsigned char)>
    3b68:	2103      	movs	r1, #3
    3b6a:	486a      	ldr	r0, [pc, #424]	; (3d14 <getcurrent()+0x5cc>)
    3b6c:	f009 fa0a 	bl	cf84 <usb_serial_write>
    3b70:	4629      	mov	r1, r5
    3b72:	4866      	ldr	r0, [pc, #408]	; (3d0c <getcurrent()+0x5c4>)
    3b74:	f009 fa06 	bl	cf84 <usb_serial_write>
    3b78:	e5f5      	b.n	3766 <getcurrent()+0x1e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b7a:	4b67      	ldr	r3, [pc, #412]	; (3d18 <getcurrent()+0x5d0>)
    3b7c:	681b      	ldr	r3, [r3, #0]
    3b7e:	930b      	str	r3, [sp, #44]	; 0x2c
      lasttime = millis();
    3b80:	4b66      	ldr	r3, [pc, #408]	; (3d1c <getcurrent()+0x5d4>)
	return ret;
    3b82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3b84:	601a      	str	r2, [r3, #0]
    3b86:	e639      	b.n	37fc <getcurrent()+0xb4>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100))
    3b88:	682b      	ldr	r3, [r5, #0]
    3b8a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3b8e:	f005 f93f 	bl	8e10 <ADC_Module::getMaxValue()>
    3b92:	f8d9 3000 	ldr.w	r3, [r9]
    3b96:	3864      	subs	r0, #100	; 0x64
    3b98:	4298      	cmp	r0, r3
    3b9a:	f4ff ae7b 	bcc.w	3894 <getcurrent()+0x14c>
    3b9e:	e67b      	b.n	3898 <getcurrent()+0x150>
        SERIALCONSOLE.println();
    3ba0:	485b      	ldr	r0, [pc, #364]	; (3d10 <getcurrent()+0x5c8>)
      value = (uint16_t)adc->adc0->analogReadContinuous(); // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3ba2:	f8df 915c 	ldr.w	r9, [pc, #348]	; 3d00 <getcurrent()+0x5b8>
        SERIALCONSOLE.println();
    3ba6:	f006 fca7 	bl	a4f8 <Print::println()>
    3baa:	210c      	movs	r1, #12
    3bac:	485c      	ldr	r0, [pc, #368]	; (3d20 <getcurrent()+0x5d8>)
    3bae:	f009 f9e9 	bl	cf84 <usb_serial_write>
    3bb2:	485c      	ldr	r0, [pc, #368]	; (3d24 <getcurrent()+0x5dc>)
    3bb4:	210c      	movs	r1, #12
    3bb6:	f009 f9e5 	bl	cf84 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous(); // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3bba:	682b      	ldr	r3, [r5, #0]
      if (debugCur != 0)
    3bbc:	683a      	ldr	r2, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous(); // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3bbe:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3bc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3bc4:	691e      	ldr	r6, [r3, #16]
    3bc6:	b2b6      	uxth	r6, r6
    3bc8:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0)
    3bcc:	2a00      	cmp	r2, #0
    3bce:	f43f ae42 	beq.w	3856 <getcurrent()+0x10e>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue() );//- settings.offset2)
    3bd2:	f005 f91d 	bl	8e10 <ADC_Module::getMaxValue()>
    3bd6:	f640 42e4 	movw	r2, #3300	; 0xce4
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3bda:	2300      	movs	r3, #0
    3bdc:	fb06 f202 	mul.w	r2, r6, r2
    3be0:	fbb2 f1f0 	udiv	r1, r2, r0
    3be4:	220a      	movs	r2, #10
    3be6:	484a      	ldr	r0, [pc, #296]	; (3d10 <getcurrent()+0x5c8>)
    3be8:	f006 fc9e 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3bec:	2102      	movs	r1, #2
    3bee:	4847      	ldr	r0, [pc, #284]	; (3d0c <getcurrent()+0x5c4>)
    3bf0:	f009 f9c8 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3bf4:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
    3bf8:	4845      	ldr	r0, [pc, #276]	; (3d10 <getcurrent()+0x5c8>)
    3bfa:	f006 fc75 	bl	a4e8 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh *  0.0000066);
    3bfe:	682b      	ldr	r3, [r5, #0]
    3c00:	f8d9 6000 	ldr.w	r6, [r9]
    3c04:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3c08:	e625      	b.n	3856 <getcurrent()+0x10e>
      if (currentact > 500 || currentact < -500 )
    3c0a:	4947      	ldr	r1, [pc, #284]	; (3d28 <getcurrent()+0x5e0>)
    3c0c:	4628      	mov	r0, r5
    3c0e:	f00b f8b3 	bl	ed78 <__aeabi_fcmpgt>
    3c12:	b928      	cbnz	r0, 3c20 <getcurrent()+0x4d8>
    3c14:	4945      	ldr	r1, [pc, #276]	; (3d2c <getcurrent()+0x5e4>)
    3c16:	4628      	mov	r0, r5
    3c18:	f00b f890 	bl	ed3c <__aeabi_fcmplt>
    3c1c:	2800      	cmp	r0, #0
    3c1e:	d05b      	beq.n	3cd8 <getcurrent()+0x590>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c20:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 3d18 <getcurrent()+0x5d0>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    3c24:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 3d1c <getcurrent()+0x5d4>
    3c28:	f8da 3000 	ldr.w	r3, [sl]
    3c2c:	9304      	str	r3, [sp, #16]
	return ret;
    3c2e:	9804      	ldr	r0, [sp, #16]
    3c30:	f8d9 3000 	ldr.w	r3, [r9]
    3c34:	4f3e      	ldr	r7, [pc, #248]	; (3d30 <getcurrent()+0x5e8>)
    3c36:	1ac0      	subs	r0, r0, r3
    3c38:	f00a fe8a 	bl	e950 <__aeabi_ui2f>
    3c3c:	4629      	mov	r1, r5
    3c3e:	f00a fedf 	bl	ea00 <__aeabi_fmul>
    3c42:	493c      	ldr	r1, [pc, #240]	; (3d34 <getcurrent()+0x5ec>)
    3c44:	f00a ff90 	bl	eb68 <__aeabi_fdiv>
    3c48:	493a      	ldr	r1, [pc, #232]	; (3d34 <getcurrent()+0x5ec>)
    3c4a:	f00a ff8d 	bl	eb68 <__aeabi_fdiv>
    3c4e:	6839      	ldr	r1, [r7, #0]
    3c50:	f00a fdce 	bl	e7f0 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c54:	f8da 3000 	ldr.w	r3, [sl]
    3c58:	9303      	str	r3, [sp, #12]
	return ret;
    3c5a:	9b03      	ldr	r3, [sp, #12]
    3c5c:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    3c5e:	f8c9 3000 	str.w	r3, [r9]
    3c62:	e5cb      	b.n	37fc <getcurrent()+0xb4>
        SERIALCONSOLE.println();
    3c64:	482a      	ldr	r0, [pc, #168]	; (3d10 <getcurrent()+0x5c8>)
      value = (uint16_t)adc->adc0->analogReadContinuous(); // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3c66:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3d00 <getcurrent()+0x5b8>
        SERIALCONSOLE.println();
    3c6a:	f006 fc45 	bl	a4f8 <Print::println()>
        if ( settings.cursens == Analoguedual)
    3c6e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    3c72:	2b01      	cmp	r3, #1
    3c74:	bf0c      	ite	eq
    3c76:	4830      	ldreq	r0, [pc, #192]	; (3d38 <getcurrent()+0x5f0>)
    3c78:	4830      	ldrne	r0, [pc, #192]	; (3d3c <getcurrent()+0x5f4>)
    3c7a:	210b      	movs	r1, #11
    3c7c:	f009 f982 	bl	cf84 <usb_serial_write>
    3c80:	4828      	ldr	r0, [pc, #160]	; (3d24 <getcurrent()+0x5dc>)
    3c82:	210c      	movs	r1, #12
    3c84:	f009 f97e 	bl	cf84 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous(); // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3c88:	682a      	ldr	r2, [r5, #0]
      if (debugCur != 0)
    3c8a:	683b      	ldr	r3, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous(); // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3c8c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    3c90:	6b42      	ldr	r2, [r0, #52]	; 0x34
    3c92:	6916      	ldr	r6, [r2, #16]
    3c94:	b2b6      	uxth	r6, r6
    3c96:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0)
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	f43f af07 	beq.w	3aae <getcurrent()+0x366>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue()); //- settings.offset1)
    3ca0:	f005 f8b6 	bl	8e10 <ADC_Module::getMaxValue()>
    3ca4:	f640 43e4 	movw	r3, #3300	; 0xce4
    3ca8:	fb06 f303 	mul.w	r3, r6, r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3cac:	220a      	movs	r2, #10
    3cae:	fbb3 f1f0 	udiv	r1, r3, r0
    3cb2:	2300      	movs	r3, #0
    3cb4:	4816      	ldr	r0, [pc, #88]	; (3d10 <getcurrent()+0x5c8>)
    3cb6:	f006 fc37 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3cba:	2101      	movs	r1, #1
    3cbc:	4820      	ldr	r0, [pc, #128]	; (3d40 <getcurrent()+0x5f8>)
    3cbe:	f009 f961 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3cc2:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    3cc6:	4812      	ldr	r0, [pc, #72]	; (3d10 <getcurrent()+0x5c8>)
    3cc8:	f006 fc0e 	bl	a4e8 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    3ccc:	682b      	ldr	r3, [r5, #0]
    3cce:	f8d9 6000 	ldr.w	r6, [r9]
    3cd2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3cd6:	e6ea      	b.n	3aae <getcurrent()+0x366>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3cd8:	4b0f      	ldr	r3, [pc, #60]	; (3d18 <getcurrent()+0x5d0>)
    3cda:	681b      	ldr	r3, [r3, #0]
    3cdc:	9305      	str	r3, [sp, #20]
        lasttime = millis();
    3cde:	4b0f      	ldr	r3, [pc, #60]	; (3d1c <getcurrent()+0x5d4>)
	return ret;
    3ce0:	9a05      	ldr	r2, [sp, #20]
    3ce2:	601a      	str	r2, [r3, #0]
    3ce4:	e58a      	b.n	37fc <getcurrent()+0xb4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ce6:	4b0c      	ldr	r3, [pc, #48]	; (3d18 <getcurrent()+0x5d0>)
    3ce8:	681b      	ldr	r3, [r3, #0]
    3cea:	9308      	str	r3, [sp, #32]
        lasttime = millis();
    3cec:	4b0b      	ldr	r3, [pc, #44]	; (3d1c <getcurrent()+0x5d4>)
	return ret;
    3cee:	9a08      	ldr	r2, [sp, #32]
    3cf0:	601a      	str	r2, [r3, #0]
    3cf2:	e583      	b.n	37fc <getcurrent()+0xb4>
    3cf4:	1fff8874 	.word	0x1fff8874
    3cf8:	1fff91dc 	.word	0x1fff91dc
    3cfc:	1fffb630 	.word	0x1fffb630
    3d00:	1fffb830 	.word	0x1fffb830
    3d04:	36dd7591 	.word	0x36dd7591
    3d08:	1fff91c4 	.word	0x1fff91c4
    3d0c:	00016af4 	.word	0x00016af4
    3d10:	1fff89f8 	.word	0x1fff89f8
    3d14:	00015cb8 	.word	0x00015cb8
    3d18:	1fffba38 	.word	0x1fffba38
    3d1c:	1fffb660 	.word	0x1fffb660
    3d20:	00015cbc 	.word	0x00015cbc
    3d24:	00015ca8 	.word	0x00015ca8
    3d28:	43fa0000 	.word	0x43fa0000
    3d2c:	c3fa0000 	.word	0xc3fa0000
    3d30:	1fff91e4 	.word	0x1fff91e4
    3d34:	447a0000 	.word	0x447a0000
    3d38:	00015c90 	.word	0x00015c90
    3d3c:	00015c9c 	.word	0x00015c9c
    3d40:	0001698c 	.word	0x0001698c

00003d44 <updateSOC()>:
{
    3d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (SOCset == 0 && SOCmem == 0)
    3d48:	4a98      	ldr	r2, [pc, #608]	; (3fac <updateSOC()+0x268>)
    3d4a:	4d99      	ldr	r5, [pc, #612]	; (3fb0 <updateSOC()+0x26c>)
    3d4c:	6812      	ldr	r2, [r2, #0]
    3d4e:	682b      	ldr	r3, [r5, #0]
    3d50:	4313      	orrs	r3, r2
{
    3d52:	b086      	sub	sp, #24
  if (SOCset == 0 && SOCmem == 0)
    3d54:	d146      	bne.n	3de4 <updateSOC()+0xa0>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d56:	4e97      	ldr	r6, [pc, #604]	; (3fb4 <updateSOC()+0x270>)
    3d58:	6833      	ldr	r3, [r6, #0]
    3d5a:	9303      	str	r3, [sp, #12]
	return ret;
    3d5c:	9b03      	ldr	r3, [sp, #12]
    if (millis() > 4000 && renum == 0)
    3d5e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
    3d62:	d904      	bls.n	3d6e <updateSOC()+0x2a>
    3d64:	4c94      	ldr	r4, [pc, #592]	; (3fb8 <updateSOC()+0x274>)
    3d66:	6823      	ldr	r3, [r4, #0]
    3d68:	2b00      	cmp	r3, #0
    3d6a:	f000 8118 	beq.w	3f9e <updateSOC()+0x25a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d6e:	6833      	ldr	r3, [r6, #0]
    3d70:	9304      	str	r3, [sp, #16]
	return ret;
    3d72:	9a04      	ldr	r2, [sp, #16]
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    3d74:	4c91      	ldr	r4, [pc, #580]	; (3fbc <updateSOC()+0x278>)
    if (millis() > 4500)
    3d76:	f241 1394 	movw	r3, #4500	; 0x1194
    3d7a:	429a      	cmp	r2, r3
    3d7c:	f200 8108 	bhi.w	3f90 <updateSOC()+0x24c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d80:	6833      	ldr	r3, [r6, #0]
    3d82:	9305      	str	r3, [sp, #20]
	return ret;
    3d84:	9a05      	ldr	r2, [sp, #20]
    if (millis() > 5000)
    3d86:	f241 3388 	movw	r3, #5000	; 0x1388
    3d8a:	429a      	cmp	r2, r3
    3d8c:	f200 80bd 	bhi.w	3f0a <updateSOC()+0x1c6>
  if (settings.voltsoc == 1)
    3d90:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    3d94:	4e8a      	ldr	r6, [pc, #552]	; (3fc0 <updateSOC()+0x27c>)
    3d96:	4f8b      	ldr	r7, [pc, #556]	; (3fc4 <updateSOC()+0x280>)
    3d98:	f8df 822c 	ldr.w	r8, [pc, #556]	; 3fc8 <updateSOC()+0x284>
    3d9c:	2b01      	cmp	r3, #1
    3d9e:	d12a      	bne.n	3df6 <updateSOC()+0xb2>
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    3da0:	488a      	ldr	r0, [pc, #552]	; (3fcc <updateSOC()+0x288>)
    3da2:	f7fe fa5b 	bl	225c <BMSModuleManager::getLowCellVolt()>
    3da6:	498a      	ldr	r1, [pc, #552]	; (3fd0 <updateSOC()+0x28c>)
    3da8:	f00a fe2a 	bl	ea00 <__aeabi_fmul>
    3dac:	f00b f82a 	bl	ee04 <__aeabi_f2uiz>
    3db0:	6fa5      	ldr	r5, [r4, #120]	; 0x78
    3db2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    3db4:	6f62      	ldr	r2, [r4, #116]	; 0x74
    3db6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    3db8:	9500      	str	r5, [sp, #0]
    3dba:	b280      	uxth	r0, r0
    3dbc:	f7fe ffc2 	bl	2d44 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778 ;
    3dc0:	6e25      	ldr	r5, [r4, #96]	; 0x60
    3dc2:	f8d4 a05c 	ldr.w	sl, [r4, #92]	; 0x5c
    3dc6:	fb05 f000 	mul.w	r0, r5, r0
    3dca:	fb0a f000 	mul.w	r0, sl, r0
    3dce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3dd2:	0040      	lsls	r0, r0, #1
    3dd4:	f00a fdc0 	bl	e958 <__aeabi_i2f>
    3dd8:	497e      	ldr	r1, [pc, #504]	; (3fd4 <updateSOC()+0x290>)
    3dda:	f00a fec5 	bl	eb68 <__aeabi_fdiv>
    3dde:	4681      	mov	r9, r0
    3de0:	6038      	str	r0, [r7, #0]
    3de2:	e00d      	b.n	3e00 <updateSOC()+0xbc>
    3de4:	4c75      	ldr	r4, [pc, #468]	; (3fbc <updateSOC()+0x278>)
    3de6:	4e76      	ldr	r6, [pc, #472]	; (3fc0 <updateSOC()+0x27c>)
    3de8:	4f76      	ldr	r7, [pc, #472]	; (3fc4 <updateSOC()+0x280>)
    3dea:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 3fc8 <updateSOC()+0x284>
  if (settings.voltsoc == 1)
    3dee:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    3df2:	2b01      	cmp	r3, #1
    3df4:	d0d4      	beq.n	3da0 <updateSOC()+0x5c>
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    3df6:	f8d7 9000 	ldr.w	r9, [r7]
    3dfa:	6e25      	ldr	r5, [r4, #96]	; 0x60
    3dfc:	f8d4 a05c 	ldr.w	sl, [r4, #92]	; 0x5c
    3e00:	fb0a f505 	mul.w	r5, sl, r5
    3e04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3e08:	fb05 f000 	mul.w	r0, r5, r0
    3e0c:	f00a fda4 	bl	e958 <__aeabi_i2f>
    3e10:	4970      	ldr	r1, [pc, #448]	; (3fd4 <updateSOC()+0x290>)
    3e12:	4605      	mov	r5, r0
    3e14:	4648      	mov	r0, r9
    3e16:	f00a fdf3 	bl	ea00 <__aeabi_fmul>
    3e1a:	4629      	mov	r1, r5
    3e1c:	f00a fea4 	bl	eb68 <__aeabi_fdiv>
    3e20:	496d      	ldr	r1, [pc, #436]	; (3fd8 <updateSOC()+0x294>)
    3e22:	f00a fded 	bl	ea00 <__aeabi_fmul>
    3e26:	f00a ffc7 	bl	edb8 <__aeabi_f2iz>
  if (SOC >= 100)
    3e2a:	2863      	cmp	r0, #99	; 0x63
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    3e2c:	6030      	str	r0, [r6, #0]
  if (SOC >= 100)
    3e2e:	dd47      	ble.n	3ec0 <updateSOC()+0x17c>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778 ; //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    3e30:	4968      	ldr	r1, [pc, #416]	; (3fd4 <updateSOC()+0x290>)
    3e32:	4628      	mov	r0, r5
    3e34:	f00a fe98 	bl	eb68 <__aeabi_fdiv>
    SOC = 100;
    3e38:	2364      	movs	r3, #100	; 0x64
    3e3a:	6033      	str	r3, [r6, #0]
  if (debug != 0)
    3e3c:	f8d8 3000 	ldr.w	r3, [r8]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778 ; //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    3e40:	6038      	str	r0, [r7, #0]
  if (debug != 0)
    3e42:	2b00      	cmp	r3, #0
    3e44:	d044      	beq.n	3ed0 <updateSOC()+0x18c>
    if (settings.cursens == Analoguedual)
    3e46:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    3e4a:	2b01      	cmp	r3, #1
    3e4c:	d043      	beq.n	3ed6 <updateSOC()+0x192>
    if (settings.cursens == Analoguesing)
    3e4e:	2b03      	cmp	r3, #3
    3e50:	d04e      	beq.n	3ef0 <updateSOC()+0x1ac>
    if (settings.cursens == Canbus)
    3e52:	2b02      	cmp	r3, #2
    3e54:	d054      	beq.n	3f00 <updateSOC()+0x1bc>
    3e56:	2102      	movs	r1, #2
    3e58:	4860      	ldr	r0, [pc, #384]	; (3fdc <updateSOC()+0x298>)
    3e5a:	f009 f893 	bl	cf84 <usb_serial_write>
    SERIALCONSOLE.print(currentact);
    3e5e:	4b60      	ldr	r3, [pc, #384]	; (3fe0 <updateSOC()+0x29c>)
    3e60:	6818      	ldr	r0, [r3, #0]
    3e62:	f00a fba9 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3e66:	2402      	movs	r4, #2
    3e68:	4602      	mov	r2, r0
    3e6a:	460b      	mov	r3, r1
    3e6c:	9400      	str	r4, [sp, #0]
    3e6e:	485d      	ldr	r0, [pc, #372]	; (3fe4 <updateSOC()+0x2a0>)
    3e70:	f006 fb66 	bl	a540 <Print::printFloat(double, unsigned char)>
    3e74:	4621      	mov	r1, r4
    3e76:	485c      	ldr	r0, [pc, #368]	; (3fe8 <updateSOC()+0x2a4>)
    3e78:	f009 f884 	bl	cf84 <usb_serial_write>
    3e7c:	4621      	mov	r1, r4
    3e7e:	4857      	ldr	r0, [pc, #348]	; (3fdc <updateSOC()+0x298>)
    3e80:	f009 f880 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3e84:	6831      	ldr	r1, [r6, #0]
    3e86:	4857      	ldr	r0, [pc, #348]	; (3fe4 <updateSOC()+0x2a0>)
    3e88:	f006 fb2e 	bl	a4e8 <Print::print(long)>
    3e8c:	2106      	movs	r1, #6
    3e8e:	4857      	ldr	r0, [pc, #348]	; (3fec <updateSOC()+0x2a8>)
    3e90:	f009 f878 	bl	cf84 <usb_serial_write>
    SERIALCONSOLE.print(ampsecond * 0.27777777777778, 2);
    3e94:	6838      	ldr	r0, [r7, #0]
    3e96:	494f      	ldr	r1, [pc, #316]	; (3fd4 <updateSOC()+0x290>)
    3e98:	f00a fdb2 	bl	ea00 <__aeabi_fmul>
    3e9c:	f00a fb8c 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3ea0:	9400      	str	r4, [sp, #0]
    3ea2:	4602      	mov	r2, r0
    3ea4:	460b      	mov	r3, r1
    3ea6:	484f      	ldr	r0, [pc, #316]	; (3fe4 <updateSOC()+0x2a0>)
    3ea8:	f006 fb4a 	bl	a540 <Print::printFloat(double, unsigned char)>
    3eac:	2103      	movs	r1, #3
    3eae:	4850      	ldr	r0, [pc, #320]	; (3ff0 <updateSOC()+0x2ac>)
    3eb0:	f009 f868 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3eb4:	484b      	ldr	r0, [pc, #300]	; (3fe4 <updateSOC()+0x2a0>)
}
    3eb6:	b006      	add	sp, #24
    3eb8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ebc:	f006 bb1c 	b.w	a4f8 <Print::println()>
  if (SOC < 0)
    3ec0:	2800      	cmp	r0, #0
    SOC = 0; //reset SOC this way the can messages remain in range for other devices. Ampseconds will keep counting.
    3ec2:	bfbc      	itt	lt
    3ec4:	2300      	movlt	r3, #0
    3ec6:	6033      	strlt	r3, [r6, #0]
  if (debug != 0)
    3ec8:	f8d8 3000 	ldr.w	r3, [r8]
    3ecc:	2b00      	cmp	r3, #0
    3ece:	d1ba      	bne.n	3e46 <updateSOC()+0x102>
}
    3ed0:	b006      	add	sp, #24
    3ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (sensor == 1)
    3ed6:	4b47      	ldr	r3, [pc, #284]	; (3ff4 <updateSOC()+0x2b0>)
    3ed8:	681b      	ldr	r3, [r3, #0]
    3eda:	2b01      	cmp	r3, #1
    3edc:	bf0c      	ite	eq
    3ede:	4846      	ldreq	r0, [pc, #280]	; (3ff8 <updateSOC()+0x2b4>)
    3ee0:	4846      	ldrne	r0, [pc, #280]	; (3ffc <updateSOC()+0x2b8>)
    3ee2:	210a      	movs	r1, #10
    3ee4:	f009 f84e 	bl	cf84 <usb_serial_write>
    if (settings.cursens == Analoguesing)
    3ee8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    3eec:	2b03      	cmp	r3, #3
    3eee:	d1b0      	bne.n	3e52 <updateSOC()+0x10e>
    3ef0:	4843      	ldr	r0, [pc, #268]	; (4000 <updateSOC()+0x2bc>)
    3ef2:	2110      	movs	r1, #16
    3ef4:	f009 f846 	bl	cf84 <usb_serial_write>
    if (settings.cursens == Canbus)
    3ef8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    3efc:	2b02      	cmp	r3, #2
    3efe:	d1aa      	bne.n	3e56 <updateSOC()+0x112>
    3f00:	2107      	movs	r1, #7
    3f02:	4840      	ldr	r0, [pc, #256]	; (4004 <updateSOC()+0x2c0>)
    3f04:	f009 f83e 	bl	cf84 <usb_serial_write>
    3f08:	e7a5      	b.n	3e56 <updateSOC()+0x112>
    3f0a:	2106      	movs	r1, #6
    3f0c:	483e      	ldr	r0, [pc, #248]	; (4008 <updateSOC()+0x2c4>)
      if (debug != 0)
    3f0e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 3fc8 <updateSOC()+0x284>
    3f12:	f009 f837 	bl	cf84 <usb_serial_write>
    3f16:	4833      	ldr	r0, [pc, #204]	; (3fe4 <updateSOC()+0x2a0>)
    3f18:	f006 faee 	bl	a4f8 <Print::println()>
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    3f1c:	482b      	ldr	r0, [pc, #172]	; (3fcc <updateSOC()+0x288>)
    3f1e:	f7fe f99d 	bl	225c <BMSModuleManager::getLowCellVolt()>
    3f22:	492b      	ldr	r1, [pc, #172]	; (3fd0 <updateSOC()+0x28c>)
    3f24:	6f66      	ldr	r6, [r4, #116]	; 0x74
    3f26:	6f27      	ldr	r7, [r4, #112]	; 0x70
    3f28:	f00a fd6a 	bl	ea00 <__aeabi_fmul>
    3f2c:	f00a ff6a 	bl	ee04 <__aeabi_f2uiz>
    3f30:	4632      	mov	r2, r6
    3f32:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    3f34:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    3f36:	9600      	str	r6, [sp, #0]
    3f38:	463b      	mov	r3, r7
    3f3a:	b280      	uxth	r0, r0
    3f3c:	f7fe ff02 	bl	2d44 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    3f40:	4e1f      	ldr	r6, [pc, #124]	; (3fc0 <updateSOC()+0x27c>)
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778 ;
    3f42:	6e23      	ldr	r3, [r4, #96]	; 0x60
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    3f44:	6030      	str	r0, [r6, #0]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778 ;
    3f46:	fb03 f000 	mul.w	r0, r3, r0
    3f4a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    3f4c:	4f1d      	ldr	r7, [pc, #116]	; (3fc4 <updateSOC()+0x280>)
    3f4e:	fb03 f000 	mul.w	r0, r3, r0
    3f52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3f56:	0040      	lsls	r0, r0, #1
    3f58:	f00a fcfe 	bl	e958 <__aeabi_i2f>
    3f5c:	491d      	ldr	r1, [pc, #116]	; (3fd4 <updateSOC()+0x290>)
    3f5e:	f00a fe03 	bl	eb68 <__aeabi_fdiv>
      if (debug != 0)
    3f62:	f8d8 3000 	ldr.w	r3, [r8]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778 ;
    3f66:	6038      	str	r0, [r7, #0]
      SOCset = 1;
    3f68:	2201      	movs	r2, #1
    3f6a:	602a      	str	r2, [r5, #0]
      if (debug != 0)
    3f6c:	2b00      	cmp	r3, #0
    3f6e:	f43f af3e 	beq.w	3dee <updateSOC()+0xaa>
    3f72:	2102      	movs	r1, #2
    3f74:	4819      	ldr	r0, [pc, #100]	; (3fdc <updateSOC()+0x298>)
    3f76:	f009 f805 	bl	cf84 <usb_serial_write>
    3f7a:	481a      	ldr	r0, [pc, #104]	; (3fe4 <updateSOC()+0x2a0>)
    3f7c:	f006 fabc 	bl	a4f8 <Print::println()>
    3f80:	2159      	movs	r1, #89	; 0x59
    3f82:	4822      	ldr	r0, [pc, #136]	; (400c <updateSOC()+0x2c8>)
    3f84:	f008 fffe 	bl	cf84 <usb_serial_write>
    3f88:	4816      	ldr	r0, [pc, #88]	; (3fe4 <updateSOC()+0x2a0>)
    3f8a:	f006 fab5 	bl	a4f8 <Print::println()>
    3f8e:	e72e      	b.n	3dee <updateSOC()+0xaa>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    3f90:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    3f92:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    3f96:	480d      	ldr	r0, [pc, #52]	; (3fcc <updateSOC()+0x288>)
    3f98:	f7fe f96e 	bl	2278 <BMSModuleManager::setSensors(int, float)>
    3f9c:	e6f0      	b.n	3d80 <updateSOC()+0x3c>
      bms.renumberBoardIDs();
    3f9e:	480b      	ldr	r0, [pc, #44]	; (3fcc <updateSOC()+0x288>)
    3fa0:	f7fd fb9e 	bl	16e0 <BMSModuleManager::renumberBoardIDs()>
      renum = 1;
    3fa4:	2301      	movs	r3, #1
    3fa6:	6023      	str	r3, [r4, #0]
    3fa8:	e6e1      	b.n	3d6e <updateSOC()+0x2a>
    3faa:	bf00      	nop
    3fac:	1fff91c8 	.word	0x1fff91c8
    3fb0:	1fff91cc 	.word	0x1fff91cc
    3fb4:	1fffba38 	.word	0x1fffba38
    3fb8:	1fffb738 	.word	0x1fffb738
    3fbc:	1fffb73c 	.word	0x1fffb73c
    3fc0:	1fff8828 	.word	0x1fff8828
    3fc4:	1fff91e4 	.word	0x1fff91e4
    3fc8:	1fff8848 	.word	0x1fff8848
    3fcc:	1fff91ec 	.word	0x1fff91ec
    3fd0:	447a0000 	.word	0x447a0000
    3fd4:	3e8e38e4 	.word	0x3e8e38e4
    3fd8:	42c80000 	.word	0x42c80000
    3fdc:	00016af4 	.word	0x00016af4
    3fe0:	1fffb62c 	.word	0x1fffb62c
    3fe4:	1fff89f8 	.word	0x1fff89f8
    3fe8:	00015ccc 	.word	0x00015ccc
    3fec:	00015d70 	.word	0x00015d70
    3ff0:	00015d78 	.word	0x00015d78
    3ff4:	1fff8874 	.word	0x1fff8874
    3ff8:	00015d3c 	.word	0x00015d3c
    3ffc:	00015d48 	.word	0x00015d48
    4000:	00015d54 	.word	0x00015d54
    4004:	00015d68 	.word	0x00015d68
    4008:	00015cd8 	.word	0x00015cd8
    400c:	00015ce0 	.word	0x00015ce0

00004010 <Prechargecon()>:
{
    4010:	b530      	push	{r4, r5, lr}
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH) //detect Key ON or AC present
    4012:	2011      	movs	r0, #17
{
    4014:	b083      	sub	sp, #12
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH) //detect Key ON or AC present
    4016:	f007 f969 	bl	b2ec <digitalRead>
    401a:	2801      	cmp	r0, #1
    401c:	d004      	beq.n	4028 <Prechargecon()+0x18>
    401e:	2012      	movs	r0, #18
    4020:	f007 f964 	bl	b2ec <digitalRead>
    4024:	2801      	cmp	r0, #1
    4026:	d122      	bne.n	406e <Prechargecon()+0x5e>
    digitalWrite(OUT4, HIGH);//Negative Contactor Close
    4028:	2101      	movs	r1, #1
    402a:	2015      	movs	r0, #21
    402c:	f007 f938 	bl	b2a0 <digitalWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4030:	4b2b      	ldr	r3, [pc, #172]	; (40e0 <Prechargecon()+0xd0>)
    if (Pretimer +  settings.Pretime > millis() || currentact > settings.Precurrent)
    4032:	4a2c      	ldr	r2, [pc, #176]	; (40e4 <Prechargecon()+0xd4>)
    4034:	4c2c      	ldr	r4, [pc, #176]	; (40e8 <Prechargecon()+0xd8>)
    4036:	681b      	ldr	r3, [r3, #0]
    contctrl = 2;
    4038:	4d2c      	ldr	r5, [pc, #176]	; (40ec <Prechargecon()+0xdc>)
    if (Pretimer +  settings.Pretime > millis() || currentact > settings.Precurrent)
    403a:	6811      	ldr	r1, [r2, #0]
    403c:	9301      	str	r3, [sp, #4]
    contctrl = 2;
    403e:	2202      	movs	r2, #2
    if (Pretimer +  settings.Pretime > millis() || currentact > settings.Precurrent)
    4040:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    contctrl = 2;
    4044:	602a      	str	r2, [r5, #0]
	return ret;
    4046:	9a01      	ldr	r2, [sp, #4]
    if (Pretimer +  settings.Pretime > millis() || currentact > settings.Precurrent)
    4048:	440b      	add	r3, r1
    404a:	4293      	cmp	r3, r2
    404c:	d808      	bhi.n	4060 <Prechargecon()+0x50>
    404e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    4052:	f00a fc81 	bl	e958 <__aeabi_i2f>
    4056:	4b26      	ldr	r3, [pc, #152]	; (40f0 <Prechargecon()+0xe0>)
    4058:	6819      	ldr	r1, [r3, #0]
    405a:	f00a fe6f 	bl	ed3c <__aeabi_fcmplt>
    405e:	b1d0      	cbz	r0, 4096 <Prechargecon()+0x86>
      digitalWrite(OUT2, HIGH);//precharge
    4060:	2101      	movs	r1, #1
      digitalWrite(OUT2, LOW);
    4062:	200c      	movs	r0, #12
}
    4064:	b003      	add	sp, #12
    4066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    406a:	f007 b919 	b.w	b2a0 <digitalWrite>
    digitalWrite(OUT1, LOW);
    406e:	2100      	movs	r1, #0
    4070:	200b      	movs	r0, #11
    4072:	f007 f915 	bl	b2a0 <digitalWrite>
    digitalWrite(OUT2, LOW);
    4076:	2100      	movs	r1, #0
    4078:	200c      	movs	r0, #12
    407a:	f007 f911 	bl	b2a0 <digitalWrite>
    digitalWrite(OUT4, LOW);
    407e:	2100      	movs	r1, #0
    4080:	2015      	movs	r0, #21
    4082:	f007 f90d 	bl	b2a0 <digitalWrite>
    bmsstatus = Ready;
    4086:	491b      	ldr	r1, [pc, #108]	; (40f4 <Prechargecon()+0xe4>)
    contctrl = 0;
    4088:	4b18      	ldr	r3, [pc, #96]	; (40ec <Prechargecon()+0xdc>)
    bmsstatus = Ready;
    408a:	2001      	movs	r0, #1
    contctrl = 0;
    408c:	2200      	movs	r2, #0
    bmsstatus = Ready;
    408e:	7008      	strb	r0, [r1, #0]
    contctrl = 0;
    4090:	601a      	str	r2, [r3, #0]
}
    4092:	b003      	add	sp, #12
    4094:	bd30      	pop	{r4, r5, pc}
      digitalWrite(OUT1, HIGH);//Positive Contactor Close
    4096:	2101      	movs	r1, #1
    4098:	200b      	movs	r0, #11
    409a:	f007 f901 	bl	b2a0 <digitalWrite>
      if (settings.ChargerDirect == 1)
    409e:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
      contctrl = 3;
    40a2:	2403      	movs	r4, #3
      if (settings.ChargerDirect == 1)
    40a4:	2b01      	cmp	r3, #1
      contctrl = 3;
    40a6:	602c      	str	r4, [r5, #0]
      if (settings.ChargerDirect == 1)
    40a8:	d014      	beq.n	40d4 <Prechargecon()+0xc4>
        if (digitalRead(IN3) == HIGH)
    40aa:	2012      	movs	r0, #18
    40ac:	f007 f91e 	bl	b2ec <digitalRead>
    40b0:	2801      	cmp	r0, #1
          bmsstatus = Charge;
    40b2:	bf08      	it	eq
    40b4:	4b0f      	ldreq	r3, [pc, #60]	; (40f4 <Prechargecon()+0xe4>)
        if (digitalRead(IN1) == HIGH)
    40b6:	f04f 0011 	mov.w	r0, #17
          bmsstatus = Charge;
    40ba:	bf08      	it	eq
    40bc:	701c      	strbeq	r4, [r3, #0]
        if (digitalRead(IN1) == HIGH)
    40be:	f007 f915 	bl	b2ec <digitalRead>
    40c2:	2801      	cmp	r0, #1
    40c4:	d006      	beq.n	40d4 <Prechargecon()+0xc4>
      digitalWrite(OUT2, LOW);
    40c6:	2100      	movs	r1, #0
    40c8:	200c      	movs	r0, #12
}
    40ca:	b003      	add	sp, #12
    40cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    40d0:	f007 b8e6 	b.w	b2a0 <digitalWrite>
        bmsstatus = Drive;
    40d4:	4b07      	ldr	r3, [pc, #28]	; (40f4 <Prechargecon()+0xe4>)
    40d6:	2202      	movs	r2, #2
    40d8:	701a      	strb	r2, [r3, #0]
      digitalWrite(OUT2, LOW);
    40da:	2100      	movs	r1, #0
    40dc:	e7f4      	b.n	40c8 <Prechargecon()+0xb8>
    40de:	bf00      	nop
    40e0:	1fffba38 	.word	0x1fffba38
    40e4:	1fff91bc 	.word	0x1fff91bc
    40e8:	1fffb73c 	.word	0x1fffb73c
    40ec:	1fffb618 	.word	0x1fffb618
    40f0:	1fffb62c 	.word	0x1fffb62c
    40f4:	1fffb598 	.word	0x1fffb598

000040f8 <contcon()>:
{
    40f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (contctrl != contstat) //check for contactor request change
    40fa:	4e75      	ldr	r6, [pc, #468]	; (42d0 <contcon()+0x1d8>)
    40fc:	4c75      	ldr	r4, [pc, #468]	; (42d4 <contcon()+0x1dc>)
    40fe:	6833      	ldr	r3, [r6, #0]
    4100:	6825      	ldr	r5, [r4, #0]
    4102:	42ab      	cmp	r3, r5
{
    4104:	b087      	sub	sp, #28
  if (contctrl != contstat) //check for contactor request change
    4106:	d02c      	beq.n	4162 <contcon()+0x6a>
    if ((contctrl & 1) == 0)
    4108:	f013 0101 	ands.w	r1, r3, #1
    410c:	d04a      	beq.n	41a4 <contcon()+0xac>
    if ((contctrl & 2) == 0)
    410e:	f013 0102 	ands.w	r1, r3, #2
    4112:	d05e      	beq.n	41d2 <contcon()+0xda>
    if ((contctrl & 4) == 0)
    4114:	f013 0104 	ands.w	r1, r3, #4
    4118:	d050      	beq.n	41bc <contcon()+0xc4>
    if ((contctrl & 1) == 1)
    411a:	07da      	lsls	r2, r3, #31
    411c:	d50f      	bpl.n	413e <contcon()+0x46>
      if ((contstat & 1) != 1)
    411e:	6822      	ldr	r2, [r4, #0]
    4120:	07d7      	lsls	r7, r2, #31
    4122:	d40c      	bmi.n	413e <contcon()+0x46>
        if (conttimer1 == 0)
    4124:	4d6c      	ldr	r5, [pc, #432]	; (42d8 <contcon()+0x1e0>)
    4126:	682a      	ldr	r2, [r5, #0]
    4128:	2a00      	cmp	r2, #0
    412a:	f000 80ae 	beq.w	428a <contcon()+0x192>
    412e:	4b6b      	ldr	r3, [pc, #428]	; (42dc <contcon()+0x1e4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4130:	681b      	ldr	r3, [r3, #0]
    4132:	9301      	str	r3, [sp, #4]
	return ret;
    4134:	9b01      	ldr	r3, [sp, #4]
        if (conttimer1 < millis())
    4136:	4293      	cmp	r3, r2
    4138:	f200 809a 	bhi.w	4270 <contcon()+0x178>
    if ((contctrl & 2) == 2)
    413c:	6833      	ldr	r3, [r6, #0]
    413e:	079d      	lsls	r5, r3, #30
    4140:	d412      	bmi.n	4168 <contcon()+0x70>
    if ((contctrl & 4) == 4)
    4142:	0759      	lsls	r1, r3, #29
    4144:	d520      	bpl.n	4188 <contcon()+0x90>
      if ((contstat & 4) != 4)
    4146:	6822      	ldr	r2, [r4, #0]
    4148:	0752      	lsls	r2, r2, #29
    414a:	d40b      	bmi.n	4164 <contcon()+0x6c>
        if (conttimer3 == 0)
    414c:	4f64      	ldr	r7, [pc, #400]	; (42e0 <contcon()+0x1e8>)
    414e:	683a      	ldr	r2, [r7, #0]
    4150:	2a00      	cmp	r2, #0
    4152:	d05e      	beq.n	4212 <contcon()+0x11a>
    4154:	4b61      	ldr	r3, [pc, #388]	; (42dc <contcon()+0x1e4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4156:	681b      	ldr	r3, [r3, #0]
    4158:	9305      	str	r3, [sp, #20]
	return ret;
    415a:	9b05      	ldr	r3, [sp, #20]
        if (conttimer3 < millis())
    415c:	4293      	cmp	r3, r2
    415e:	d876      	bhi.n	424e <contcon()+0x156>
  if (contctrl == 0)
    4160:	6835      	ldr	r5, [r6, #0]
    4162:	b1a5      	cbz	r5, 418e <contcon()+0x96>
}
    4164:	b007      	add	sp, #28
    4166:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((contstat & 2) != 2)
    4168:	6822      	ldr	r2, [r4, #0]
    416a:	0790      	lsls	r0, r2, #30
    416c:	d43d      	bmi.n	41ea <contcon()+0xf2>
        if (conttimer2 == 0)
    416e:	4d5d      	ldr	r5, [pc, #372]	; (42e4 <contcon()+0x1ec>)
    4170:	682a      	ldr	r2, [r5, #0]
    4172:	2a00      	cmp	r2, #0
    4174:	d03c      	beq.n	41f0 <contcon()+0xf8>
    4176:	4b59      	ldr	r3, [pc, #356]	; (42dc <contcon()+0x1e4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4178:	681b      	ldr	r3, [r3, #0]
    417a:	9303      	str	r3, [sp, #12]
	return ret;
    417c:	9b03      	ldr	r3, [sp, #12]
        if (conttimer2 < millis())
    417e:	429a      	cmp	r2, r3
    4180:	d358      	bcc.n	4234 <contcon()+0x13c>
    if ((contctrl & 4) == 4)
    4182:	6833      	ldr	r3, [r6, #0]
    4184:	0759      	lsls	r1, r3, #29
    4186:	d4de      	bmi.n	4146 <contcon()+0x4e>
    4188:	461d      	mov	r5, r3
  if (contctrl == 0)
    418a:	2d00      	cmp	r5, #0
    418c:	d1ea      	bne.n	4164 <contcon()+0x6c>
    analogWrite(OUT5, 0);
    418e:	4629      	mov	r1, r5
    4190:	2016      	movs	r0, #22
    4192:	f006 ff09 	bl	afa8 <analogWrite>
    analogWrite(OUT6, 0);
    4196:	4629      	mov	r1, r5
    4198:	2017      	movs	r0, #23
}
    419a:	b007      	add	sp, #28
    419c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    analogWrite(OUT6, 0);
    41a0:	f006 bf02 	b.w	afa8 <analogWrite>
      analogWrite(OUT5, 0);
    41a4:	2016      	movs	r0, #22
    41a6:	f006 feff 	bl	afa8 <analogWrite>
      contstat = contstat & 254;
    41aa:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 2) == 0)
    41ac:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 254;
    41ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if ((contctrl & 2) == 0)
    41b2:	f013 0102 	ands.w	r1, r3, #2
      contstat = contstat & 254;
    41b6:	6022      	str	r2, [r4, #0]
    if ((contctrl & 2) == 0)
    41b8:	d1ac      	bne.n	4114 <contcon()+0x1c>
    41ba:	e00a      	b.n	41d2 <contcon()+0xda>
      analogWrite(OUT7, 0);
    41bc:	2005      	movs	r0, #5
    41be:	f006 fef3 	bl	afa8 <analogWrite>
      contstat = contstat & 251;
    41c2:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 1) == 1)
    41c4:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 251;
    41c6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    41ca:	6022      	str	r2, [r4, #0]
    if ((contctrl & 1) == 1)
    41cc:	07da      	lsls	r2, r3, #31
    41ce:	d5b6      	bpl.n	413e <contcon()+0x46>
    41d0:	e7a5      	b.n	411e <contcon()+0x26>
      analogWrite(OUT6, 0);
    41d2:	2017      	movs	r0, #23
    41d4:	f006 fee8 	bl	afa8 <analogWrite>
      contstat = contstat & 253;
    41d8:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 4) == 0)
    41da:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 253;
    41dc:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    if ((contctrl & 4) == 0)
    41e0:	f013 0104 	ands.w	r1, r3, #4
      contstat = contstat & 253;
    41e4:	6022      	str	r2, [r4, #0]
    if ((contctrl & 4) == 0)
    41e6:	d198      	bne.n	411a <contcon()+0x22>
    41e8:	e7e8      	b.n	41bc <contcon()+0xc4>
    if ((contctrl & 4) == 4)
    41ea:	075b      	lsls	r3, r3, #29
    41ec:	d4ac      	bmi.n	4148 <contcon()+0x50>
    41ee:	e7b9      	b.n	4164 <contcon()+0x6c>
          if (debug != 0)
    41f0:	4b3d      	ldr	r3, [pc, #244]	; (42e8 <contcon()+0x1f0>)
    41f2:	681b      	ldr	r3, [r3, #0]
    41f4:	2b00      	cmp	r3, #0
    41f6:	d155      	bne.n	42a4 <contcon()+0x1ac>
          analogWrite(OUT6, 255);
    41f8:	21ff      	movs	r1, #255	; 0xff
    41fa:	2017      	movs	r0, #23
    41fc:	f006 fed4 	bl	afa8 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4200:	4b36      	ldr	r3, [pc, #216]	; (42dc <contcon()+0x1e4>)
          conttimer2 = millis() + pulltime ;
    4202:	493a      	ldr	r1, [pc, #232]	; (42ec <contcon()+0x1f4>)
    4204:	681a      	ldr	r2, [r3, #0]
    4206:	9202      	str	r2, [sp, #8]
	return ret;
    4208:	9a02      	ldr	r2, [sp, #8]
    420a:	6809      	ldr	r1, [r1, #0]
    420c:	440a      	add	r2, r1
    420e:	602a      	str	r2, [r5, #0]
    4210:	e7b2      	b.n	4178 <contcon()+0x80>
          if (debug != 0)
    4212:	4b35      	ldr	r3, [pc, #212]	; (42e8 <contcon()+0x1f0>)
    4214:	681b      	ldr	r3, [r3, #0]
    4216:	2b00      	cmp	r3, #0
    4218:	d14f      	bne.n	42ba <contcon()+0x1c2>
          analogWrite(OUT7, 255);
    421a:	21ff      	movs	r1, #255	; 0xff
    421c:	2005      	movs	r0, #5
    421e:	f006 fec3 	bl	afa8 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4222:	4b2e      	ldr	r3, [pc, #184]	; (42dc <contcon()+0x1e4>)
          conttimer3 = millis() + pulltime ;
    4224:	4931      	ldr	r1, [pc, #196]	; (42ec <contcon()+0x1f4>)
    4226:	681a      	ldr	r2, [r3, #0]
    4228:	9204      	str	r2, [sp, #16]
	return ret;
    422a:	9a04      	ldr	r2, [sp, #16]
    422c:	6809      	ldr	r1, [r1, #0]
    422e:	440a      	add	r2, r1
    4230:	603a      	str	r2, [r7, #0]
    4232:	e790      	b.n	4156 <contcon()+0x5e>
          analogWrite(OUT6, settings.conthold);
    4234:	4b2e      	ldr	r3, [pc, #184]	; (42f0 <contcon()+0x1f8>)
    4236:	2017      	movs	r0, #23
    4238:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    423c:	f006 feb4 	bl	afa8 <analogWrite>
          contstat = contstat | 2;
    4240:	6823      	ldr	r3, [r4, #0]
          conttimer2 = 0;
    4242:	2200      	movs	r2, #0
          contstat = contstat | 2;
    4244:	f043 0302 	orr.w	r3, r3, #2
    4248:	6023      	str	r3, [r4, #0]
          conttimer2 = 0;
    424a:	602a      	str	r2, [r5, #0]
    424c:	e799      	b.n	4182 <contcon()+0x8a>
          analogWrite(OUT7, settings.conthold);
    424e:	4b28      	ldr	r3, [pc, #160]	; (42f0 <contcon()+0x1f8>)
    4250:	2005      	movs	r0, #5
    4252:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    4256:	f006 fea7 	bl	afa8 <analogWrite>
          contstat = contstat | 4;
    425a:	6823      	ldr	r3, [r4, #0]
  if (contctrl == 0)
    425c:	6835      	ldr	r5, [r6, #0]
          conttimer3 = 0;
    425e:	2200      	movs	r2, #0
          contstat = contstat | 4;
    4260:	f043 0304 	orr.w	r3, r3, #4
    4264:	6023      	str	r3, [r4, #0]
          conttimer3 = 0;
    4266:	603a      	str	r2, [r7, #0]
  if (contctrl == 0)
    4268:	2d00      	cmp	r5, #0
    426a:	f47f af7b 	bne.w	4164 <contcon()+0x6c>
    426e:	e78e      	b.n	418e <contcon()+0x96>
          analogWrite(OUT5, settings.conthold);
    4270:	4b1f      	ldr	r3, [pc, #124]	; (42f0 <contcon()+0x1f8>)
    4272:	2016      	movs	r0, #22
    4274:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    4278:	f006 fe96 	bl	afa8 <analogWrite>
          contstat = contstat | 1;
    427c:	6823      	ldr	r3, [r4, #0]
          conttimer1 = 0;
    427e:	2200      	movs	r2, #0
          contstat = contstat | 1;
    4280:	f043 0301 	orr.w	r3, r3, #1
    4284:	6023      	str	r3, [r4, #0]
          conttimer1 = 0;
    4286:	602a      	str	r2, [r5, #0]
    4288:	e758      	b.n	413c <contcon()+0x44>
          analogWrite(OUT5, 255);
    428a:	21ff      	movs	r1, #255	; 0xff
    428c:	2016      	movs	r0, #22
    428e:	f006 fe8b 	bl	afa8 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4292:	4b12      	ldr	r3, [pc, #72]	; (42dc <contcon()+0x1e4>)
          conttimer1 = millis() + pulltime ;
    4294:	4915      	ldr	r1, [pc, #84]	; (42ec <contcon()+0x1f4>)
    4296:	681a      	ldr	r2, [r3, #0]
    4298:	9200      	str	r2, [sp, #0]
	return ret;
    429a:	9a00      	ldr	r2, [sp, #0]
    429c:	6809      	ldr	r1, [r1, #0]
    429e:	440a      	add	r2, r1
    42a0:	602a      	str	r2, [r5, #0]
    42a2:	e745      	b.n	4130 <contcon()+0x38>
            Serial.println();
    42a4:	4813      	ldr	r0, [pc, #76]	; (42f4 <contcon()+0x1fc>)
    42a6:	f006 f927 	bl	a4f8 <Print::println()>
    42aa:	210c      	movs	r1, #12
    42ac:	4812      	ldr	r0, [pc, #72]	; (42f8 <contcon()+0x200>)
    42ae:	f008 fe69 	bl	cf84 <usb_serial_write>
    42b2:	4810      	ldr	r0, [pc, #64]	; (42f4 <contcon()+0x1fc>)
    42b4:	f006 f920 	bl	a4f8 <Print::println()>
    42b8:	e79e      	b.n	41f8 <contcon()+0x100>
            Serial.println();
    42ba:	480e      	ldr	r0, [pc, #56]	; (42f4 <contcon()+0x1fc>)
    42bc:	f006 f91c 	bl	a4f8 <Print::println()>
    42c0:	210c      	movs	r1, #12
    42c2:	480e      	ldr	r0, [pc, #56]	; (42fc <contcon()+0x204>)
    42c4:	f008 fe5e 	bl	cf84 <usb_serial_write>
    42c8:	480a      	ldr	r0, [pc, #40]	; (42f4 <contcon()+0x1fc>)
    42ca:	f006 f915 	bl	a4f8 <Print::println()>
    42ce:	e7a4      	b.n	421a <contcon()+0x122>
    42d0:	1fffb618 	.word	0x1fffb618
    42d4:	1fffb61c 	.word	0x1fffb61c
    42d8:	1fffb620 	.word	0x1fffb620
    42dc:	1fffba38 	.word	0x1fffba38
    42e0:	1fffb628 	.word	0x1fffb628
    42e4:	1fffb624 	.word	0x1fffb624
    42e8:	1fff8848 	.word	0x1fff8848
    42ec:	1fff8864 	.word	0x1fff8864
    42f0:	1fffb73c 	.word	0x1fffb73c
    42f4:	1fff89f8 	.word	0x1fff89f8
    42f8:	00015d7c 	.word	0x00015d7c
    42fc:	00015d8c 	.word	0x00015d8c

00004300 <calcur()>:
{
    4300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  adc->startContinuous(ACUR1, ADC_0);
    4304:	4e53      	ldr	r6, [pc, #332]	; (4454 <calcur()+0x154>)
  sensor = 1;
    4306:	f8df a150 	ldr.w	sl, [pc, #336]	; 4458 <calcur()+0x158>
  adc->startContinuous(ACUR1, ADC_0);
    430a:	6830      	ldr	r0, [r6, #0]
  x = 0;
    430c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 445c <calcur()+0x15c>
    4310:	4d53      	ldr	r5, [pc, #332]	; (4460 <calcur()+0x160>)
  adc->startContinuous(ACUR1, ADC_0);
    4312:	2200      	movs	r2, #0
    4314:	210f      	movs	r1, #15
    4316:	f004 fd25 	bl	8d64 <ADC::startContinuous(unsigned char, signed char)>
  sensor = 1;
    431a:	2301      	movs	r3, #1
    431c:	f8ca 3000 	str.w	r3, [sl]
    4320:	4850      	ldr	r0, [pc, #320]	; (4464 <calcur()+0x164>)
  x = 0;
    4322:	2300      	movs	r3, #0
    4324:	2122      	movs	r1, #34	; 0x22
    4326:	f8c9 3000 	str.w	r3, [r9]
    432a:	f008 fe2b 	bl	cf84 <usb_serial_write>
  while (x < 20)
    432e:	f8d9 3000 	ldr.w	r3, [r9]
    4332:	2b13      	cmp	r3, #19
    4334:	dc21      	bgt.n	437a <calcur()+0x7a>
    4336:	4f4c      	ldr	r7, [pc, #304]	; (4468 <calcur()+0x168>)
    settings.offset1 = settings.offset1 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    4338:	f640 48e4 	movw	r8, #3300	; 0xce4
    433c:	6833      	ldr	r3, [r6, #0]
    433e:	f8b5 b0a4 	ldrh.w	fp, [r5, #164]	; 0xa4
    4342:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    4346:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4348:	691c      	ldr	r4, [r3, #16]
    434a:	f004 fd61 	bl	8e10 <ADC_Module::getMaxValue()>
    434e:	b2a4      	uxth	r4, r4
    4350:	2101      	movs	r1, #1
    4352:	fb08 f404 	mul.w	r4, r8, r4
    4356:	fbb4 f4f0 	udiv	r4, r4, r0
    435a:	4638      	mov	r0, r7
    435c:	44a3      	add	fp, r4
    435e:	f8a5 b0a4 	strh.w	fp, [r5, #164]	; 0xa4
    4362:	f008 fe0f 	bl	cf84 <usb_serial_write>
    delay(100);
    4366:	2064      	movs	r0, #100	; 0x64
    4368:	f007 f82a 	bl	b3c0 <delay>
    x++;
    436c:	f8d9 3000 	ldr.w	r3, [r9]
    4370:	3301      	adds	r3, #1
  while (x < 20)
    4372:	2b13      	cmp	r3, #19
    x++;
    4374:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20)
    4378:	dde0      	ble.n	433c <calcur()+0x3c>
  settings.offset1 = settings.offset1 / 21;
    437a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    437e:	493b      	ldr	r1, [pc, #236]	; (446c <calcur()+0x16c>)
	size_t print(int n)				{ return print((long)n); }
    4380:	483b      	ldr	r0, [pc, #236]	; (4470 <calcur()+0x170>)
    4382:	fba1 2103 	umull	r2, r1, r1, r3
    4386:	1a5b      	subs	r3, r3, r1
    4388:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    438c:	f3c1 110f 	ubfx	r1, r1, #4, #16
    4390:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
    4394:	f006 f8a8 	bl	a4e8 <Print::print(long)>
    4398:	211d      	movs	r1, #29
    439a:	4836      	ldr	r0, [pc, #216]	; (4474 <calcur()+0x174>)
    439c:	f008 fdf2 	bl	cf84 <usb_serial_write>
    43a0:	2102      	movs	r1, #2
    43a2:	4835      	ldr	r0, [pc, #212]	; (4478 <calcur()+0x178>)
    43a4:	f008 fdee 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    43a8:	4831      	ldr	r0, [pc, #196]	; (4470 <calcur()+0x170>)
    43aa:	f006 f8a5 	bl	a4f8 <Print::println()>
  x = 0;
    43ae:	2300      	movs	r3, #0
    43b0:	f8c9 3000 	str.w	r3, [r9]
  adc->adc0->startContinuous(ACUR2);
    43b4:	6833      	ldr	r3, [r6, #0]
    43b6:	210e      	movs	r1, #14
    43b8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    43bc:	f004 ffe0 	bl	9380 <ADC_Module::startContinuous(unsigned char)>
  sensor = 2;
    43c0:	2302      	movs	r3, #2
    43c2:	4828      	ldr	r0, [pc, #160]	; (4464 <calcur()+0x164>)
    43c4:	f8ca 3000 	str.w	r3, [sl]
    43c8:	2122      	movs	r1, #34	; 0x22
    43ca:	f008 fddb 	bl	cf84 <usb_serial_write>
  while (x < 20)
    43ce:	f8d9 3000 	ldr.w	r3, [r9]
    43d2:	2b13      	cmp	r3, #19
    43d4:	dc22      	bgt.n	441c <calcur()+0x11c>
    43d6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4468 <calcur()+0x168>
    settings.offset2 = settings.offset2 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    43da:	f640 47e4 	movw	r7, #3300	; 0xce4
    43de:	6833      	ldr	r3, [r6, #0]
    43e0:	f8b5 a0a6 	ldrh.w	sl, [r5, #166]	; 0xa6
    43e4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    43e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    43ea:	691c      	ldr	r4, [r3, #16]
    43ec:	f004 fd10 	bl	8e10 <ADC_Module::getMaxValue()>
    43f0:	b2a4      	uxth	r4, r4
    43f2:	2101      	movs	r1, #1
    43f4:	fb07 f404 	mul.w	r4, r7, r4
    43f8:	fbb4 f4f0 	udiv	r4, r4, r0
    43fc:	4640      	mov	r0, r8
    43fe:	44a2      	add	sl, r4
    4400:	f8a5 a0a6 	strh.w	sl, [r5, #166]	; 0xa6
    4404:	f008 fdbe 	bl	cf84 <usb_serial_write>
    delay(100);
    4408:	2064      	movs	r0, #100	; 0x64
    440a:	f006 ffd9 	bl	b3c0 <delay>
    x++;
    440e:	f8d9 3000 	ldr.w	r3, [r9]
    4412:	3301      	adds	r3, #1
  while (x < 20)
    4414:	2b13      	cmp	r3, #19
    x++;
    4416:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20)
    441a:	dde0      	ble.n	43de <calcur()+0xde>
  settings.offset2 = settings.offset2 / 21;
    441c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    4420:	4912      	ldr	r1, [pc, #72]	; (446c <calcur()+0x16c>)
	size_t print(int n)				{ return print((long)n); }
    4422:	4813      	ldr	r0, [pc, #76]	; (4470 <calcur()+0x170>)
    4424:	fba1 2103 	umull	r2, r1, r1, r3
    4428:	1a5b      	subs	r3, r3, r1
    442a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    442e:	f3c1 110f 	ubfx	r1, r1, #4, #16
    4432:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
    4436:	f006 f857 	bl	a4e8 <Print::print(long)>
    443a:	211d      	movs	r1, #29
    443c:	480f      	ldr	r0, [pc, #60]	; (447c <calcur()+0x17c>)
    443e:	f008 fda1 	bl	cf84 <usb_serial_write>
    4442:	480d      	ldr	r0, [pc, #52]	; (4478 <calcur()+0x178>)
    4444:	2102      	movs	r1, #2
    4446:	f008 fd9d 	bl	cf84 <usb_serial_write>
}
    444a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    444e:	4808      	ldr	r0, [pc, #32]	; (4470 <calcur()+0x170>)
    4450:	f006 b852 	b.w	a4f8 <Print::println()>
    4454:	1fff91dc 	.word	0x1fff91dc
    4458:	1fff8874 	.word	0x1fff8874
    445c:	1fffb840 	.word	0x1fffb840
    4460:	1fffb73c 	.word	0x1fffb73c
    4464:	00015d9c 	.word	0x00015d9c
    4468:	00015dc0 	.word	0x00015dc0
    446c:	86186187 	.word	0x86186187
    4470:	1fff89f8 	.word	0x1fff89f8
    4474:	00015dc4 	.word	0x00015dc4
    4478:	00016af4 	.word	0x00016af4
    447c:	00015de4 	.word	0x00015de4

00004480 <VEcan()>:
{
    4480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (storagemode == 0)
    4484:	4bbe      	ldr	r3, [pc, #760]	; (4780 <VEcan()+0x300>)
  msg.id  = 0x351;
    4486:	4cbf      	ldr	r4, [pc, #764]	; (4784 <VEcan()+0x304>)
    msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 10));
    4488:	4dbf      	ldr	r5, [pc, #764]	; (4788 <VEcan()+0x308>)
  if (storagemode == 0)
    448a:	681b      	ldr	r3, [r3, #0]
    msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 10));
    448c:	6da8      	ldr	r0, [r5, #88]	; 0x58
  msg.id  = 0x351;
    448e:	f240 3151 	movw	r1, #849	; 0x351
  msg.len = 8;
    4492:	2208      	movs	r2, #8
  msg.id  = 0x351;
    4494:	6021      	str	r1, [r4, #0]
  msg.len = 8;
    4496:	71e2      	strb	r2, [r4, #7]
  if (storagemode == 0)
    4498:	2b00      	cmp	r3, #0
    449a:	f040 816d 	bne.w	4778 <VEcan()+0x2f8>
    msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 10));
    449e:	f00a fa5b 	bl	e958 <__aeabi_i2f>
    44a2:	69a9      	ldr	r1, [r5, #24]
    msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells ) * 10));
    44a4:	4606      	mov	r6, r0
    44a6:	f00a faab 	bl	ea00 <__aeabi_fmul>
    44aa:	49b8      	ldr	r1, [pc, #736]	; (478c <VEcan()+0x30c>)
    44ac:	f00a faa8 	bl	ea00 <__aeabi_fmul>
    44b0:	f00a fca8 	bl	ee04 <__aeabi_f2uiz>
    44b4:	b2c2      	uxtb	r2, r0
    msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 10));
    44b6:	7222      	strb	r2, [r4, #8]
  msg.buf[2] = lowByte(chargecurrent);
    44b8:	4ab5      	ldr	r2, [pc, #724]	; (4790 <VEcan()+0x310>)
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    44ba:	69e9      	ldr	r1, [r5, #28]
    msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells ) * 10));
    44bc:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 10));
    44c0:	7263      	strb	r3, [r4, #9]
  msg.buf[2] = lowByte(chargecurrent);
    44c2:	8813      	ldrh	r3, [r2, #0]
    44c4:	8163      	strh	r3, [r4, #10]
  msg.buf[4] = lowByte(discurrent );
    44c6:	4bb3      	ldr	r3, [pc, #716]	; (4794 <VEcan()+0x314>)
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    44c8:	4630      	mov	r0, r6
  msg.buf[4] = lowByte(discurrent );
    44ca:	881b      	ldrh	r3, [r3, #0]
    44cc:	81a3      	strh	r3, [r4, #12]
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    44ce:	f00a fa97 	bl	ea00 <__aeabi_fmul>
    44d2:	49ae      	ldr	r1, [pc, #696]	; (478c <VEcan()+0x30c>)
    44d4:	f00a fa94 	bl	ea00 <__aeabi_fmul>
    44d8:	f00a fc94 	bl	ee04 <__aeabi_f2uiz>
  Can0.write(msg);
    44dc:	49a9      	ldr	r1, [pc, #676]	; (4784 <VEcan()+0x304>)
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    44de:	4603      	mov	r3, r0
  Can0.write(msg);
    44e0:	48ad      	ldr	r0, [pc, #692]	; (4798 <VEcan()+0x318>)
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    44e2:	81e3      	strh	r3, [r4, #14]
  Can0.write(msg);
    44e4:	f005 fa9e 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
  msg.buf[0] = lowByte(SOC);
    44e8:	4aac      	ldr	r2, [pc, #688]	; (479c <VEcan()+0x31c>)
  Can0.write(msg);
    44ea:	48ab      	ldr	r0, [pc, #684]	; (4798 <VEcan()+0x318>)
  msg.buf[0] = lowByte(SOC);
    44ec:	6813      	ldr	r3, [r2, #0]
    44ee:	8812      	ldrh	r2, [r2, #0]
    44f0:	8122      	strh	r2, [r4, #8]
  msg.buf[4] = lowByte(SOC * 10);
    44f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  msg.len = 8;
    44f6:	2608      	movs	r6, #8
  msg.buf[4] = lowByte(SOC * 10);
    44f8:	005b      	lsls	r3, r3, #1
  msg.buf[2] = lowByte(SOH);
    44fa:	4aa9      	ldr	r2, [pc, #676]	; (47a0 <VEcan()+0x320>)
  msg.buf[4] = lowByte(SOC * 10);
    44fc:	7323      	strb	r3, [r4, #12]
  msg.id  = 0x355;
    44fe:	f240 3155 	movw	r1, #853	; 0x355
  msg.buf[5] = highByte(SOC * 10);
    4502:	4133      	asrs	r3, r6
  msg.buf[2] = lowByte(SOH);
    4504:	8812      	ldrh	r2, [r2, #0]
  msg.id  = 0x355;
    4506:	6021      	str	r1, [r4, #0]
  msg.buf[5] = highByte(SOC * 10);
    4508:	7363      	strb	r3, [r4, #13]
  Can0.write(msg);
    450a:	499e      	ldr	r1, [pc, #632]	; (4784 <VEcan()+0x304>)
  msg.buf[2] = lowByte(SOH);
    450c:	8162      	strh	r2, [r4, #10]
  msg.buf[6] = 0;
    450e:	2300      	movs	r3, #0
    4510:	81e3      	strh	r3, [r4, #14]
  msg.len = 8;
    4512:	71e6      	strb	r6, [r4, #7]
  Can0.write(msg);
    4514:	f005 fa86 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == VictronHV || settings.SerialCan == 1)
    4518:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    451c:	48a1      	ldr	r0, [pc, #644]	; (47a4 <VEcan()+0x324>)
  msg.len = 8;
    451e:	71e6      	strb	r6, [r4, #7]
  msg.id  = 0x356;
    4520:	f240 3256 	movw	r2, #854	; 0x356
  if (settings.chargertype == VictronHV || settings.SerialCan == 1)
    4524:	2b07      	cmp	r3, #7
  msg.id  = 0x356;
    4526:	6022      	str	r2, [r4, #0]
  if (settings.chargertype == VictronHV || settings.SerialCan == 1)
    4528:	d004      	beq.n	4534 <VEcan()+0xb4>
    452a:	f895 30ce 	ldrb.w	r3, [r5, #206]	; 0xce
    452e:	2b01      	cmp	r3, #1
    4530:	f040 810e 	bne.w	4750 <VEcan()+0x2d0>
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    4534:	f7fd fe9c 	bl	2270 <BMSModuleManager::getPackVoltage()>
    4538:	4994      	ldr	r1, [pc, #592]	; (478c <VEcan()+0x30c>)
    453a:	f00a fa61 	bl	ea00 <__aeabi_fmul>
    453e:	f00a fc61 	bl	ee04 <__aeabi_f2uiz>
    4542:	4603      	mov	r3, r0
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 10));
    4544:	4897      	ldr	r0, [pc, #604]	; (47a4 <VEcan()+0x324>)
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    4546:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 10));
    4548:	f7fd fe92 	bl	2270 <BMSModuleManager::getPackVoltage()>
    454c:	498f      	ldr	r1, [pc, #572]	; (478c <VEcan()+0x30c>)
    454e:	f00a fa57 	bl	ea00 <__aeabi_fmul>
    4552:	f00a fc57 	bl	ee04 <__aeabi_f2uiz>
    4556:	f3c0 2307 	ubfx	r3, r0, #8, #8
  msg.buf[2] = lowByte(long(currentact / 100));
    455a:	4a93      	ldr	r2, [pc, #588]	; (47a8 <VEcan()+0x328>)
    455c:	4993      	ldr	r1, [pc, #588]	; (47ac <VEcan()+0x32c>)
    455e:	6810      	ldr	r0, [r2, #0]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 10));
    4560:	7263      	strb	r3, [r4, #9]
  msg.buf[2] = lowByte(long(currentact / 100));
    4562:	f00a fb01 	bl	eb68 <__aeabi_fdiv>
    4566:	f00a fc27 	bl	edb8 <__aeabi_f2iz>
    456a:	4603      	mov	r3, r0
  msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    456c:	488d      	ldr	r0, [pc, #564]	; (47a4 <VEcan()+0x324>)
  msg.buf[2] = lowByte(long(currentact / 100));
    456e:	8163      	strh	r3, [r4, #10]
  msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    4570:	f7fd fea0 	bl	22b4 <BMSModuleManager::getAvgTemperature()>
    4574:	4985      	ldr	r1, [pc, #532]	; (478c <VEcan()+0x30c>)
    4576:	f00a fa43 	bl	ea00 <__aeabi_fmul>
    457a:	f00a fc1d 	bl	edb8 <__aeabi_f2iz>
    457e:	4603      	mov	r3, r0
  msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    4580:	4888      	ldr	r0, [pc, #544]	; (47a4 <VEcan()+0x324>)
  msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    4582:	7323      	strb	r3, [r4, #12]
  msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    4584:	f7fd fe96 	bl	22b4 <BMSModuleManager::getAvgTemperature()>
    4588:	4980      	ldr	r1, [pc, #512]	; (478c <VEcan()+0x30c>)
    458a:	f00a fa39 	bl	ea00 <__aeabi_fmul>
    458e:	f00a fc13 	bl	edb8 <__aeabi_f2iz>
    4592:	f340 2007 	sbfx	r0, r0, #8, #8
  msg.buf[6] = 0;
    4596:	2700      	movs	r7, #0
  Can0.write(msg);
    4598:	497a      	ldr	r1, [pc, #488]	; (4784 <VEcan()+0x304>)
  msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    459a:	7360      	strb	r0, [r4, #13]
  Can0.write(msg);
    459c:	487e      	ldr	r0, [pc, #504]	; (4798 <VEcan()+0x318>)
  msg.buf[6] = 0;
    459e:	81e7      	strh	r7, [r4, #14]
  Can0.write(msg);
    45a0:	f005 fa40 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
  delay(2);
    45a4:	2002      	movs	r0, #2
    45a6:	f006 ff0b 	bl	b3c0 <delay>
  msg.buf[0] = alarm[0];//High temp  Low Voltage | High Voltage
    45aa:	4a81      	ldr	r2, [pc, #516]	; (47b0 <VEcan()+0x330>)
  msg.buf[4] = warning[0];//High temp  Low Voltage | High Voltage
    45ac:	4b81      	ldr	r3, [pc, #516]	; (47b4 <VEcan()+0x334>)
  msg.buf[0] = alarm[0];//High temp  Low Voltage | High Voltage
    45ae:	6812      	ldr	r2, [r2, #0]
  msg.buf[4] = warning[0];//High temp  Low Voltage | High Voltage
    45b0:	681b      	ldr	r3, [r3, #0]
  msg.buf[0] = alarm[0];//High temp  Low Voltage | High Voltage
    45b2:	60a2      	str	r2, [r4, #8]
  msg.len = 8;
    45b4:	2608      	movs	r6, #8
  msg.id  = 0x35A;
    45b6:	f240 325a 	movw	r2, #858	; 0x35a
  Can0.write(msg);
    45ba:	4972      	ldr	r1, [pc, #456]	; (4784 <VEcan()+0x304>)
    45bc:	4876      	ldr	r0, [pc, #472]	; (4798 <VEcan()+0x318>)
  msg.id  = 0x35A;
    45be:	6022      	str	r2, [r4, #0]
  msg.buf[4] = warning[0];//High temp  Low Voltage | High Voltage
    45c0:	60e3      	str	r3, [r4, #12]
  msg.len = 8;
    45c2:	71e6      	strb	r6, [r4, #7]
  Can0.write(msg);
    45c4:	f005 fa2e 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
  msg.id  = 0x35E;
    45c8:	f240 335e 	movw	r3, #862	; 0x35e
    45cc:	6023      	str	r3, [r4, #0]
  msg.buf[0] = bmsname[0];
    45ce:	4b7a      	ldr	r3, [pc, #488]	; (47b8 <VEcan()+0x338>)
  Can0.write(msg);
    45d0:	496c      	ldr	r1, [pc, #432]	; (4784 <VEcan()+0x304>)
  msg.buf[0] = bmsname[0];
    45d2:	681a      	ldr	r2, [r3, #0]
  Can0.write(msg);
    45d4:	4870      	ldr	r0, [pc, #448]	; (4798 <VEcan()+0x318>)
  msg.buf[4] = bmsname[4];
    45d6:	685b      	ldr	r3, [r3, #4]
  msg.buf[0] = bmsname[0];
    45d8:	60a2      	str	r2, [r4, #8]
  msg.buf[4] = bmsname[4];
    45da:	60e3      	str	r3, [r4, #12]
  msg.len = 8;
    45dc:	71e6      	strb	r6, [r4, #7]
  Can0.write(msg);
    45de:	f005 fa21 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
  delay(2);
    45e2:	2002      	movs	r0, #2
    45e4:	f006 feec 	bl	b3c0 <delay>
  msg.id  = 0x370;
    45e8:	f44f 735c 	mov.w	r3, #880	; 0x370
    45ec:	6023      	str	r3, [r4, #0]
  msg.buf[0] = bmsmanu[0];
    45ee:	4b73      	ldr	r3, [pc, #460]	; (47bc <VEcan()+0x33c>)
  Can0.write(msg);
    45f0:	4964      	ldr	r1, [pc, #400]	; (4784 <VEcan()+0x304>)
  msg.buf[0] = bmsmanu[0];
    45f2:	681a      	ldr	r2, [r3, #0]
  Can0.write(msg);
    45f4:	4868      	ldr	r0, [pc, #416]	; (4798 <VEcan()+0x318>)
  msg.buf[4] = bmsmanu[4];
    45f6:	685b      	ldr	r3, [r3, #4]
  msg.buf[0] = bmsmanu[0];
    45f8:	60a2      	str	r2, [r4, #8]
  msg.buf[4] = bmsmanu[4];
    45fa:	60e3      	str	r3, [r4, #12]
  msg.len = 8;
    45fc:	71e6      	strb	r6, [r4, #7]
  Can0.write(msg);
    45fe:	f005 fa11 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
  delay(2);
    4602:	2002      	movs	r0, #2
    4604:	f006 fedc 	bl	b3c0 <delay>
  msg.id  = 0x373;
    4608:	f240 3373 	movw	r3, #883	; 0x373
  msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    460c:	4865      	ldr	r0, [pc, #404]	; (47a4 <VEcan()+0x324>)
  msg.id  = 0x373;
    460e:	6023      	str	r3, [r4, #0]
  msg.len = 8;
    4610:	71e6      	strb	r6, [r4, #7]
  msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    4612:	f7fd fe23 	bl	225c <BMSModuleManager::getLowCellVolt()>
    4616:	496a      	ldr	r1, [pc, #424]	; (47c0 <VEcan()+0x340>)
    4618:	f00a f9f2 	bl	ea00 <__aeabi_fmul>
    461c:	f00a fbf2 	bl	ee04 <__aeabi_f2uiz>
    4620:	7220      	strb	r0, [r4, #8]
  msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    4622:	4860      	ldr	r0, [pc, #384]	; (47a4 <VEcan()+0x324>)
    4624:	f7fd fe1a 	bl	225c <BMSModuleManager::getLowCellVolt()>
    4628:	4965      	ldr	r1, [pc, #404]	; (47c0 <VEcan()+0x340>)
    462a:	f00a f9e9 	bl	ea00 <__aeabi_fmul>
    462e:	f00a fbe9 	bl	ee04 <__aeabi_f2uiz>
    4632:	f3c0 2007 	ubfx	r0, r0, #8, #8
    4636:	7260      	strb	r0, [r4, #9]
  msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    4638:	485a      	ldr	r0, [pc, #360]	; (47a4 <VEcan()+0x324>)
    463a:	f7fd fe17 	bl	226c <BMSModuleManager::getHighCellVolt()>
    463e:	4960      	ldr	r1, [pc, #384]	; (47c0 <VEcan()+0x340>)
    4640:	f00a f9de 	bl	ea00 <__aeabi_fmul>
    4644:	f00a fbde 	bl	ee04 <__aeabi_f2uiz>
    4648:	72a0      	strb	r0, [r4, #10]
  msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    464a:	4856      	ldr	r0, [pc, #344]	; (47a4 <VEcan()+0x324>)
    464c:	f7fd fe0e 	bl	226c <BMSModuleManager::getHighCellVolt()>
    4650:	495b      	ldr	r1, [pc, #364]	; (47c0 <VEcan()+0x340>)
    4652:	f00a f9d5 	bl	ea00 <__aeabi_fmul>
    4656:	f00a fbd5 	bl	ee04 <__aeabi_f2uiz>
    465a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    465e:	72e0      	strb	r0, [r4, #11]
  msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    4660:	4850      	ldr	r0, [pc, #320]	; (47a4 <VEcan()+0x324>)
    4662:	f7fd fe87 	bl	2374 <BMSModuleManager::getLowTemperature()>
    4666:	4957      	ldr	r1, [pc, #348]	; (47c4 <VEcan()+0x344>)
    4668:	f00a f8c2 	bl	e7f0 <__addsf3>
    466c:	f00a fbca 	bl	ee04 <__aeabi_f2uiz>
    4670:	7320      	strb	r0, [r4, #12]
  msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    4672:	484c      	ldr	r0, [pc, #304]	; (47a4 <VEcan()+0x324>)
    4674:	f7fd fe7e 	bl	2374 <BMSModuleManager::getLowTemperature()>
    4678:	4952      	ldr	r1, [pc, #328]	; (47c4 <VEcan()+0x344>)
    467a:	f00a f8b9 	bl	e7f0 <__addsf3>
    467e:	f00a fbc1 	bl	ee04 <__aeabi_f2uiz>
    4682:	f3c0 2007 	ubfx	r0, r0, #8, #8
    4686:	7360      	strb	r0, [r4, #13]
  msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    4688:	4846      	ldr	r0, [pc, #280]	; (47a4 <VEcan()+0x324>)
    468a:	f7fd fe71 	bl	2370 <BMSModuleManager::getHighTemperature()>
    468e:	494d      	ldr	r1, [pc, #308]	; (47c4 <VEcan()+0x344>)
    4690:	f00a f8ae 	bl	e7f0 <__addsf3>
    4694:	f00a fbb6 	bl	ee04 <__aeabi_f2uiz>
    4698:	73a0      	strb	r0, [r4, #14]
  msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    469a:	4842      	ldr	r0, [pc, #264]	; (47a4 <VEcan()+0x324>)
    469c:	f7fd fe68 	bl	2370 <BMSModuleManager::getHighTemperature()>
    46a0:	4948      	ldr	r1, [pc, #288]	; (47c4 <VEcan()+0x344>)
    46a2:	f00a f8a5 	bl	e7f0 <__addsf3>
    46a6:	f00a fbad 	bl	ee04 <__aeabi_f2uiz>
    46aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
  Can0.write(msg);
    46ae:	4935      	ldr	r1, [pc, #212]	; (4784 <VEcan()+0x304>)
  msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    46b0:	73e0      	strb	r0, [r4, #15]
  Can0.write(msg);
    46b2:	4839      	ldr	r0, [pc, #228]	; (4798 <VEcan()+0x318>)
    46b4:	f005 f9b6 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
  delay(2);
    46b8:	2002      	movs	r0, #2
    46ba:	f006 fe81 	bl	b3c0 <delay>
  msg.id  = 0x379; //Installed capacity
    46be:	f240 3379 	movw	r3, #889	; 0x379
  msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    46c2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
  msg.id  = 0x379; //Installed capacity
    46c4:	6023      	str	r3, [r4, #0]
  msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    46c6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  msg.len = 8;
    46c8:	71e6      	strb	r6, [r4, #7]
  msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    46ca:	fb13 f302 	smulbb	r3, r3, r2
  msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    46ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
  msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    46d2:	7223      	strb	r3, [r4, #8]
  msg.buf[2] = contstat; //contactor state
    46d4:	4b3c      	ldr	r3, [pc, #240]	; (47c8 <VEcan()+0x348>)
  msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    46d6:	7262      	strb	r2, [r4, #9]
  msg.buf[2] = contstat; //contactor state
    46d8:	681b      	ldr	r3, [r3, #0]
    46da:	72a3      	strb	r3, [r4, #10]
  msg.buf[3] = (digitalRead(OUT1) | (digitalRead(OUT2) << 1) | (digitalRead(OUT3) << 2) | (digitalRead(OUT4) << 3));
    46dc:	200b      	movs	r0, #11
    46de:	f006 fe05 	bl	b2ec <digitalRead>
    46e2:	4680      	mov	r8, r0
    46e4:	200c      	movs	r0, #12
    46e6:	f006 fe01 	bl	b2ec <digitalRead>
    46ea:	4681      	mov	r9, r0
    46ec:	2014      	movs	r0, #20
    46ee:	f006 fdfd 	bl	b2ec <digitalRead>
    46f2:	0085      	lsls	r5, r0, #2
    46f4:	2015      	movs	r0, #21
    46f6:	f006 fdf9 	bl	b2ec <digitalRead>
    46fa:	ea45 0549 	orr.w	r5, r5, r9, lsl #1
    46fe:	ea45 0508 	orr.w	r5, r5, r8
  msg.buf[4] = bmsstatus;
    4702:	4b32      	ldr	r3, [pc, #200]	; (47cc <VEcan()+0x34c>)
  Can0.write(msg);
    4704:	491f      	ldr	r1, [pc, #124]	; (4784 <VEcan()+0x304>)
  msg.buf[4] = bmsstatus;
    4706:	781b      	ldrb	r3, [r3, #0]
    4708:	7323      	strb	r3, [r4, #12]
  msg.buf[3] = (digitalRead(OUT1) | (digitalRead(OUT2) << 1) | (digitalRead(OUT3) << 2) | (digitalRead(OUT4) << 3));
    470a:	b26d      	sxtb	r5, r5
    470c:	ea45 05c0 	orr.w	r5, r5, r0, lsl #3
  Can0.write(msg);
    4710:	4821      	ldr	r0, [pc, #132]	; (4798 <VEcan()+0x318>)
  msg.buf[3] = (digitalRead(OUT1) | (digitalRead(OUT2) << 1) | (digitalRead(OUT3) << 2) | (digitalRead(OUT4) << 3));
    4712:	72e5      	strb	r5, [r4, #11]
  msg.buf[5] = 0x00;
    4714:	7367      	strb	r7, [r4, #13]
  msg.buf[6] = 0x00;
    4716:	81e7      	strh	r7, [r4, #14]
  Can0.write(msg);
    4718:	f005 f984 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
  delay(2);
    471c:	2002      	movs	r0, #2
    471e:	f006 fe4f 	bl	b3c0 <delay>
  msg.id  = 0x372;
    4722:	f240 3372 	movw	r3, #882	; 0x372
  msg.buf[0] = lowByte(bms.getNumModules());
    4726:	481f      	ldr	r0, [pc, #124]	; (47a4 <VEcan()+0x324>)
  msg.id  = 0x372;
    4728:	6023      	str	r3, [r4, #0]
  msg.len = 8;
    472a:	71e6      	strb	r6, [r4, #7]
  msg.buf[0] = lowByte(bms.getNumModules());
    472c:	f7fd fd98 	bl	2260 <BMSModuleManager::getNumModules()>
    4730:	4603      	mov	r3, r0
  msg.buf[1] = highByte(bms.getNumModules());
    4732:	481c      	ldr	r0, [pc, #112]	; (47a4 <VEcan()+0x324>)
  msg.buf[0] = lowByte(bms.getNumModules());
    4734:	7223      	strb	r3, [r4, #8]
  msg.buf[1] = highByte(bms.getNumModules());
    4736:	f7fd fd93 	bl	2260 <BMSModuleManager::getNumModules()>
    473a:	fa40 f306 	asr.w	r3, r0, r6
    473e:	7263      	strb	r3, [r4, #9]
  msg.buf[2] = 0x00;
    4740:	8167      	strh	r7, [r4, #10]
  msg.buf[4] = 0x00;
    4742:	60e7      	str	r7, [r4, #12]
  Can0.write(msg);
    4744:	490f      	ldr	r1, [pc, #60]	; (4784 <VEcan()+0x304>)
    4746:	4814      	ldr	r0, [pc, #80]	; (4798 <VEcan()+0x318>)
}
    4748:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Can0.write(msg);
    474c:	f005 b96a 	b.w	9a24 <FlexCAN::write(CAN_message_t const&)>
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    4750:	f7fd fd8e 	bl	2270 <BMSModuleManager::getPackVoltage()>
    4754:	4915      	ldr	r1, [pc, #84]	; (47ac <VEcan()+0x32c>)
    4756:	f00a f953 	bl	ea00 <__aeabi_fmul>
    475a:	f00a fb53 	bl	ee04 <__aeabi_f2uiz>
    475e:	4603      	mov	r3, r0
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    4760:	4810      	ldr	r0, [pc, #64]	; (47a4 <VEcan()+0x324>)
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    4762:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    4764:	f7fd fd84 	bl	2270 <BMSModuleManager::getPackVoltage()>
    4768:	4910      	ldr	r1, [pc, #64]	; (47ac <VEcan()+0x32c>)
    476a:	f00a f949 	bl	ea00 <__aeabi_fmul>
    476e:	f00a fb49 	bl	ee04 <__aeabi_f2uiz>
    4772:	f3c0 2307 	ubfx	r3, r0, #8, #8
    4776:	e6f0      	b.n	455a <VEcan()+0xda>
    msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells ) * 10));
    4778:	f00a f8ee 	bl	e958 <__aeabi_i2f>
    477c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    477e:	e691      	b.n	44a4 <VEcan()+0x24>
    4780:	1fffb820 	.word	0x1fffb820
    4784:	1fffb694 	.word	0x1fffb694
    4788:	1fffb73c 	.word	0x1fffb73c
    478c:	41200000 	.word	0x41200000
    4790:	1fffb5a4 	.word	0x1fffb5a4
    4794:	1fffb638 	.word	0x1fffb638
    4798:	1fffb844 	.word	0x1fffb844
    479c:	1fff8828 	.word	0x1fff8828
    47a0:	1fff882c 	.word	0x1fff882c
    47a4:	1fff91ec 	.word	0x1fff91ec
    47a8:	1fffb62c 	.word	0x1fffb62c
    47ac:	42c80000 	.word	0x42c80000
    47b0:	1fff91e0 	.word	0x1fff91e0
    47b4:	1fffb83c 	.word	0x1fffb83c
    47b8:	1fff8838 	.word	0x1fff8838
    47bc:	1fff8830 	.word	0x1fff8830
    47c0:	447a0000 	.word	0x447a0000
    47c4:	43889333 	.word	0x43889333
    47c8:	1fffb61c 	.word	0x1fffb61c
    47cc:	1fffb598 	.word	0x1fffb598

000047d0 <menu()>:
{
    47d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (menuload == 4)
    47d2:	4dd8      	ldr	r5, [pc, #864]	; (4b34 <menu()+0x364>)
  incomingByte = Serial.read(); // read the incoming byte:
    47d4:	4fd8      	ldr	r7, [pc, #864]	; (4b38 <menu()+0x368>)
{
    47d6:	b083      	sub	sp, #12
        virtual int read() { return usb_serial_getchar(); }
    47d8:	f008 fb66 	bl	cea8 <usb_serial_getchar>
  if (menuload == 4)
    47dc:	682b      	ldr	r3, [r5, #0]
  incomingByte = Serial.read(); // read the incoming byte:
    47de:	6038      	str	r0, [r7, #0]
  if (menuload == 4)
    47e0:	2b04      	cmp	r3, #4
    47e2:	4604      	mov	r4, r0
    47e4:	f000 80ac 	beq.w	4940 <menu()+0x170>
  if (menuload == 9)
    47e8:	2b09      	cmp	r3, #9
    47ea:	d117      	bne.n	481c <menu()+0x4c>
    if (settings.ExpMess > 1)
    47ec:	4ed3      	ldr	r6, [pc, #844]	; (4b3c <menu()+0x36c>)
    47ee:	f896 30cd 	ldrb.w	r3, [r6, #205]	; 0xcd
    47f2:	2b01      	cmp	r3, #1
    47f4:	d902      	bls.n	47fc <menu()+0x2c>
      settings.ExpMess = 0;
    47f6:	2300      	movs	r3, #0
    47f8:	f886 30cd 	strb.w	r3, [r6, #205]	; 0xcd
    switch (incomingByte)
    47fc:	2c31      	cmp	r4, #49	; 0x31
    47fe:	f000 8139 	beq.w	4a74 <menu()+0x2a4>
    4802:	2c71      	cmp	r4, #113	; 0x71
    4804:	f040 8131 	bne.w	4a6a <menu()+0x29a>
          menuload = 1;
    4808:	2200      	movs	r2, #0
          incomingByte = 'i';
    480a:	2373      	movs	r3, #115	; 0x73
          menuload = 1;
    480c:	602a      	str	r2, [r5, #0]
          incomingByte = 'i';
    480e:	603b      	str	r3, [r7, #0]
  if (incomingByte == 115 && menuload == 0)
    4810:	682b      	ldr	r3, [r5, #0]
    4812:	2b00      	cmp	r3, #0
    4814:	f000 827f 	beq.w	4d16 <menu()+0x546>
}
    4818:	b003      	add	sp, #12
    481a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (menuload == 2)
    481c:	2b02      	cmp	r3, #2
    481e:	f040 84d1 	bne.w	51c4 <menu()+0x9f4>
    switch (incomingByte)
    4822:	f1a0 0331 	sub.w	r3, r0, #49	; 0x31
    4826:	2b42      	cmp	r3, #66	; 0x42
    4828:	f200 811f 	bhi.w	4a6a <menu()+0x29a>
    482c:	a201      	add	r2, pc, #4	; (adr r2, 4834 <menu()+0x64>)
    482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4832:	bf00      	nop
    4834:	0000529f 	.word	0x0000529f
    4838:	0000508d 	.word	0x0000508d
    483c:	000050a7 	.word	0x000050a7
    4840:	000050c1 	.word	0x000050c1
    4844:	00005105 	.word	0x00005105
    4848:	00005123 	.word	0x00005123
    484c:	0000513d 	.word	0x0000513d
    4850:	00005159 	.word	0x00005159
    4854:	00004a6b 	.word	0x00004a6b
    4858:	00004a6b 	.word	0x00004a6b
    485c:	00004a6b 	.word	0x00004a6b
    4860:	00004a6b 	.word	0x00004a6b
    4864:	00004a6b 	.word	0x00004a6b
    4868:	00004a6b 	.word	0x00004a6b
    486c:	00004a6b 	.word	0x00004a6b
    4870:	00004a6b 	.word	0x00004a6b
    4874:	00004a6b 	.word	0x00004a6b
    4878:	00004a6b 	.word	0x00004a6b
    487c:	00004a6b 	.word	0x00004a6b
    4880:	00004a6b 	.word	0x00004a6b
    4884:	00004a6b 	.word	0x00004a6b
    4888:	00004a6b 	.word	0x00004a6b
    488c:	00004a6b 	.word	0x00004a6b
    4890:	00004a6b 	.word	0x00004a6b
    4894:	00004a6b 	.word	0x00004a6b
    4898:	00004a6b 	.word	0x00004a6b
    489c:	00004a6b 	.word	0x00004a6b
    48a0:	00004a6b 	.word	0x00004a6b
    48a4:	00004a6b 	.word	0x00004a6b
    48a8:	00004a6b 	.word	0x00004a6b
    48ac:	00004a6b 	.word	0x00004a6b
    48b0:	00004a6b 	.word	0x00004a6b
    48b4:	00004a6b 	.word	0x00004a6b
    48b8:	00004a6b 	.word	0x00004a6b
    48bc:	00004a6b 	.word	0x00004a6b
    48c0:	00004a6b 	.word	0x00004a6b
    48c4:	00004a6b 	.word	0x00004a6b
    48c8:	00004a6b 	.word	0x00004a6b
    48cc:	00004a6b 	.word	0x00004a6b
    48d0:	00004a6b 	.word	0x00004a6b
    48d4:	00004a6b 	.word	0x00004a6b
    48d8:	00004a6b 	.word	0x00004a6b
    48dc:	00004a6b 	.word	0x00004a6b
    48e0:	00004a6b 	.word	0x00004a6b
    48e4:	00004a6b 	.word	0x00004a6b
    48e8:	00004a6b 	.word	0x00004a6b
    48ec:	00004a6b 	.word	0x00004a6b
    48f0:	00004a6b 	.word	0x00004a6b
    48f4:	00004a6b 	.word	0x00004a6b
    48f8:	00004a6b 	.word	0x00004a6b
    48fc:	000051bd 	.word	0x000051bd
    4900:	00004a6b 	.word	0x00004a6b
    4904:	00004a6b 	.word	0x00004a6b
    4908:	00004a6b 	.word	0x00004a6b
    490c:	00004a6b 	.word	0x00004a6b
    4910:	00004a6b 	.word	0x00004a6b
    4914:	00004a6b 	.word	0x00004a6b
    4918:	00004a6b 	.word	0x00004a6b
    491c:	00004a6b 	.word	0x00004a6b
    4920:	00004a6b 	.word	0x00004a6b
    4924:	00004a6b 	.word	0x00004a6b
    4928:	00004a6b 	.word	0x00004a6b
    492c:	00004a6b 	.word	0x00004a6b
    4930:	00004a6b 	.word	0x00004a6b
    4934:	00004809 	.word	0x00004809
    4938:	00004a6b 	.word	0x00004a6b
    493c:	00004f93 	.word	0x00004f93
    switch (incomingByte)
    4940:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4944:	2b41      	cmp	r3, #65	; 0x41
    4946:	f200 8090 	bhi.w	4a6a <menu()+0x29a>
    494a:	a201      	add	r2, pc, #4	; (adr r2, 4950 <menu()+0x180>)
    494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4950:	00004deb 	.word	0x00004deb
    4954:	00004dfd 	.word	0x00004dfd
    4958:	00004e13 	.word	0x00004e13
    495c:	00004ecd 	.word	0x00004ecd
    4960:	00004ee9 	.word	0x00004ee9
    4964:	00004f5f 	.word	0x00004f5f
    4968:	00004f79 	.word	0x00004f79
    496c:	00004eed 	.word	0x00004eed
    4970:	00004ef1 	.word	0x00004ef1
    4974:	00004ef5 	.word	0x00004ef5
    4978:	00004a6b 	.word	0x00004a6b
    497c:	00004a6b 	.word	0x00004a6b
    4980:	00004a6b 	.word	0x00004a6b
    4984:	00004a6b 	.word	0x00004a6b
    4988:	00004a6b 	.word	0x00004a6b
    498c:	00004a6b 	.word	0x00004a6b
    4990:	00004a6b 	.word	0x00004a6b
    4994:	00004a6b 	.word	0x00004a6b
    4998:	00004a6b 	.word	0x00004a6b
    499c:	00004a6b 	.word	0x00004a6b
    49a0:	00004a6b 	.word	0x00004a6b
    49a4:	00004a6b 	.word	0x00004a6b
    49a8:	00004a6b 	.word	0x00004a6b
    49ac:	00004a6b 	.word	0x00004a6b
    49b0:	00004a6b 	.word	0x00004a6b
    49b4:	00004a6b 	.word	0x00004a6b
    49b8:	00004a6b 	.word	0x00004a6b
    49bc:	00004a6b 	.word	0x00004a6b
    49c0:	00004a6b 	.word	0x00004a6b
    49c4:	00004a6b 	.word	0x00004a6b
    49c8:	00004a6b 	.word	0x00004a6b
    49cc:	00004a6b 	.word	0x00004a6b
    49d0:	00004a6b 	.word	0x00004a6b
    49d4:	00004a6b 	.word	0x00004a6b
    49d8:	00004a6b 	.word	0x00004a6b
    49dc:	00004a6b 	.word	0x00004a6b
    49e0:	00004a6b 	.word	0x00004a6b
    49e4:	00004a6b 	.word	0x00004a6b
    49e8:	00004a6b 	.word	0x00004a6b
    49ec:	00004a6b 	.word	0x00004a6b
    49f0:	00004a6b 	.word	0x00004a6b
    49f4:	00004a6b 	.word	0x00004a6b
    49f8:	00004a6b 	.word	0x00004a6b
    49fc:	00004a6b 	.word	0x00004a6b
    4a00:	00004a6b 	.word	0x00004a6b
    4a04:	00004a6b 	.word	0x00004a6b
    4a08:	00004a6b 	.word	0x00004a6b
    4a0c:	00004a6b 	.word	0x00004a6b
    4a10:	00004a6b 	.word	0x00004a6b
    4a14:	00004a6b 	.word	0x00004a6b
    4a18:	00004a6b 	.word	0x00004a6b
    4a1c:	00004a6b 	.word	0x00004a6b
    4a20:	00004f27 	.word	0x00004f27
    4a24:	00004a6b 	.word	0x00004a6b
    4a28:	00004a6b 	.word	0x00004a6b
    4a2c:	00004a6b 	.word	0x00004a6b
    4a30:	00004a6b 	.word	0x00004a6b
    4a34:	00004a6b 	.word	0x00004a6b
    4a38:	00004a6b 	.word	0x00004a6b
    4a3c:	00004a6b 	.word	0x00004a6b
    4a40:	00004a6b 	.word	0x00004a6b
    4a44:	00004a6b 	.word	0x00004a6b
    4a48:	00004a6b 	.word	0x00004a6b
    4a4c:	00004a6b 	.word	0x00004a6b
    4a50:	00004a6b 	.word	0x00004a6b
    4a54:	00004809 	.word	0x00004809
        virtual int available() { return usb_serial_available(); }
    4a58:	f008 fa62 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    4a5c:	2800      	cmp	r0, #0
    4a5e:	f301 86b6 	bgt.w	67ce <menu()+0x1ffe>
  if (menuload == 1)
    4a62:	682b      	ldr	r3, [r5, #0]
    switch (incomingByte)
    4a64:	683c      	ldr	r4, [r7, #0]
  if (menuload == 1)
    4a66:	2b01      	cmp	r3, #1
    4a68:	d00f      	beq.n	4a8a <menu()+0x2ba>
  if (incomingByte == 115 && menuload == 0)
    4a6a:	2c73      	cmp	r4, #115	; 0x73
    4a6c:	f43f aed0 	beq.w	4810 <menu()+0x40>
}
    4a70:	b003      	add	sp, #12
    4a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        settings.ExpMess = !settings.ExpMess;
    4a74:	f896 30cd 	ldrb.w	r3, [r6, #205]	; 0xcd
    4a78:	fab3 f383 	clz	r3, r3
        incomingByte = 115;
    4a7c:	2478      	movs	r4, #120	; 0x78
        menuload = 1;
    4a7e:	2201      	movs	r2, #1
        settings.ExpMess = !settings.ExpMess;
    4a80:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4a82:	602a      	str	r2, [r5, #0]
        settings.ExpMess = !settings.ExpMess;
    4a84:	f886 30cd 	strb.w	r3, [r6, #205]	; 0xcd
        incomingByte = 115;
    4a88:	603c      	str	r4, [r7, #0]
    switch (incomingByte)
    4a8a:	f1a4 0352 	sub.w	r3, r4, #82	; 0x52
    4a8e:	2b26      	cmp	r3, #38	; 0x26
    4a90:	d8eb      	bhi.n	4a6a <menu()+0x29a>
    4a92:	a201      	add	r2, pc, #4	; (adr r2, 4a98 <menu()+0x2c8>)
    4a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4a98:	000052d3 	.word	0x000052d3
    4a9c:	00004a6b 	.word	0x00004a6b
    4aa0:	00004a6b 	.word	0x00004a6b
    4aa4:	00004a6b 	.word	0x00004a6b
    4aa8:	00004a6b 	.word	0x00004a6b
    4aac:	00004a6b 	.word	0x00004a6b
    4ab0:	00004a6b 	.word	0x00004a6b
    4ab4:	00004a6b 	.word	0x00004a6b
    4ab8:	00004a6b 	.word	0x00004a6b
    4abc:	00004a6b 	.word	0x00004a6b
    4ac0:	00004a6b 	.word	0x00004a6b
    4ac4:	00004a6b 	.word	0x00004a6b
    4ac8:	00004a6b 	.word	0x00004a6b
    4acc:	00004a6b 	.word	0x00004a6b
    4ad0:	00004a6b 	.word	0x00004a6b
    4ad4:	00006851 	.word	0x00006851
    4ad8:	0000683f 	.word	0x0000683f
    4adc:	00005101 	.word	0x00005101
    4ae0:	00004b45 	.word	0x00004b45
    4ae4:	0000684b 	.word	0x0000684b
    4ae8:	00004a6b 	.word	0x00004a6b
    4aec:	00004a6b 	.word	0x00004a6b
    4af0:	00004a6b 	.word	0x00004a6b
    4af4:	00006845 	.word	0x00006845
    4af8:	00004a6b 	.word	0x00004a6b
    4afc:	00006857 	.word	0x00006857
    4b00:	00004a6b 	.word	0x00004a6b
    4b04:	00004a6b 	.word	0x00004a6b
    4b08:	00004a6b 	.word	0x00004a6b
    4b0c:	00004a6b 	.word	0x00004a6b
    4b10:	00004a6b 	.word	0x00004a6b
    4b14:	000052b5 	.word	0x000052b5
    4b18:	00004a6b 	.word	0x00004a6b
    4b1c:	00004a6b 	.word	0x00004a6b
    4b20:	00004a6b 	.word	0x00004a6b
    4b24:	00004a6b 	.word	0x00004a6b
    4b28:	00004a6b 	.word	0x00004a6b
    4b2c:	00004a6b 	.word	0x00004a6b
    4b30:	00004c99 	.word	0x00004c99
    4b34:	1fffb690 	.word	0x1fffb690
    4b38:	1fffb654 	.word	0x1fffb654
    4b3c:	1fffb73c 	.word	0x1fffb73c
        virtual int read() { return usb_serial_getchar(); }
    4b40:	f008 f9b2 	bl	cea8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4b44:	f008 f9ec 	bl	cf20 <usb_serial_available>
        while (Serial.available()) {
    4b48:	2800      	cmp	r0, #0
    4b4a:	d1f9      	bne.n	4b40 <menu()+0x370>
        SERIALCONSOLE.println();
    4b4c:	48b2      	ldr	r0, [pc, #712]	; (4e18 <menu()+0x648>)
    4b4e:	f005 fcd3 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4b52:	48b1      	ldr	r0, [pc, #708]	; (4e18 <menu()+0x648>)
    4b54:	f005 fcd0 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4b58:	48af      	ldr	r0, [pc, #700]	; (4e18 <menu()+0x648>)
    4b5a:	f005 fccd 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4b5e:	48ae      	ldr	r0, [pc, #696]	; (4e18 <menu()+0x648>)
    4b60:	f005 fcca 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4b64:	48ac      	ldr	r0, [pc, #688]	; (4e18 <menu()+0x648>)
    4b66:	f005 fcc7 	bl	a4f8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4b6a:	2113      	movs	r1, #19
    4b6c:	48ab      	ldr	r0, [pc, #684]	; (4e1c <menu()+0x64c>)
    4b6e:	f008 fa09 	bl	cf84 <usb_serial_write>
    4b72:	48a9      	ldr	r0, [pc, #676]	; (4e18 <menu()+0x648>)
    4b74:	f005 fcc0 	bl	a4f8 <Print::println()>
    4b78:	210f      	movs	r1, #15
    4b7a:	48a9      	ldr	r0, [pc, #676]	; (4e20 <menu()+0x650>)
    4b7c:	f008 fa02 	bl	cf84 <usb_serial_write>
    4b80:	48a5      	ldr	r0, [pc, #660]	; (4e18 <menu()+0x648>)
    4b82:	f005 fcb9 	bl	a4f8 <Print::println()>
    4b86:	2110      	movs	r1, #16
    4b88:	48a6      	ldr	r0, [pc, #664]	; (4e24 <menu()+0x654>)
    4b8a:	f008 f9fb 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.println(candebug);
    4b8e:	4ba6      	ldr	r3, [pc, #664]	; (4e28 <menu()+0x658>)
	size_t print(int n)				{ return print((long)n); }
    4b90:	48a1      	ldr	r0, [pc, #644]	; (4e18 <menu()+0x648>)
    4b92:	6819      	ldr	r1, [r3, #0]
    4b94:	f005 fca8 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4b98:	489f      	ldr	r0, [pc, #636]	; (4e18 <menu()+0x648>)
    4b9a:	f005 fcad 	bl	a4f8 <Print::println()>
    4b9e:	2114      	movs	r1, #20
    4ba0:	48a2      	ldr	r0, [pc, #648]	; (4e2c <menu()+0x65c>)
    4ba2:	f008 f9ef 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.println(debugCur);
    4ba6:	4ba2      	ldr	r3, [pc, #648]	; (4e30 <menu()+0x660>)
	size_t print(int n)				{ return print((long)n); }
    4ba8:	489b      	ldr	r0, [pc, #620]	; (4e18 <menu()+0x648>)
    4baa:	6819      	ldr	r1, [r3, #0]
    4bac:	f005 fc9c 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4bb0:	4899      	ldr	r0, [pc, #612]	; (4e18 <menu()+0x648>)
    4bb2:	f005 fca1 	bl	a4f8 <Print::println()>
    4bb6:	2113      	movs	r1, #19
    4bb8:	489e      	ldr	r0, [pc, #632]	; (4e34 <menu()+0x664>)
    4bba:	f008 f9e3 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.println(outputcheck);
    4bbe:	4b9e      	ldr	r3, [pc, #632]	; (4e38 <menu()+0x668>)
	size_t print(int n)				{ return print((long)n); }
    4bc0:	4895      	ldr	r0, [pc, #596]	; (4e18 <menu()+0x648>)
    4bc2:	6819      	ldr	r1, [r3, #0]
    4bc4:	f005 fc90 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4bc8:	4893      	ldr	r0, [pc, #588]	; (4e18 <menu()+0x648>)
    4bca:	f005 fc95 	bl	a4f8 <Print::println()>
    4bce:	2112      	movs	r1, #18
    4bd0:	489a      	ldr	r0, [pc, #616]	; (4e3c <menu()+0x66c>)
    4bd2:	f008 f9d7 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.println(inputcheck);
    4bd6:	4b9a      	ldr	r3, [pc, #616]	; (4e40 <menu()+0x670>)
	size_t print(int n)				{ return print((long)n); }
    4bd8:	488f      	ldr	r0, [pc, #572]	; (4e18 <menu()+0x648>)
    4bda:	6819      	ldr	r1, [r3, #0]
    4bdc:	f005 fc84 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4be0:	488d      	ldr	r0, [pc, #564]	; (4e18 <menu()+0x648>)
    4be2:	f005 fc89 	bl	a4f8 <Print::println()>
    4be6:	210f      	movs	r1, #15
    4be8:	4896      	ldr	r0, [pc, #600]	; (4e44 <menu()+0x674>)
    4bea:	f008 f9cb 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.println(settings.ESSmode);
    4bee:	4b96      	ldr	r3, [pc, #600]	; (4e48 <menu()+0x678>)
	size_t print(int n)				{ return print((long)n); }
    4bf0:	4889      	ldr	r0, [pc, #548]	; (4e18 <menu()+0x648>)
    4bf2:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    4bf6:	f005 fc77 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4bfa:	4887      	ldr	r0, [pc, #540]	; (4e18 <menu()+0x648>)
    4bfc:	f005 fc7c 	bl	a4f8 <Print::println()>
    4c00:	211a      	movs	r1, #26
    4c02:	4892      	ldr	r0, [pc, #584]	; (4e4c <menu()+0x67c>)
    4c04:	f008 f9be 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.println(cellspresent);
    4c08:	4b91      	ldr	r3, [pc, #580]	; (4e50 <menu()+0x680>)
	size_t print(int n)				{ return print((long)n); }
    4c0a:	4883      	ldr	r0, [pc, #524]	; (4e18 <menu()+0x648>)
    4c0c:	6819      	ldr	r1, [r3, #0]
    4c0e:	f005 fc6b 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4c12:	4881      	ldr	r0, [pc, #516]	; (4e18 <menu()+0x648>)
    4c14:	f005 fc70 	bl	a4f8 <Print::println()>
    4c18:	2112      	movs	r1, #18
    4c1a:	488e      	ldr	r0, [pc, #568]	; (4e54 <menu()+0x684>)
    4c1c:	f008 f9b2 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.println(gaugedebug);
    4c20:	4b8d      	ldr	r3, [pc, #564]	; (4e58 <menu()+0x688>)
	size_t print(int n)				{ return print((long)n); }
    4c22:	487d      	ldr	r0, [pc, #500]	; (4e18 <menu()+0x648>)
    4c24:	6819      	ldr	r1, [r3, #0]
    4c26:	f005 fc5f 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4c2a:	487b      	ldr	r0, [pc, #492]	; (4e18 <menu()+0x648>)
    4c2c:	f005 fc64 	bl	a4f8 <Print::println()>
    4c30:	2111      	movs	r1, #17
    4c32:	488a      	ldr	r0, [pc, #552]	; (4e5c <menu()+0x68c>)
    4c34:	f008 f9a6 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.println(CSVdebug);
    4c38:	4b89      	ldr	r3, [pc, #548]	; (4e60 <menu()+0x690>)
	size_t print(int n)				{ return print((long)n); }
    4c3a:	4877      	ldr	r0, [pc, #476]	; (4e18 <menu()+0x648>)
    4c3c:	6819      	ldr	r1, [r3, #0]
    4c3e:	f005 fc53 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4c42:	4875      	ldr	r0, [pc, #468]	; (4e18 <menu()+0x648>)
    4c44:	f005 fc58 	bl	a4f8 <Print::println()>
    4c48:	211d      	movs	r1, #29
    4c4a:	4886      	ldr	r0, [pc, #536]	; (4e64 <menu()+0x694>)
    4c4c:	f008 f99a 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.println(debugdigits);
    4c50:	4b85      	ldr	r3, [pc, #532]	; (4e68 <menu()+0x698>)
	size_t print(int n)				{ return print((long)n); }
    4c52:	4871      	ldr	r0, [pc, #452]	; (4e18 <menu()+0x648>)
    4c54:	6819      	ldr	r1, [r3, #0]
    4c56:	f005 fc47 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4c5a:	486f      	ldr	r0, [pc, #444]	; (4e18 <menu()+0x648>)
    4c5c:	f005 fc4c 	bl	a4f8 <Print::println()>
    4c60:	2114      	movs	r1, #20
    4c62:	4882      	ldr	r0, [pc, #520]	; (4e6c <menu()+0x69c>)
    4c64:	f008 f98e 	bl	cf84 <usb_serial_write>
        if (delim == 1)
    4c68:	4b81      	ldr	r3, [pc, #516]	; (4e70 <menu()+0x6a0>)
    4c6a:	681b      	ldr	r3, [r3, #0]
    4c6c:	2b01      	cmp	r3, #1
    4c6e:	bf0b      	itete	eq
    4c70:	2105      	moveq	r1, #5
    4c72:	2105      	movne	r1, #5
    4c74:	487f      	ldreq	r0, [pc, #508]	; (4e74 <menu()+0x6a4>)
    4c76:	4880      	ldrne	r0, [pc, #512]	; (4e78 <menu()+0x6a8>)
    4c78:	f008 f984 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4c7c:	4866      	ldr	r0, [pc, #408]	; (4e18 <menu()+0x648>)
    4c7e:	f005 fc3b 	bl	a4f8 <Print::println()>
    4c82:	2113      	movs	r1, #19
    4c84:	487d      	ldr	r0, [pc, #500]	; (4e7c <menu()+0x6ac>)
    4c86:	f008 f97d 	bl	cf84 <usb_serial_write>
    4c8a:	4863      	ldr	r0, [pc, #396]	; (4e18 <menu()+0x648>)
    4c8c:	f005 fc34 	bl	a4f8 <Print::println()>
        break;
    4c90:	2304      	movs	r3, #4
    4c92:	e03d      	b.n	4d10 <menu()+0x540>
        virtual int read() { return usb_serial_getchar(); }
    4c94:	f008 f908 	bl	cea8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4c98:	f008 f942 	bl	cf20 <usb_serial_available>
        while (Serial.available()) {
    4c9c:	4604      	mov	r4, r0
    4c9e:	2800      	cmp	r0, #0
    4ca0:	d1f8      	bne.n	4c94 <menu()+0x4c4>
        SERIALCONSOLE.println();
    4ca2:	485d      	ldr	r0, [pc, #372]	; (4e18 <menu()+0x648>)
    4ca4:	f005 fc28 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4ca8:	485b      	ldr	r0, [pc, #364]	; (4e18 <menu()+0x648>)
    4caa:	f005 fc25 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4cae:	485a      	ldr	r0, [pc, #360]	; (4e18 <menu()+0x648>)
    4cb0:	f005 fc22 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4cb4:	4858      	ldr	r0, [pc, #352]	; (4e18 <menu()+0x648>)
    4cb6:	f005 fc1f 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4cba:	4857      	ldr	r0, [pc, #348]	; (4e18 <menu()+0x648>)
    4cbc:	f005 fc1c 	bl	a4f8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4cc0:	2115      	movs	r1, #21
    4cc2:	486f      	ldr	r0, [pc, #444]	; (4e80 <menu()+0x6b0>)
    4cc4:	f008 f95e 	bl	cf84 <usb_serial_write>
    4cc8:	4853      	ldr	r0, [pc, #332]	; (4e18 <menu()+0x648>)
    4cca:	f005 fc15 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4cce:	4852      	ldr	r0, [pc, #328]	; (4e18 <menu()+0x648>)
    4cd0:	f005 fc12 	bl	a4f8 <Print::println()>
    4cd4:	212c      	movs	r1, #44	; 0x2c
    4cd6:	486b      	ldr	r0, [pc, #428]	; (4e84 <menu()+0x6b4>)
    4cd8:	f008 f954 	bl	cf84 <usb_serial_write>
    4cdc:	484e      	ldr	r0, [pc, #312]	; (4e18 <menu()+0x648>)
    4cde:	f005 fc0b 	bl	a4f8 <Print::println()>
    4ce2:	2125      	movs	r1, #37	; 0x25
    4ce4:	4868      	ldr	r0, [pc, #416]	; (4e88 <menu()+0x6b8>)
    4ce6:	f008 f94d 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.println(settings.ExpMess);
    4cea:	4957      	ldr	r1, [pc, #348]	; (4e48 <menu()+0x678>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4cec:	484a      	ldr	r0, [pc, #296]	; (4e18 <menu()+0x648>)
    4cee:	f891 10cd 	ldrb.w	r1, [r1, #205]	; 0xcd
    4cf2:	4623      	mov	r3, r4
    4cf4:	220a      	movs	r2, #10
    4cf6:	f005 fc17 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    4cfa:	4847      	ldr	r0, [pc, #284]	; (4e18 <menu()+0x648>)
    4cfc:	f005 fbfc 	bl	a4f8 <Print::println()>
    4d00:	2113      	movs	r1, #19
    4d02:	485e      	ldr	r0, [pc, #376]	; (4e7c <menu()+0x6ac>)
    4d04:	f008 f93e 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4d08:	4843      	ldr	r0, [pc, #268]	; (4e18 <menu()+0x648>)
    4d0a:	f005 fbf5 	bl	a4f8 <Print::println()>
        break;
    4d0e:	2309      	movs	r3, #9
        menuload = 6;
    4d10:	602b      	str	r3, [r5, #0]
}
    4d12:	b003      	add	sp, #12
    4d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d16:	4c5d      	ldr	r4, [pc, #372]	; (4e8c <menu()+0x6bc>)
    SERIALCONSOLE.println();
    4d18:	483f      	ldr	r0, [pc, #252]	; (4e18 <menu()+0x648>)
    4d1a:	f005 fbed 	bl	a4f8 <Print::println()>
    4d1e:	2104      	movs	r1, #4
    4d20:	485b      	ldr	r0, [pc, #364]	; (4e90 <menu()+0x6c0>)
    4d22:	f008 f92f 	bl	cf84 <usb_serial_write>
    4d26:	483c      	ldr	r0, [pc, #240]	; (4e18 <menu()+0x648>)
    4d28:	f005 fbe6 	bl	a4f8 <Print::println()>
    4d2c:	2110      	movs	r1, #16
    4d2e:	4859      	ldr	r0, [pc, #356]	; (4e94 <menu()+0x6c4>)
    4d30:	f008 f928 	bl	cf84 <usb_serial_write>
    4d34:	4838      	ldr	r0, [pc, #224]	; (4e18 <menu()+0x648>)
    4d36:	f005 fbdf 	bl	a4f8 <Print::println()>
    4d3a:	2113      	movs	r1, #19
    4d3c:	4856      	ldr	r0, [pc, #344]	; (4e98 <menu()+0x6c8>)
    4d3e:	f008 f921 	bl	cf84 <usb_serial_write>
    SERIALCONSOLE.println(firmver);
    4d42:	4b56      	ldr	r3, [pc, #344]	; (4e9c <menu()+0x6cc>)
	size_t print(int n)				{ return print((long)n); }
    4d44:	4834      	ldr	r0, [pc, #208]	; (4e18 <menu()+0x648>)
    4d46:	6819      	ldr	r1, [r3, #0]
    4d48:	f005 fbce 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4d4c:	4832      	ldr	r0, [pc, #200]	; (4e18 <menu()+0x648>)
    4d4e:	f005 fbd3 	bl	a4f8 <Print::println()>
    4d52:	2114      	movs	r1, #20
    4d54:	4852      	ldr	r0, [pc, #328]	; (4ea0 <menu()+0x6d0>)
    4d56:	f008 f915 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4d5a:	482f      	ldr	r0, [pc, #188]	; (4e18 <menu()+0x648>)
    4d5c:	f005 fbcc 	bl	a4f8 <Print::println()>
    4d60:	211e      	movs	r1, #30
    4d62:	4850      	ldr	r0, [pc, #320]	; (4ea4 <menu()+0x6d4>)
    4d64:	f008 f90e 	bl	cf84 <usb_serial_write>
    4d68:	482b      	ldr	r0, [pc, #172]	; (4e18 <menu()+0x648>)
    4d6a:	f005 fbc5 	bl	a4f8 <Print::println()>
    4d6e:	2115      	movs	r1, #21
    4d70:	484d      	ldr	r0, [pc, #308]	; (4ea8 <menu()+0x6d8>)
    4d72:	f008 f907 	bl	cf84 <usb_serial_write>
    4d76:	4828      	ldr	r0, [pc, #160]	; (4e18 <menu()+0x648>)
    4d78:	f005 fbbe 	bl	a4f8 <Print::println()>
    4d7c:	211e      	movs	r1, #30
    4d7e:	484b      	ldr	r0, [pc, #300]	; (4eac <menu()+0x6dc>)
    4d80:	f008 f900 	bl	cf84 <usb_serial_write>
    4d84:	4824      	ldr	r0, [pc, #144]	; (4e18 <menu()+0x648>)
    4d86:	f005 fbb7 	bl	a4f8 <Print::println()>
    4d8a:	2120      	movs	r1, #32
    4d8c:	4848      	ldr	r0, [pc, #288]	; (4eb0 <menu()+0x6e0>)
    4d8e:	f008 f8f9 	bl	cf84 <usb_serial_write>
    4d92:	4821      	ldr	r0, [pc, #132]	; (4e18 <menu()+0x648>)
    4d94:	f005 fbb0 	bl	a4f8 <Print::println()>
    4d98:	2119      	movs	r1, #25
    4d9a:	4846      	ldr	r0, [pc, #280]	; (4eb4 <menu()+0x6e4>)
    4d9c:	f008 f8f2 	bl	cf84 <usb_serial_write>
    4da0:	481d      	ldr	r0, [pc, #116]	; (4e18 <menu()+0x648>)
    4da2:	f005 fba9 	bl	a4f8 <Print::println()>
    4da6:	2112      	movs	r1, #18
    4da8:	4843      	ldr	r0, [pc, #268]	; (4eb8 <menu()+0x6e8>)
    4daa:	f008 f8eb 	bl	cf84 <usb_serial_write>
    4dae:	481a      	ldr	r0, [pc, #104]	; (4e18 <menu()+0x648>)
    4db0:	f005 fba2 	bl	a4f8 <Print::println()>
    4db4:	2119      	movs	r1, #25
    4db6:	4841      	ldr	r0, [pc, #260]	; (4ebc <menu()+0x6ec>)
    4db8:	f008 f8e4 	bl	cf84 <usb_serial_write>
    4dbc:	4816      	ldr	r0, [pc, #88]	; (4e18 <menu()+0x648>)
    4dbe:	f005 fb9b 	bl	a4f8 <Print::println()>
    4dc2:	210f      	movs	r1, #15
    4dc4:	483e      	ldr	r0, [pc, #248]	; (4ec0 <menu()+0x6f0>)
    4dc6:	f008 f8dd 	bl	cf84 <usb_serial_write>
    4dca:	4813      	ldr	r0, [pc, #76]	; (4e18 <menu()+0x648>)
    4dcc:	f005 fb94 	bl	a4f8 <Print::println()>
    4dd0:	210d      	movs	r1, #13
    4dd2:	483c      	ldr	r0, [pc, #240]	; (4ec4 <menu()+0x6f4>)
    4dd4:	f008 f8d6 	bl	cf84 <usb_serial_write>
    4dd8:	480f      	ldr	r0, [pc, #60]	; (4e18 <menu()+0x648>)
    4dda:	f005 fb8d 	bl	a4f8 <Print::println()>
    debug = 0;
    4dde:	2200      	movs	r2, #0
    menuload = 1;
    4de0:	2301      	movs	r3, #1
    debug = 0;
    4de2:	6022      	str	r2, [r4, #0]
    menuload = 1;
    4de4:	602b      	str	r3, [r5, #0]
}
    4de6:	b003      	add	sp, #12
    4de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CPdebug = !CPdebug;
    4dea:	4a37      	ldr	r2, [pc, #220]	; (4ec8 <menu()+0x6f8>)
    4dec:	7813      	ldrb	r3, [r2, #0]
        menuload = 1;
    4dee:	2101      	movs	r1, #1
        incomingByte = 'd';
    4df0:	2464      	movs	r4, #100	; 0x64
        CPdebug = !CPdebug;
    4df2:	404b      	eors	r3, r1
        menuload = 1;
    4df4:	6029      	str	r1, [r5, #0]
        CPdebug = !CPdebug;
    4df6:	7013      	strb	r3, [r2, #0]
        incomingByte = 'd';
    4df8:	603c      	str	r4, [r7, #0]
  if (menuload == 6) //Charging settings
    4dfa:	e646      	b.n	4a8a <menu()+0x2ba>
        candebug = !candebug;
    4dfc:	4a0a      	ldr	r2, [pc, #40]	; (4e28 <menu()+0x658>)
        CSVdebug = !CSVdebug;
    4dfe:	6813      	ldr	r3, [r2, #0]
    4e00:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    4e04:	2464      	movs	r4, #100	; 0x64
        menuload = 1;
    4e06:	2101      	movs	r1, #1
        CSVdebug = !CSVdebug;
    4e08:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4e0a:	6029      	str	r1, [r5, #0]
        CSVdebug = !CSVdebug;
    4e0c:	6013      	str	r3, [r2, #0]
        incomingByte = 'd';
    4e0e:	603c      	str	r4, [r7, #0]
  if (menuload == 6) //Charging settings
    4e10:	e63b      	b.n	4a8a <menu()+0x2ba>
        debugCur = !debugCur;
    4e12:	4a07      	ldr	r2, [pc, #28]	; (4e30 <menu()+0x660>)
    4e14:	e7f3      	b.n	4dfe <menu()+0x62e>
    4e16:	bf00      	nop
    4e18:	1fff89f8 	.word	0x1fff89f8
    4e1c:	00016460 	.word	0x00016460
    4e20:	00016474 	.word	0x00016474
    4e24:	00016484 	.word	0x00016484
    4e28:	1fffb59c 	.word	0x1fffb59c
    4e2c:	00016498 	.word	0x00016498
    4e30:	1fffb630 	.word	0x1fffb630
    4e34:	000164b0 	.word	0x000164b0
    4e38:	1fffb724 	.word	0x1fffb724
    4e3c:	000164c4 	.word	0x000164c4
    4e40:	1fffb658 	.word	0x1fffb658
    4e44:	000164d8 	.word	0x000164d8
    4e48:	1fffb73c 	.word	0x1fffb73c
    4e4c:	000164e8 	.word	0x000164e8
    4e50:	1fffb5a0 	.word	0x1fffb5a0
    4e54:	00016504 	.word	0x00016504
    4e58:	1fffb63c 	.word	0x1fffb63c
    4e5c:	00016518 	.word	0x00016518
    4e60:	1fff91a0 	.word	0x1fff91a0
    4e64:	0001652c 	.word	0x0001652c
    4e68:	1fff884c 	.word	0x1fff884c
    4e6c:	0001654c 	.word	0x0001654c
    4e70:	1fffb634 	.word	0x1fffb634
    4e74:	00016564 	.word	0x00016564
    4e78:	0001656c 	.word	0x0001656c
    4e7c:	00015e80 	.word	0x00015e80
    4e80:	00016428 	.word	0x00016428
    4e84:	00015e28 	.word	0x00015e28
    4e88:	00015e58 	.word	0x00015e58
    4e8c:	1fff8848 	.word	0x1fff8848
    4e90:	00016330 	.word	0x00016330
    4e94:	00016338 	.word	0x00016338
    4e98:	0001634c 	.word	0x0001634c
    4e9c:	1fff8854 	.word	0x1fff8854
    4ea0:	00016360 	.word	0x00016360
    4ea4:	00016378 	.word	0x00016378
    4ea8:	00016398 	.word	0x00016398
    4eac:	000163b0 	.word	0x000163b0
    4eb0:	000163d0 	.word	0x000163d0
    4eb4:	000163f4 	.word	0x000163f4
    4eb8:	00016410 	.word	0x00016410
    4ebc:	00016424 	.word	0x00016424
    4ec0:	00016440 	.word	0x00016440
    4ec4:	00016450 	.word	0x00016450
    4ec8:	1fff919c 	.word	0x1fff919c
        outputcheck = !outputcheck;
    4ecc:	4ba9      	ldr	r3, [pc, #676]	; (5174 <menu()+0x9a4>)
    4ece:	681a      	ldr	r2, [r3, #0]
        menuload = 1;
    4ed0:	2101      	movs	r1, #1
        outputcheck = !outputcheck;
    4ed2:	2a00      	cmp	r2, #0
    4ed4:	bf0c      	ite	eq
    4ed6:	460a      	moveq	r2, r1
    4ed8:	2200      	movne	r2, #0
        menuload = 1;
    4eda:	6029      	str	r1, [r5, #0]
        outputcheck = !outputcheck;
    4edc:	601a      	str	r2, [r3, #0]
        if (outputcheck == 0)
    4ede:	f041 83fb 	bne.w	66d8 <menu()+0x1f08>
        incomingByte = 'd';
    4ee2:	2464      	movs	r4, #100	; 0x64
    4ee4:	603c      	str	r4, [r7, #0]
  if (menuload == 8)
    4ee6:	e5d0      	b.n	4a8a <menu()+0x2ba>
        inputcheck = !inputcheck;
    4ee8:	4aa3      	ldr	r2, [pc, #652]	; (5178 <menu()+0x9a8>)
    4eea:	e788      	b.n	4dfe <menu()+0x62e>
        gaugedebug = !gaugedebug;
    4eec:	4aa3      	ldr	r2, [pc, #652]	; (517c <menu()+0x9ac>)
    4eee:	e786      	b.n	4dfe <menu()+0x62e>
        CSVdebug = !CSVdebug;
    4ef0:	4aa3      	ldr	r2, [pc, #652]	; (5180 <menu()+0x9b0>)
    4ef2:	e784      	b.n	4dfe <menu()+0x62e>
        menuload = 1;
    4ef4:	2301      	movs	r3, #1
    4ef6:	602b      	str	r3, [r5, #0]
        virtual int available() { return usb_serial_available(); }
    4ef8:	f008 f812 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    4efc:	2800      	cmp	r0, #0
    4efe:	f301 83c5 	bgt.w	668c <menu()+0x1ebc>
        if (debugdigits > 4)
    4f02:	4ba0      	ldr	r3, [pc, #640]	; (5184 <menu()+0x9b4>)
    4f04:	6818      	ldr	r0, [r3, #0]
    4f06:	2804      	cmp	r0, #4
          debugdigits = 2;
    4f08:	bfc4      	itt	gt
    4f0a:	2202      	movgt	r2, #2
    4f0c:	601a      	strgt	r2, [r3, #0]
  if (menuload == 9)
    4f0e:	682b      	ldr	r3, [r5, #0]
        incomingByte = 'd';
    4f10:	2464      	movs	r4, #100	; 0x64
  if (menuload == 9)
    4f12:	2b09      	cmp	r3, #9
        incomingByte = 'd';
    4f14:	603c      	str	r4, [r7, #0]
  if (menuload == 9)
    4f16:	d018      	beq.n	4f4a <menu()+0x77a>
  if (menuload == 8)
    4f18:	2b08      	cmp	r3, #8
    4f1a:	f43f ac7d 	beq.w	4818 <menu()+0x48>
  if (menuload == 7)
    4f1e:	2b07      	cmp	r3, #7
    4f20:	f43f ac7a 	beq.w	4818 <menu()+0x48>
    4f24:	e1fb      	b.n	531e <menu()+0xb4e>
        menuload = 1;
    4f26:	2301      	movs	r3, #1
    4f28:	602b      	str	r3, [r5, #0]
    4f2a:	f007 fff9 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    4f2e:	2800      	cmp	r0, #0
    4f30:	f301 83b3 	bgt.w	669a <menu()+0x1eca>
        if (delim > 1)
    4f34:	4b94      	ldr	r3, [pc, #592]	; (5188 <menu()+0x9b8>)
    4f36:	6818      	ldr	r0, [r3, #0]
    4f38:	2801      	cmp	r0, #1
          delim = 0;
    4f3a:	bfc4      	itt	gt
    4f3c:	2200      	movgt	r2, #0
    4f3e:	601a      	strgt	r2, [r3, #0]
  if (menuload == 9)
    4f40:	682b      	ldr	r3, [r5, #0]
        incomingByte = 'd';
    4f42:	2264      	movs	r2, #100	; 0x64
  if (menuload == 9)
    4f44:	2b09      	cmp	r3, #9
        incomingByte = 'd';
    4f46:	603a      	str	r2, [r7, #0]
  if (menuload == 9)
    4f48:	d1e6      	bne.n	4f18 <menu()+0x748>
    if (settings.ExpMess > 1)
    4f4a:	4b90      	ldr	r3, [pc, #576]	; (518c <menu()+0x9bc>)
    4f4c:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
    4f50:	2a01      	cmp	r2, #1
    4f52:	f67f ac61 	bls.w	4818 <menu()+0x48>
      settings.ExpMess = 0;
    4f56:	2200      	movs	r2, #0
    4f58:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
  if (menuload == 8)
    4f5c:	e45c      	b.n	4818 <menu()+0x48>
        settings.ESSmode = !settings.ESSmode;
    4f5e:	4e8b      	ldr	r6, [pc, #556]	; (518c <menu()+0x9bc>)
    4f60:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
    4f64:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    4f68:	2464      	movs	r4, #100	; 0x64
        menuload = 1;
    4f6a:	2201      	movs	r2, #1
        settings.ESSmode = !settings.ESSmode;
    4f6c:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4f6e:	602a      	str	r2, [r5, #0]
        settings.ESSmode = !settings.ESSmode;
    4f70:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
        incomingByte = 'd';
    4f74:	603c      	str	r4, [r7, #0]
  if (menuload == 6) //Charging settings
    4f76:	e588      	b.n	4a8a <menu()+0x2ba>
        menuload = 1;
    4f78:	2301      	movs	r3, #1
        cellspresent = bms.seriescells();
    4f7a:	4885      	ldr	r0, [pc, #532]	; (5190 <menu()+0x9c0>)
        menuload = 1;
    4f7c:	602b      	str	r3, [r5, #0]
        cellspresent = bms.seriescells();
    4f7e:	f7fb feeb 	bl	d58 <BMSModuleManager::seriescells()>
  if (menuload == 9)
    4f82:	682b      	ldr	r3, [r5, #0]
        cellspresent = bms.seriescells();
    4f84:	4a83      	ldr	r2, [pc, #524]	; (5194 <menu()+0x9c4>)
        incomingByte = 'd';
    4f86:	2464      	movs	r4, #100	; 0x64
  if (menuload == 9)
    4f88:	2b09      	cmp	r3, #9
        cellspresent = bms.seriescells();
    4f8a:	6010      	str	r0, [r2, #0]
        incomingByte = 'd';
    4f8c:	603c      	str	r4, [r7, #0]
  if (menuload == 9)
    4f8e:	d1c3      	bne.n	4f18 <menu()+0x748>
    4f90:	e7db      	b.n	4f4a <menu()+0x77a>
        settings.cursens ++;
    4f92:	4e7e      	ldr	r6, [pc, #504]	; (518c <menu()+0x9bc>)
    4f94:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
        menuload = 1;
    4f98:	2201      	movs	r2, #1
        settings.cursens ++;
    4f9a:	4413      	add	r3, r2
          settings.cursens = 0;
    4f9c:	2b04      	cmp	r3, #4
        menuload = 1;
    4f9e:	602a      	str	r2, [r5, #0]
          settings.cursens = 0;
    4fa0:	bfa8      	it	ge
    4fa2:	2300      	movge	r3, #0
        incomingByte = 'c';
    4fa4:	2263      	movs	r2, #99	; 0x63
    4fa6:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
    4faa:	603a      	str	r2, [r7, #0]
  if (menuload == 1)
    4fac:	e001      	b.n	4fb2 <menu()+0x7e2>
        virtual int read() { return usb_serial_getchar(); }
    4fae:	f007 ff7b 	bl	cea8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4fb2:	f007 ffb5 	bl	cf20 <usb_serial_available>
        while (Serial.available()) {
    4fb6:	2800      	cmp	r0, #0
    4fb8:	d1f9      	bne.n	4fae <menu()+0x7de>
        SERIALCONSOLE.println();
    4fba:	4877      	ldr	r0, [pc, #476]	; (5198 <menu()+0x9c8>)
    4fbc:	f005 fa9c 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4fc0:	4875      	ldr	r0, [pc, #468]	; (5198 <menu()+0x9c8>)
    4fc2:	f005 fa99 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4fc6:	4874      	ldr	r0, [pc, #464]	; (5198 <menu()+0x9c8>)
    4fc8:	f005 fa96 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4fcc:	4872      	ldr	r0, [pc, #456]	; (5198 <menu()+0x9c8>)
    4fce:	f005 fa93 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    4fd2:	4871      	ldr	r0, [pc, #452]	; (5198 <menu()+0x9c8>)
    4fd4:	f005 fa90 	bl	a4f8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4fd8:	211f      	movs	r1, #31
    4fda:	4870      	ldr	r0, [pc, #448]	; (519c <menu()+0x9cc>)
    4fdc:	f007 ffd2 	bl	cf84 <usb_serial_write>
    4fe0:	486d      	ldr	r0, [pc, #436]	; (5198 <menu()+0x9c8>)
    4fe2:	f005 fa89 	bl	a4f8 <Print::println()>
    4fe6:	211e      	movs	r1, #30
    4fe8:	486d      	ldr	r0, [pc, #436]	; (51a0 <menu()+0x9d0>)
    4fea:	f007 ffcb 	bl	cf84 <usb_serial_write>
    4fee:	486a      	ldr	r0, [pc, #424]	; (5198 <menu()+0x9c8>)
    4ff0:	f005 fa82 	bl	a4f8 <Print::println()>
    4ff4:	486b      	ldr	r0, [pc, #428]	; (51a4 <menu()+0x9d4>)
    4ff6:	211a      	movs	r1, #26
    4ff8:	f007 ffc4 	bl	cf84 <usb_serial_write>
        switch (settings.cursens)
    4ffc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    5000:	2b02      	cmp	r3, #2
    5002:	f001 8395 	beq.w	6730 <menu()+0x1f60>
    5006:	2b03      	cmp	r3, #3
    5008:	f001 8389 	beq.w	671e <menu()+0x1f4e>
    500c:	2b01      	cmp	r3, #1
    500e:	f001 8398 	beq.w	6742 <menu()+0x1f72>
    5012:	4865      	ldr	r0, [pc, #404]	; (51a8 <menu()+0x9d8>)
    5014:	2109      	movs	r1, #9
    5016:	f007 ffb5 	bl	cf84 <usb_serial_write>
    501a:	485f      	ldr	r0, [pc, #380]	; (5198 <menu()+0x9c8>)
    501c:	f005 fa6c 	bl	a4f8 <Print::println()>
    5020:	2115      	movs	r1, #21
    5022:	4862      	ldr	r0, [pc, #392]	; (51ac <menu()+0x9dc>)
    5024:	f007 ffae 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5028:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    502a:	485b      	ldr	r0, [pc, #364]	; (5198 <menu()+0x9c8>)
    502c:	f005 fa5c 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5030:	4859      	ldr	r0, [pc, #356]	; (5198 <menu()+0x9c8>)
    5032:	f005 fa61 	bl	a4f8 <Print::println()>
    5036:	211d      	movs	r1, #29
    5038:	485d      	ldr	r0, [pc, #372]	; (51b0 <menu()+0x9e0>)
    503a:	f007 ffa3 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    503e:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
    5042:	4855      	ldr	r0, [pc, #340]	; (5198 <menu()+0x9c8>)
    5044:	f005 fa50 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5048:	4853      	ldr	r0, [pc, #332]	; (5198 <menu()+0x9c8>)
    504a:	f005 fa55 	bl	a4f8 <Print::println()>
    504e:	211d      	movs	r1, #29
    5050:	4858      	ldr	r0, [pc, #352]	; (51b4 <menu()+0x9e4>)
    5052:	f007 ff97 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5056:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
    505a:	484f      	ldr	r0, [pc, #316]	; (5198 <menu()+0x9c8>)
    505c:	f005 fa44 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5060:	484d      	ldr	r0, [pc, #308]	; (5198 <menu()+0x9c8>)
    5062:	f005 fa49 	bl	a4f8 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual)
    5066:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    506a:	f023 0202 	bic.w	r2, r3, #2
    506e:	2a01      	cmp	r2, #1
    5070:	f001 8294 	beq.w	659c <menu()+0x1dcc>
        if ( settings.cursens == Canbus)
    5074:	2b02      	cmp	r3, #2
    5076:	f001 8395 	beq.w	67a4 <menu()+0x1fd4>
    507a:	2113      	movs	r1, #19
    507c:	484e      	ldr	r0, [pc, #312]	; (51b8 <menu()+0x9e8>)
    507e:	f007 ff81 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5082:	4845      	ldr	r0, [pc, #276]	; (5198 <menu()+0x9c8>)
    5084:	f005 fa38 	bl	a4f8 <Print::println()>
        break;
    5088:	2302      	movs	r3, #2
    508a:	e641      	b.n	4d10 <menu()+0x540>
        settings.voltsoc = !settings.voltsoc;
    508c:	4e3f      	ldr	r6, [pc, #252]	; (518c <menu()+0x9bc>)
    508e:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
    5092:	fab3 f383 	clz	r3, r3
    5096:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    5098:	2201      	movs	r2, #1
        settings.voltsoc = !settings.voltsoc;
    509a:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
        incomingByte = 'c';
    509e:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    50a0:	602a      	str	r2, [r5, #0]
        incomingByte = 'c';
    50a2:	603b      	str	r3, [r7, #0]
  if (menuload == 1)
    50a4:	e785      	b.n	4fb2 <menu()+0x7e2>
        menuload = 1;
    50a6:	2301      	movs	r3, #1
    50a8:	602b      	str	r3, [r5, #0]
        virtual int available() { return usb_serial_available(); }
    50aa:	f007 ff39 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    50ae:	2800      	cmp	r0, #0
    50b0:	f301 82e4 	bgt.w	667c <menu()+0x1eac>
    50b4:	4e35      	ldr	r6, [pc, #212]	; (518c <menu()+0x9bc>)
        menuload = 1;
    50b6:	2201      	movs	r2, #1
        incomingByte = 'c';
    50b8:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    50ba:	602a      	str	r2, [r5, #0]
        incomingByte = 'c';
    50bc:	603b      	str	r3, [r7, #0]
  if (menuload == 1)
    50be:	e778      	b.n	4fb2 <menu()+0x7e2>
        menuload = 1;
    50c0:	2301      	movs	r3, #1
    50c2:	602b      	str	r3, [r5, #0]
    50c4:	f007 ff2c 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    50c8:	2800      	cmp	r0, #0
    50ca:	dd07      	ble.n	50dc <menu()+0x90c>
          settings.convlow = Serial.parseInt();
    50cc:	4832      	ldr	r0, [pc, #200]	; (5198 <menu()+0x9c8>)
    50ce:	4e2f      	ldr	r6, [pc, #188]	; (518c <menu()+0x9bc>)
    50d0:	f005 fb72 	bl	a7b8 <Stream::parseInt()>
    50d4:	f009 fc40 	bl	e958 <__aeabi_i2f>
    50d8:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
  if (menuload == 8)
    50dc:	682b      	ldr	r3, [r5, #0]
        incomingByte = 'c';
    50de:	2263      	movs	r2, #99	; 0x63
  if (menuload == 7)
    50e0:	2b07      	cmp	r3, #7
        incomingByte = 'c';
    50e2:	603a      	str	r2, [r7, #0]
  if (menuload == 7)
    50e4:	f43f ab98 	beq.w	4818 <menu()+0x48>
  if (menuload == 6) //Charging settings
    50e8:	2b06      	cmp	r3, #6
    50ea:	f000 863a 	beq.w	5d62 <menu()+0x1592>
  if (menuload == 5)
    50ee:	2b05      	cmp	r3, #5
    50f0:	f43f ab92 	beq.w	4818 <menu()+0x48>
  if (menuload == 3)
    50f4:	2b03      	cmp	r3, #3
    50f6:	f001 817c 	beq.w	63f2 <menu()+0x1c22>
  if (menuload == 1)
    50fa:	2b01      	cmp	r3, #1
    50fc:	f47f ab8c 	bne.w	4818 <menu()+0x48>
    5100:	4e22      	ldr	r6, [pc, #136]	; (518c <menu()+0x9bc>)
    5102:	e756      	b.n	4fb2 <menu()+0x7e2>
        menuload = 1;
    5104:	2301      	movs	r3, #1
    5106:	602b      	str	r3, [r5, #0]
    5108:	f007 ff0a 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    510c:	2800      	cmp	r0, #0
    510e:	dde5      	ble.n	50dc <menu()+0x90c>
          settings.convhigh = Serial.parseInt();
    5110:	4821      	ldr	r0, [pc, #132]	; (5198 <menu()+0x9c8>)
    5112:	4e1e      	ldr	r6, [pc, #120]	; (518c <menu()+0x9bc>)
    5114:	f005 fb50 	bl	a7b8 <Stream::parseInt()>
    5118:	f009 fc1e 	bl	e958 <__aeabi_i2f>
    511c:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
    5120:	e7dc      	b.n	50dc <menu()+0x90c>
        menuload = 1;
    5122:	2301      	movs	r3, #1
    5124:	602b      	str	r3, [r5, #0]
    5126:	f007 fefb 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    512a:	2800      	cmp	r0, #0
    512c:	ddd6      	ble.n	50dc <menu()+0x90c>
          settings.CurDead = Serial.parseInt();
    512e:	481a      	ldr	r0, [pc, #104]	; (5198 <menu()+0x9c8>)
    5130:	4e16      	ldr	r6, [pc, #88]	; (518c <menu()+0x9bc>)
    5132:	f005 fb41 	bl	a7b8 <Stream::parseInt()>
    5136:	f8a6 00c6 	strh.w	r0, [r6, #198]	; 0xc6
    513a:	e7cf      	b.n	50dc <menu()+0x90c>
        settings.curcan++;
    513c:	4e13      	ldr	r6, [pc, #76]	; (518c <menu()+0x9bc>)
    513e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
        menuload = 1;
    5142:	2201      	movs	r2, #1
        settings.curcan++;
    5144:	4413      	add	r3, r2
          settings.curcan = 1;
    5146:	2b05      	cmp	r3, #5
    5148:	bfa8      	it	ge
    514a:	4613      	movge	r3, r2
        menuload = 1;
    514c:	602a      	str	r2, [r5, #0]
        incomingByte = 'c';
    514e:	2263      	movs	r2, #99	; 0x63
    5150:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    5154:	603a      	str	r2, [r7, #0]
  if (menuload == 1)
    5156:	e72c      	b.n	4fb2 <menu()+0x7e2>
        menuload = 1;
    5158:	2301      	movs	r3, #1
    515a:	602b      	str	r3, [r5, #0]
    515c:	f007 fee0 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5160:	2800      	cmp	r0, #0
    5162:	dda7      	ble.n	50b4 <menu()+0x8e4>
          settings.changecur = Serial.parseInt();
    5164:	480c      	ldr	r0, [pc, #48]	; (5198 <menu()+0x9c8>)
    5166:	4e09      	ldr	r6, [pc, #36]	; (518c <menu()+0x9bc>)
    5168:	f005 fb26 	bl	a7b8 <Stream::parseInt()>
    516c:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
    5170:	e7a1      	b.n	50b6 <menu()+0x8e6>
    5172:	bf00      	nop
    5174:	1fffb724 	.word	0x1fffb724
    5178:	1fffb658 	.word	0x1fffb658
    517c:	1fffb63c 	.word	0x1fffb63c
    5180:	1fff91a0 	.word	0x1fff91a0
    5184:	1fff884c 	.word	0x1fff884c
    5188:	1fffb634 	.word	0x1fffb634
    518c:	1fffb73c 	.word	0x1fffb73c
    5190:	1fff91ec 	.word	0x1fff91ec
    5194:	1fffb5a0 	.word	0x1fffb5a0
    5198:	1fff89f8 	.word	0x1fff89f8
    519c:	00016574 	.word	0x00016574
    51a0:	00016594 	.word	0x00016594
    51a4:	000165b4 	.word	0x000165b4
    51a8:	0001662c 	.word	0x0001662c
    51ac:	00016638 	.word	0x00016638
    51b0:	00016650 	.word	0x00016650
    51b4:	00016670 	.word	0x00016670
    51b8:	00015e80 	.word	0x00015e80
        calcur();
    51bc:	f7ff f8a0 	bl	4300 <calcur()>
  if (menuload == 8)
    51c0:	682b      	ldr	r3, [r5, #0]
    switch (incomingByte)
    51c2:	683c      	ldr	r4, [r7, #0]
  if (menuload == 8)
    51c4:	2b08      	cmp	r3, #8
    51c6:	f040 8092 	bne.w	52ee <menu()+0xb1e>
    switch (incomingByte)
    51ca:	2c32      	cmp	r4, #50	; 0x32
    51cc:	f000 8088 	beq.w	52e0 <menu()+0xb10>
    51d0:	2c71      	cmp	r4, #113	; 0x71
    51d2:	f43f ab19 	beq.w	4808 <menu()+0x38>
    51d6:	2c31      	cmp	r4, #49	; 0x31
    51d8:	f47f ac47 	bne.w	4a6a <menu()+0x29a>
    51dc:	f007 fea0 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    51e0:	2800      	cmp	r0, #0
    51e2:	f300 85da 	bgt.w	5d9a <menu()+0x15ca>
        if (settings.IgnoreTemp > 2)
    51e6:	4e9e      	ldr	r6, [pc, #632]	; (5460 <menu()+0xc90>)
    51e8:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
        bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    51ec:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
        if (settings.IgnoreTemp > 2)
    51ee:	2902      	cmp	r1, #2
          settings.IgnoreTemp = 0;
    51f0:	bf84      	itt	hi
    51f2:	2100      	movhi	r1, #0
    51f4:	f886 1048 	strbhi.w	r1, [r6, #72]	; 0x48
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    51f8:	489a      	ldr	r0, [pc, #616]	; (5464 <menu()+0xc94>)
    51fa:	f7fd f83d 	bl	2278 <BMSModuleManager::setSensors(int, float)>
          menuload = 1;
    51fe:	2201      	movs	r2, #1
          incomingByte = 'i';
    5200:	2369      	movs	r3, #105	; 0x69
          menuload = 1;
    5202:	602a      	str	r2, [r5, #0]
          incomingByte = 'i';
    5204:	603b      	str	r3, [r7, #0]
  if (menuload == 1)
    5206:	e001      	b.n	520c <menu()+0xa3c>
        virtual int read() { return usb_serial_getchar(); }
    5208:	f007 fe4e 	bl	cea8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    520c:	f007 fe88 	bl	cf20 <usb_serial_available>
        while (Serial.available()) {
    5210:	4604      	mov	r4, r0
    5212:	2800      	cmp	r0, #0
    5214:	d1f8      	bne.n	5208 <menu()+0xa38>
        SERIALCONSOLE.println();
    5216:	4894      	ldr	r0, [pc, #592]	; (5468 <menu()+0xc98>)
    5218:	f005 f96e 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    521c:	4892      	ldr	r0, [pc, #584]	; (5468 <menu()+0xc98>)
    521e:	f005 f96b 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    5222:	4891      	ldr	r0, [pc, #580]	; (5468 <menu()+0xc98>)
    5224:	f005 f968 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    5228:	488f      	ldr	r0, [pc, #572]	; (5468 <menu()+0xc98>)
    522a:	f005 f965 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    522e:	488e      	ldr	r0, [pc, #568]	; (5468 <menu()+0xc98>)
    5230:	f005 f962 	bl	a4f8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5234:	2115      	movs	r1, #21
    5236:	488d      	ldr	r0, [pc, #564]	; (546c <menu()+0xc9c>)
    5238:	f007 fea4 	bl	cf84 <usb_serial_write>
    523c:	488a      	ldr	r0, [pc, #552]	; (5468 <menu()+0xc98>)
    523e:	f005 f95b 	bl	a4f8 <Print::println()>
    5242:	2118      	movs	r1, #24
    5244:	488a      	ldr	r0, [pc, #552]	; (5470 <menu()+0xca0>)
    5246:	f007 fe9d 	bl	cf84 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    524a:	4623      	mov	r3, r4
    524c:	220a      	movs	r2, #10
    524e:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
    5252:	4885      	ldr	r0, [pc, #532]	; (5468 <menu()+0xc98>)
    5254:	f005 f968 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    5258:	4883      	ldr	r0, [pc, #524]	; (5468 <menu()+0xc98>)
    525a:	f005 f94d 	bl	a4f8 <Print::println()>
    525e:	2128      	movs	r1, #40	; 0x28
    5260:	4884      	ldr	r0, [pc, #528]	; (5474 <menu()+0xca4>)
    5262:	f007 fe8f 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.IgnoreVolt * 1000, 0);
    5266:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    5268:	4983      	ldr	r1, [pc, #524]	; (5478 <menu()+0xca8>)
    526a:	f009 fbc9 	bl	ea00 <__aeabi_fmul>
    526e:	f009 f9a3 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5272:	9400      	str	r4, [sp, #0]
    5274:	460b      	mov	r3, r1
    5276:	4602      	mov	r2, r0
    5278:	487b      	ldr	r0, [pc, #492]	; (5468 <menu()+0xc98>)
    527a:	f005 f961 	bl	a540 <Print::printFloat(double, unsigned char)>
    527e:	2102      	movs	r1, #2
    5280:	487e      	ldr	r0, [pc, #504]	; (547c <menu()+0xcac>)
    5282:	f007 fe7f 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5286:	4878      	ldr	r0, [pc, #480]	; (5468 <menu()+0xc98>)
    5288:	f005 f936 	bl	a4f8 <Print::println()>
    528c:	2113      	movs	r1, #19
    528e:	487c      	ldr	r0, [pc, #496]	; (5480 <menu()+0xcb0>)
    5290:	f007 fe78 	bl	cf84 <usb_serial_write>
    5294:	4874      	ldr	r0, [pc, #464]	; (5468 <menu()+0xc98>)
    5296:	f005 f92f 	bl	a4f8 <Print::println()>
        break;
    529a:	2308      	movs	r3, #8
    529c:	e538      	b.n	4d10 <menu()+0x540>
        settings.invertcur = !settings.invertcur;
    529e:	4e70      	ldr	r6, [pc, #448]	; (5460 <menu()+0xc90>)
    52a0:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    52a2:	fab3 f383 	clz	r3, r3
    52a6:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    52a8:	2201      	movs	r2, #1
        settings.invertcur = !settings.invertcur;
    52aa:	67f3      	str	r3, [r6, #124]	; 0x7c
        incomingByte = 'c';
    52ac:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    52ae:	602a      	str	r2, [r5, #0]
        incomingByte = 'c';
    52b0:	603b      	str	r3, [r7, #0]
  if (menuload == 1)
    52b2:	e67e      	b.n	4fb2 <menu()+0x7e2>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value, "You can not use this type with EEPROM.put"); // the code below only makes sense if you can "memcpy" T
        #endif
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    52b4:	22e4      	movs	r2, #228	; 0xe4
    52b6:	2100      	movs	r1, #0
    52b8:	4869      	ldr	r0, [pc, #420]	; (5460 <menu()+0xc90>)
        debug = 1;
    52ba:	4c72      	ldr	r4, [pc, #456]	; (5484 <menu()+0xcb4>)
    52bc:	f005 fb78 	bl	a9b0 <eeprom_write_block>
  if (incomingByte == 115 && menuload == 0)
    52c0:	683b      	ldr	r3, [r7, #0]
        menuload = 0;
    52c2:	2100      	movs	r1, #0
        debug = 1;
    52c4:	2201      	movs	r2, #1
  if (incomingByte == 115 && menuload == 0)
    52c6:	2b73      	cmp	r3, #115	; 0x73
        menuload = 0;
    52c8:	6029      	str	r1, [r5, #0]
        debug = 1;
    52ca:	6022      	str	r2, [r4, #0]
  if (incomingByte == 115 && menuload == 0)
    52cc:	f47f aaa4 	bne.w	4818 <menu()+0x48>
    52d0:	e522      	b.n	4d18 <menu()+0x548>
        CPU_REBOOT ;
    52d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    52d6:	4a6c      	ldr	r2, [pc, #432]	; (5488 <menu()+0xcb8>)
    52d8:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
  if (incomingByte == 115 && menuload == 0)
    52dc:	f7ff ba9c 	b.w	4818 <menu()+0x48>
        virtual int available() { return usb_serial_available(); }
    52e0:	f007 fe1e 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    52e4:	2800      	cmp	r0, #0
    52e6:	f300 8561 	bgt.w	5dac <menu()+0x15dc>
  if (menuload == 7)
    52ea:	682b      	ldr	r3, [r5, #0]
    switch (incomingByte)
    52ec:	683c      	ldr	r4, [r7, #0]
  if (menuload == 7)
    52ee:	2b07      	cmp	r3, #7
    52f0:	d115      	bne.n	531e <menu()+0xb4e>
    switch (incomingByte)
    52f2:	2c34      	cmp	r4, #52	; 0x34
    52f4:	f73f aa85 	bgt.w	4802 <menu()+0x32>
    52f8:	2c30      	cmp	r4, #48	; 0x30
    52fa:	f77f abb6 	ble.w	4a6a <menu()+0x29a>
    52fe:	3c32      	subs	r4, #50	; 0x32
    5300:	2c02      	cmp	r4, #2
    5302:	f201 82fc 	bhi.w	68fe <menu()+0x212e>
    5306:	e8df f014 	tbh	[pc, r4, lsl #1]
    530a:	0097      	.short	0x0097
    530c:	01350003 	.word	0x01350003
    5310:	f007 fe06 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5314:	2800      	cmp	r0, #0
    5316:	f300 8558 	bgt.w	5dca <menu()+0x15fa>
  if (menuload == 6) //Charging settings
    531a:	682b      	ldr	r3, [r5, #0]
    switch (incomingByte)
    531c:	683c      	ldr	r4, [r7, #0]
  if (menuload == 6) //Charging settings
    531e:	2b06      	cmp	r3, #6
    5320:	f040 813e 	bne.w	55a0 <menu()+0xdd0>
    switch (incomingByte)
    5324:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    5328:	2b40      	cmp	r3, #64	; 0x40
    532a:	f63f ab9e 	bhi.w	4a6a <menu()+0x29a>
    532e:	a201      	add	r2, pc, #4	; (adr r2, 5334 <menu()+0xb64>)
    5330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5334:	00005b67 	.word	0x00005b67
    5338:	00005b8f 	.word	0x00005b8f
    533c:	00005b41 	.word	0x00005b41
    5340:	00005adf 	.word	0x00005adf
    5344:	00005ac3 	.word	0x00005ac3
    5348:	00005aa3 	.word	0x00005aa3
    534c:	00005a69 	.word	0x00005a69
    5350:	00005a2b 	.word	0x00005a2b
    5354:	00005a09 	.word	0x00005a09
    5358:	00004a6b 	.word	0x00004a6b
    535c:	00004a6b 	.word	0x00004a6b
    5360:	00004a6b 	.word	0x00004a6b
    5364:	00004a6b 	.word	0x00004a6b
    5368:	00004a6b 	.word	0x00004a6b
    536c:	00004a6b 	.word	0x00004a6b
    5370:	00004a6b 	.word	0x00004a6b
    5374:	00004a6b 	.word	0x00004a6b
    5378:	00004a6b 	.word	0x00004a6b
    537c:	00004a6b 	.word	0x00004a6b
    5380:	00004a6b 	.word	0x00004a6b
    5384:	00004a6b 	.word	0x00004a6b
    5388:	00004a6b 	.word	0x00004a6b
    538c:	00004a6b 	.word	0x00004a6b
    5390:	00004a6b 	.word	0x00004a6b
    5394:	00004a6b 	.word	0x00004a6b
    5398:	00004a6b 	.word	0x00004a6b
    539c:	00004a6b 	.word	0x00004a6b
    53a0:	00004a6b 	.word	0x00004a6b
    53a4:	00004a6b 	.word	0x00004a6b
    53a8:	00004a6b 	.word	0x00004a6b
    53ac:	00004a6b 	.word	0x00004a6b
    53b0:	00004a6b 	.word	0x00004a6b
    53b4:	00004a6b 	.word	0x00004a6b
    53b8:	00004a6b 	.word	0x00004a6b
    53bc:	00004a6b 	.word	0x00004a6b
    53c0:	00004a6b 	.word	0x00004a6b
    53c4:	00004a6b 	.word	0x00004a6b
    53c8:	00004a6b 	.word	0x00004a6b
    53cc:	00004a6b 	.word	0x00004a6b
    53d0:	00004a6b 	.word	0x00004a6b
    53d4:	00004a6b 	.word	0x00004a6b
    53d8:	00004a6b 	.word	0x00004a6b
    53dc:	00004a6b 	.word	0x00004a6b
    53e0:	00004a6b 	.word	0x00004a6b
    53e4:	00004a6b 	.word	0x00004a6b
    53e8:	00004a6b 	.word	0x00004a6b
    53ec:	00004a6b 	.word	0x00004a6b
    53f0:	00004a6b 	.word	0x00004a6b
    53f4:	000058b5 	.word	0x000058b5
    53f8:	00005593 	.word	0x00005593
    53fc:	00005d63 	.word	0x00005d63
    5400:	00005a45 	.word	0x00005a45
    5404:	00004a6b 	.word	0x00004a6b
    5408:	00004a6b 	.word	0x00004a6b
    540c:	00004a6b 	.word	0x00004a6b
    5410:	00004a6b 	.word	0x00004a6b
    5414:	00004a6b 	.word	0x00004a6b
    5418:	00004a6b 	.word	0x00004a6b
    541c:	00004a6b 	.word	0x00004a6b
    5420:	00004a6b 	.word	0x00004a6b
    5424:	00004a6b 	.word	0x00004a6b
    5428:	00004a6b 	.word	0x00004a6b
    542c:	00004a6b 	.word	0x00004a6b
    5430:	00004a6b 	.word	0x00004a6b
    5434:	00004809 	.word	0x00004809
    5438:	f007 fd72 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    543c:	2800      	cmp	r0, #0
    543e:	f77f af6c 	ble.w	531a <menu()+0xb4a>
          settings.CellGap = Serial.parseInt();
    5442:	4809      	ldr	r0, [pc, #36]	; (5468 <menu()+0xc98>)
          settings.CellGap = settings.CellGap * 0.001;
    5444:	4e06      	ldr	r6, [pc, #24]	; (5460 <menu()+0xc90>)
          settings.CellGap = Serial.parseInt();
    5446:	f005 f9b7 	bl	a7b8 <Stream::parseInt()>
    544a:	f009 fa85 	bl	e958 <__aeabi_i2f>
          settings.CellGap = settings.CellGap * 0.001;
    544e:	490f      	ldr	r1, [pc, #60]	; (548c <menu()+0xcbc>)
    5450:	f009 fad6 	bl	ea00 <__aeabi_fmul>
          menuload = 1;
    5454:	2301      	movs	r3, #1
    5456:	602b      	str	r3, [r5, #0]
          incomingByte = 'a';
    5458:	2361      	movs	r3, #97	; 0x61
          settings.CellGap = settings.CellGap * 0.001;
    545a:	6470      	str	r0, [r6, #68]	; 0x44
          incomingByte = 'a';
    545c:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    545e:	e019      	b.n	5494 <menu()+0xcc4>
    5460:	1fffb73c 	.word	0x1fffb73c
    5464:	1fff91ec 	.word	0x1fff91ec
    5468:	1fff89f8 	.word	0x1fff89f8
    546c:	000163f8 	.word	0x000163f8
    5470:	00015e94 	.word	0x00015e94
    5474:	00015eb0 	.word	0x00015eb0
    5478:	447a0000 	.word	0x447a0000
    547c:	00015edc 	.word	0x00015edc
    5480:	00015e80 	.word	0x00015e80
    5484:	1fff8848 	.word	0x1fff8848
    5488:	05fa0004 	.word	0x05fa0004
    548c:	3a83126f 	.word	0x3a83126f
        virtual int read() { return usb_serial_getchar(); }
    5490:	f007 fd0a 	bl	cea8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    5494:	f007 fd44 	bl	cf20 <usb_serial_available>
        while (Serial.available()) {
    5498:	4604      	mov	r4, r0
    549a:	2800      	cmp	r0, #0
    549c:	d1f8      	bne.n	5490 <menu()+0xcc0>
        SERIALCONSOLE.println();
    549e:	4885      	ldr	r0, [pc, #532]	; (56b4 <menu()+0xee4>)
    54a0:	f005 f82a 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    54a4:	4883      	ldr	r0, [pc, #524]	; (56b4 <menu()+0xee4>)
    54a6:	f005 f827 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    54aa:	4882      	ldr	r0, [pc, #520]	; (56b4 <menu()+0xee4>)
    54ac:	f005 f824 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    54b0:	4880      	ldr	r0, [pc, #512]	; (56b4 <menu()+0xee4>)
    54b2:	f005 f821 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    54b6:	487f      	ldr	r0, [pc, #508]	; (56b4 <menu()+0xee4>)
    54b8:	f005 f81e 	bl	a4f8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    54bc:	211f      	movs	r1, #31
    54be:	487e      	ldr	r0, [pc, #504]	; (56b8 <menu()+0xee8>)
    54c0:	f007 fd60 	bl	cf84 <usb_serial_write>
    54c4:	487b      	ldr	r0, [pc, #492]	; (56b4 <menu()+0xee4>)
    54c6:	f005 f817 	bl	a4f8 <Print::println()>
    54ca:	211c      	movs	r1, #28
    54cc:	487b      	ldr	r0, [pc, #492]	; (56bc <menu()+0xeec>)
    54ce:	f007 fd59 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnOff * 1000, 0);
    54d2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    54d4:	497a      	ldr	r1, [pc, #488]	; (56c0 <menu()+0xef0>)
    54d6:	f009 fa93 	bl	ea00 <__aeabi_fmul>
    54da:	f009 f86d 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    54de:	9400      	str	r4, [sp, #0]
    54e0:	4602      	mov	r2, r0
    54e2:	460b      	mov	r3, r1
    54e4:	4873      	ldr	r0, [pc, #460]	; (56b4 <menu()+0xee4>)
    54e6:	f005 f82b 	bl	a540 <Print::printFloat(double, unsigned char)>
    54ea:	2102      	movs	r1, #2
    54ec:	4875      	ldr	r0, [pc, #468]	; (56c4 <menu()+0xef4>)
    54ee:	f007 fd49 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    54f2:	4870      	ldr	r0, [pc, #448]	; (56b4 <menu()+0xee4>)
    54f4:	f005 f800 	bl	a4f8 <Print::println()>
    54f8:	2123      	movs	r1, #35	; 0x23
    54fa:	4873      	ldr	r0, [pc, #460]	; (56c8 <menu()+0xef8>)
    54fc:	f007 fd42 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.CellGap * 1000, 0);
    5500:	6c70      	ldr	r0, [r6, #68]	; 0x44
    5502:	496f      	ldr	r1, [pc, #444]	; (56c0 <menu()+0xef0>)
    5504:	f009 fa7c 	bl	ea00 <__aeabi_fmul>
    5508:	f009 f856 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    550c:	9400      	str	r4, [sp, #0]
    550e:	4602      	mov	r2, r0
    5510:	460b      	mov	r3, r1
    5512:	4868      	ldr	r0, [pc, #416]	; (56b4 <menu()+0xee4>)
    5514:	f005 f814 	bl	a540 <Print::printFloat(double, unsigned char)>
    5518:	2102      	movs	r1, #2
    551a:	486a      	ldr	r0, [pc, #424]	; (56c4 <menu()+0xef4>)
    551c:	f007 fd32 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5520:	4864      	ldr	r0, [pc, #400]	; (56b4 <menu()+0xee4>)
    5522:	f004 ffe9 	bl	a4f8 <Print::println()>
    5526:	2119      	movs	r1, #25
    5528:	4868      	ldr	r0, [pc, #416]	; (56cc <menu()+0xefc>)
    552a:	f007 fd2b 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnToff);
    552e:	6c30      	ldr	r0, [r6, #64]	; 0x40
    5530:	f009 f842 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5534:	2402      	movs	r4, #2
    5536:	460b      	mov	r3, r1
    5538:	4602      	mov	r2, r0
    553a:	9400      	str	r4, [sp, #0]
    553c:	485d      	ldr	r0, [pc, #372]	; (56b4 <menu()+0xee4>)
    553e:	f004 ffff 	bl	a540 <Print::printFloat(double, unsigned char)>
    5542:	4621      	mov	r1, r4
    5544:	4862      	ldr	r0, [pc, #392]	; (56d0 <menu()+0xf00>)
    5546:	f007 fd1d 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    554a:	485a      	ldr	r0, [pc, #360]	; (56b4 <menu()+0xee4>)
    554c:	f004 ffd4 	bl	a4f8 <Print::println()>
    5550:	2122      	movs	r1, #34	; 0x22
    5552:	4860      	ldr	r0, [pc, #384]	; (56d4 <menu()+0xf04>)
    5554:	f007 fd16 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5558:	8eb1      	ldrh	r1, [r6, #52]	; 0x34
    555a:	4856      	ldr	r0, [pc, #344]	; (56b4 <menu()+0xee4>)
    555c:	f004 ffc4 	bl	a4e8 <Print::print(long)>
    5560:	2103      	movs	r1, #3
    5562:	485d      	ldr	r0, [pc, #372]	; (56d8 <menu()+0xf08>)
    5564:	f007 fd0e 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5568:	4852      	ldr	r0, [pc, #328]	; (56b4 <menu()+0xee4>)
    556a:	f004 ffc5 	bl	a4f8 <Print::println()>
        break;
    556e:	2307      	movs	r3, #7
    5570:	f7ff bbce 	b.w	4d10 <menu()+0x540>
        virtual int available() { return usb_serial_available(); }
    5574:	f007 fcd4 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5578:	2800      	cmp	r0, #0
    557a:	f77f aece 	ble.w	531a <menu()+0xb4a>
          settings.triptime = Serial.parseInt();
    557e:	484d      	ldr	r0, [pc, #308]	; (56b4 <menu()+0xee4>)
    5580:	4e56      	ldr	r6, [pc, #344]	; (56dc <menu()+0xf0c>)
    5582:	f005 f919 	bl	a7b8 <Stream::parseInt()>
          menuload = 1;
    5586:	2301      	movs	r3, #1
    5588:	602b      	str	r3, [r5, #0]
          incomingByte = 'a';
    558a:	2361      	movs	r3, #97	; 0x61
          settings.triptime = Serial.parseInt();
    558c:	86b0      	strh	r0, [r6, #52]	; 0x34
          incomingByte = 'a';
    558e:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5590:	e780      	b.n	5494 <menu()+0xcc4>
    5592:	f007 fcc5 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5596:	2800      	cmp	r0, #0
    5598:	f301 8092 	bgt.w	66c0 <menu()+0x1ef0>
  if (menuload == 5)
    559c:	682b      	ldr	r3, [r5, #0]
    switch (incomingByte)
    559e:	683c      	ldr	r4, [r7, #0]
  if (menuload == 5)
    55a0:	2b05      	cmp	r3, #5
    55a2:	f040 80b4 	bne.w	570e <menu()+0xf3e>
    switch (incomingByte)
    55a6:	2c37      	cmp	r4, #55	; 0x37
    55a8:	f300 83eb 	bgt.w	5d82 <menu()+0x15b2>
    55ac:	2c30      	cmp	r4, #48	; 0x30
    55ae:	f77f a933 	ble.w	4818 <menu()+0x48>
    55b2:	3c32      	subs	r4, #50	; 0x32
    55b4:	2c05      	cmp	r4, #5
    55b6:	f201 8191 	bhi.w	68dc <menu()+0x210c>
    55ba:	e8df f014 	tbh	[pc, r4, lsl #1]
    55be:	015e      	.short	0x015e
    55c0:	01490139 	.word	0x01490139
    55c4:	000600a1 	.word	0x000600a1
    55c8:	016e      	.short	0x016e
        settings.tripcont = !settings.tripcont;
    55ca:	4e44      	ldr	r6, [pc, #272]	; (56dc <menu()+0xf0c>)
    55cc:	f896 30d8 	ldrb.w	r3, [r6, #216]	; 0xd8
          menuload = 1;
    55d0:	2201      	movs	r2, #1
        settings.tripcont = !settings.tripcont;
    55d2:	fab3 f383 	clz	r3, r3
          menuload = 1;
    55d6:	602a      	str	r2, [r5, #0]
        settings.tripcont = !settings.tripcont;
    55d8:	095b      	lsrs	r3, r3, #5
          incomingByte = 'k';
    55da:	226b      	movs	r2, #107	; 0x6b
        settings.tripcont = !settings.tripcont;
    55dc:	f886 30d8 	strb.w	r3, [r6, #216]	; 0xd8
          incomingByte = 'k';
    55e0:	603a      	str	r2, [r7, #0]
    switch (incomingByte)
    55e2:	e001      	b.n	55e8 <menu()+0xe18>
        virtual int read() { return usb_serial_getchar(); }
    55e4:	f007 fc60 	bl	cea8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    55e8:	f007 fc9a 	bl	cf20 <usb_serial_available>
        while (Serial.available()) {
    55ec:	2800      	cmp	r0, #0
    55ee:	d1f9      	bne.n	55e4 <menu()+0xe14>
        SERIALCONSOLE.println();
    55f0:	4830      	ldr	r0, [pc, #192]	; (56b4 <menu()+0xee4>)
    55f2:	f004 ff81 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    55f6:	482f      	ldr	r0, [pc, #188]	; (56b4 <menu()+0xee4>)
    55f8:	f004 ff7e 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    55fc:	482d      	ldr	r0, [pc, #180]	; (56b4 <menu()+0xee4>)
    55fe:	f004 ff7b 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    5602:	482c      	ldr	r0, [pc, #176]	; (56b4 <menu()+0xee4>)
    5604:	f004 ff78 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    5608:	482a      	ldr	r0, [pc, #168]	; (56b4 <menu()+0xee4>)
    560a:	f004 ff75 	bl	a4f8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    560e:	2121      	movs	r1, #33	; 0x21
    5610:	4833      	ldr	r0, [pc, #204]	; (56e0 <menu()+0xf10>)
    5612:	f007 fcb7 	bl	cf84 <usb_serial_write>
    5616:	4827      	ldr	r0, [pc, #156]	; (56b4 <menu()+0xee4>)
    5618:	f004 ff6e 	bl	a4f8 <Print::println()>
    561c:	2115      	movs	r1, #21
    561e:	4831      	ldr	r0, [pc, #196]	; (56e4 <menu()+0xf14>)
    5620:	f007 fcb0 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5624:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
    5628:	4822      	ldr	r0, [pc, #136]	; (56b4 <menu()+0xee4>)
    562a:	f004 ff5d 	bl	a4e8 <Print::print(long)>
    562e:	2102      	movs	r1, #2
    5630:	482d      	ldr	r0, [pc, #180]	; (56e8 <menu()+0xf18>)
    5632:	f007 fca7 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5636:	481f      	ldr	r0, [pc, #124]	; (56b4 <menu()+0xee4>)
    5638:	f004 ff5e 	bl	a4f8 <Print::println()>
    563c:	211e      	movs	r1, #30
    563e:	482b      	ldr	r0, [pc, #172]	; (56ec <menu()+0xf1c>)
    5640:	f007 fca0 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5644:	f8d6 1094 	ldr.w	r1, [r6, #148]	; 0x94
    5648:	481a      	ldr	r0, [pc, #104]	; (56b4 <menu()+0xee4>)
    564a:	f004 ff4d 	bl	a4e8 <Print::print(long)>
    564e:	2103      	movs	r1, #3
    5650:	4827      	ldr	r0, [pc, #156]	; (56f0 <menu()+0xf20>)
    5652:	f007 fc97 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5656:	4817      	ldr	r0, [pc, #92]	; (56b4 <menu()+0xee4>)
    5658:	f004 ff4e 	bl	a4f8 <Print::println()>
    565c:	2121      	movs	r1, #33	; 0x21
    565e:	4825      	ldr	r0, [pc, #148]	; (56f4 <menu()+0xf24>)
    5660:	f007 fc90 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5664:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
    5668:	4812      	ldr	r0, [pc, #72]	; (56b4 <menu()+0xee4>)
    566a:	f004 ff3d 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    566e:	4811      	ldr	r0, [pc, #68]	; (56b4 <menu()+0xee4>)
    5670:	f004 ff42 	bl	a4f8 <Print::println()>
    5674:	2120      	movs	r1, #32
    5676:	4820      	ldr	r0, [pc, #128]	; (56f8 <menu()+0xf28>)
    5678:	f007 fc84 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    567c:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
    5680:	480c      	ldr	r0, [pc, #48]	; (56b4 <menu()+0xee4>)
    5682:	f004 ff31 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5686:	480b      	ldr	r0, [pc, #44]	; (56b4 <menu()+0xee4>)
    5688:	f004 ff36 	bl	a4f8 <Print::println()>
    568c:	2121      	movs	r1, #33	; 0x21
    568e:	481b      	ldr	r0, [pc, #108]	; (56fc <menu()+0xf2c>)
    5690:	f007 fc78 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5694:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
    5698:	4806      	ldr	r0, [pc, #24]	; (56b4 <menu()+0xee4>)
    569a:	f004 ff25 	bl	a4e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    569e:	4805      	ldr	r0, [pc, #20]	; (56b4 <menu()+0xee4>)
    56a0:	f004 ff2a 	bl	a4f8 <Print::println()>
        if (settings.ESSmode == 1)
    56a4:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
    56a8:	2b01      	cmp	r3, #1
    56aa:	f001 805b 	beq.w	6764 <menu()+0x1f94>
        break;
    56ae:	2305      	movs	r3, #5
    56b0:	f7ff bb2e 	b.w	4d10 <menu()+0x540>
    56b4:	1fff89f8 	.word	0x1fff89f8
    56b8:	00016138 	.word	0x00016138
    56bc:	00016158 	.word	0x00016158
    56c0:	447a0000 	.word	0x447a0000
    56c4:	00015edc 	.word	0x00015edc
    56c8:	00016178 	.word	0x00016178
    56cc:	0001619c 	.word	0x0001619c
    56d0:	00016094 	.word	0x00016094
    56d4:	000161b8 	.word	0x000161b8
    56d8:	000161dc 	.word	0x000161dc
    56dc:	1fffb73c 	.word	0x1fffb73c
    56e0:	000161e0 	.word	0x000161e0
    56e4:	00016204 	.word	0x00016204
    56e8:	0001600c 	.word	0x0001600c
    56ec:	0001621c 	.word	0x0001621c
    56f0:	00015cb8 	.word	0x00015cb8
    56f4:	0001623c 	.word	0x0001623c
    56f8:	00016260 	.word	0x00016260
    56fc:	00016284 	.word	0x00016284
        virtual int available() { return usb_serial_available(); }
    5700:	f007 fc0e 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5704:	2800      	cmp	r0, #0
    5706:	f300 836d 	bgt.w	5de4 <menu()+0x1614>
  if (menuload == 3)
    570a:	682b      	ldr	r3, [r5, #0]
    switch (incomingByte)
    570c:	683c      	ldr	r4, [r7, #0]
  if (menuload == 3)
    570e:	2b03      	cmp	r3, #3
    5710:	f47f a9a9 	bne.w	4a66 <menu()+0x296>
    switch (incomingByte)
    5714:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    5718:	2b42      	cmp	r3, #66	; 0x42
    571a:	f63f a9a6 	bhi.w	4a6a <menu()+0x29a>
    571e:	a201      	add	r2, pc, #4	; (adr r2, 5724 <menu()+0xf54>)
    5720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5724:	00006489 	.word	0x00006489
    5728:	000064d5 	.word	0x000064d5
    572c:	000064b5 	.word	0x000064b5
    5730:	00006583 	.word	0x00006583
    5734:	00006569 	.word	0x00006569
    5738:	00006549 	.word	0x00006549
    573c:	000064f5 	.word	0x000064f5
    5740:	00006473 	.word	0x00006473
    5744:	00006455 	.word	0x00006455
    5748:	00006435 	.word	0x00006435
    574c:	00004a6b 	.word	0x00004a6b
    5750:	00004a6b 	.word	0x00004a6b
    5754:	00004a6b 	.word	0x00004a6b
    5758:	00004a6b 	.word	0x00004a6b
    575c:	00004a6b 	.word	0x00004a6b
    5760:	00004a6b 	.word	0x00004a6b
    5764:	00004a6b 	.word	0x00004a6b
    5768:	00004a6b 	.word	0x00004a6b
    576c:	00004a6b 	.word	0x00004a6b
    5770:	00004a6b 	.word	0x00004a6b
    5774:	00004a6b 	.word	0x00004a6b
    5778:	00004a6b 	.word	0x00004a6b
    577c:	00004a6b 	.word	0x00004a6b
    5780:	00004a6b 	.word	0x00004a6b
    5784:	00004a6b 	.word	0x00004a6b
    5788:	00004a6b 	.word	0x00004a6b
    578c:	00004a6b 	.word	0x00004a6b
    5790:	00004a6b 	.word	0x00004a6b
    5794:	00004a6b 	.word	0x00004a6b
    5798:	00004a6b 	.word	0x00004a6b
    579c:	00004a6b 	.word	0x00004a6b
    57a0:	00004a6b 	.word	0x00004a6b
    57a4:	00004a6b 	.word	0x00004a6b
    57a8:	00004a6b 	.word	0x00004a6b
    57ac:	00004a6b 	.word	0x00004a6b
    57b0:	00004a6b 	.word	0x00004a6b
    57b4:	00004a6b 	.word	0x00004a6b
    57b8:	00004a6b 	.word	0x00004a6b
    57bc:	00004a6b 	.word	0x00004a6b
    57c0:	00004a6b 	.word	0x00004a6b
    57c4:	00004a6b 	.word	0x00004a6b
    57c8:	00004a6b 	.word	0x00004a6b
    57cc:	00004a6b 	.word	0x00004a6b
    57d0:	00004a6b 	.word	0x00004a6b
    57d4:	00004a6b 	.word	0x00004a6b
    57d8:	00004a6b 	.word	0x00004a6b
    57dc:	00004a6b 	.word	0x00004a6b
    57e0:	00004a6b 	.word	0x00004a6b
    57e4:	00004a6b 	.word	0x00004a6b
    57e8:	0000641f 	.word	0x0000641f
    57ec:	00006409 	.word	0x00006409
    57f0:	000063f3 	.word	0x000063f3
    57f4:	000063dd 	.word	0x000063dd
    57f8:	000063c7 	.word	0x000063c7
    57fc:	00006367 	.word	0x00006367
    5800:	00006347 	.word	0x00006347
    5804:	000063a5 	.word	0x000063a5
    5808:	00004a6b 	.word	0x00004a6b
    580c:	0000632d 	.word	0x0000632d
    5810:	00004a59 	.word	0x00004a59
    5814:	00004a6b 	.word	0x00004a6b
    5818:	00004a6b 	.word	0x00004a6b
    581c:	00004a6b 	.word	0x00004a6b
    5820:	00004a6b 	.word	0x00004a6b
    5824:	00004a6b 	.word	0x00004a6b
    5828:	0000631f 	.word	0x0000631f
    582c:	00005df7 	.word	0x00005df7
    5830:	f007 fb76 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5834:	2800      	cmp	r0, #0
    5836:	f77f af68 	ble.w	570a <menu()+0xf3a>
          settings.conthold = Serial.parseInt();
    583a:	48b2      	ldr	r0, [pc, #712]	; (5b04 <menu()+0x1334>)
    583c:	4eb2      	ldr	r6, [pc, #712]	; (5b08 <menu()+0x1338>)
    583e:	f004 ffbb 	bl	a7b8 <Stream::parseInt()>
          menuload = 1;
    5842:	2301      	movs	r3, #1
    5844:	602b      	str	r3, [r5, #0]
          incomingByte = 'k';
    5846:	236b      	movs	r3, #107	; 0x6b
          settings.conthold = Serial.parseInt();
    5848:	f8c6 0090 	str.w	r0, [r6, #144]	; 0x90
          incomingByte = 'k';
    584c:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    584e:	e6cb      	b.n	55e8 <menu()+0xe18>
    5850:	f007 fb66 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5854:	2800      	cmp	r0, #0
    5856:	f77f af58 	ble.w	570a <menu()+0xf3a>
          settings.gaugelow = Serial.parseInt();
    585a:	48aa      	ldr	r0, [pc, #680]	; (5b04 <menu()+0x1334>)
    585c:	4eaa      	ldr	r6, [pc, #680]	; (5b08 <menu()+0x1338>)
    585e:	f004 ffab 	bl	a7b8 <Stream::parseInt()>
          gaugedebug = 2;
    5862:	4baa      	ldr	r3, [pc, #680]	; (5b0c <menu()+0x133c>)
          settings.gaugelow = Serial.parseInt();
    5864:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
          gaugedebug = 2;
    5868:	2202      	movs	r2, #2
          gaugedebug = 3;
    586a:	601a      	str	r2, [r3, #0]
          gaugeupdate();
    586c:	f7fd fbfa 	bl	3064 <gaugeupdate()>
          menuload = 1;
    5870:	2201      	movs	r2, #1
          incomingByte = 'k';
    5872:	236b      	movs	r3, #107	; 0x6b
          menuload = 1;
    5874:	602a      	str	r2, [r5, #0]
          incomingByte = 'k';
    5876:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5878:	e6b6      	b.n	55e8 <menu()+0xe18>
    587a:	f007 fb51 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    587e:	2800      	cmp	r0, #0
    5880:	f77f af43 	ble.w	570a <menu()+0xf3a>
          settings.Precurrent = Serial.parseInt();
    5884:	489f      	ldr	r0, [pc, #636]	; (5b04 <menu()+0x1334>)
    5886:	4ea0      	ldr	r6, [pc, #640]	; (5b08 <menu()+0x1338>)
    5888:	f004 ff96 	bl	a7b8 <Stream::parseInt()>
          menuload = 1;
    588c:	2301      	movs	r3, #1
    588e:	602b      	str	r3, [r5, #0]
          incomingByte = 'k';
    5890:	236b      	movs	r3, #107	; 0x6b
          settings.Precurrent = Serial.parseInt();
    5892:	f8c6 0094 	str.w	r0, [r6, #148]	; 0x94
          incomingByte = 'k';
    5896:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5898:	e6a6      	b.n	55e8 <menu()+0xe18>
        if ( settings.ChargerDirect == 1)
    589a:	4e9b      	ldr	r6, [pc, #620]	; (5b08 <menu()+0x1338>)
    589c:	f896 30cc 	ldrb.w	r3, [r6, #204]	; 0xcc
          menuload = 1;
    58a0:	2201      	movs	r2, #1
        if ( settings.ChargerDirect == 1)
    58a2:	1a9b      	subs	r3, r3, r2
          menuload = 1;
    58a4:	602a      	str	r2, [r5, #0]
        if ( settings.ChargerDirect == 1)
    58a6:	bf18      	it	ne
    58a8:	2301      	movne	r3, #1
          incomingByte = 'k';
    58aa:	226b      	movs	r2, #107	; 0x6b
        if ( settings.ChargerDirect == 1)
    58ac:	f886 30cc 	strb.w	r3, [r6, #204]	; 0xcc
          incomingByte = 'k';
    58b0:	603a      	str	r2, [r7, #0]
    switch (incomingByte)
    58b2:	e699      	b.n	55e8 <menu()+0xe18>
    58b4:	f007 fb34 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    58b8:	2800      	cmp	r0, #0
    58ba:	f77f ae6f 	ble.w	559c <menu()+0xdcc>
          settings.chargecurrent2max = Serial.parseInt() * 10;
    58be:	4891      	ldr	r0, [pc, #580]	; (5b04 <menu()+0x1334>)
    58c0:	4e91      	ldr	r6, [pc, #580]	; (5b08 <menu()+0x1338>)
    58c2:	f004 ff79 	bl	a7b8 <Stream::parseInt()>
    58c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    58ca:	0043      	lsls	r3, r0, #1
          menuload = 1;
    58cc:	2201      	movs	r2, #1
          settings.chargecurrent2max = Serial.parseInt() * 10;
    58ce:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
          incomingByte = 'e';
    58d2:	2365      	movs	r3, #101	; 0x65
          menuload = 1;
    58d4:	602a      	str	r2, [r5, #0]
          incomingByte = 'e';
    58d6:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    58d8:	e001      	b.n	58de <menu()+0x110e>
        virtual int read() { return usb_serial_getchar(); }
    58da:	f007 fae5 	bl	cea8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    58de:	f007 fb1f 	bl	cf20 <usb_serial_available>
        while (Serial.available()) {
    58e2:	4604      	mov	r4, r0
    58e4:	2800      	cmp	r0, #0
    58e6:	d1f8      	bne.n	58da <menu()+0x110a>
        SERIALCONSOLE.println();
    58e8:	4886      	ldr	r0, [pc, #536]	; (5b04 <menu()+0x1334>)
    58ea:	f004 fe05 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    58ee:	4885      	ldr	r0, [pc, #532]	; (5b04 <menu()+0x1334>)
    58f0:	f004 fe02 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    58f4:	4883      	ldr	r0, [pc, #524]	; (5b04 <menu()+0x1334>)
    58f6:	f004 fdff 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    58fa:	4882      	ldr	r0, [pc, #520]	; (5b04 <menu()+0x1334>)
    58fc:	f004 fdfc 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    5900:	4880      	ldr	r0, [pc, #512]	; (5b04 <menu()+0x1334>)
    5902:	f004 fdf9 	bl	a4f8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5906:	2111      	movs	r1, #17
    5908:	4881      	ldr	r0, [pc, #516]	; (5b10 <menu()+0x1340>)
    590a:	f007 fb3b 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    590e:	487d      	ldr	r0, [pc, #500]	; (5b04 <menu()+0x1334>)
    5910:	f004 fdf2 	bl	a4f8 <Print::println()>
    5914:	2128      	movs	r1, #40	; 0x28
    5916:	487f      	ldr	r0, [pc, #508]	; (5b14 <menu()+0x1344>)
    5918:	f007 fb34 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeVsetpoint * 1000, 0);
    591c:	69b0      	ldr	r0, [r6, #24]
    591e:	497e      	ldr	r1, [pc, #504]	; (5b18 <menu()+0x1348>)
    5920:	f009 f86e 	bl	ea00 <__aeabi_fmul>
    5924:	f008 fe48 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5928:	9400      	str	r4, [sp, #0]
    592a:	4602      	mov	r2, r0
    592c:	460b      	mov	r3, r1
    592e:	4875      	ldr	r0, [pc, #468]	; (5b04 <menu()+0x1334>)
    5930:	f004 fe06 	bl	a540 <Print::printFloat(double, unsigned char)>
    5934:	2102      	movs	r1, #2
    5936:	4879      	ldr	r0, [pc, #484]	; (5b1c <menu()+0x134c>)
    5938:	f007 fb24 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    593c:	4871      	ldr	r0, [pc, #452]	; (5b04 <menu()+0x1334>)
    593e:	f004 fddb 	bl	a4f8 <Print::println()>
    5942:	2116      	movs	r1, #22
    5944:	4876      	ldr	r0, [pc, #472]	; (5b20 <menu()+0x1350>)
    5946:	f007 fb1d 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeHys * 1000, 0 );
    594a:	6a30      	ldr	r0, [r6, #32]
    594c:	4972      	ldr	r1, [pc, #456]	; (5b18 <menu()+0x1348>)
    594e:	f009 f857 	bl	ea00 <__aeabi_fmul>
    5952:	f008 fe31 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5956:	9400      	str	r4, [sp, #0]
    5958:	460b      	mov	r3, r1
    595a:	4602      	mov	r2, r0
    595c:	4869      	ldr	r0, [pc, #420]	; (5b04 <menu()+0x1334>)
    595e:	f004 fdef 	bl	a540 <Print::printFloat(double, unsigned char)>
    5962:	2102      	movs	r1, #2
    5964:	486d      	ldr	r0, [pc, #436]	; (5b1c <menu()+0x134c>)
    5966:	f007 fb0d 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    596a:	4866      	ldr	r0, [pc, #408]	; (5b04 <menu()+0x1334>)
    596c:	f004 fdc4 	bl	a4f8 <Print::println()>
        if (settings.chargertype > 0)
    5970:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
    5974:	2b00      	cmp	r3, #0
    5976:	dd34      	ble.n	59e2 <menu()+0x1212>
    5978:	211d      	movs	r1, #29
    597a:	486a      	ldr	r0, [pc, #424]	; (5b24 <menu()+0x1354>)
    597c:	f007 fb02 	bl	cf84 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentmax * 0.1);
    5980:	f8b6 0064 	ldrh.w	r0, [r6, #100]	; 0x64
    5984:	f008 ffe8 	bl	e958 <__aeabi_i2f>
    5988:	4967      	ldr	r1, [pc, #412]	; (5b28 <menu()+0x1358>)
    598a:	f009 f839 	bl	ea00 <__aeabi_fmul>
    598e:	f008 fe13 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5992:	2402      	movs	r4, #2
    5994:	4602      	mov	r2, r0
    5996:	460b      	mov	r3, r1
    5998:	485a      	ldr	r0, [pc, #360]	; (5b04 <menu()+0x1334>)
    599a:	9400      	str	r4, [sp, #0]
    599c:	f004 fdd0 	bl	a540 <Print::printFloat(double, unsigned char)>
    59a0:	2101      	movs	r1, #1
    59a2:	4862      	ldr	r0, [pc, #392]	; (5b2c <menu()+0x135c>)
    59a4:	f007 faee 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    59a8:	4856      	ldr	r0, [pc, #344]	; (5b04 <menu()+0x1334>)
    59aa:	f004 fda5 	bl	a4f8 <Print::println()>
    59ae:	211f      	movs	r1, #31
    59b0:	485f      	ldr	r0, [pc, #380]	; (5b30 <menu()+0x1360>)
    59b2:	f007 fae7 	bl	cf84 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentend * 0.1);
    59b6:	f8b6 0068 	ldrh.w	r0, [r6, #104]	; 0x68
    59ba:	f008 ffcd 	bl	e958 <__aeabi_i2f>
    59be:	495a      	ldr	r1, [pc, #360]	; (5b28 <menu()+0x1358>)
    59c0:	f009 f81e 	bl	ea00 <__aeabi_fmul>
    59c4:	f008 fdf8 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    59c8:	9400      	str	r4, [sp, #0]
    59ca:	4602      	mov	r2, r0
    59cc:	460b      	mov	r3, r1
    59ce:	484d      	ldr	r0, [pc, #308]	; (5b04 <menu()+0x1334>)
    59d0:	f004 fdb6 	bl	a540 <Print::printFloat(double, unsigned char)>
    59d4:	4855      	ldr	r0, [pc, #340]	; (5b2c <menu()+0x135c>)
    59d6:	2101      	movs	r1, #1
    59d8:	f007 fad4 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    59dc:	4849      	ldr	r0, [pc, #292]	; (5b04 <menu()+0x1334>)
    59de:	f004 fd8b 	bl	a4f8 <Print::println()>
    59e2:	4854      	ldr	r0, [pc, #336]	; (5b34 <menu()+0x1364>)
    59e4:	2111      	movs	r1, #17
    59e6:	f007 facd 	bl	cf84 <usb_serial_write>
        switch (settings.chargertype)
    59ea:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
    59ee:	2b07      	cmp	r3, #7
    59f0:	f200 80e5 	bhi.w	5bbe <menu()+0x13ee>
    59f4:	e8df f013 	tbh	[pc, r3, lsl #1]
    59f8:	01a601a1 	.word	0x01a601a1
    59fc:	01b0019c 	.word	0x01b0019c
    5a00:	019701ab 	.word	0x019701ab
    5a04:	00df0192 	.word	0x00df0192
        virtual int available() { return usb_serial_available(); }
    5a08:	f007 fa8a 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5a0c:	2800      	cmp	r0, #0
    5a0e:	f77f adc5 	ble.w	559c <menu()+0xdcc>
          settings.ChargeTSetpoint = Serial.parseInt();
    5a12:	483c      	ldr	r0, [pc, #240]	; (5b04 <menu()+0x1334>)
    5a14:	4e3c      	ldr	r6, [pc, #240]	; (5b08 <menu()+0x1338>)
    5a16:	f004 fecf 	bl	a7b8 <Stream::parseInt()>
    5a1a:	f008 ff9d 	bl	e958 <__aeabi_i2f>
          menuload = 1;
    5a1e:	2301      	movs	r3, #1
    5a20:	602b      	str	r3, [r5, #0]
          incomingByte = 'e';
    5a22:	2365      	movs	r3, #101	; 0x65
          settings.ChargeTSetpoint = Serial.parseInt();
    5a24:	63b0      	str	r0, [r6, #56]	; 0x38
          incomingByte = 'e';
    5a26:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5a28:	e759      	b.n	58de <menu()+0x110e>
        if ( settings.ChargerDirect == 1)
    5a2a:	4e37      	ldr	r6, [pc, #220]	; (5b08 <menu()+0x1338>)
    5a2c:	f896 30cc 	ldrb.w	r3, [r6, #204]	; 0xcc
    5a30:	2b01      	cmp	r3, #1
    5a32:	f000 868f 	beq.w	6754 <menu()+0x1f84>
          settings.ChargerDirect = 1;
    5a36:	2301      	movs	r3, #1
          incomingByte = 'e';
    5a38:	2265      	movs	r2, #101	; 0x65
          settings.ChargerDirect = 1;
    5a3a:	f886 30cc 	strb.w	r3, [r6, #204]	; 0xcc
          menuload = 1;
    5a3e:	602b      	str	r3, [r5, #0]
          incomingByte = 'e';
    5a40:	603a      	str	r2, [r7, #0]
    switch (incomingByte)
    5a42:	e74c      	b.n	58de <menu()+0x110e>
    5a44:	f007 fa6c 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5a48:	2800      	cmp	r0, #0
    5a4a:	f77f ada7 	ble.w	559c <menu()+0xdcc>
          if (settings.SerialCan == 0)
    5a4e:	4e2e      	ldr	r6, [pc, #184]	; (5b08 <menu()+0x1338>)
    5a50:	f896 30ce 	ldrb.w	r3, [r6, #206]	; 0xce
          menuload = 1;
    5a54:	2201      	movs	r2, #1
          if (settings.SerialCan == 0)
    5a56:	fab3 f383 	clz	r3, r3
          menuload = 1;
    5a5a:	602a      	str	r2, [r5, #0]
          if (settings.SerialCan == 0)
    5a5c:	095b      	lsrs	r3, r3, #5
          incomingByte = 'e';
    5a5e:	2265      	movs	r2, #101	; 0x65
          if (settings.SerialCan == 0)
    5a60:	f886 30ce 	strb.w	r3, [r6, #206]	; 0xce
          incomingByte = 'e';
    5a64:	603a      	str	r2, [r7, #0]
    switch (incomingByte)
    5a66:	e73a      	b.n	58de <menu()+0x110e>
    5a68:	f007 fa5a 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5a6c:	2800      	cmp	r0, #0
    5a6e:	f77f ad95 	ble.w	559c <menu()+0xdcc>
          settings.canSpeed = Serial.parseInt() * 1000;
    5a72:	4824      	ldr	r0, [pc, #144]	; (5b04 <menu()+0x1334>)
    5a74:	4e24      	ldr	r6, [pc, #144]	; (5b08 <menu()+0x1338>)
    5a76:	f004 fe9f 	bl	a7b8 <Stream::parseInt()>
    5a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5a7e:	fb00 f303 	mul.w	r3, r0, r3
          Can0.end();
    5a82:	482d      	ldr	r0, [pc, #180]	; (5b38 <menu()+0x1368>)
          settings.canSpeed = Serial.parseInt() * 1000;
    5a84:	6073      	str	r3, [r6, #4]
          Can0.end();
    5a86:	f003 fce5 	bl	9454 <FlexCAN::end()>
          Can0.begin(settings.canSpeed);
    5a8a:	2300      	movs	r3, #0
    5a8c:	9300      	str	r3, [sp, #0]
    5a8e:	4a2b      	ldr	r2, [pc, #172]	; (5b3c <menu()+0x136c>)
    5a90:	6871      	ldr	r1, [r6, #4]
    5a92:	4829      	ldr	r0, [pc, #164]	; (5b38 <menu()+0x1368>)
    5a94:	f003 fdfc 	bl	9690 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>
          menuload = 1;
    5a98:	2201      	movs	r2, #1
          incomingByte = 'e';
    5a9a:	2365      	movs	r3, #101	; 0x65
          menuload = 1;
    5a9c:	602a      	str	r2, [r5, #0]
          incomingByte = 'e';
    5a9e:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5aa0:	e71d      	b.n	58de <menu()+0x110e>
    5aa2:	f007 fa3d 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5aa6:	2800      	cmp	r0, #0
    5aa8:	f77f ad78 	ble.w	559c <menu()+0xdcc>
          settings.chargerspd = Serial.parseInt();
    5aac:	4815      	ldr	r0, [pc, #84]	; (5b04 <menu()+0x1334>)
    5aae:	4e16      	ldr	r6, [pc, #88]	; (5b08 <menu()+0x1338>)
    5ab0:	f004 fe82 	bl	a7b8 <Stream::parseInt()>
          menuload = 1;
    5ab4:	2301      	movs	r3, #1
    5ab6:	602b      	str	r3, [r5, #0]
          incomingByte = 'e';
    5ab8:	2365      	movs	r3, #101	; 0x65
          settings.chargerspd = Serial.parseInt();
    5aba:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
          incomingByte = 'e';
    5abe:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5ac0:	e70d      	b.n	58de <menu()+0x110e>
        settings.chargertype = settings.chargertype + 1;
    5ac2:	4e11      	ldr	r6, [pc, #68]	; (5b08 <menu()+0x1338>)
    5ac4:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
          menuload = 1;
    5ac8:	2201      	movs	r2, #1
        settings.chargertype = settings.chargertype + 1;
    5aca:	4413      	add	r3, r2
          settings.chargertype = 0;
    5acc:	2b08      	cmp	r3, #8
          menuload = 1;
    5ace:	602a      	str	r2, [r5, #0]
          settings.chargertype = 0;
    5ad0:	bfa8      	it	ge
    5ad2:	2300      	movge	r3, #0
          incomingByte = 'e';
    5ad4:	2265      	movs	r2, #101	; 0x65
    5ad6:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
    5ada:	603a      	str	r2, [r7, #0]
    switch (incomingByte)
    5adc:	e6ff      	b.n	58de <menu()+0x110e>
    5ade:	f007 fa1f 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5ae2:	2800      	cmp	r0, #0
    5ae4:	f77f ad5a 	ble.w	559c <menu()+0xdcc>
          settings.chargecurrentend = Serial.parseInt() * 10;
    5ae8:	4806      	ldr	r0, [pc, #24]	; (5b04 <menu()+0x1334>)
    5aea:	4e07      	ldr	r6, [pc, #28]	; (5b08 <menu()+0x1338>)
    5aec:	f004 fe64 	bl	a7b8 <Stream::parseInt()>
    5af0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5af4:	0043      	lsls	r3, r0, #1
          menuload = 1;
    5af6:	2201      	movs	r2, #1
          settings.chargecurrentend = Serial.parseInt() * 10;
    5af8:	f8a6 3068 	strh.w	r3, [r6, #104]	; 0x68
          incomingByte = 'e';
    5afc:	2365      	movs	r3, #101	; 0x65
          menuload = 1;
    5afe:	602a      	str	r2, [r5, #0]
          incomingByte = 'e';
    5b00:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5b02:	e6ec      	b.n	58de <menu()+0x110e>
    5b04:	1fff89f8 	.word	0x1fff89f8
    5b08:	1fffb73c 	.word	0x1fffb73c
    5b0c:	1fffb63c 	.word	0x1fffb63c
    5b10:	0001639c 	.word	0x0001639c
    5b14:	00015ee0 	.word	0x00015ee0
    5b18:	447a0000 	.word	0x447a0000
    5b1c:	00015edc 	.word	0x00015edc
    5b20:	00015f0c 	.word	0x00015f0c
    5b24:	00015f24 	.word	0x00015f24
    5b28:	3dcccccd 	.word	0x3dcccccd
    5b2c:	00015f44 	.word	0x00015f44
    5b30:	00015f48 	.word	0x00015f48
    5b34:	00015f68 	.word	0x00015f68
    5b38:	1fffb844 	.word	0x1fffb844
    5b3c:	1fffb9e0 	.word	0x1fffb9e0
    5b40:	f007 f9ee 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5b44:	2800      	cmp	r0, #0
    5b46:	f77f ad29 	ble.w	559c <menu()+0xdcc>
          settings.chargecurrentmax = Serial.parseInt() * 10;
    5b4a:	48b8      	ldr	r0, [pc, #736]	; (5e2c <menu()+0x165c>)
    5b4c:	4eb8      	ldr	r6, [pc, #736]	; (5e30 <menu()+0x1660>)
    5b4e:	f004 fe33 	bl	a7b8 <Stream::parseInt()>
    5b52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5b56:	0043      	lsls	r3, r0, #1
          menuload = 1;
    5b58:	2201      	movs	r2, #1
          settings.chargecurrentmax = Serial.parseInt() * 10;
    5b5a:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
          incomingByte = 'e';
    5b5e:	2365      	movs	r3, #101	; 0x65
          menuload = 1;
    5b60:	602a      	str	r2, [r5, #0]
          incomingByte = 'e';
    5b62:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5b64:	e6bb      	b.n	58de <menu()+0x110e>
    5b66:	f007 f9db 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5b6a:	2800      	cmp	r0, #0
    5b6c:	f77f ad16 	ble.w	559c <menu()+0xdcc>
          settings.ChargeVsetpoint = Serial.parseInt();
    5b70:	48ae      	ldr	r0, [pc, #696]	; (5e2c <menu()+0x165c>)
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    5b72:	4eaf      	ldr	r6, [pc, #700]	; (5e30 <menu()+0x1660>)
          settings.ChargeVsetpoint = Serial.parseInt();
    5b74:	f004 fe20 	bl	a7b8 <Stream::parseInt()>
    5b78:	f008 feee 	bl	e958 <__aeabi_i2f>
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    5b7c:	49ad      	ldr	r1, [pc, #692]	; (5e34 <menu()+0x1664>)
    5b7e:	f008 fff3 	bl	eb68 <__aeabi_fdiv>
          menuload = 1;
    5b82:	2301      	movs	r3, #1
    5b84:	602b      	str	r3, [r5, #0]
          incomingByte = 'e';
    5b86:	2365      	movs	r3, #101	; 0x65
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    5b88:	61b0      	str	r0, [r6, #24]
          incomingByte = 'e';
    5b8a:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5b8c:	e6a7      	b.n	58de <menu()+0x110e>
    5b8e:	f007 f9c7 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5b92:	2800      	cmp	r0, #0
    5b94:	f77f ad02 	ble.w	559c <menu()+0xdcc>
          settings.ChargeHys = Serial.parseInt();
    5b98:	48a4      	ldr	r0, [pc, #656]	; (5e2c <menu()+0x165c>)
          settings.ChargeHys = settings.ChargeHys / 1000;
    5b9a:	4ea5      	ldr	r6, [pc, #660]	; (5e30 <menu()+0x1660>)
          settings.ChargeHys = Serial.parseInt();
    5b9c:	f004 fe0c 	bl	a7b8 <Stream::parseInt()>
    5ba0:	f008 feda 	bl	e958 <__aeabi_i2f>
          settings.ChargeHys = settings.ChargeHys / 1000;
    5ba4:	49a3      	ldr	r1, [pc, #652]	; (5e34 <menu()+0x1664>)
    5ba6:	f008 ffdf 	bl	eb68 <__aeabi_fdiv>
          menuload = 1;
    5baa:	2301      	movs	r3, #1
    5bac:	602b      	str	r3, [r5, #0]
          incomingByte = 'e';
    5bae:	2365      	movs	r3, #101	; 0x65
          settings.ChargeHys = settings.ChargeHys / 1000;
    5bb0:	6230      	str	r0, [r6, #32]
          incomingByte = 'e';
    5bb2:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5bb4:	e693      	b.n	58de <menu()+0x110e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5bb6:	48a0      	ldr	r0, [pc, #640]	; (5e38 <menu()+0x1668>)
    5bb8:	210f      	movs	r1, #15
    5bba:	f007 f9e3 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.println();
    5bbe:	489b      	ldr	r0, [pc, #620]	; (5e2c <menu()+0x165c>)
    5bc0:	f004 fc9a 	bl	a4f8 <Print::println()>
        if (settings.chargertype > 0)
    5bc4:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
    5bc8:	2b00      	cmp	r3, #0
    5bca:	dd29      	ble.n	5c20 <menu()+0x1450>
    5bcc:	2118      	movs	r1, #24
    5bce:	489b      	ldr	r0, [pc, #620]	; (5e3c <menu()+0x166c>)
    5bd0:	f007 f9d8 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5bd4:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
    5bd8:	4894      	ldr	r0, [pc, #592]	; (5e2c <menu()+0x165c>)
    5bda:	f004 fc85 	bl	a4e8 <Print::print(long)>
    5bde:	2102      	movs	r1, #2
    5be0:	4897      	ldr	r0, [pc, #604]	; (5e40 <menu()+0x1670>)
    5be2:	f007 f9cf 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5be6:	4891      	ldr	r0, [pc, #580]	; (5e2c <menu()+0x165c>)
    5be8:	f004 fc86 	bl	a4f8 <Print::println()>
    5bec:	2111      	movs	r1, #17
    5bee:	4895      	ldr	r0, [pc, #596]	; (5e44 <menu()+0x1674>)
    5bf0:	f007 f9c8 	bl	cf84 <usb_serial_write>
          SERIALCONSOLE.print(settings.canSpeed * 0.001, 0);
    5bf4:	6870      	ldr	r0, [r6, #4]
    5bf6:	f008 feab 	bl	e950 <__aeabi_ui2f>
    5bfa:	4993      	ldr	r1, [pc, #588]	; (5e48 <menu()+0x1678>)
    5bfc:	f008 ff00 	bl	ea00 <__aeabi_fmul>
    5c00:	f008 fcda 	bl	e5b8 <__aeabi_f2d>
    5c04:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5c06:	2100      	movs	r1, #0
    5c08:	4602      	mov	r2, r0
    5c0a:	9100      	str	r1, [sp, #0]
    5c0c:	4887      	ldr	r0, [pc, #540]	; (5e2c <menu()+0x165c>)
    5c0e:	f004 fc97 	bl	a540 <Print::printFloat(double, unsigned char)>
    5c12:	488e      	ldr	r0, [pc, #568]	; (5e4c <menu()+0x167c>)
    5c14:	2104      	movs	r1, #4
    5c16:	f007 f9b5 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5c1a:	4884      	ldr	r0, [pc, #528]	; (5e2c <menu()+0x165c>)
    5c1c:	f004 fc6c 	bl	a4f8 <Print::println()>
    5c20:	488b      	ldr	r0, [pc, #556]	; (5e50 <menu()+0x1680>)
    5c22:	211b      	movs	r1, #27
    5c24:	f007 f9ae 	bl	cf84 <usb_serial_write>
        switch (settings.ChargerDirect)
    5c28:	f896 30cc 	ldrb.w	r3, [r6, #204]	; 0xcc
    5c2c:	2b00      	cmp	r3, #0
    5c2e:	f000 853b 	beq.w	66a8 <menu()+0x1ed8>
    5c32:	2b01      	cmp	r3, #1
    5c34:	d103      	bne.n	5c3e <menu()+0x146e>
    5c36:	4887      	ldr	r0, [pc, #540]	; (5e54 <menu()+0x1684>)
    5c38:	2114      	movs	r1, #20
    5c3a:	f007 f9a3 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.println();
    5c3e:	487b      	ldr	r0, [pc, #492]	; (5e2c <menu()+0x165c>)
    5c40:	f004 fc5a 	bl	a4f8 <Print::println()>
    5c44:	211f      	movs	r1, #31
    5c46:	4884      	ldr	r0, [pc, #528]	; (5e58 <menu()+0x1688>)
    5c48:	f007 f99c 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeTSetpoint);
    5c4c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    5c4e:	f008 fcb3 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5c52:	2402      	movs	r4, #2
    5c54:	460b      	mov	r3, r1
    5c56:	4602      	mov	r2, r0
    5c58:	9400      	str	r4, [sp, #0]
    5c5a:	4874      	ldr	r0, [pc, #464]	; (5e2c <menu()+0x165c>)
    5c5c:	f004 fc70 	bl	a540 <Print::printFloat(double, unsigned char)>
    5c60:	4621      	mov	r1, r4
    5c62:	487e      	ldr	r0, [pc, #504]	; (5e5c <menu()+0x168c>)
    5c64:	f007 f98e 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5c68:	4870      	ldr	r0, [pc, #448]	; (5e2c <menu()+0x165c>)
    5c6a:	f004 fc45 	bl	a4f8 <Print::println()>
        if (settings.chargertype > 0)
    5c6e:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
    5c72:	2b00      	cmp	r3, #0
    5c74:	dd39      	ble.n	5cea <menu()+0x151a>
    5c76:	2127      	movs	r1, #39	; 0x27
    5c78:	4879      	ldr	r0, [pc, #484]	; (5e60 <menu()+0x1690>)
    5c7a:	f007 f983 	bl	cf84 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrent2max * 0.1);
    5c7e:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
    5c82:	f008 fe69 	bl	e958 <__aeabi_i2f>
    5c86:	4977      	ldr	r1, [pc, #476]	; (5e64 <menu()+0x1694>)
    5c88:	f008 feba 	bl	ea00 <__aeabi_fmul>
    5c8c:	f008 fc94 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5c90:	9400      	str	r4, [sp, #0]
    5c92:	4602      	mov	r2, r0
    5c94:	460b      	mov	r3, r1
    5c96:	4865      	ldr	r0, [pc, #404]	; (5e2c <menu()+0x165c>)
    5c98:	f004 fc52 	bl	a540 <Print::printFloat(double, unsigned char)>
    5c9c:	2101      	movs	r1, #1
    5c9e:	4872      	ldr	r0, [pc, #456]	; (5e68 <menu()+0x1698>)
    5ca0:	f007 f970 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5ca4:	4861      	ldr	r0, [pc, #388]	; (5e2c <menu()+0x165c>)
    5ca6:	f004 fc27 	bl	a4f8 <Print::println()>
    5caa:	2121      	movs	r1, #33	; 0x21
    5cac:	486f      	ldr	r0, [pc, #444]	; (5e6c <menu()+0x169c>)
    5cae:	f007 f969 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5cb2:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
    5cb6:	485d      	ldr	r0, [pc, #372]	; (5e2c <menu()+0x165c>)
    5cb8:	f004 fc16 	bl	a4e8 <Print::print(long)>
    5cbc:	2101      	movs	r1, #1
    5cbe:	486c      	ldr	r0, [pc, #432]	; (5e70 <menu()+0x16a0>)
    5cc0:	f007 f960 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5cc4:	4859      	ldr	r0, [pc, #356]	; (5e2c <menu()+0x165c>)
    5cc6:	f004 fc17 	bl	a4f8 <Print::println()>
    5cca:	2118      	movs	r1, #24
    5ccc:	4869      	ldr	r0, [pc, #420]	; (5e74 <menu()+0x16a4>)
    5cce:	f007 f959 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5cd2:	f8d6 10e0 	ldr.w	r1, [r6, #224]	; 0xe0
    5cd6:	4855      	ldr	r0, [pc, #340]	; (5e2c <menu()+0x165c>)
    5cd8:	f004 fc06 	bl	a4e8 <Print::print(long)>
    5cdc:	4866      	ldr	r0, [pc, #408]	; (5e78 <menu()+0x16a8>)
    5cde:	2103      	movs	r1, #3
    5ce0:	f007 f950 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5ce4:	4851      	ldr	r0, [pc, #324]	; (5e2c <menu()+0x165c>)
    5ce6:	f004 fc07 	bl	a4f8 <Print::println()>
    5cea:	4864      	ldr	r0, [pc, #400]	; (5e7c <menu()+0x16ac>)
    5cec:	2120      	movs	r1, #32
    5cee:	f007 f949 	bl	cf84 <usb_serial_write>
        if (settings.SerialCan == 0)
    5cf2:	f896 30ce 	ldrb.w	r3, [r6, #206]	; 0xce
    5cf6:	2b00      	cmp	r3, #0
    5cf8:	f000 84dc 	beq.w	66b4 <menu()+0x1ee4>
        else if (settings.SerialCan == 1)
    5cfc:	2b01      	cmp	r3, #1
    5cfe:	f000 8572 	beq.w	67e6 <menu()+0x2016>
        SERIALCONSOLE.println();
    5d02:	484a      	ldr	r0, [pc, #296]	; (5e2c <menu()+0x165c>)
    5d04:	f004 fbf8 	bl	a4f8 <Print::println()>
    5d08:	2113      	movs	r1, #19
    5d0a:	485d      	ldr	r0, [pc, #372]	; (5e80 <menu()+0x16b0>)
    5d0c:	f007 f93a 	bl	cf84 <usb_serial_write>
    5d10:	4846      	ldr	r0, [pc, #280]	; (5e2c <menu()+0x165c>)
    5d12:	f004 fbf1 	bl	a4f8 <Print::println()>
        break;
    5d16:	2306      	movs	r3, #6
    5d18:	f7fe bffa 	b.w	4d10 <menu()+0x540>
    5d1c:	2104      	movs	r1, #4
    5d1e:	4859      	ldr	r0, [pc, #356]	; (5e84 <menu()+0x16b4>)
    5d20:	f007 f930 	bl	cf84 <usb_serial_write>
    5d24:	e74b      	b.n	5bbe <menu()+0x13ee>
    5d26:	210b      	movs	r1, #11
    5d28:	4857      	ldr	r0, [pc, #348]	; (5e88 <menu()+0x16b8>)
    5d2a:	f007 f92b 	bl	cf84 <usb_serial_write>
    5d2e:	e746      	b.n	5bbe <menu()+0x13ee>
    5d30:	210c      	movs	r1, #12
    5d32:	4856      	ldr	r0, [pc, #344]	; (5e8c <menu()+0x16bc>)
    5d34:	f007 f926 	bl	cf84 <usb_serial_write>
    5d38:	e741      	b.n	5bbe <menu()+0x13ee>
    5d3a:	210d      	movs	r1, #13
    5d3c:	4854      	ldr	r0, [pc, #336]	; (5e90 <menu()+0x16c0>)
    5d3e:	f007 f921 	bl	cf84 <usb_serial_write>
    5d42:	e73c      	b.n	5bbe <menu()+0x13ee>
    5d44:	210c      	movs	r1, #12
    5d46:	4853      	ldr	r0, [pc, #332]	; (5e94 <menu()+0x16c4>)
    5d48:	f007 f91c 	bl	cf84 <usb_serial_write>
    5d4c:	e737      	b.n	5bbe <menu()+0x13ee>
    5d4e:	210d      	movs	r1, #13
    5d50:	4851      	ldr	r0, [pc, #324]	; (5e98 <menu()+0x16c8>)
    5d52:	f007 f917 	bl	cf84 <usb_serial_write>
    5d56:	e732      	b.n	5bbe <menu()+0x13ee>
    5d58:	210d      	movs	r1, #13
    5d5a:	4850      	ldr	r0, [pc, #320]	; (5e9c <menu()+0x16cc>)
    5d5c:	f007 f912 	bl	cf84 <usb_serial_write>
    5d60:	e72d      	b.n	5bbe <menu()+0x13ee>
        virtual int available() { return usb_serial_available(); }
    5d62:	f007 f8dd 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    5d66:	2800      	cmp	r0, #0
    5d68:	f77f ac18 	ble.w	559c <menu()+0xdcc>
          settings.chargerACv = Serial.parseInt();
    5d6c:	482f      	ldr	r0, [pc, #188]	; (5e2c <menu()+0x165c>)
    5d6e:	4e30      	ldr	r6, [pc, #192]	; (5e30 <menu()+0x1660>)
    5d70:	f004 fd22 	bl	a7b8 <Stream::parseInt()>
          menuload = 1;
    5d74:	2301      	movs	r3, #1
    5d76:	602b      	str	r3, [r5, #0]
          incomingByte = 'e';
    5d78:	2365      	movs	r3, #101	; 0x65
          settings.chargerACv = Serial.parseInt();
    5d7a:	f8c6 00e0 	str.w	r0, [r6, #224]	; 0xe0
          incomingByte = 'e';
    5d7e:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5d80:	e5ad      	b.n	58de <menu()+0x110e>
    switch (incomingByte)
    5d82:	2c71      	cmp	r4, #113	; 0x71
    5d84:	f47e ae71 	bne.w	4a6a <menu()+0x29a>
        gaugedebug = 0;
    5d88:	4945      	ldr	r1, [pc, #276]	; (5ea0 <menu()+0x16d0>)
    5d8a:	4c46      	ldr	r4, [pc, #280]	; (5ea4 <menu()+0x16d4>)
    5d8c:	2300      	movs	r3, #0
          incomingByte = 'k';
    5d8e:	2273      	movs	r2, #115	; 0x73
        gaugedebug = 0;
    5d90:	600b      	str	r3, [r1, #0]
          menuload = 1;
    5d92:	602b      	str	r3, [r5, #0]
          incomingByte = 'k';
    5d94:	603a      	str	r2, [r7, #0]
  if (incomingByte == 115 && menuload == 0)
    5d96:	f7fe bfbf 	b.w	4d18 <menu()+0x548>
          settings.IgnoreTemp = Serial.parseInt();
    5d9a:	4824      	ldr	r0, [pc, #144]	; (5e2c <menu()+0x165c>)
    5d9c:	4e24      	ldr	r6, [pc, #144]	; (5e30 <menu()+0x1660>)
    5d9e:	f004 fd0b 	bl	a7b8 <Stream::parseInt()>
    5da2:	b2c1      	uxtb	r1, r0
    5da4:	f886 1048 	strb.w	r1, [r6, #72]	; 0x48
    5da8:	f7ff ba20 	b.w	51ec <menu()+0xa1c>
          settings.IgnoreVolt = Serial.parseInt();
    5dac:	481f      	ldr	r0, [pc, #124]	; (5e2c <menu()+0x165c>)
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    5dae:	4e20      	ldr	r6, [pc, #128]	; (5e30 <menu()+0x1660>)
          settings.IgnoreVolt = Serial.parseInt();
    5db0:	f004 fd02 	bl	a7b8 <Stream::parseInt()>
    5db4:	f008 fdd0 	bl	e958 <__aeabi_i2f>
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    5db8:	4923      	ldr	r1, [pc, #140]	; (5e48 <menu()+0x1678>)
    5dba:	f008 fe21 	bl	ea00 <__aeabi_fmul>
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    5dbe:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    5dc2:	64f0      	str	r0, [r6, #76]	; 0x4c
    5dc4:	4602      	mov	r2, r0
    5dc6:	f7ff ba17 	b.w	51f8 <menu()+0xa28>
          settings.WarnToff = Serial.parseInt();
    5dca:	4818      	ldr	r0, [pc, #96]	; (5e2c <menu()+0x165c>)
    5dcc:	4e18      	ldr	r6, [pc, #96]	; (5e30 <menu()+0x1660>)
    5dce:	f004 fcf3 	bl	a7b8 <Stream::parseInt()>
    5dd2:	f008 fdc1 	bl	e958 <__aeabi_i2f>
          menuload = 1;
    5dd6:	2301      	movs	r3, #1
    5dd8:	602b      	str	r3, [r5, #0]
          incomingByte = 'a';
    5dda:	2361      	movs	r3, #97	; 0x61
          settings.WarnToff = Serial.parseInt();
    5ddc:	6430      	str	r0, [r6, #64]	; 0x40
          incomingByte = 'a';
    5dde:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5de0:	f7ff bb58 	b.w	5494 <menu()+0xcc4>
          settings.gaugehigh = Serial.parseInt();
    5de4:	4811      	ldr	r0, [pc, #68]	; (5e2c <menu()+0x165c>)
    5de6:	4e12      	ldr	r6, [pc, #72]	; (5e30 <menu()+0x1660>)
    5de8:	f004 fce6 	bl	a7b8 <Stream::parseInt()>
          gaugedebug = 3;
    5dec:	4b2c      	ldr	r3, [pc, #176]	; (5ea0 <menu()+0x16d0>)
          settings.gaugehigh = Serial.parseInt();
    5dee:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
          gaugedebug = 3;
    5df2:	2203      	movs	r2, #3
    5df4:	e539      	b.n	586a <menu()+0x109a>
        SOCset = 0;
    5df6:	4b2c      	ldr	r3, [pc, #176]	; (5ea8 <menu()+0x16d8>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5df8:	482c      	ldr	r0, [pc, #176]	; (5eac <menu()+0x16dc>)
    5dfa:	2102      	movs	r1, #2
    5dfc:	2200      	movs	r2, #0
    5dfe:	601a      	str	r2, [r3, #0]
    5e00:	f007 f8c0 	bl	cf84 <usb_serial_write>
    5e04:	4809      	ldr	r0, [pc, #36]	; (5e2c <menu()+0x165c>)
    5e06:	f004 fb77 	bl	a4f8 <Print::println()>
    5e0a:	4829      	ldr	r0, [pc, #164]	; (5eb0 <menu()+0x16e0>)
    5e0c:	210b      	movs	r1, #11
    5e0e:	f007 f8b9 	bl	cf84 <usb_serial_write>
    5e12:	2102      	movs	r1, #2
    5e14:	4825      	ldr	r0, [pc, #148]	; (5eac <menu()+0x16dc>)
    5e16:	4e06      	ldr	r6, [pc, #24]	; (5e30 <menu()+0x1660>)
    5e18:	f007 f8b4 	bl	cf84 <usb_serial_write>
    5e1c:	4803      	ldr	r0, [pc, #12]	; (5e2c <menu()+0x165c>)
    5e1e:	f004 fb6b 	bl	a4f8 <Print::println()>
          menuload = 1;
    5e22:	2201      	movs	r2, #1
          incomingByte = 'b';
    5e24:	2362      	movs	r3, #98	; 0x62
          menuload = 1;
    5e26:	602a      	str	r2, [r5, #0]
          incomingByte = 'b';
    5e28:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    5e2a:	e045      	b.n	5eb8 <menu()+0x16e8>
    5e2c:	1fff89f8 	.word	0x1fff89f8
    5e30:	1fffb73c 	.word	0x1fffb73c
    5e34:	447a0000 	.word	0x447a0000
    5e38:	00015fe0 	.word	0x00015fe0
    5e3c:	00015ff0 	.word	0x00015ff0
    5e40:	0001600c 	.word	0x0001600c
    5e44:	00016010 	.word	0x00016010
    5e48:	3a83126f 	.word	0x3a83126f
    5e4c:	00016024 	.word	0x00016024
    5e50:	0001602c 	.word	0x0001602c
    5e54:	0001605c 	.word	0x0001605c
    5e58:	00016074 	.word	0x00016074
    5e5c:	00016094 	.word	0x00016094
    5e60:	00016098 	.word	0x00016098
    5e64:	3dcccccd 	.word	0x3dcccccd
    5e68:	00015f44 	.word	0x00015f44
    5e6c:	000160c0 	.word	0x000160c0
    5e70:	000160e4 	.word	0x000160e4
    5e74:	000160e8 	.word	0x000160e8
    5e78:	00016104 	.word	0x00016104
    5e7c:	00016108 	.word	0x00016108
    5e80:	00015e80 	.word	0x00015e80
    5e84:	00015fd8 	.word	0x00015fd8
    5e88:	00015fcc 	.word	0x00015fcc
    5e8c:	00015f9c 	.word	0x00015f9c
    5e90:	00015f7c 	.word	0x00015f7c
    5e94:	00015f8c 	.word	0x00015f8c
    5e98:	00015fbc 	.word	0x00015fbc
    5e9c:	00015fac 	.word	0x00015fac
    5ea0:	1fffb63c 	.word	0x1fffb63c
    5ea4:	1fff8848 	.word	0x1fff8848
    5ea8:	1fff91cc 	.word	0x1fff91cc
    5eac:	00016af4 	.word	0x00016af4
    5eb0:	00015e1c 	.word	0x00015e1c
        virtual int read() { return usb_serial_getchar(); }
    5eb4:	f006 fff8 	bl	cea8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    5eb8:	f007 f832 	bl	cf20 <usb_serial_available>
        while (Serial.available())
    5ebc:	4604      	mov	r4, r0
    5ebe:	2800      	cmp	r0, #0
    5ec0:	d1f8      	bne.n	5eb4 <menu()+0x16e4>
        SERIALCONSOLE.println();
    5ec2:	48c3      	ldr	r0, [pc, #780]	; (61d0 <menu()+0x1a00>)
    5ec4:	f004 fb18 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    5ec8:	48c1      	ldr	r0, [pc, #772]	; (61d0 <menu()+0x1a00>)
    5eca:	f004 fb15 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    5ece:	48c0      	ldr	r0, [pc, #768]	; (61d0 <menu()+0x1a00>)
    5ed0:	f004 fb12 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    5ed4:	48be      	ldr	r0, [pc, #760]	; (61d0 <menu()+0x1a00>)
    5ed6:	f004 fb0f 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    5eda:	48bd      	ldr	r0, [pc, #756]	; (61d0 <menu()+0x1a00>)
    5edc:	f004 fb0c 	bl	a4f8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5ee0:	2115      	movs	r1, #21
    5ee2:	48bc      	ldr	r0, [pc, #752]	; (61d4 <menu()+0x1a04>)
    5ee4:	f007 f84e 	bl	cf84 <usb_serial_write>
    5ee8:	48b9      	ldr	r0, [pc, #740]	; (61d0 <menu()+0x1a00>)
    5eea:	f004 fb05 	bl	a4f8 <Print::println()>
    5eee:	2114      	movs	r1, #20
    5ef0:	48b9      	ldr	r0, [pc, #740]	; (61d8 <menu()+0x1a08>)
    5ef2:	f007 f847 	bl	cf84 <usb_serial_write>
    5ef6:	48b6      	ldr	r0, [pc, #728]	; (61d0 <menu()+0x1a00>)
    5ef8:	f004 fafe 	bl	a4f8 <Print::println()>
    5efc:	211b      	movs	r1, #27
    5efe:	48b7      	ldr	r0, [pc, #732]	; (61dc <menu()+0x1a0c>)
    5f00:	f007 f840 	bl	cf84 <usb_serial_write>
    5f04:	48b2      	ldr	r0, [pc, #712]	; (61d0 <menu()+0x1a00>)
    5f06:	f004 faf7 	bl	a4f8 <Print::println()>
    5f0a:	2113      	movs	r1, #19
    5f0c:	48b4      	ldr	r0, [pc, #720]	; (61e0 <menu()+0x1a10>)
    5f0e:	f007 f839 	bl	cf84 <usb_serial_write>
    5f12:	48af      	ldr	r0, [pc, #700]	; (61d0 <menu()+0x1a00>)
    5f14:	f004 faf0 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    5f18:	48ad      	ldr	r0, [pc, #692]	; (61d0 <menu()+0x1a00>)
    5f1a:	f004 faed 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    5f1e:	48ac      	ldr	r0, [pc, #688]	; (61d0 <menu()+0x1a00>)
    5f20:	f004 faea 	bl	a4f8 <Print::println()>
    5f24:	2121      	movs	r1, #33	; 0x21
    5f26:	48af      	ldr	r0, [pc, #700]	; (61e4 <menu()+0x1a14>)
    5f28:	f007 f82c 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverVSetpoint * 1000, 0);
    5f2c:	68f0      	ldr	r0, [r6, #12]
    5f2e:	49ae      	ldr	r1, [pc, #696]	; (61e8 <menu()+0x1a18>)
    5f30:	f008 fd66 	bl	ea00 <__aeabi_fmul>
    5f34:	f008 fb40 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5f38:	9400      	str	r4, [sp, #0]
    5f3a:	4602      	mov	r2, r0
    5f3c:	460b      	mov	r3, r1
    5f3e:	48a4      	ldr	r0, [pc, #656]	; (61d0 <menu()+0x1a00>)
    5f40:	f004 fafe 	bl	a540 <Print::printFloat(double, unsigned char)>
    5f44:	2102      	movs	r1, #2
    5f46:	48a9      	ldr	r0, [pc, #676]	; (61ec <menu()+0x1a1c>)
    5f48:	f007 f81c 	bl	cf84 <usb_serial_write>
    5f4c:	2102      	movs	r1, #2
    5f4e:	48a8      	ldr	r0, [pc, #672]	; (61f0 <menu()+0x1a20>)
    5f50:	f007 f818 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5f54:	489e      	ldr	r0, [pc, #632]	; (61d0 <menu()+0x1a00>)
    5f56:	f004 facf 	bl	a4f8 <Print::println()>
    5f5a:	2122      	movs	r1, #34	; 0x22
    5f5c:	48a5      	ldr	r0, [pc, #660]	; (61f4 <menu()+0x1a24>)
    5f5e:	f007 f811 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderVSetpoint * 1000, 0);
    5f62:	6930      	ldr	r0, [r6, #16]
    5f64:	49a0      	ldr	r1, [pc, #640]	; (61e8 <menu()+0x1a18>)
    5f66:	f008 fd4b 	bl	ea00 <__aeabi_fmul>
    5f6a:	f008 fb25 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5f6e:	9400      	str	r4, [sp, #0]
    5f70:	4602      	mov	r2, r0
    5f72:	460b      	mov	r3, r1
    5f74:	4896      	ldr	r0, [pc, #600]	; (61d0 <menu()+0x1a00>)
    5f76:	f004 fae3 	bl	a540 <Print::printFloat(double, unsigned char)>
    5f7a:	2102      	movs	r1, #2
    5f7c:	489b      	ldr	r0, [pc, #620]	; (61ec <menu()+0x1a1c>)
    5f7e:	f007 f801 	bl	cf84 <usb_serial_write>
    5f82:	2102      	movs	r1, #2
    5f84:	489a      	ldr	r0, [pc, #616]	; (61f0 <menu()+0x1a20>)
    5f86:	f006 fffd 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5f8a:	4891      	ldr	r0, [pc, #580]	; (61d0 <menu()+0x1a00>)
    5f8c:	f004 fab4 	bl	a4f8 <Print::println()>
    5f90:	2120      	movs	r1, #32
    5f92:	4899      	ldr	r0, [pc, #612]	; (61f8 <menu()+0x1a28>)
    5f94:	f006 fff6 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverTSetpoint);
    5f98:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    5f9a:	f008 fb0d 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5f9e:	2702      	movs	r7, #2
    5fa0:	4602      	mov	r2, r0
    5fa2:	460b      	mov	r3, r1
    5fa4:	488a      	ldr	r0, [pc, #552]	; (61d0 <menu()+0x1a00>)
    5fa6:	9700      	str	r7, [sp, #0]
    5fa8:	f004 faca 	bl	a540 <Print::printFloat(double, unsigned char)>
    5fac:	2101      	movs	r1, #1
    5fae:	4893      	ldr	r0, [pc, #588]	; (61fc <menu()+0x1a2c>)
    5fb0:	f006 ffe8 	bl	cf84 <usb_serial_write>
    5fb4:	4639      	mov	r1, r7
    5fb6:	488e      	ldr	r0, [pc, #568]	; (61f0 <menu()+0x1a20>)
    5fb8:	f006 ffe4 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5fbc:	4884      	ldr	r0, [pc, #528]	; (61d0 <menu()+0x1a00>)
    5fbe:	f004 fa9b 	bl	a4f8 <Print::println()>
    5fc2:	2121      	movs	r1, #33	; 0x21
    5fc4:	488e      	ldr	r0, [pc, #568]	; (6200 <menu()+0x1a30>)
    5fc6:	f006 ffdd 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderTSetpoint);
    5fca:	6b30      	ldr	r0, [r6, #48]	; 0x30
    5fcc:	f008 faf4 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5fd0:	9700      	str	r7, [sp, #0]
    5fd2:	4602      	mov	r2, r0
    5fd4:	460b      	mov	r3, r1
    5fd6:	487e      	ldr	r0, [pc, #504]	; (61d0 <menu()+0x1a00>)
    5fd8:	f004 fab2 	bl	a540 <Print::printFloat(double, unsigned char)>
    5fdc:	2101      	movs	r1, #1
    5fde:	4887      	ldr	r0, [pc, #540]	; (61fc <menu()+0x1a2c>)
    5fe0:	f006 ffd0 	bl	cf84 <usb_serial_write>
    5fe4:	4639      	mov	r1, r7
    5fe6:	4882      	ldr	r0, [pc, #520]	; (61f0 <menu()+0x1a20>)
    5fe8:	f006 ffcc 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5fec:	4878      	ldr	r0, [pc, #480]	; (61d0 <menu()+0x1a00>)
    5fee:	f004 fa83 	bl	a4f8 <Print::println()>
    5ff2:	2124      	movs	r1, #36	; 0x24
    5ff4:	4883      	ldr	r0, [pc, #524]	; (6204 <menu()+0x1a34>)
    5ff6:	f006 ffc5 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceVoltage * 1000, 0);
    5ffa:	6d30      	ldr	r0, [r6, #80]	; 0x50
    5ffc:	497a      	ldr	r1, [pc, #488]	; (61e8 <menu()+0x1a18>)
    5ffe:	f008 fcff 	bl	ea00 <__aeabi_fmul>
    6002:	f008 fad9 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    6006:	9400      	str	r4, [sp, #0]
    6008:	4602      	mov	r2, r0
    600a:	460b      	mov	r3, r1
    600c:	4870      	ldr	r0, [pc, #448]	; (61d0 <menu()+0x1a00>)
    600e:	f004 fa97 	bl	a540 <Print::printFloat(double, unsigned char)>
    6012:	4639      	mov	r1, r7
    6014:	4875      	ldr	r0, [pc, #468]	; (61ec <menu()+0x1a1c>)
    6016:	f006 ffb5 	bl	cf84 <usb_serial_write>
    601a:	4639      	mov	r1, r7
    601c:	4874      	ldr	r0, [pc, #464]	; (61f0 <menu()+0x1a20>)
    601e:	f006 ffb1 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6022:	486b      	ldr	r0, [pc, #428]	; (61d0 <menu()+0x1a00>)
    6024:	f004 fa68 	bl	a4f8 <Print::println()>
    6028:	2120      	movs	r1, #32
    602a:	4877      	ldr	r0, [pc, #476]	; (6208 <menu()+0x1a38>)
    602c:	f006 ffaa 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceHyst * 1000, 0);
    6030:	6d70      	ldr	r0, [r6, #84]	; 0x54
    6032:	496d      	ldr	r1, [pc, #436]	; (61e8 <menu()+0x1a18>)
    6034:	f008 fce4 	bl	ea00 <__aeabi_fmul>
    6038:	f008 fabe 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    603c:	9400      	str	r4, [sp, #0]
    603e:	4602      	mov	r2, r0
    6040:	460b      	mov	r3, r1
    6042:	4863      	ldr	r0, [pc, #396]	; (61d0 <menu()+0x1a00>)
    6044:	f004 fa7c 	bl	a540 <Print::printFloat(double, unsigned char)>
    6048:	4639      	mov	r1, r7
    604a:	4868      	ldr	r0, [pc, #416]	; (61ec <menu()+0x1a1c>)
    604c:	f006 ff9a 	bl	cf84 <usb_serial_write>
    6050:	4639      	mov	r1, r7
    6052:	4867      	ldr	r0, [pc, #412]	; (61f0 <menu()+0x1a20>)
    6054:	f006 ff96 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6058:	485d      	ldr	r0, [pc, #372]	; (61d0 <menu()+0x1a00>)
    605a:	f004 fa4d 	bl	a4f8 <Print::println()>
    605e:	211a      	movs	r1, #26
    6060:	486a      	ldr	r0, [pc, #424]	; (620c <menu()+0x1a3c>)
    6062:	f006 ff8f 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    6066:	6e31      	ldr	r1, [r6, #96]	; 0x60
    6068:	4859      	ldr	r0, [pc, #356]	; (61d0 <menu()+0x1a00>)
    606a:	f004 fa3d 	bl	a4e8 <Print::print(long)>
    606e:	4639      	mov	r1, r7
    6070:	4867      	ldr	r0, [pc, #412]	; (6210 <menu()+0x1a40>)
    6072:	f006 ff87 	bl	cf84 <usb_serial_write>
    6076:	4639      	mov	r1, r7
    6078:	485d      	ldr	r0, [pc, #372]	; (61f0 <menu()+0x1a20>)
    607a:	f006 ff83 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    607e:	4854      	ldr	r0, [pc, #336]	; (61d0 <menu()+0x1a00>)
    6080:	f004 fa3a 	bl	a4f8 <Print::println()>
    6084:	2119      	movs	r1, #25
    6086:	4863      	ldr	r0, [pc, #396]	; (6214 <menu()+0x1a44>)
    6088:	f006 ff7c 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.discurrentmax * 0.1);
    608c:	f8b6 006a 	ldrh.w	r0, [r6, #106]	; 0x6a
    6090:	f008 fc62 	bl	e958 <__aeabi_i2f>
    6094:	4960      	ldr	r1, [pc, #384]	; (6218 <menu()+0x1a48>)
    6096:	f008 fcb3 	bl	ea00 <__aeabi_fmul>
    609a:	f008 fa8d 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    609e:	9700      	str	r7, [sp, #0]
    60a0:	4602      	mov	r2, r0
    60a2:	460b      	mov	r3, r1
    60a4:	484a      	ldr	r0, [pc, #296]	; (61d0 <menu()+0x1a00>)
    60a6:	f004 fa4b 	bl	a540 <Print::printFloat(double, unsigned char)>
    60aa:	2101      	movs	r1, #1
    60ac:	485b      	ldr	r0, [pc, #364]	; (621c <menu()+0x1a4c>)
    60ae:	f006 ff69 	bl	cf84 <usb_serial_write>
    60b2:	4639      	mov	r1, r7
    60b4:	484e      	ldr	r0, [pc, #312]	; (61f0 <menu()+0x1a20>)
    60b6:	f006 ff65 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    60ba:	4845      	ldr	r0, [pc, #276]	; (61d0 <menu()+0x1a00>)
    60bc:	f004 fa1c 	bl	a4f8 <Print::println()>
    60c0:	212c      	movs	r1, #44	; 0x2c
    60c2:	4857      	ldr	r0, [pc, #348]	; (6220 <menu()+0x1a50>)
    60c4:	f006 ff5e 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischVsetpoint * 1000, 0);
    60c8:	69f0      	ldr	r0, [r6, #28]
    60ca:	4947      	ldr	r1, [pc, #284]	; (61e8 <menu()+0x1a18>)
    60cc:	f008 fc98 	bl	ea00 <__aeabi_fmul>
    60d0:	f008 fa72 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    60d4:	9400      	str	r4, [sp, #0]
    60d6:	4602      	mov	r2, r0
    60d8:	460b      	mov	r3, r1
    60da:	483d      	ldr	r0, [pc, #244]	; (61d0 <menu()+0x1a00>)
    60dc:	f004 fa30 	bl	a540 <Print::printFloat(double, unsigned char)>
    60e0:	4639      	mov	r1, r7
    60e2:	4842      	ldr	r0, [pc, #264]	; (61ec <menu()+0x1a1c>)
    60e4:	f006 ff4e 	bl	cf84 <usb_serial_write>
    60e8:	4639      	mov	r1, r7
    60ea:	4841      	ldr	r0, [pc, #260]	; (61f0 <menu()+0x1a20>)
    60ec:	f006 ff4a 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    60f0:	4837      	ldr	r0, [pc, #220]	; (61d0 <menu()+0x1a00>)
    60f2:	f004 fa01 	bl	a4f8 <Print::println()>
    60f6:	2120      	movs	r1, #32
    60f8:	484a      	ldr	r0, [pc, #296]	; (6224 <menu()+0x1a54>)
    60fa:	f006 ff43 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    60fe:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    6100:	4833      	ldr	r0, [pc, #204]	; (61d0 <menu()+0x1a00>)
    6102:	f004 f9f1 	bl	a4e8 <Print::print(long)>
    6106:	4639      	mov	r1, r7
    6108:	4839      	ldr	r0, [pc, #228]	; (61f0 <menu()+0x1a20>)
    610a:	f006 ff3b 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    610e:	4830      	ldr	r0, [pc, #192]	; (61d0 <menu()+0x1a00>)
    6110:	f004 f9f2 	bl	a4f8 <Print::println()>
    6114:	2121      	movs	r1, #33	; 0x21
    6116:	4844      	ldr	r0, [pc, #272]	; (6228 <menu()+0x1a58>)
    6118:	f006 ff34 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    611c:	6db1      	ldr	r1, [r6, #88]	; 0x58
    611e:	482c      	ldr	r0, [pc, #176]	; (61d0 <menu()+0x1a00>)
    6120:	f004 f9e2 	bl	a4e8 <Print::print(long)>
    6124:	4639      	mov	r1, r7
    6126:	4832      	ldr	r0, [pc, #200]	; (61f0 <menu()+0x1a20>)
    6128:	f006 ff2c 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    612c:	4828      	ldr	r0, [pc, #160]	; (61d0 <menu()+0x1a00>)
    612e:	f004 f9e3 	bl	a4f8 <Print::println()>
    6132:	2111      	movs	r1, #17
    6134:	483d      	ldr	r0, [pc, #244]	; (622c <menu()+0x1a5c>)
    6136:	f006 ff25 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    613a:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
    613c:	4824      	ldr	r0, [pc, #144]	; (61d0 <menu()+0x1a00>)
    613e:	f004 f9d3 	bl	a4e8 <Print::print(long)>
    6142:	4639      	mov	r1, r7
    6144:	4829      	ldr	r0, [pc, #164]	; (61ec <menu()+0x1a1c>)
    6146:	f006 ff1d 	bl	cf84 <usb_serial_write>
    614a:	4639      	mov	r1, r7
    614c:	4828      	ldr	r0, [pc, #160]	; (61f0 <menu()+0x1a20>)
    614e:	f006 ff19 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6152:	481f      	ldr	r0, [pc, #124]	; (61d0 <menu()+0x1a00>)
    6154:	f004 f9d0 	bl	a4f8 <Print::println()>
    6158:	2115      	movs	r1, #21
    615a:	4835      	ldr	r0, [pc, #212]	; (6230 <menu()+0x1a60>)
    615c:	f006 ff12 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    6160:	6f31      	ldr	r1, [r6, #112]	; 0x70
    6162:	481b      	ldr	r0, [pc, #108]	; (61d0 <menu()+0x1a00>)
    6164:	f004 f9c0 	bl	a4e8 <Print::print(long)>
    6168:	2103      	movs	r1, #3
    616a:	4832      	ldr	r0, [pc, #200]	; (6234 <menu()+0x1a64>)
    616c:	f006 ff0a 	bl	cf84 <usb_serial_write>
    6170:	4639      	mov	r1, r7
    6172:	481f      	ldr	r0, [pc, #124]	; (61f0 <menu()+0x1a20>)
    6174:	f006 ff06 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6178:	4815      	ldr	r0, [pc, #84]	; (61d0 <menu()+0x1a00>)
    617a:	f004 f9bd 	bl	a4f8 <Print::println()>
    617e:	2111      	movs	r1, #17
    6180:	482d      	ldr	r0, [pc, #180]	; (6238 <menu()+0x1a68>)
    6182:	f006 feff 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    6186:	6f71      	ldr	r1, [r6, #116]	; 0x74
    6188:	4811      	ldr	r0, [pc, #68]	; (61d0 <menu()+0x1a00>)
    618a:	f004 f9ad 	bl	a4e8 <Print::print(long)>
    618e:	4639      	mov	r1, r7
    6190:	4816      	ldr	r0, [pc, #88]	; (61ec <menu()+0x1a1c>)
    6192:	f006 fef7 	bl	cf84 <usb_serial_write>
    6196:	4639      	mov	r1, r7
    6198:	4815      	ldr	r0, [pc, #84]	; (61f0 <menu()+0x1a20>)
    619a:	f006 fef3 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    619e:	480c      	ldr	r0, [pc, #48]	; (61d0 <menu()+0x1a00>)
    61a0:	f004 f9aa 	bl	a4f8 <Print::println()>
    61a4:	2115      	movs	r1, #21
    61a6:	4825      	ldr	r0, [pc, #148]	; (623c <menu()+0x1a6c>)
    61a8:	f006 feec 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    61ac:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    61ae:	4808      	ldr	r0, [pc, #32]	; (61d0 <menu()+0x1a00>)
    61b0:	f004 f99a 	bl	a4e8 <Print::print(long)>
    61b4:	2103      	movs	r1, #3
    61b6:	481f      	ldr	r0, [pc, #124]	; (6234 <menu()+0x1a64>)
    61b8:	f006 fee4 	bl	cf84 <usb_serial_write>
    61bc:	4639      	mov	r1, r7
    61be:	480c      	ldr	r0, [pc, #48]	; (61f0 <menu()+0x1a20>)
    61c0:	f006 fee0 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    61c4:	4802      	ldr	r0, [pc, #8]	; (61d0 <menu()+0x1a00>)
    61c6:	f004 f997 	bl	a4f8 <Print::println()>
    61ca:	2117      	movs	r1, #23
    61cc:	e038      	b.n	6240 <menu()+0x1a70>
    61ce:	bf00      	nop
    61d0:	1fff89f8 	.word	0x1fff89f8
    61d4:	000167a0 	.word	0x000167a0
    61d8:	000167b8 	.word	0x000167b8
    61dc:	000167d0 	.word	0x000167d0
    61e0:	00015e80 	.word	0x00015e80
    61e4:	000167ec 	.word	0x000167ec
    61e8:	447a0000 	.word	0x447a0000
    61ec:	00015edc 	.word	0x00015edc
    61f0:	00016af4 	.word	0x00016af4
    61f4:	00016810 	.word	0x00016810
    61f8:	00016834 	.word	0x00016834
    61fc:	00015a34 	.word	0x00015a34
    6200:	00016858 	.word	0x00016858
    6204:	0001687c 	.word	0x0001687c
    6208:	000168a4 	.word	0x000168a4
    620c:	000168c8 	.word	0x000168c8
    6210:	000168e4 	.word	0x000168e4
    6214:	000168e8 	.word	0x000168e8
    6218:	3dcccccd 	.word	0x3dcccccd
    621c:	00015f44 	.word	0x00015f44
    6220:	00016904 	.word	0x00016904
    6224:	00016934 	.word	0x00016934
    6228:	00016958 	.word	0x00016958
    622c:	0001697c 	.word	0x0001697c
    6230:	00016990 	.word	0x00016990
    6234:	000169a8 	.word	0x000169a8
    6238:	000169ac 	.word	0x000169ac
    623c:	000169c0 	.word	0x000169c0
    6240:	48b4      	ldr	r0, [pc, #720]	; (6514 <menu()+0x1d44>)
    6242:	f006 fe9f 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.StoreVsetpoint * 1000, 0 );
    6246:	6a70      	ldr	r0, [r6, #36]	; 0x24
    6248:	49b3      	ldr	r1, [pc, #716]	; (6518 <menu()+0x1d48>)
    624a:	f008 fbd9 	bl	ea00 <__aeabi_fmul>
    624e:	f008 f9b3 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    6252:	9400      	str	r4, [sp, #0]
    6254:	4602      	mov	r2, r0
    6256:	460b      	mov	r3, r1
    6258:	48b0      	ldr	r0, [pc, #704]	; (651c <menu()+0x1d4c>)
    625a:	f004 f971 	bl	a540 <Print::printFloat(double, unsigned char)>
    625e:	4639      	mov	r1, r7
    6260:	48af      	ldr	r0, [pc, #700]	; (6520 <menu()+0x1d50>)
    6262:	f006 fe8f 	bl	cf84 <usb_serial_write>
    6266:	4639      	mov	r1, r7
    6268:	48ae      	ldr	r0, [pc, #696]	; (6524 <menu()+0x1d54>)
    626a:	f006 fe8b 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    626e:	48ab      	ldr	r0, [pc, #684]	; (651c <menu()+0x1d4c>)
    6270:	f004 f942 	bl	a4f8 <Print::println()>
    6274:	2125      	movs	r1, #37	; 0x25
    6276:	48ac      	ldr	r0, [pc, #688]	; (6528 <menu()+0x1d58>)
    6278:	f006 fe84 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTaper * 1000, 0 );
    627c:	f8d6 00c8 	ldr.w	r0, [r6, #200]	; 0xc8
    6280:	49a5      	ldr	r1, [pc, #660]	; (6518 <menu()+0x1d48>)
    6282:	f008 fbbd 	bl	ea00 <__aeabi_fmul>
    6286:	f008 f997 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    628a:	9400      	str	r4, [sp, #0]
    628c:	4602      	mov	r2, r0
    628e:	460b      	mov	r3, r1
    6290:	48a2      	ldr	r0, [pc, #648]	; (651c <menu()+0x1d4c>)
    6292:	f004 f955 	bl	a540 <Print::printFloat(double, unsigned char)>
    6296:	4639      	mov	r1, r7
    6298:	48a1      	ldr	r0, [pc, #644]	; (6520 <menu()+0x1d50>)
    629a:	f006 fe73 	bl	cf84 <usb_serial_write>
    629e:	4639      	mov	r1, r7
    62a0:	48a0      	ldr	r0, [pc, #640]	; (6524 <menu()+0x1d54>)
    62a2:	f006 fe6f 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    62a6:	489d      	ldr	r0, [pc, #628]	; (651c <menu()+0x1d4c>)
    62a8:	f004 f926 	bl	a4f8 <Print::println()>
    62ac:	212b      	movs	r1, #43	; 0x2b
    62ae:	489f      	ldr	r0, [pc, #636]	; (652c <menu()+0x1d5c>)
    62b0:	f006 fe68 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTSetpoint);
    62b4:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    62b6:	f008 f97f 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    62ba:	9700      	str	r7, [sp, #0]
    62bc:	4602      	mov	r2, r0
    62be:	460b      	mov	r3, r1
    62c0:	4896      	ldr	r0, [pc, #600]	; (651c <menu()+0x1d4c>)
    62c2:	f004 f93d 	bl	a540 <Print::printFloat(double, unsigned char)>
    62c6:	2101      	movs	r1, #1
    62c8:	4899      	ldr	r0, [pc, #612]	; (6530 <menu()+0x1d60>)
    62ca:	f006 fe5b 	bl	cf84 <usb_serial_write>
    62ce:	4639      	mov	r1, r7
    62d0:	4894      	ldr	r0, [pc, #592]	; (6524 <menu()+0x1d54>)
    62d2:	f006 fe57 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    62d6:	4891      	ldr	r0, [pc, #580]	; (651c <menu()+0x1d4c>)
    62d8:	f004 f90e 	bl	a4f8 <Print::println()>
    62dc:	2128      	movs	r1, #40	; 0x28
    62de:	4895      	ldr	r0, [pc, #596]	; (6534 <menu()+0x1d64>)
    62e0:	f006 fe50 	bl	cf84 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischHys * 1000, 0);
    62e4:	6970      	ldr	r0, [r6, #20]
    62e6:	498c      	ldr	r1, [pc, #560]	; (6518 <menu()+0x1d48>)
    62e8:	f008 fb8a 	bl	ea00 <__aeabi_fmul>
    62ec:	f008 f964 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    62f0:	9400      	str	r4, [sp, #0]
    62f2:	460b      	mov	r3, r1
    62f4:	4602      	mov	r2, r0
    62f6:	4889      	ldr	r0, [pc, #548]	; (651c <menu()+0x1d4c>)
    62f8:	f004 f922 	bl	a540 <Print::printFloat(double, unsigned char)>
    62fc:	4639      	mov	r1, r7
    62fe:	4888      	ldr	r0, [pc, #544]	; (6520 <menu()+0x1d50>)
    6300:	f006 fe40 	bl	cf84 <usb_serial_write>
    6304:	4639      	mov	r1, r7
    6306:	4887      	ldr	r0, [pc, #540]	; (6524 <menu()+0x1d54>)
    6308:	f006 fe3c 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    630c:	4883      	ldr	r0, [pc, #524]	; (651c <menu()+0x1d4c>)
    630e:	f004 f8f3 	bl	a4f8 <Print::println()>
        SERIALCONSOLE.println();
    6312:	4882      	ldr	r0, [pc, #520]	; (651c <menu()+0x1d4c>)
    6314:	f004 f8f0 	bl	a4f8 <Print::println()>
        break;
    6318:	2303      	movs	r3, #3
    631a:	f7fe bcf9 	b.w	4d10 <menu()+0x540>
        menuload = 0;
    631e:	2200      	movs	r2, #0
        incomingByte = 115;
    6320:	2373      	movs	r3, #115	; 0x73
    6322:	4c85      	ldr	r4, [pc, #532]	; (6538 <menu()+0x1d68>)
        menuload = 0;
    6324:	602a      	str	r2, [r5, #0]
        incomingByte = 115;
    6326:	603b      	str	r3, [r7, #0]
  if (incomingByte == 115 && menuload == 0)
    6328:	f7fe bcf6 	b.w	4d18 <menu()+0x548>
        virtual int available() { return usb_serial_available(); }
    632c:	f006 fdf8 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    6330:	2800      	cmp	r0, #0
    6332:	f77e ab96 	ble.w	4a62 <menu()+0x292>
          settings.DisTSetpoint = Serial.parseInt();
    6336:	4879      	ldr	r0, [pc, #484]	; (651c <menu()+0x1d4c>)
    6338:	4e80      	ldr	r6, [pc, #512]	; (653c <menu()+0x1d6c>)
    633a:	f004 fa3d 	bl	a7b8 <Stream::parseInt()>
    633e:	f008 fb0b 	bl	e958 <__aeabi_i2f>
    6342:	63f0      	str	r0, [r6, #60]	; 0x3c
          incomingByte = 'b';
    6344:	e56d      	b.n	5e22 <menu()+0x1652>
    6346:	f006 fdeb 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    634a:	2800      	cmp	r0, #0
    634c:	f77e ab89 	ble.w	4a62 <menu()+0x292>
          settings.StoreVsetpoint = Serial.parseInt();
    6350:	4872      	ldr	r0, [pc, #456]	; (651c <menu()+0x1d4c>)
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    6352:	4e7a      	ldr	r6, [pc, #488]	; (653c <menu()+0x1d6c>)
          settings.StoreVsetpoint = Serial.parseInt();
    6354:	f004 fa30 	bl	a7b8 <Stream::parseInt()>
    6358:	f008 fafe 	bl	e958 <__aeabi_i2f>
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    635c:	496e      	ldr	r1, [pc, #440]	; (6518 <menu()+0x1d48>)
    635e:	f008 fc03 	bl	eb68 <__aeabi_fdiv>
    6362:	6270      	str	r0, [r6, #36]	; 0x24
          incomingByte = 'b';
    6364:	e55d      	b.n	5e22 <menu()+0x1652>
        loadSettings();
    6366:	f7fc fd29 	bl	2dbc <loadSettings()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    636a:	2102      	movs	r1, #2
    636c:	486d      	ldr	r0, [pc, #436]	; (6524 <menu()+0x1d54>)
    636e:	f006 fe09 	bl	cf84 <usb_serial_write>
    6372:	486a      	ldr	r0, [pc, #424]	; (651c <menu()+0x1d4c>)
    6374:	f004 f8c0 	bl	a4f8 <Print::println()>
    6378:	2102      	movs	r1, #2
    637a:	486a      	ldr	r0, [pc, #424]	; (6524 <menu()+0x1d54>)
    637c:	f006 fe02 	bl	cf84 <usb_serial_write>
    6380:	4866      	ldr	r0, [pc, #408]	; (651c <menu()+0x1d4c>)
    6382:	f004 f8b9 	bl	a4f8 <Print::println()>
    6386:	2102      	movs	r1, #2
    6388:	4866      	ldr	r0, [pc, #408]	; (6524 <menu()+0x1d54>)
    638a:	f006 fdfb 	bl	cf84 <usb_serial_write>
    638e:	4863      	ldr	r0, [pc, #396]	; (651c <menu()+0x1d4c>)
    6390:	f004 f8b2 	bl	a4f8 <Print::println()>
    6394:	2117      	movs	r1, #23
    6396:	486a      	ldr	r0, [pc, #424]	; (6540 <menu()+0x1d70>)
    6398:	f006 fdf4 	bl	cf84 <usb_serial_write>
    639c:	485f      	ldr	r0, [pc, #380]	; (651c <menu()+0x1d4c>)
    639e:	f004 f8ab 	bl	a4f8 <Print::println()>
    63a2:	e536      	b.n	5e12 <menu()+0x1642>
        virtual int available() { return usb_serial_available(); }
    63a4:	f006 fdbc 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    63a8:	2800      	cmp	r0, #0
    63aa:	f77e ab5a 	ble.w	4a62 <menu()+0x292>
          settings.DisTaper = Serial.parseInt();
    63ae:	485b      	ldr	r0, [pc, #364]	; (651c <menu()+0x1d4c>)
          settings.DisTaper = settings.DisTaper / 1000;
    63b0:	4e62      	ldr	r6, [pc, #392]	; (653c <menu()+0x1d6c>)
          settings.DisTaper = Serial.parseInt();
    63b2:	f004 fa01 	bl	a7b8 <Stream::parseInt()>
    63b6:	f008 facf 	bl	e958 <__aeabi_i2f>
          settings.DisTaper = settings.DisTaper / 1000;
    63ba:	4957      	ldr	r1, [pc, #348]	; (6518 <menu()+0x1d48>)
    63bc:	f008 fbd4 	bl	eb68 <__aeabi_fdiv>
    63c0:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
          incomingByte = 'b';
    63c4:	e52d      	b.n	5e22 <menu()+0x1652>
    63c6:	f006 fdab 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    63ca:	2800      	cmp	r0, #0
    63cc:	f77e ab49 	ble.w	4a62 <menu()+0x292>
          settings.socvolt[3] = Serial.parseInt();
    63d0:	4852      	ldr	r0, [pc, #328]	; (651c <menu()+0x1d4c>)
    63d2:	4e5a      	ldr	r6, [pc, #360]	; (653c <menu()+0x1d6c>)
    63d4:	f004 f9f0 	bl	a7b8 <Stream::parseInt()>
    63d8:	67b0      	str	r0, [r6, #120]	; 0x78
          incomingByte = 'b';
    63da:	e522      	b.n	5e22 <menu()+0x1652>
    63dc:	f006 fda0 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    63e0:	2800      	cmp	r0, #0
    63e2:	f77e ab3e 	ble.w	4a62 <menu()+0x292>
          settings.socvolt[2] = Serial.parseInt();
    63e6:	484d      	ldr	r0, [pc, #308]	; (651c <menu()+0x1d4c>)
    63e8:	4e54      	ldr	r6, [pc, #336]	; (653c <menu()+0x1d6c>)
    63ea:	f004 f9e5 	bl	a7b8 <Stream::parseInt()>
    63ee:	6770      	str	r0, [r6, #116]	; 0x74
          incomingByte = 'b';
    63f0:	e517      	b.n	5e22 <menu()+0x1652>
    63f2:	f006 fd95 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    63f6:	2800      	cmp	r0, #0
    63f8:	f77e ab33 	ble.w	4a62 <menu()+0x292>
          settings.socvolt[1] = Serial.parseInt();
    63fc:	4847      	ldr	r0, [pc, #284]	; (651c <menu()+0x1d4c>)
    63fe:	4e4f      	ldr	r6, [pc, #316]	; (653c <menu()+0x1d6c>)
    6400:	f004 f9da 	bl	a7b8 <Stream::parseInt()>
    6404:	6730      	str	r0, [r6, #112]	; 0x70
          incomingByte = 'b';
    6406:	e50c      	b.n	5e22 <menu()+0x1652>
    6408:	f006 fd8a 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    640c:	2800      	cmp	r0, #0
    640e:	f77e ab28 	ble.w	4a62 <menu()+0x292>
          settings.socvolt[0] = Serial.parseInt();
    6412:	4842      	ldr	r0, [pc, #264]	; (651c <menu()+0x1d4c>)
    6414:	4e49      	ldr	r6, [pc, #292]	; (653c <menu()+0x1d6c>)
    6416:	f004 f9cf 	bl	a7b8 <Stream::parseInt()>
    641a:	66f0      	str	r0, [r6, #108]	; 0x6c
          incomingByte = 'b';
    641c:	e501      	b.n	5e22 <menu()+0x1652>
    641e:	f006 fd7f 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    6422:	2800      	cmp	r0, #0
    6424:	f77e ab1d 	ble.w	4a62 <menu()+0x292>
          settings.Scells  = Serial.parseInt();
    6428:	483c      	ldr	r0, [pc, #240]	; (651c <menu()+0x1d4c>)
    642a:	4e44      	ldr	r6, [pc, #272]	; (653c <menu()+0x1d6c>)
    642c:	f004 f9c4 	bl	a7b8 <Stream::parseInt()>
    6430:	65b0      	str	r0, [r6, #88]	; 0x58
          incomingByte = 'b';
    6432:	e4f6      	b.n	5e22 <menu()+0x1652>
    6434:	f006 fd74 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    6438:	2800      	cmp	r0, #0
    643a:	f77e ab12 	ble.w	4a62 <menu()+0x292>
          settings.DischVsetpoint = Serial.parseInt();
    643e:	4837      	ldr	r0, [pc, #220]	; (651c <menu()+0x1d4c>)
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    6440:	4e3e      	ldr	r6, [pc, #248]	; (653c <menu()+0x1d6c>)
          settings.DischVsetpoint = Serial.parseInt();
    6442:	f004 f9b9 	bl	a7b8 <Stream::parseInt()>
    6446:	f008 fa87 	bl	e958 <__aeabi_i2f>
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    644a:	4933      	ldr	r1, [pc, #204]	; (6518 <menu()+0x1d48>)
    644c:	f008 fb8c 	bl	eb68 <__aeabi_fdiv>
    6450:	61f0      	str	r0, [r6, #28]
          incomingByte = 'b';
    6452:	e4e6      	b.n	5e22 <menu()+0x1652>
    6454:	f006 fd64 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    6458:	2800      	cmp	r0, #0
    645a:	f77e ab02 	ble.w	4a62 <menu()+0x292>
          settings.discurrentmax = Serial.parseInt() * 10;
    645e:	482f      	ldr	r0, [pc, #188]	; (651c <menu()+0x1d4c>)
    6460:	4e36      	ldr	r6, [pc, #216]	; (653c <menu()+0x1d6c>)
    6462:	f004 f9a9 	bl	a7b8 <Stream::parseInt()>
    6466:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    646a:	0043      	lsls	r3, r0, #1
    646c:	f8a6 306a 	strh.w	r3, [r6, #106]	; 0x6a
          incomingByte = 'b';
    6470:	e4d7      	b.n	5e22 <menu()+0x1652>
    6472:	f006 fd55 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    6476:	2800      	cmp	r0, #0
    6478:	f77e aaf3 	ble.w	4a62 <menu()+0x292>
          settings.CAP = Serial.parseInt();
    647c:	4827      	ldr	r0, [pc, #156]	; (651c <menu()+0x1d4c>)
    647e:	4e2f      	ldr	r6, [pc, #188]	; (653c <menu()+0x1d6c>)
    6480:	f004 f99a 	bl	a7b8 <Stream::parseInt()>
    6484:	6630      	str	r0, [r6, #96]	; 0x60
          incomingByte = 'b';
    6486:	e4cc      	b.n	5e22 <menu()+0x1652>
    6488:	f006 fd4a 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    648c:	2800      	cmp	r0, #0
    648e:	f77e aae8 	ble.w	4a62 <menu()+0x292>
          settings.Pstrings = Serial.parseInt();
    6492:	4822      	ldr	r0, [pc, #136]	; (651c <menu()+0x1d4c>)
    6494:	4e29      	ldr	r6, [pc, #164]	; (653c <menu()+0x1d6c>)
    6496:	f004 f98f 	bl	a7b8 <Stream::parseInt()>
          menuload = 1;
    649a:	2301      	movs	r3, #1
          settings.Pstrings = Serial.parseInt();
    649c:	4601      	mov	r1, r0
          menuload = 1;
    649e:	602b      	str	r3, [r5, #0]
          bms.setPstrings(settings.Pstrings);
    64a0:	4828      	ldr	r0, [pc, #160]	; (6544 <menu()+0x1d74>)
          settings.Pstrings = Serial.parseInt();
    64a2:	65f1      	str	r1, [r6, #92]	; 0x5c
          incomingByte = 'b';
    64a4:	2362      	movs	r3, #98	; 0x62
    64a6:	603b      	str	r3, [r7, #0]
          bms.setPstrings(settings.Pstrings);
    64a8:	f7fb fee4 	bl	2274 <BMSModuleManager::setPstrings(int)>
  if (menuload == 1)
    64ac:	682b      	ldr	r3, [r5, #0]
    switch (incomingByte)
    64ae:	683c      	ldr	r4, [r7, #0]
    64b0:	f7fe bad9 	b.w	4a66 <menu()+0x296>
    64b4:	f006 fd34 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    64b8:	2800      	cmp	r0, #0
    64ba:	f77e aad2 	ble.w	4a62 <menu()+0x292>
          settings.UnderVSetpoint = Serial.parseInt();
    64be:	4817      	ldr	r0, [pc, #92]	; (651c <menu()+0x1d4c>)
          settings.UnderVSetpoint =  settings.UnderVSetpoint / 1000;
    64c0:	4e1e      	ldr	r6, [pc, #120]	; (653c <menu()+0x1d6c>)
          settings.UnderVSetpoint = Serial.parseInt();
    64c2:	f004 f979 	bl	a7b8 <Stream::parseInt()>
    64c6:	f008 fa47 	bl	e958 <__aeabi_i2f>
          settings.UnderVSetpoint =  settings.UnderVSetpoint / 1000;
    64ca:	4913      	ldr	r1, [pc, #76]	; (6518 <menu()+0x1d48>)
    64cc:	f008 fb4c 	bl	eb68 <__aeabi_fdiv>
    64d0:	6130      	str	r0, [r6, #16]
          incomingByte = 'b';
    64d2:	e4a6      	b.n	5e22 <menu()+0x1652>
    64d4:	f006 fd24 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    64d8:	2800      	cmp	r0, #0
    64da:	f77e aac2 	ble.w	4a62 <menu()+0x292>
          settings.OverVSetpoint = Serial.parseInt();
    64de:	480f      	ldr	r0, [pc, #60]	; (651c <menu()+0x1d4c>)
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    64e0:	4e16      	ldr	r6, [pc, #88]	; (653c <menu()+0x1d6c>)
          settings.OverVSetpoint = Serial.parseInt();
    64e2:	f004 f969 	bl	a7b8 <Stream::parseInt()>
    64e6:	f008 fa37 	bl	e958 <__aeabi_i2f>
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    64ea:	490b      	ldr	r1, [pc, #44]	; (6518 <menu()+0x1d48>)
    64ec:	f008 fb3c 	bl	eb68 <__aeabi_fdiv>
    64f0:	60f0      	str	r0, [r6, #12]
          incomingByte = 'b';
    64f2:	e496      	b.n	5e22 <menu()+0x1652>
    64f4:	f006 fd14 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    64f8:	2800      	cmp	r0, #0
    64fa:	f77e aab2 	ble.w	4a62 <menu()+0x292>
          settings.balanceHyst = Serial.parseInt();
    64fe:	4807      	ldr	r0, [pc, #28]	; (651c <menu()+0x1d4c>)
          settings.balanceHyst =  settings.balanceHyst / 1000;
    6500:	4e0e      	ldr	r6, [pc, #56]	; (653c <menu()+0x1d6c>)
          settings.balanceHyst = Serial.parseInt();
    6502:	f004 f959 	bl	a7b8 <Stream::parseInt()>
    6506:	f008 fa27 	bl	e958 <__aeabi_i2f>
          settings.balanceHyst =  settings.balanceHyst / 1000;
    650a:	4903      	ldr	r1, [pc, #12]	; (6518 <menu()+0x1d48>)
    650c:	f008 fb2c 	bl	eb68 <__aeabi_fdiv>
    6510:	6570      	str	r0, [r6, #84]	; 0x54
          incomingByte = 'b';
    6512:	e486      	b.n	5e22 <menu()+0x1652>
    6514:	000169d8 	.word	0x000169d8
    6518:	447a0000 	.word	0x447a0000
    651c:	1fff89f8 	.word	0x1fff89f8
    6520:	00015edc 	.word	0x00015edc
    6524:	00016af4 	.word	0x00016af4
    6528:	000169f0 	.word	0x000169f0
    652c:	00016a18 	.word	0x00016a18
    6530:	00015a34 	.word	0x00015a34
    6534:	00016a44 	.word	0x00016a44
    6538:	1fff8848 	.word	0x1fff8848
    653c:	1fffb73c 	.word	0x1fffb73c
    6540:	00015e04 	.word	0x00015e04
    6544:	1fff91ec 	.word	0x1fff91ec
    6548:	f006 fcea 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    654c:	2800      	cmp	r0, #0
    654e:	f77e aa88 	ble.w	4a62 <menu()+0x292>
          settings.balanceVoltage = Serial.parseInt();
    6552:	48c2      	ldr	r0, [pc, #776]	; (685c <menu()+0x208c>)
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    6554:	4ec2      	ldr	r6, [pc, #776]	; (6860 <menu()+0x2090>)
          settings.balanceVoltage = Serial.parseInt();
    6556:	f004 f92f 	bl	a7b8 <Stream::parseInt()>
    655a:	f008 f9fd 	bl	e958 <__aeabi_i2f>
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    655e:	49c1      	ldr	r1, [pc, #772]	; (6864 <menu()+0x2094>)
    6560:	f008 fb02 	bl	eb68 <__aeabi_fdiv>
    6564:	6530      	str	r0, [r6, #80]	; 0x50
          incomingByte = 'b';
    6566:	e45c      	b.n	5e22 <menu()+0x1652>
    6568:	f006 fcda 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    656c:	2800      	cmp	r0, #0
    656e:	f77e aa78 	ble.w	4a62 <menu()+0x292>
          settings.UnderTSetpoint = Serial.parseInt();
    6572:	48ba      	ldr	r0, [pc, #744]	; (685c <menu()+0x208c>)
    6574:	4eba      	ldr	r6, [pc, #744]	; (6860 <menu()+0x2090>)
    6576:	f004 f91f 	bl	a7b8 <Stream::parseInt()>
    657a:	f008 f9ed 	bl	e958 <__aeabi_i2f>
    657e:	6330      	str	r0, [r6, #48]	; 0x30
          incomingByte = 'b';
    6580:	e44f      	b.n	5e22 <menu()+0x1652>
    6582:	f006 fccd 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    6586:	2800      	cmp	r0, #0
    6588:	f77e aa6b 	ble.w	4a62 <menu()+0x292>
          settings.OverTSetpoint = Serial.parseInt();
    658c:	48b3      	ldr	r0, [pc, #716]	; (685c <menu()+0x208c>)
    658e:	4eb4      	ldr	r6, [pc, #720]	; (6860 <menu()+0x2090>)
    6590:	f004 f912 	bl	a7b8 <Stream::parseInt()>
    6594:	f008 f9e0 	bl	e958 <__aeabi_i2f>
    6598:	62f0      	str	r0, [r6, #44]	; 0x2c
          incomingByte = 'b';
    659a:	e442      	b.n	5e22 <menu()+0x1652>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    659c:	211e      	movs	r1, #30
    659e:	48b2      	ldr	r0, [pc, #712]	; (6868 <menu()+0x2098>)
    65a0:	f006 fcf0 	bl	cf84 <usb_serial_write>
          SERIALCONSOLE.print(settings.convlow * 0.01, 2);
    65a4:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    65a8:	49b0      	ldr	r1, [pc, #704]	; (686c <menu()+0x209c>)
    65aa:	f008 fa29 	bl	ea00 <__aeabi_fmul>
    65ae:	f008 f803 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    65b2:	2402      	movs	r4, #2
    65b4:	460b      	mov	r3, r1
    65b6:	4602      	mov	r2, r0
    65b8:	9400      	str	r4, [sp, #0]
    65ba:	48a8      	ldr	r0, [pc, #672]	; (685c <menu()+0x208c>)
    65bc:	f003 ffc0 	bl	a540 <Print::printFloat(double, unsigned char)>
    65c0:	2107      	movs	r1, #7
    65c2:	48ab      	ldr	r0, [pc, #684]	; (6870 <menu()+0x20a0>)
    65c4:	f006 fcde 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    65c8:	48a4      	ldr	r0, [pc, #656]	; (685c <menu()+0x208c>)
    65ca:	f003 ff95 	bl	a4f8 <Print::println()>
        if ( settings.cursens == Analoguedual)
    65ce:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    65d2:	2b01      	cmp	r3, #1
    65d4:	d119      	bne.n	660a <menu()+0x1e3a>
    65d6:	211f      	movs	r1, #31
    65d8:	48a6      	ldr	r0, [pc, #664]	; (6874 <menu()+0x20a4>)
    65da:	f006 fcd3 	bl	cf84 <usb_serial_write>
          SERIALCONSOLE.print(settings.convhigh * 0.01, 2);
    65de:	f8d6 0098 	ldr.w	r0, [r6, #152]	; 0x98
    65e2:	49a2      	ldr	r1, [pc, #648]	; (686c <menu()+0x209c>)
    65e4:	f008 fa0c 	bl	ea00 <__aeabi_fmul>
    65e8:	f007 ffe6 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    65ec:	9400      	str	r4, [sp, #0]
    65ee:	460b      	mov	r3, r1
    65f0:	4602      	mov	r2, r0
    65f2:	489a      	ldr	r0, [pc, #616]	; (685c <menu()+0x208c>)
    65f4:	f003 ffa4 	bl	a540 <Print::printFloat(double, unsigned char)>
    65f8:	2107      	movs	r1, #7
    65fa:	489d      	ldr	r0, [pc, #628]	; (6870 <menu()+0x20a0>)
    65fc:	f006 fcc2 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6600:	4896      	ldr	r0, [pc, #600]	; (685c <menu()+0x208c>)
    6602:	f003 ff79 	bl	a4f8 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual)
    6606:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    660a:	f023 0202 	bic.w	r2, r3, #2
    660e:	2a01      	cmp	r2, #1
    6610:	f47e ad30 	bne.w	5074 <menu()+0x8a4>
    6614:	211e      	movs	r1, #30
    6616:	4898      	ldr	r0, [pc, #608]	; (6878 <menu()+0x20a8>)
    6618:	f006 fcb4 	bl	cf84 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    661c:	f8b6 10c6 	ldrh.w	r1, [r6, #198]	; 0xc6
    6620:	488e      	ldr	r0, [pc, #568]	; (685c <menu()+0x208c>)
    6622:	f003 ff61 	bl	a4e8 <Print::print(long)>
    6626:	2103      	movs	r1, #3
    6628:	4894      	ldr	r0, [pc, #592]	; (687c <menu()+0x20ac>)
    662a:	f006 fcab 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    662e:	488b      	ldr	r0, [pc, #556]	; (685c <menu()+0x208c>)
    6630:	f003 ff62 	bl	a4f8 <Print::println()>
        if ( settings.cursens == Analoguedual)
    6634:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    6638:	2b01      	cmp	r3, #1
    663a:	f47e ad1b 	bne.w	5074 <menu()+0x8a4>
    663e:	2121      	movs	r1, #33	; 0x21
    6640:	488f      	ldr	r0, [pc, #572]	; (6880 <menu()+0x20b0>)
    6642:	f006 fc9f 	bl	cf84 <usb_serial_write>
          SERIALCONSOLE.print(settings.changecur * 0.001);
    6646:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
    664a:	f008 f985 	bl	e958 <__aeabi_i2f>
    664e:	498d      	ldr	r1, [pc, #564]	; (6884 <menu()+0x20b4>)
    6650:	f008 f9d6 	bl	ea00 <__aeabi_fmul>
    6654:	f007 ffb0 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    6658:	2402      	movs	r4, #2
    665a:	460b      	mov	r3, r1
    665c:	4602      	mov	r2, r0
    665e:	9400      	str	r4, [sp, #0]
    6660:	487e      	ldr	r0, [pc, #504]	; (685c <menu()+0x208c>)
    6662:	f003 ff6d 	bl	a540 <Print::printFloat(double, unsigned char)>
    6666:	4621      	mov	r1, r4
    6668:	4887      	ldr	r0, [pc, #540]	; (6888 <menu()+0x20b8>)
    666a:	f006 fc8b 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    666e:	487b      	ldr	r0, [pc, #492]	; (685c <menu()+0x208c>)
    6670:	f003 ff42 	bl	a4f8 <Print::println()>
        if ( settings.cursens == Canbus)
    6674:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    6678:	f7fe bcfc 	b.w	5074 <menu()+0x8a4>
          settings.ncur = Serial.parseInt();
    667c:	4877      	ldr	r0, [pc, #476]	; (685c <menu()+0x208c>)
    667e:	4e78      	ldr	r6, [pc, #480]	; (6860 <menu()+0x2090>)
    6680:	f004 f89a 	bl	a7b8 <Stream::parseInt()>
    6684:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
    6688:	f7fe bd15 	b.w	50b6 <menu()+0x8e6>
          debugdigits = Serial.parseInt();
    668c:	4873      	ldr	r0, [pc, #460]	; (685c <menu()+0x208c>)
    668e:	f004 f893 	bl	a7b8 <Stream::parseInt()>
    6692:	4b7e      	ldr	r3, [pc, #504]	; (688c <menu()+0x20bc>)
    6694:	6018      	str	r0, [r3, #0]
    6696:	f7fe bc36 	b.w	4f06 <menu()+0x736>
          delim = Serial.parseInt();
    669a:	4870      	ldr	r0, [pc, #448]	; (685c <menu()+0x208c>)
    669c:	f004 f88c 	bl	a7b8 <Stream::parseInt()>
    66a0:	4b7b      	ldr	r3, [pc, #492]	; (6890 <menu()+0x20c0>)
    66a2:	6018      	str	r0, [r3, #0]
    66a4:	f7fe bc48 	b.w	4f38 <menu()+0x768>
    66a8:	2112      	movs	r1, #18
    66aa:	487a      	ldr	r0, [pc, #488]	; (6894 <menu()+0x20c4>)
    66ac:	f006 fc6a 	bl	cf84 <usb_serial_write>
    66b0:	f7ff bac5 	b.w	5c3e <menu()+0x146e>
    66b4:	2104      	movs	r1, #4
    66b6:	4878      	ldr	r0, [pc, #480]	; (6898 <menu()+0x20c8>)
    66b8:	f006 fc64 	bl	cf84 <usb_serial_write>
    66bc:	f7ff bb21 	b.w	5d02 <menu()+0x1532>
          settings.chargereff = Serial.parseInt();
    66c0:	4866      	ldr	r0, [pc, #408]	; (685c <menu()+0x208c>)
    66c2:	4e67      	ldr	r6, [pc, #412]	; (6860 <menu()+0x2090>)
    66c4:	f004 f878 	bl	a7b8 <Stream::parseInt()>
          menuload = 1;
    66c8:	2301      	movs	r3, #1
    66ca:	602b      	str	r3, [r5, #0]
          incomingByte = 'e';
    66cc:	2365      	movs	r3, #101	; 0x65
          settings.chargereff = Serial.parseInt();
    66ce:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
          incomingByte = 'e';
    66d2:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    66d4:	f7ff b903 	b.w	58de <menu()+0x110e>
          contctrl = 0;
    66d8:	4b70      	ldr	r3, [pc, #448]	; (689c <menu()+0x20cc>)
    66da:	2600      	movs	r6, #0
          digitalWrite(OUT1, LOW);
    66dc:	200b      	movs	r0, #11
    66de:	4631      	mov	r1, r6
          contctrl = 0;
    66e0:	601e      	str	r6, [r3, #0]
          digitalWrite(OUT1, LOW);
    66e2:	f004 fddd 	bl	b2a0 <digitalWrite>
          digitalWrite(OUT2, LOW);
    66e6:	4631      	mov	r1, r6
    66e8:	200c      	movs	r0, #12
    66ea:	f004 fdd9 	bl	b2a0 <digitalWrite>
          digitalWrite(OUT3, LOW);
    66ee:	4631      	mov	r1, r6
    66f0:	2014      	movs	r0, #20
    66f2:	f004 fdd5 	bl	b2a0 <digitalWrite>
          digitalWrite(OUT4, LOW);
    66f6:	4631      	mov	r1, r6
    66f8:	2015      	movs	r0, #21
    66fa:	f004 fdd1 	bl	b2a0 <digitalWrite>
  if (menuload == 9)
    66fe:	682b      	ldr	r3, [r5, #0]
        incomingByte = 'd';
    6700:	2464      	movs	r4, #100	; 0x64
  if (menuload == 9)
    6702:	2b09      	cmp	r3, #9
        incomingByte = 'd';
    6704:	603c      	str	r4, [r7, #0]
  if (menuload == 9)
    6706:	f47e ac07 	bne.w	4f18 <menu()+0x748>
    if (settings.ExpMess > 1)
    670a:	4b55      	ldr	r3, [pc, #340]	; (6860 <menu()+0x2090>)
    670c:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
    6710:	2a01      	cmp	r2, #1
    6712:	f67e a881 	bls.w	4818 <menu()+0x48>
      settings.ExpMess = 0;
    6716:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
    switch (incomingByte)
    671a:	f7fe b87d 	b.w	4818 <menu()+0x48>
    671e:	2120      	movs	r1, #32
    6720:	485f      	ldr	r0, [pc, #380]	; (68a0 <menu()+0x20d0>)
    6722:	f006 fc2f 	bl	cf84 <usb_serial_write>
    6726:	484d      	ldr	r0, [pc, #308]	; (685c <menu()+0x208c>)
    6728:	f003 fee6 	bl	a4f8 <Print::println()>
    672c:	f7fe bc78 	b.w	5020 <menu()+0x850>
    6730:	2117      	movs	r1, #23
    6732:	485c      	ldr	r0, [pc, #368]	; (68a4 <menu()+0x20d4>)
    6734:	f006 fc26 	bl	cf84 <usb_serial_write>
    6738:	4848      	ldr	r0, [pc, #288]	; (685c <menu()+0x208c>)
    673a:	f003 fedd 	bl	a4f8 <Print::println()>
    673e:	f7fe bc6f 	b.w	5020 <menu()+0x850>
    6742:	211e      	movs	r1, #30
    6744:	4858      	ldr	r0, [pc, #352]	; (68a8 <menu()+0x20d8>)
    6746:	f006 fc1d 	bl	cf84 <usb_serial_write>
    674a:	4844      	ldr	r0, [pc, #272]	; (685c <menu()+0x208c>)
    674c:	f003 fed4 	bl	a4f8 <Print::println()>
    6750:	f7fe bc66 	b.w	5020 <menu()+0x850>
          settings.ChargerDirect = 0;
    6754:	2200      	movs	r2, #0
    6756:	f886 20cc 	strb.w	r2, [r6, #204]	; 0xcc
          incomingByte = 'e';
    675a:	2265      	movs	r2, #101	; 0x65
          menuload = 1;
    675c:	602b      	str	r3, [r5, #0]
          incomingByte = 'e';
    675e:	603a      	str	r2, [r7, #0]
    switch (incomingByte)
    6760:	f7ff b8bd 	b.w	58de <menu()+0x110e>
    6764:	4851      	ldr	r0, [pc, #324]	; (68ac <menu()+0x20dc>)
    6766:	2121      	movs	r1, #33	; 0x21
    6768:	f006 fc0c 	bl	cf84 <usb_serial_write>
          if (settings.tripcont == 0)
    676c:	f896 30d8 	ldrb.w	r3, [r6, #216]	; 0xd8
    6770:	2b00      	cmp	r3, #0
    6772:	d13e      	bne.n	67f2 <menu()+0x2022>
    6774:	484e      	ldr	r0, [pc, #312]	; (68b0 <menu()+0x20e0>)
    6776:	210a      	movs	r1, #10
    6778:	f006 fc04 	bl	cf84 <usb_serial_write>
    677c:	4837      	ldr	r0, [pc, #220]	; (685c <menu()+0x208c>)
    677e:	f003 febb 	bl	a4f8 <Print::println()>
    6782:	484c      	ldr	r0, [pc, #304]	; (68b4 <menu()+0x20e4>)
    6784:	211e      	movs	r1, #30
    6786:	f006 fbfd 	bl	cf84 <usb_serial_write>
          switch (settings.ChargerDirect)
    678a:	f896 30cc 	ldrb.w	r3, [r6, #204]	; 0xcc
    678e:	2b00      	cmp	r3, #0
    6790:	d037      	beq.n	6802 <menu()+0x2032>
    6792:	2b01      	cmp	r3, #1
    6794:	f47e af8b 	bne.w	56ae <menu()+0xede>
    6798:	210a      	movs	r1, #10
    679a:	4847      	ldr	r0, [pc, #284]	; (68b8 <menu()+0x20e8>)
    679c:	f006 fbf2 	bl	cf84 <usb_serial_write>
    67a0:	f7fe bf85 	b.w	56ae <menu()+0xede>
    67a4:	4845      	ldr	r0, [pc, #276]	; (68bc <menu()+0x20ec>)
    67a6:	2119      	movs	r1, #25
    67a8:	f006 fbec 	bl	cf84 <usb_serial_write>
          if (settings.curcan == LemCAB300)
    67ac:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    67b0:	2b01      	cmp	r3, #1
    67b2:	d02c      	beq.n	680e <menu()+0x203e>
          else  if (settings.curcan == LemCAB500)
    67b4:	2b02      	cmp	r3, #2
    67b6:	d033      	beq.n	6820 <menu()+0x2050>
          else if (settings.curcan == IsaScale)
    67b8:	2b03      	cmp	r3, #3
    67ba:	d03a      	beq.n	6832 <menu()+0x2062>
          else if (settings.curcan == VictronLynx)
    67bc:	2b04      	cmp	r3, #4
    67be:	f47e ac5c 	bne.w	507a <menu()+0x8aa>
            SERIALCONSOLE.println(" Victron Lynx VE.CAN Shunt");
    67c2:	493f      	ldr	r1, [pc, #252]	; (68c0 <menu()+0x20f0>)
    67c4:	4825      	ldr	r0, [pc, #148]	; (685c <menu()+0x208c>)
    67c6:	f7fc fae7 	bl	2d98 <Print::println(char const*) [clone .isra.0]>
    67ca:	f7fe bc56 	b.w	507a <menu()+0x8aa>
          settings.DischHys = Serial.parseInt();
    67ce:	4823      	ldr	r0, [pc, #140]	; (685c <menu()+0x208c>)
          settings.DischHys  = settings.DischHys  / 1000;
    67d0:	4e23      	ldr	r6, [pc, #140]	; (6860 <menu()+0x2090>)
          settings.DischHys = Serial.parseInt();
    67d2:	f003 fff1 	bl	a7b8 <Stream::parseInt()>
    67d6:	f008 f8bf 	bl	e958 <__aeabi_i2f>
          settings.DischHys  = settings.DischHys  / 1000;
    67da:	4922      	ldr	r1, [pc, #136]	; (6864 <menu()+0x2094>)
    67dc:	f008 f9c4 	bl	eb68 <__aeabi_fdiv>
    67e0:	6170      	str	r0, [r6, #20]
          incomingByte = 'b';
    67e2:	f7ff bb1e 	b.w	5e22 <menu()+0x1652>
    67e6:	2103      	movs	r1, #3
    67e8:	4836      	ldr	r0, [pc, #216]	; (68c4 <menu()+0x20f4>)
    67ea:	f006 fbcb 	bl	cf84 <usb_serial_write>
    67ee:	f7ff ba88 	b.w	5d02 <menu()+0x1532>
    67f2:	211c      	movs	r1, #28
    67f4:	4834      	ldr	r0, [pc, #208]	; (68c8 <menu()+0x20f8>)
    67f6:	f006 fbc5 	bl	cf84 <usb_serial_write>
    67fa:	4818      	ldr	r0, [pc, #96]	; (685c <menu()+0x208c>)
    67fc:	f003 fe7c 	bl	a4f8 <Print::println()>
    6800:	e7bf      	b.n	6782 <menu()+0x1fb2>
    6802:	210b      	movs	r1, #11
    6804:	4831      	ldr	r0, [pc, #196]	; (68cc <menu()+0x20fc>)
    6806:	f006 fbbd 	bl	cf84 <usb_serial_write>
    680a:	f7fe bf50 	b.w	56ae <menu()+0xede>
    680e:	2119      	movs	r1, #25
    6810:	482f      	ldr	r0, [pc, #188]	; (68d0 <menu()+0x2100>)
    6812:	f006 fbb7 	bl	cf84 <usb_serial_write>
    6816:	4811      	ldr	r0, [pc, #68]	; (685c <menu()+0x208c>)
    6818:	f003 fe6e 	bl	a4f8 <Print::println()>
    681c:	f7fe bc2d 	b.w	507a <menu()+0x8aa>
    6820:	2114      	movs	r1, #20
    6822:	482c      	ldr	r0, [pc, #176]	; (68d4 <menu()+0x2104>)
    6824:	f006 fbae 	bl	cf84 <usb_serial_write>
    6828:	480c      	ldr	r0, [pc, #48]	; (685c <menu()+0x208c>)
    682a:	f003 fe65 	bl	a4f8 <Print::println()>
    682e:	f7fe bc24 	b.w	507a <menu()+0x8aa>
            SERIALCONSOLE.println(" IsaScale IVT - S ");
    6832:	4929      	ldr	r1, [pc, #164]	; (68d8 <menu()+0x2108>)
    6834:	4809      	ldr	r0, [pc, #36]	; (685c <menu()+0x208c>)
    6836:	f7fc faaf 	bl	2d98 <Print::println(char const*) [clone .isra.0]>
    683a:	f7fe bc1e 	b.w	507a <menu()+0x8aa>
    683e:	4e08      	ldr	r6, [pc, #32]	; (6860 <menu()+0x2090>)
    6840:	f7ff bb3a 	b.w	5eb8 <menu()+0x16e8>
    6844:	4e06      	ldr	r6, [pc, #24]	; (6860 <menu()+0x2090>)
    6846:	f7fe bce1 	b.w	520c <menu()+0xa3c>
    684a:	4e05      	ldr	r6, [pc, #20]	; (6860 <menu()+0x2090>)
    684c:	f7ff b847 	b.w	58de <menu()+0x110e>
    6850:	4e03      	ldr	r6, [pc, #12]	; (6860 <menu()+0x2090>)
    6852:	f7fe be1f 	b.w	5494 <menu()+0xcc4>
    6856:	4e02      	ldr	r6, [pc, #8]	; (6860 <menu()+0x2090>)
    6858:	f7fe bec6 	b.w	55e8 <menu()+0xe18>
    685c:	1fff89f8 	.word	0x1fff89f8
    6860:	1fffb73c 	.word	0x1fffb73c
    6864:	447a0000 	.word	0x447a0000
    6868:	00016690 	.word	0x00016690
    686c:	3c23d70a 	.word	0x3c23d70a
    6870:	000166b0 	.word	0x000166b0
    6874:	000166b8 	.word	0x000166b8
    6878:	000166d8 	.word	0x000166d8
    687c:	000166f8 	.word	0x000166f8
    6880:	000166fc 	.word	0x000166fc
    6884:	3a83126f 	.word	0x3a83126f
    6888:	00015c18 	.word	0x00015c18
    688c:	1fff884c 	.word	0x1fff884c
    6890:	1fffb634 	.word	0x1fffb634
    6894:	00016048 	.word	0x00016048
    6898:	0001612c 	.word	0x0001612c
    689c:	1fffb618 	.word	0x1fffb618
    68a0:	000165f0 	.word	0x000165f0
    68a4:	00016614 	.word	0x00016614
    68a8:	000165d0 	.word	0x000165d0
    68ac:	000162a8 	.word	0x000162a8
    68b0:	000162cc 	.word	0x000162cc
    68b4:	000162f8 	.word	0x000162f8
    68b8:	00016324 	.word	0x00016324
    68bc:	00016720 	.word	0x00016720
    68c0:	00016784 	.word	0x00016784
    68c4:	00016134 	.word	0x00016134
    68c8:	000162d8 	.word	0x000162d8
    68cc:	00016318 	.word	0x00016318
    68d0:	0001673c 	.word	0x0001673c
    68d4:	00016758 	.word	0x00016758
    68d8:	00016770 	.word	0x00016770
        virtual int available() { return usb_serial_available(); }
    68dc:	f006 fb20 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    68e0:	2800      	cmp	r0, #0
    68e2:	f77e af12 	ble.w	570a <menu()+0xf3a>
          settings.Pretime = Serial.parseInt();
    68e6:	4810      	ldr	r0, [pc, #64]	; (6928 <menu()+0x2158>)
    68e8:	4e10      	ldr	r6, [pc, #64]	; (692c <menu()+0x215c>)
    68ea:	f003 ff65 	bl	a7b8 <Stream::parseInt()>
          menuload = 1;
    68ee:	2301      	movs	r3, #1
    68f0:	602b      	str	r3, [r5, #0]
          incomingByte = 'k';
    68f2:	236b      	movs	r3, #107	; 0x6b
          settings.Pretime = Serial.parseInt();
    68f4:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
          incomingByte = 'k';
    68f8:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    68fa:	f7fe be75 	b.w	55e8 <menu()+0xe18>
    68fe:	f006 fb0f 	bl	cf20 <usb_serial_available>
        if (Serial.available() > 0)
    6902:	2800      	cmp	r0, #0
    6904:	f77e ad09 	ble.w	531a <menu()+0xb4a>
          settings.WarnOff = Serial.parseInt();
    6908:	4807      	ldr	r0, [pc, #28]	; (6928 <menu()+0x2158>)
          settings.WarnOff = settings.WarnOff * 0.001;
    690a:	4e08      	ldr	r6, [pc, #32]	; (692c <menu()+0x215c>)
          settings.WarnOff = Serial.parseInt();
    690c:	f003 ff54 	bl	a7b8 <Stream::parseInt()>
    6910:	f008 f822 	bl	e958 <__aeabi_i2f>
          settings.WarnOff = settings.WarnOff * 0.001;
    6914:	4906      	ldr	r1, [pc, #24]	; (6930 <menu()+0x2160>)
    6916:	f008 f873 	bl	ea00 <__aeabi_fmul>
          menuload = 1;
    691a:	2301      	movs	r3, #1
    691c:	602b      	str	r3, [r5, #0]
          incomingByte = 'a';
    691e:	2361      	movs	r3, #97	; 0x61
          settings.WarnOff = settings.WarnOff * 0.001;
    6920:	62b0      	str	r0, [r6, #40]	; 0x28
          incomingByte = 'a';
    6922:	603b      	str	r3, [r7, #0]
    switch (incomingByte)
    6924:	f7fe bdb6 	b.w	5494 <menu()+0xcc4>
    6928:	1fff89f8 	.word	0x1fff89f8
    692c:	1fffb73c 	.word	0x1fffb73c
    6930:	3a83126f 	.word	0x3a83126f

00006934 <Rx309()>:
  if (SOCset == 1)
    6934:	4b12      	ldr	r3, [pc, #72]	; (6980 <Rx309()+0x4c>)
    6936:	681b      	ldr	r3, [r3, #0]
    6938:	2b01      	cmp	r3, #1
    693a:	d000      	beq.n	693e <Rx309()+0xa>
    693c:	4770      	bx	lr
{
    693e:	b410      	push	{r4}
    if (inMsg.buf[0] & 0x01)
    6940:	4a10      	ldr	r2, [pc, #64]	; (6984 <Rx309()+0x50>)
    6942:	7a12      	ldrb	r2, [r2, #8]
    6944:	f012 0201 	ands.w	r2, r2, #1
{
    6948:	b083      	sub	sp, #12
    if (inMsg.buf[0] & 0x01)
    694a:	d10c      	bne.n	6966 <Rx309()+0x32>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    694c:	490e      	ldr	r1, [pc, #56]	; (6988 <Rx309()+0x54>)
      CanOnReq = false;
    694e:	4c0f      	ldr	r4, [pc, #60]	; (698c <Rx309()+0x58>)
    6950:	6809      	ldr	r1, [r1, #0]
    6952:	9100      	str	r1, [sp, #0]
      CanOnRev = true;
    6954:	480e      	ldr	r0, [pc, #56]	; (6990 <Rx309()+0x5c>)
	return ret;
    6956:	9900      	ldr	r1, [sp, #0]
      CanOnReq = false;
    6958:	7022      	strb	r2, [r4, #0]
      CanOntimeout = millis();
    695a:	4a0e      	ldr	r2, [pc, #56]	; (6994 <Rx309()+0x60>)
      CanOnRev = true;
    695c:	7003      	strb	r3, [r0, #0]
      CanOntimeout = millis();
    695e:	6011      	str	r1, [r2, #0]
}
    6960:	b003      	add	sp, #12
    6962:	bc10      	pop	{r4}
    6964:	4770      	bx	lr
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6966:	4a08      	ldr	r2, [pc, #32]	; (6988 <Rx309()+0x54>)
      CanOnReq = true;
    6968:	4c08      	ldr	r4, [pc, #32]	; (698c <Rx309()+0x58>)
    696a:	6811      	ldr	r1, [r2, #0]
    696c:	9101      	str	r1, [sp, #4]
      CanOnRev = true;
    696e:	4808      	ldr	r0, [pc, #32]	; (6990 <Rx309()+0x5c>)
      CanOntimeout = millis();
    6970:	4a08      	ldr	r2, [pc, #32]	; (6994 <Rx309()+0x60>)
	return ret;
    6972:	9901      	ldr	r1, [sp, #4]
      CanOnReq = true;
    6974:	7023      	strb	r3, [r4, #0]
      CanOnRev = true;
    6976:	7003      	strb	r3, [r0, #0]
      CanOntimeout = millis();
    6978:	6011      	str	r1, [r2, #0]
}
    697a:	b003      	add	sp, #12
    697c:	bc10      	pop	{r4}
    697e:	4770      	bx	lr
    6980:	1fff91cc 	.word	0x1fff91cc
    6984:	1fffb640 	.word	0x1fffb640
    6988:	1fffba38 	.word	0x1fffba38
    698c:	1fff91a4 	.word	0x1fff91a4
    6990:	1fff91a5 	.word	0x1fff91a5
    6994:	1fff91a8 	.word	0x1fff91a8

00006998 <CAB300()>:
{
    6998:	b538      	push	{r3, r4, r5, lr}
    699a:	4c18      	ldr	r4, [pc, #96]	; (69fc <CAB300()+0x64>)
    699c:	4b18      	ldr	r3, [pc, #96]	; (6a00 <CAB300()+0x68>)
    699e:	6822      	ldr	r2, [r4, #0]
    69a0:	1d18      	adds	r0, r3, #4
    inbox = (inbox << 8) | inMsg.buf[i];
    69a2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for (int i = 0; i < 4; i++)
    69a6:	4298      	cmp	r0, r3
    inbox = (inbox << 8) | inMsg.buf[i];
    69a8:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  for (int i = 0; i < 4; i++)
    69ac:	d1f9      	bne.n	69a2 <CAB300()+0xa>
  if ( settings.cursens == Canbus)
    69ae:	4b15      	ldr	r3, [pc, #84]	; (6a04 <CAB300()+0x6c>)
    69b0:	4d15      	ldr	r5, [pc, #84]	; (6a08 <CAB300()+0x70>)
    69b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    69b6:	6022      	str	r2, [r4, #0]
    CANmilliamps = (0x80000000 - CANmilliamps) * -1;
    69b8:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
  if ( settings.cursens == Canbus)
    69bc:	2b02      	cmp	r3, #2
    69be:	6028      	str	r0, [r5, #0]
    69c0:	d004      	beq.n	69cc <CAB300()+0x34>
  if (candebug == 1)
    69c2:	4b12      	ldr	r3, [pc, #72]	; (6a0c <CAB300()+0x74>)
    69c4:	681b      	ldr	r3, [r3, #0]
    69c6:	2b01      	cmp	r3, #1
    69c8:	d00a      	beq.n	69e0 <CAB300()+0x48>
}
    69ca:	bd38      	pop	{r3, r4, r5, pc}
    RawCur = CANmilliamps;
    69cc:	f007 ffc4 	bl	e958 <__aeabi_i2f>
    69d0:	4c0f      	ldr	r4, [pc, #60]	; (6a10 <CAB300()+0x78>)
    69d2:	6020      	str	r0, [r4, #0]
    getcurrent();
    69d4:	f7fc feb8 	bl	3748 <getcurrent()>
  if (candebug == 1)
    69d8:	4b0c      	ldr	r3, [pc, #48]	; (6a0c <CAB300()+0x74>)
    69da:	681b      	ldr	r3, [r3, #0]
    69dc:	2b01      	cmp	r3, #1
    69de:	d1f4      	bne.n	69ca <CAB300()+0x32>
    Serial.println();
    69e0:	480c      	ldr	r0, [pc, #48]	; (6a14 <CAB300()+0x7c>)
    69e2:	f003 fd89 	bl	a4f8 <Print::println()>
    Serial.print(CANmilliamps);
    69e6:	6829      	ldr	r1, [r5, #0]
    69e8:	480a      	ldr	r0, [pc, #40]	; (6a14 <CAB300()+0x7c>)
    69ea:	f003 fd7d 	bl	a4e8 <Print::print(long)>
}
    69ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    69f2:	4809      	ldr	r0, [pc, #36]	; (6a18 <CAB300()+0x80>)
    69f4:	2103      	movs	r1, #3
    69f6:	f006 bac5 	b.w	cf84 <usb_serial_write>
    69fa:	bf00      	nop
    69fc:	1fffb650 	.word	0x1fffb650
    6a00:	1fffb647 	.word	0x1fffb647
    6a04:	1fffb73c 	.word	0x1fffb73c
    6a08:	1fff9198 	.word	0x1fff9198
    6a0c:	1fffb59c 	.word	0x1fffb59c
    6a10:	1fff91c4 	.word	0x1fff91c4
    6a14:	1fff89f8 	.word	0x1fff89f8
    6a18:	00016a70 	.word	0x00016a70

00006a1c <CAB500()>:
{
    6a1c:	b570      	push	{r4, r5, r6, lr}
    inbox = (inbox << 8) | inMsg.buf[i];
    6a1e:	4b1e      	ldr	r3, [pc, #120]	; (6a98 <CAB500()+0x7c>)
  if (candebug == 1)
    6a20:	4c1e      	ldr	r4, [pc, #120]	; (6a9c <CAB500()+0x80>)
    inbox = (inbox << 8) | inMsg.buf[i];
    6a22:	7a59      	ldrb	r1, [r3, #9]
    6a24:	7a9a      	ldrb	r2, [r3, #10]
    6a26:	7adb      	ldrb	r3, [r3, #11]
  CANmilliamps = inbox;
    6a28:	4d1d      	ldr	r5, [pc, #116]	; (6aa0 <CAB500()+0x84>)
    inbox = (inbox << 8) | inMsg.buf[i];
    6a2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6a2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (candebug == 1)
    6a32:	6822      	ldr	r2, [r4, #0]
    6a34:	491b      	ldr	r1, [pc, #108]	; (6aa4 <CAB500()+0x88>)
  CANmilliamps = inbox;
    6a36:	602b      	str	r3, [r5, #0]
  if (candebug == 1)
    6a38:	2a01      	cmp	r2, #1
    6a3a:	600b      	str	r3, [r1, #0]
    6a3c:	d00c      	beq.n	6a58 <CAB500()+0x3c>
    6a3e:	4618      	mov	r0, r3
  if ( settings.cursens == Canbus)
    6a40:	4b19      	ldr	r3, [pc, #100]	; (6aa8 <CAB500()+0x8c>)
    6a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    CANmilliamps = (0x800000 - CANmilliamps) * -1;
    6a46:	f5a0 0000 	sub.w	r0, r0, #8388608	; 0x800000
  if ( settings.cursens == Canbus)
    6a4a:	2b02      	cmp	r3, #2
    6a4c:	6028      	str	r0, [r5, #0]
    6a4e:	d01b      	beq.n	6a88 <CAB500()+0x6c>
  if (candebug == 1)
    6a50:	6823      	ldr	r3, [r4, #0]
    6a52:	2b01      	cmp	r3, #1
    6a54:	d00b      	beq.n	6a6e <CAB500()+0x52>
}
    6a56:	bd70      	pop	{r4, r5, r6, pc}
    Serial.println();
    6a58:	4814      	ldr	r0, [pc, #80]	; (6aac <CAB500()+0x90>)
    6a5a:	f003 fd4d 	bl	a4f8 <Print::println()>
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    6a5e:	6829      	ldr	r1, [r5, #0]
    6a60:	4812      	ldr	r0, [pc, #72]	; (6aac <CAB500()+0x90>)
    6a62:	2300      	movs	r3, #0
    6a64:	2210      	movs	r2, #16
    6a66:	f003 fd5f 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  if (CANmilliamps > 0x800000)
    6a6a:	6828      	ldr	r0, [r5, #0]
    6a6c:	e7e8      	b.n	6a40 <CAB500()+0x24>
    Serial.println();
    6a6e:	480f      	ldr	r0, [pc, #60]	; (6aac <CAB500()+0x90>)
    6a70:	f003 fd42 	bl	a4f8 <Print::println()>
    Serial.print(CANmilliamps);
    6a74:	6829      	ldr	r1, [r5, #0]
    6a76:	480d      	ldr	r0, [pc, #52]	; (6aac <CAB500()+0x90>)
    6a78:	f003 fd36 	bl	a4e8 <Print::print(long)>
}
    6a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a80:	480b      	ldr	r0, [pc, #44]	; (6ab0 <CAB500()+0x94>)
    6a82:	2103      	movs	r1, #3
    6a84:	f006 ba7e 	b.w	cf84 <usb_serial_write>
    RawCur = CANmilliamps;
    6a88:	f007 ff66 	bl	e958 <__aeabi_i2f>
    6a8c:	4e09      	ldr	r6, [pc, #36]	; (6ab4 <CAB500()+0x98>)
    6a8e:	6030      	str	r0, [r6, #0]
    getcurrent();
    6a90:	f7fc fe5a 	bl	3748 <getcurrent()>
    6a94:	e7dc      	b.n	6a50 <CAB500()+0x34>
    6a96:	bf00      	nop
    6a98:	1fffb640 	.word	0x1fffb640
    6a9c:	1fffb59c 	.word	0x1fffb59c
    6aa0:	1fff9198 	.word	0x1fff9198
    6aa4:	1fffb650 	.word	0x1fffb650
    6aa8:	1fffb73c 	.word	0x1fffb73c
    6aac:	1fff89f8 	.word	0x1fff89f8
    6ab0:	00016a70 	.word	0x00016a70
    6ab4:	1fff91c4 	.word	0x1fff91c4

00006ab8 <handleVictronLynx()>:
{
    6ab8:	b538      	push	{r3, r4, r5, lr}
  if (inMsg.buf[4] == 0xff && inMsg.buf[3] == 0xff) return;
    6aba:	4b17      	ldr	r3, [pc, #92]	; (6b18 <handleVictronLynx()+0x60>)
    6abc:	7b1a      	ldrb	r2, [r3, #12]
    6abe:	7adb      	ldrb	r3, [r3, #11]
    6ac0:	ea02 0103 	and.w	r1, r2, r3
    6ac4:	29ff      	cmp	r1, #255	; 0xff
    6ac6:	d012      	beq.n	6aee <handleVictronLynx()+0x36>
  current |= inMsg.buf[3];
    6ac8:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
  if (settings.cursens == Canbus)
    6acc:	4b13      	ldr	r3, [pc, #76]	; (6b1c <handleVictronLynx()+0x64>)
  CANmilliamps = current * 100;
    6ace:	4c14      	ldr	r4, [pc, #80]	; (6b20 <handleVictronLynx()+0x68>)
  if (settings.cursens == Canbus)
    6ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  CANmilliamps = current * 100;
    6ad4:	b200      	sxth	r0, r0
    6ad6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6ada:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6ade:	0080      	lsls	r0, r0, #2
  if (settings.cursens == Canbus)
    6ae0:	2b02      	cmp	r3, #2
  CANmilliamps = current * 100;
    6ae2:	6020      	str	r0, [r4, #0]
  if (settings.cursens == Canbus)
    6ae4:	d011      	beq.n	6b0a <handleVictronLynx()+0x52>
  if (candebug == 1)
    6ae6:	4b0f      	ldr	r3, [pc, #60]	; (6b24 <handleVictronLynx()+0x6c>)
    6ae8:	681b      	ldr	r3, [r3, #0]
    6aea:	2b01      	cmp	r3, #1
    6aec:	d000      	beq.n	6af0 <handleVictronLynx()+0x38>
}
    6aee:	bd38      	pop	{r3, r4, r5, pc}
    Serial.println();
    6af0:	480d      	ldr	r0, [pc, #52]	; (6b28 <handleVictronLynx()+0x70>)
    6af2:	f003 fd01 	bl	a4f8 <Print::println()>
    Serial.print(CANmilliamps);
    6af6:	6821      	ldr	r1, [r4, #0]
    6af8:	480b      	ldr	r0, [pc, #44]	; (6b28 <handleVictronLynx()+0x70>)
    6afa:	f003 fcf5 	bl	a4e8 <Print::print(long)>
}
    6afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6b02:	480a      	ldr	r0, [pc, #40]	; (6b2c <handleVictronLynx()+0x74>)
    6b04:	2103      	movs	r1, #3
    6b06:	f006 ba3d 	b.w	cf84 <usb_serial_write>
    RawCur = CANmilliamps;
    6b0a:	f007 ff25 	bl	e958 <__aeabi_i2f>
    6b0e:	4d08      	ldr	r5, [pc, #32]	; (6b30 <handleVictronLynx()+0x78>)
    6b10:	6028      	str	r0, [r5, #0]
    getcurrent();
    6b12:	f7fc fe19 	bl	3748 <getcurrent()>
    6b16:	e7e6      	b.n	6ae6 <handleVictronLynx()+0x2e>
    6b18:	1fffb640 	.word	0x1fffb640
    6b1c:	1fffb73c 	.word	0x1fffb73c
    6b20:	1fff9198 	.word	0x1fff9198
    6b24:	1fffb59c 	.word	0x1fffb59c
    6b28:	1fff89f8 	.word	0x1fff89f8
    6b2c:	00016a70 	.word	0x00016a70
    6b30:	1fff91c4 	.word	0x1fff91c4

00006b34 <canread()>:
{
    6b34:	b5f0      	push	{r4, r5, r6, r7, lr}
  Can0.read(inMsg);
    6b36:	4c74      	ldr	r4, [pc, #464]	; (6d08 <canread()+0x1d4>)
  if ( settings.cursens == Canbus)
    6b38:	4d74      	ldr	r5, [pc, #464]	; (6d0c <canread()+0x1d8>)
  Can0.read(inMsg);
    6b3a:	4875      	ldr	r0, [pc, #468]	; (6d10 <canread()+0x1dc>)
{
    6b3c:	b083      	sub	sp, #12
  Can0.read(inMsg);
    6b3e:	4621      	mov	r1, r4
    6b40:	f002 feb4 	bl	98ac <FlexCAN::read(CAN_message_t&)>
  if ( settings.cursens == Canbus)
    6b44:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    6b48:	2b02      	cmp	r3, #2
    6b4a:	d00a      	beq.n	6b62 <canread()+0x2e>
  if (inMsg.id == 0x309)
    6b4c:	6823      	ldr	r3, [r4, #0]
    6b4e:	f240 3209 	movw	r2, #777	; 0x309
    6b52:	4293      	cmp	r3, r2
    6b54:	d05f      	beq.n	6c16 <canread()+0xe2>
  if (debug == 1)
    6b56:	4b6f      	ldr	r3, [pc, #444]	; (6d14 <canread()+0x1e0>)
    6b58:	681b      	ldr	r3, [r3, #0]
    6b5a:	2b01      	cmp	r3, #1
    6b5c:	d01b      	beq.n	6b96 <canread()+0x62>
}
    6b5e:	b003      	add	sp, #12
    6b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (settings.curcan == 1)
    6b62:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      switch (inMsg.id)
    6b66:	6823      	ldr	r3, [r4, #0]
    if (settings.curcan == 1)
    6b68:	2a01      	cmp	r2, #1
    6b6a:	f000 8084 	beq.w	6c76 <canread()+0x142>
    if (settings.curcan == 2)
    6b6e:	2a02      	cmp	r2, #2
    6b70:	d076      	beq.n	6c60 <canread()+0x12c>
    if (settings.curcan == 3)
    6b72:	2a03      	cmp	r2, #3
    6b74:	d052      	beq.n	6c1c <canread()+0xe8>
    if (settings.curcan == 4)
    6b76:	2a04      	cmp	r2, #4
    6b78:	d1e9      	bne.n	6b4e <canread()+0x1a>
  if ((canId & 0x10000000) == 0x10000000)
    6b7a:	00d9      	lsls	r1, r3, #3
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0) // Check PGN and only use the first packet of each sequence
    6b7c:	4a66      	ldr	r2, [pc, #408]	; (6d18 <canread()+0x1e4>)
  if ((canId & 0x10000000) == 0x10000000)
    6b7e:	f140 8092 	bpl.w	6ca6 <canread()+0x172>
    return (canId & 0x03FFFF00) >> 8;
    6b82:	f3c3 2311 	ubfx	r3, r3, #8, #18
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0) // Check PGN and only use the first packet of each sequence
    6b86:	4293      	cmp	r3, r2
    6b88:	d1e5      	bne.n	6b56 <canread()+0x22>
    6b8a:	7a23      	ldrb	r3, [r4, #8]
    6b8c:	2b00      	cmp	r3, #0
    6b8e:	d1e2      	bne.n	6b56 <canread()+0x22>
        handleVictronLynx();
    6b90:	f7ff ff92 	bl	6ab8 <handleVictronLynx()>
    6b94:	e7da      	b.n	6b4c <canread()+0x18>
    if (candebug == 1)
    6b96:	4b61      	ldr	r3, [pc, #388]	; (6d1c <canread()+0x1e8>)
    6b98:	681b      	ldr	r3, [r3, #0]
    6b9a:	2b01      	cmp	r3, #1
    6b9c:	d1df      	bne.n	6b5e <canread()+0x2a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b9e:	4b60      	ldr	r3, [pc, #384]	; (6d20 <canread()+0x1ec>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    6ba0:	4860      	ldr	r0, [pc, #384]	; (6d24 <canread()+0x1f0>)
    6ba2:	681b      	ldr	r3, [r3, #0]
    6ba4:	9301      	str	r3, [sp, #4]
	return ret;
    6ba6:	9901      	ldr	r1, [sp, #4]
    6ba8:	2300      	movs	r3, #0
    6baa:	220a      	movs	r2, #10
    6bac:	f003 fcbc 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
      if ((inMsg.id & 0x80000000) == 0x80000000)    // Determine if ID is standard (11 bits) or extended (29 bits)
    6bb0:	6822      	ldr	r2, [r4, #0]
        sprintf(msgString, "Extended ID : 0x % .8lX  DLC : % 1d  Data : ", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    6bb2:	79e3      	ldrb	r3, [r4, #7]
        sprintf(msgString, ", 0x % .3lX, false, % 1d", inMsg.id, inMsg.len);
    6bb4:	485c      	ldr	r0, [pc, #368]	; (6d28 <canread()+0x1f4>)
      if ((inMsg.id & 0x80000000) == 0x80000000)    // Determine if ID is standard (11 bits) or extended (29 bits)
    6bb6:	2a00      	cmp	r2, #0
        sprintf(msgString, "Extended ID : 0x % .8lX  DLC : % 1d  Data : ", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    6bb8:	bfb6      	itet	lt
    6bba:	495c      	ldrlt	r1, [pc, #368]	; (6d2c <canread()+0x1f8>)
        sprintf(msgString, ", 0x % .3lX, false, % 1d", inMsg.id, inMsg.len);
    6bbc:	495c      	ldrge	r1, [pc, #368]	; (6d30 <canread()+0x1fc>)
        sprintf(msgString, "Extended ID : 0x % .8lX  DLC : % 1d  Data : ", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    6bbe:	f022 4260 	biclt.w	r2, r2, #3758096384	; 0xe0000000
        sprintf(msgString, ", 0x % .3lX, false, % 1d", inMsg.id, inMsg.len);
    6bc2:	f008 fed3 	bl	f96c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6bc6:	4858      	ldr	r0, [pc, #352]	; (6d28 <canread()+0x1f4>)
    6bc8:	f009 f8da 	bl	fd80 <strlen>
    6bcc:	4601      	mov	r1, r0
    6bce:	4856      	ldr	r0, [pc, #344]	; (6d28 <canread()+0x1f4>)
    6bd0:	f006 f9d8 	bl	cf84 <usb_serial_write>
      if ((inMsg.id & 0x40000000) == 0x40000000) {  // Determine if message is a remote request frame.
    6bd4:	6825      	ldr	r5, [r4, #0]
    6bd6:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    6bda:	d168      	bne.n	6cae <canread()+0x17a>
        for (byte i = 0; i < inMsg.len; i++) {
    6bdc:	79e3      	ldrb	r3, [r4, #7]
    6bde:	b1a3      	cbz	r3, 6c0a <canread()+0xd6>
          sprintf(msgString, ", 0x % .2X", inMsg.buf[i]);
    6be0:	4f54      	ldr	r7, [pc, #336]	; (6d34 <canread()+0x200>)
    6be2:	4e51      	ldr	r6, [pc, #324]	; (6d28 <canread()+0x1f4>)
    6be4:	462b      	mov	r3, r5
    6be6:	4423      	add	r3, r4
    6be8:	4639      	mov	r1, r7
    6bea:	7a1a      	ldrb	r2, [r3, #8]
    6bec:	4630      	mov	r0, r6
    6bee:	f008 febd 	bl	f96c <sprintf>
    6bf2:	4630      	mov	r0, r6
    6bf4:	f009 f8c4 	bl	fd80 <strlen>
    6bf8:	4601      	mov	r1, r0
    6bfa:	4630      	mov	r0, r6
    6bfc:	f006 f9c2 	bl	cf84 <usb_serial_write>
        for (byte i = 0; i < inMsg.len; i++) {
    6c00:	3501      	adds	r5, #1
    6c02:	79e2      	ldrb	r2, [r4, #7]
    6c04:	b2eb      	uxtb	r3, r5
    6c06:	429a      	cmp	r2, r3
    6c08:	d8ed      	bhi.n	6be6 <canread()+0xb2>
      Serial.println();
    6c0a:	4846      	ldr	r0, [pc, #280]	; (6d24 <canread()+0x1f0>)
}
    6c0c:	b003      	add	sp, #12
    6c0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      Serial.println();
    6c12:	f003 bc71 	b.w	a4f8 <Print::println()>
    Rx309();
    6c16:	f7ff fe8d 	bl	6934 <Rx309()>
    6c1a:	e79c      	b.n	6b56 <canread()+0x22>
      switch (inMsg.id)
    6c1c:	f240 5222 	movw	r2, #1314	; 0x522
    6c20:	4293      	cmp	r3, r2
    6c22:	d057      	beq.n	6cd4 <canread()+0x1a0>
    6c24:	d832      	bhi.n	6c8c <canread()+0x158>
    6c26:	f240 32c3 	movw	r2, #963	; 0x3c3
    6c2a:	4293      	cmp	r3, r2
    6c2c:	d05a      	beq.n	6ce4 <canread()+0x1b0>
    6c2e:	f240 5221 	movw	r2, #1313	; 0x521
    6c32:	4293      	cmp	r3, r2
    6c34:	d18b      	bne.n	6b4e <canread()+0x1a>
          CANmilliamps = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    6c36:	89a2      	ldrh	r2, [r4, #12]
    6c38:	8960      	ldrh	r0, [r4, #10]
    6c3a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    6c3e:	4a3e      	ldr	r2, [pc, #248]	; (6d38 <canread()+0x204>)
    6c40:	ba00      	rev	r0, r0
    6c42:	6010      	str	r0, [r2, #0]
          if ( settings.cursens == Canbus)
    6c44:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    6c48:	2a02      	cmp	r2, #2
    6c4a:	d180      	bne.n	6b4e <canread()+0x1a>
            RawCur = CANmilliamps;
    6c4c:	f007 fe84 	bl	e958 <__aeabi_i2f>
    6c50:	4e3a      	ldr	r6, [pc, #232]	; (6d3c <canread()+0x208>)
    6c52:	6030      	str	r0, [r6, #0]
            getcurrent();
    6c54:	f7fc fd78 	bl	3748 <getcurrent()>
    if (settings.curcan == 4)
    6c58:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0) // Check PGN and only use the first packet of each sequence
    6c5c:	6823      	ldr	r3, [r4, #0]
    6c5e:	e78a      	b.n	6b76 <canread()+0x42>
      switch (inMsg.id)
    6c60:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
    6c64:	2a02      	cmp	r2, #2
    6c66:	f63f af72 	bhi.w	6b4e <canread()+0x1a>
          CAB500();
    6c6a:	f7ff fed7 	bl	6a1c <CAB500()>
    if (settings.curcan == 3)
    6c6e:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      switch (inMsg.id)
    6c72:	6823      	ldr	r3, [r4, #0]
          break;
    6c74:	e77d      	b.n	6b72 <canread()+0x3e>
      switch (inMsg.id)
    6c76:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
    6c7a:	2a02      	cmp	r2, #2
    6c7c:	f63f af67 	bhi.w	6b4e <canread()+0x1a>
          CAB300();
    6c80:	f7ff fe8a 	bl	6998 <CAB300()>
    if (settings.curcan == 2)
    6c84:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
      switch (inMsg.id)
    6c88:	6823      	ldr	r3, [r4, #0]
          break;
    6c8a:	e770      	b.n	6b6e <canread()+0x3a>
      switch (inMsg.id)
    6c8c:	f240 5223 	movw	r2, #1315	; 0x523
    6c90:	4293      	cmp	r3, r2
    6c92:	f47f af5c 	bne.w	6b4e <canread()+0x1a>
          voltage2 = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    6c96:	8963      	ldrh	r3, [r4, #10]
    6c98:	89a1      	ldrh	r1, [r4, #12]
    6c9a:	4a29      	ldr	r2, [pc, #164]	; (6d40 <canread()+0x20c>)
    6c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6ca0:	ba1b      	rev	r3, r3
    6ca2:	6013      	str	r3, [r2, #0]
          break;
    6ca4:	e757      	b.n	6b56 <canread()+0x22>
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0) // Check PGN and only use the first packet of each sequence
    6ca6:	4293      	cmp	r3, r2
    6ca8:	f47f af51 	bne.w	6b4e <canread()+0x1a>
    6cac:	e76d      	b.n	6b8a <canread()+0x56>
        sprintf(msgString, " REMOTE REQUEST FRAME");
    6cae:	4d25      	ldr	r5, [pc, #148]	; (6d44 <canread()+0x210>)
    6cb0:	4c1d      	ldr	r4, [pc, #116]	; (6d28 <canread()+0x1f4>)
    6cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6cb6:	e895 0003 	ldmia.w	r5, {r0, r1}
    6cba:	f844 0b04 	str.w	r0, [r4], #4
    6cbe:	4620      	mov	r0, r4
    6cc0:	f820 1914 	strh.w	r1, [r0], #-20
    6cc4:	f009 f85c 	bl	fd80 <strlen>
    6cc8:	4601      	mov	r1, r0
    6cca:	f1a4 0014 	sub.w	r0, r4, #20
    6cce:	f006 f959 	bl	cf84 <usb_serial_write>
    6cd2:	e79a      	b.n	6c0a <canread()+0xd6>
          voltage1 = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    6cd4:	8963      	ldrh	r3, [r4, #10]
    6cd6:	89a1      	ldrh	r1, [r4, #12]
    6cd8:	4a1b      	ldr	r2, [pc, #108]	; (6d48 <canread()+0x214>)
    6cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6cde:	ba1b      	rev	r3, r3
    6ce0:	6013      	str	r3, [r2, #0]
          break;
    6ce2:	e738      	b.n	6b56 <canread()+0x22>
          CANmilliamps = inMsg.buf[5] + (inMsg.buf[4] << 8) + (inMsg.buf[3] << 16) + (inMsg.buf[2] << 24);
    6ce4:	7b22      	ldrb	r2, [r4, #12]
    6ce6:	7b60      	ldrb	r0, [r4, #13]
    6ce8:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    6cec:	7ae2      	ldrb	r2, [r4, #11]
    6cee:	eb00 4002 	add.w	r0, r0, r2, lsl #16
    6cf2:	7aa2      	ldrb	r2, [r4, #10]
    6cf4:	eb00 6002 	add.w	r0, r0, r2, lsl #24
    6cf8:	4a0f      	ldr	r2, [pc, #60]	; (6d38 <canread()+0x204>)
    6cfa:	6010      	str	r0, [r2, #0]
          if ( settings.cursens == Canbus)
    6cfc:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    6d00:	2a02      	cmp	r2, #2
    6d02:	f47f af24 	bne.w	6b4e <canread()+0x1a>
    6d06:	e7a1      	b.n	6c4c <canread()+0x118>
    6d08:	1fffb640 	.word	0x1fffb640
    6d0c:	1fffb73c 	.word	0x1fffb73c
    6d10:	1fffb844 	.word	0x1fffb844
    6d14:	1fff8848 	.word	0x1fff8848
    6d18:	0001f214 	.word	0x0001f214
    6d1c:	1fffb59c 	.word	0x1fffb59c
    6d20:	1fffba38 	.word	0x1fffba38
    6d24:	1fff89f8 	.word	0x1fff89f8
    6d28:	1fffb6a4 	.word	0x1fffb6a4
    6d2c:	00016a74 	.word	0x00016a74
    6d30:	00016aa4 	.word	0x00016aa4
    6d34:	00016ad8 	.word	0x00016ad8
    6d38:	1fff9198 	.word	0x1fff9198
    6d3c:	1fff91c4 	.word	0x1fff91c4
    6d40:	1fffb838 	.word	0x1fffb838
    6d44:	00016ac0 	.word	0x00016ac0
    6d48:	1fffb834 	.word	0x1fffb834

00006d4c <currentlimit()>:
{
    6d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (bmsstatus == Error)
    6d50:	4b97      	ldr	r3, [pc, #604]	; (6fb0 <currentlimit()+0x264>)
    6d52:	781b      	ldrb	r3, [r3, #0]
    6d54:	2b05      	cmp	r3, #5
    6d56:	d067      	beq.n	6e28 <currentlimit()+0xdc>
    if (chargecurrentlimit == false)
    6d58:	4f96      	ldr	r7, [pc, #600]	; (6fb4 <currentlimit()+0x268>)
    discurrent = settings.discurrentmax;
    6d5a:	4c97      	ldr	r4, [pc, #604]	; (6fb8 <currentlimit()+0x26c>)
    6d5c:	4e97      	ldr	r6, [pc, #604]	; (6fbc <currentlimit()+0x270>)
    if (chargecurrentlimit == false)
    6d5e:	783b      	ldrb	r3, [r7, #0]
    discurrent = settings.discurrentmax;
    6d60:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
    6d64:	8032      	strh	r2, [r6, #0]
    if (chargecurrentlimit == false)
    6d66:	2b00      	cmp	r3, #0
    6d68:	d05b      	beq.n	6e22 <currentlimit()+0xd6>
      chargecurrent = settings.chargecurrent2max;
    6d6a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    6d6e:	4d94      	ldr	r5, [pc, #592]	; (6fc0 <currentlimit()+0x274>)
    if (bms.getLowTemperature() < settings.UnderTSetpoint)
    6d70:	4894      	ldr	r0, [pc, #592]	; (6fc4 <currentlimit()+0x278>)
    6d72:	802b      	strh	r3, [r5, #0]
    6d74:	f7fb fafe 	bl	2374 <BMSModuleManager::getLowTemperature()>
    6d78:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6d7a:	f007 ffdf 	bl	ed3c <__aeabi_fcmplt>
    6d7e:	b108      	cbz	r0, 6d84 <currentlimit()+0x38>
      chargecurrent = 0;
    6d80:	2300      	movs	r3, #0
    6d82:	802b      	strh	r3, [r5, #0]
    if (bms.getHighTemperature() > settings.OverTSetpoint)
    6d84:	488f      	ldr	r0, [pc, #572]	; (6fc4 <currentlimit()+0x278>)
    6d86:	f7fb faf3 	bl	2370 <BMSModuleManager::getHighTemperature()>
    6d8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    6d8c:	f007 fff4 	bl	ed78 <__aeabi_fcmpgt>
    6d90:	b110      	cbz	r0, 6d98 <currentlimit()+0x4c>
      discurrent = 0;
    6d92:	2300      	movs	r3, #0
    6d94:	8033      	strh	r3, [r6, #0]
      chargecurrent = 0;
    6d96:	802b      	strh	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint)
    6d98:	488a      	ldr	r0, [pc, #552]	; (6fc4 <currentlimit()+0x278>)
    6d9a:	f7fb fa67 	bl	226c <BMSModuleManager::getHighCellVolt()>
    6d9e:	68e1      	ldr	r1, [r4, #12]
    6da0:	f007 ffea 	bl	ed78 <__aeabi_fcmpgt>
    6da4:	b108      	cbz	r0, 6daa <currentlimit()+0x5e>
      chargecurrent = 0;
    6da6:	2300      	movs	r3, #0
    6da8:	802b      	strh	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint)
    6daa:	4886      	ldr	r0, [pc, #536]	; (6fc4 <currentlimit()+0x278>)
    6dac:	f7fb fa5e 	bl	226c <BMSModuleManager::getHighCellVolt()>
    6db0:	68e1      	ldr	r1, [r4, #12]
    6db2:	f007 ffe1 	bl	ed78 <__aeabi_fcmpgt>
    6db6:	b108      	cbz	r0, 6dbc <currentlimit()+0x70>
      chargecurrent = 0;
    6db8:	2300      	movs	r3, #0
    6dba:	802b      	strh	r3, [r5, #0]
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint)
    6dbc:	4881      	ldr	r0, [pc, #516]	; (6fc4 <currentlimit()+0x278>)
    6dbe:	f7fb fa4d 	bl	225c <BMSModuleManager::getLowCellVolt()>
    6dc2:	6921      	ldr	r1, [r4, #16]
    6dc4:	f007 ffba 	bl	ed3c <__aeabi_fcmplt>
    6dc8:	2800      	cmp	r0, #0
    6dca:	d06b      	beq.n	6ea4 <currentlimit()+0x158>
      discurrent = 0;
    6dcc:	2300      	movs	r3, #0
    6dce:	8033      	strh	r3, [r6, #0]
    if (chargecurrent > 0)
    6dd0:	882b      	ldrh	r3, [r5, #0]
    6dd2:	b303      	cbz	r3, 6e16 <currentlimit()+0xca>
      if (chargecurrentlimit == false)
    6dd4:	783b      	ldrb	r3, [r7, #0]
        if (bms.getLowTemperature() < settings.ChargeTSetpoint)
    6dd6:	487b      	ldr	r0, [pc, #492]	; (6fc4 <currentlimit()+0x278>)
      if (chargecurrentlimit == false)
    6dd8:	2b00      	cmp	r3, #0
    6dda:	f040 80bb 	bne.w	6f54 <currentlimit()+0x208>
        if (bms.getLowTemperature() < settings.ChargeTSetpoint)
    6dde:	f7fb fac9 	bl	2374 <BMSModuleManager::getLowTemperature()>
    6de2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6de4:	f007 ffaa 	bl	ed3c <__aeabi_fcmplt>
    6de8:	2800      	cmp	r0, #0
    6dea:	f040 81bd 	bne.w	7168 <currentlimit()+0x41c>
        if (storagemode == 1)
    6dee:	4b76      	ldr	r3, [pc, #472]	; (6fc8 <currentlimit()+0x27c>)
          if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys))
    6df0:	4874      	ldr	r0, [pc, #464]	; (6fc4 <currentlimit()+0x278>)
        if (storagemode == 1)
    6df2:	681b      	ldr	r3, [r3, #0]
    6df4:	2b01      	cmp	r3, #1
    6df6:	f000 8141 	beq.w	707c <currentlimit()+0x330>
          if (bms.getHighCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys))
    6dfa:	f7fb fa37 	bl	226c <BMSModuleManager::getHighCellVolt()>
    6dfe:	6a21      	ldr	r1, [r4, #32]
    6e00:	4606      	mov	r6, r0
    6e02:	69a0      	ldr	r0, [r4, #24]
    6e04:	f007 fcf2 	bl	e7ec <__aeabi_fsub>
    6e08:	4601      	mov	r1, r0
    6e0a:	4630      	mov	r0, r6
    6e0c:	f007 ffb4 	bl	ed78 <__aeabi_fcmpgt>
    6e10:	2800      	cmp	r0, #0
    6e12:	f040 81d9 	bne.w	71c8 <currentlimit()+0x47c>
  if (accurlim > 0)
    6e16:	4a6d      	ldr	r2, [pc, #436]	; (6fcc <currentlimit()+0x280>)
    6e18:	8813      	ldrh	r3, [r2, #0]
    6e1a:	b29b      	uxth	r3, r3
    6e1c:	b973      	cbnz	r3, 6e3c <currentlimit()+0xf0>
}
    6e1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      chargecurrent = settings.chargecurrentmax;
    6e22:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    6e26:	e7a2      	b.n	6d6e <currentlimit()+0x22>
    discurrent = 0;
    6e28:	4a64      	ldr	r2, [pc, #400]	; (6fbc <currentlimit()+0x270>)
    chargecurrent = 0;
    6e2a:	4d65      	ldr	r5, [pc, #404]	; (6fc0 <currentlimit()+0x274>)
    discurrent = 0;
    6e2c:	2300      	movs	r3, #0
    6e2e:	8013      	strh	r3, [r2, #0]
  if (accurlim > 0)
    6e30:	4a66      	ldr	r2, [pc, #408]	; (6fcc <currentlimit()+0x280>)
    chargecurrent = 0;
    6e32:	802b      	strh	r3, [r5, #0]
  if (accurlim > 0)
    6e34:	8813      	ldrh	r3, [r2, #0]
    6e36:	b29b      	uxth	r3, r3
    6e38:	2b00      	cmp	r3, #0
    6e3a:	d0f0      	beq.n	6e1e <currentlimit()+0xd2>
    chargerpower = accurlim * settings.chargerACv * settings.chargereff * 0.01;
    6e3c:	4e5e      	ldr	r6, [pc, #376]	; (6fb8 <currentlimit()+0x26c>)
    6e3e:	8813      	ldrh	r3, [r2, #0]
    6e40:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    6e44:	f8d6 00dc 	ldr.w	r0, [r6, #220]	; 0xdc
    6e48:	b29b      	uxth	r3, r3
    6e4a:	fb02 f303 	mul.w	r3, r2, r3
    6e4e:	fb03 f000 	mul.w	r0, r3, r0
    6e52:	f007 fd81 	bl	e958 <__aeabi_i2f>
    6e56:	495e      	ldr	r1, [pc, #376]	; (6fd0 <currentlimit()+0x284>)
    6e58:	f007 fdd2 	bl	ea00 <__aeabi_fmul>
    6e5c:	f007 ffd2 	bl	ee04 <__aeabi_f2uiz>
    6e60:	4b5c      	ldr	r3, [pc, #368]	; (6fd4 <currentlimit()+0x288>)
    6e62:	b284      	uxth	r4, r0
    tempchargecurrent = (chargerpower * 10) / (bms.getAvgCellVolt() * settings.Scells);
    6e64:	4857      	ldr	r0, [pc, #348]	; (6fc4 <currentlimit()+0x278>)
    chargerpower = accurlim * settings.chargerACv * settings.chargereff * 0.01;
    6e66:	801c      	strh	r4, [r3, #0]
    tempchargecurrent = (chargerpower * 10) / (bms.getAvgCellVolt() * settings.Scells);
    6e68:	f7fb fa86 	bl	2378 <BMSModuleManager::getAvgCellVolt()>
    6e6c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    6e70:	4607      	mov	r7, r0
    6e72:	0060      	lsls	r0, r4, #1
    6e74:	f007 fd70 	bl	e958 <__aeabi_i2f>
    6e78:	4604      	mov	r4, r0
    6e7a:	6db0      	ldr	r0, [r6, #88]	; 0x58
    6e7c:	f007 fd6c 	bl	e958 <__aeabi_i2f>
    6e80:	4639      	mov	r1, r7
    6e82:	f007 fdbd 	bl	ea00 <__aeabi_fmul>
    6e86:	4601      	mov	r1, r0
    6e88:	4620      	mov	r0, r4
    6e8a:	f007 fe6d 	bl	eb68 <__aeabi_fdiv>
    6e8e:	f007 ffb9 	bl	ee04 <__aeabi_f2uiz>
    if ( chargecurrent > tempchargecurrent)
    6e92:	882b      	ldrh	r3, [r5, #0]
    tempchargecurrent = (chargerpower * 10) / (bms.getAvgCellVolt() * settings.Scells);
    6e94:	4a50      	ldr	r2, [pc, #320]	; (6fd8 <currentlimit()+0x28c>)
    6e96:	b280      	uxth	r0, r0
    if ( chargecurrent > tempchargecurrent)
    6e98:	4283      	cmp	r3, r0
    tempchargecurrent = (chargerpower * 10) / (bms.getAvgCellVolt() * settings.Scells);
    6e9a:	8010      	strh	r0, [r2, #0]
      chargecurrent = tempchargecurrent;
    6e9c:	bf88      	it	hi
    6e9e:	8028      	strhhi	r0, [r5, #0]
}
    6ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint)
    6ea4:	4847      	ldr	r0, [pc, #284]	; (6fc4 <currentlimit()+0x278>)
    6ea6:	f7fb f9d9 	bl	225c <BMSModuleManager::getLowCellVolt()>
    6eaa:	69e1      	ldr	r1, [r4, #28]
    6eac:	f007 ff46 	bl	ed3c <__aeabi_fcmplt>
    6eb0:	2800      	cmp	r0, #0
    6eb2:	d18b      	bne.n	6dcc <currentlimit()+0x80>
    if (discurrent > 0)
    6eb4:	8833      	ldrh	r3, [r6, #0]
    6eb6:	2b00      	cmp	r3, #0
    6eb8:	d08a      	beq.n	6dd0 <currentlimit()+0x84>
      if (bms.getHighTemperature() > settings.DisTSetpoint)
    6eba:	4842      	ldr	r0, [pc, #264]	; (6fc4 <currentlimit()+0x278>)
    6ebc:	f7fb fa58 	bl	2370 <BMSModuleManager::getHighTemperature()>
    6ec0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    6ec2:	f007 ff59 	bl	ed78 <__aeabi_fcmpgt>
    6ec6:	2800      	cmp	r0, #0
    6ec8:	f040 8088 	bne.w	6fdc <currentlimit()+0x290>
      if (bms.getLowCellVolt() < (settings.DischVsetpoint + settings.DisTaper))
    6ecc:	483d      	ldr	r0, [pc, #244]	; (6fc4 <currentlimit()+0x278>)
    6ece:	f7fb f9c5 	bl	225c <BMSModuleManager::getLowCellVolt()>
    6ed2:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
    6ed6:	4680      	mov	r8, r0
    6ed8:	69e0      	ldr	r0, [r4, #28]
    6eda:	f007 fc89 	bl	e7f0 <__addsf3>
    6ede:	4601      	mov	r1, r0
    6ee0:	4640      	mov	r0, r8
    6ee2:	f007 ff2b 	bl	ed3c <__aeabi_fcmplt>
    6ee6:	2800      	cmp	r0, #0
    6ee8:	f43f af72 	beq.w	6dd0 <currentlimit()+0x84>
        discurrent = discurrent - map(bms.getLowCellVolt(), settings.DischVsetpoint, (settings.DischVsetpoint + settings.DisTaper), settings.discurrentmax, 0);
    6eec:	8830      	ldrh	r0, [r6, #0]
    6eee:	f007 fd33 	bl	e958 <__aeabi_i2f>
    6ef2:	4681      	mov	r9, r0
    6ef4:	4833      	ldr	r0, [pc, #204]	; (6fc4 <currentlimit()+0x278>)
    6ef6:	f7fb f9b1 	bl	225c <BMSModuleManager::getLowCellVolt()>
    6efa:	4682      	mov	sl, r0
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    6efc:	f8b4 006a 	ldrh.w	r0, [r4, #106]	; 0x6a
    6f00:	f8d4 b01c 	ldr.w	fp, [r4, #28]
    6f04:	f007 fd24 	bl	e950 <__aeabi_ui2f>
    6f08:	4659      	mov	r1, fp
    6f0a:	4680      	mov	r8, r0
    6f0c:	4650      	mov	r0, sl
    6f0e:	f007 fc6d 	bl	e7ec <__aeabi_fsub>
    6f12:	4641      	mov	r1, r8
    6f14:	4682      	mov	sl, r0
    6f16:	2000      	movs	r0, #0
    6f18:	f007 fc68 	bl	e7ec <__aeabi_fsub>
    6f1c:	4601      	mov	r1, r0
    6f1e:	4650      	mov	r0, sl
    6f20:	f007 fd6e 	bl	ea00 <__aeabi_fmul>
    6f24:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
    6f28:	4682      	mov	sl, r0
    6f2a:	4658      	mov	r0, fp
    6f2c:	f007 fc60 	bl	e7f0 <__addsf3>
    6f30:	4659      	mov	r1, fp
    6f32:	f007 fc5b 	bl	e7ec <__aeabi_fsub>
    6f36:	4601      	mov	r1, r0
    6f38:	4650      	mov	r0, sl
    6f3a:	f007 fe15 	bl	eb68 <__aeabi_fdiv>
    6f3e:	4641      	mov	r1, r8
    6f40:	f007 fc56 	bl	e7f0 <__addsf3>
    6f44:	4601      	mov	r1, r0
    6f46:	4648      	mov	r0, r9
    6f48:	f007 fc50 	bl	e7ec <__aeabi_fsub>
    6f4c:	f007 ff5a 	bl	ee04 <__aeabi_f2uiz>
    6f50:	8030      	strh	r0, [r6, #0]
    6f52:	e73d      	b.n	6dd0 <currentlimit()+0x84>
        if (bms.getLowTemperature() < settings.ChargeTSetpoint)
    6f54:	f7fb fa0e 	bl	2374 <BMSModuleManager::getLowTemperature()>
    6f58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6f5a:	f007 feef 	bl	ed3c <__aeabi_fcmplt>
    6f5e:	2800      	cmp	r0, #0
    6f60:	f040 80d2 	bne.w	7108 <currentlimit()+0x3bc>
        if (storagemode == 1)
    6f64:	4b18      	ldr	r3, [pc, #96]	; (6fc8 <currentlimit()+0x27c>)
          if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys))
    6f66:	4817      	ldr	r0, [pc, #92]	; (6fc4 <currentlimit()+0x278>)
        if (storagemode == 1)
    6f68:	681b      	ldr	r3, [r3, #0]
    6f6a:	2b01      	cmp	r3, #1
    6f6c:	d061      	beq.n	7032 <currentlimit()+0x2e6>
          if (bms.getHighCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys))
    6f6e:	f7fb f97d 	bl	226c <BMSModuleManager::getHighCellVolt()>
    6f72:	6a21      	ldr	r1, [r4, #32]
    6f74:	4606      	mov	r6, r0
    6f76:	69a0      	ldr	r0, [r4, #24]
    6f78:	f007 fc38 	bl	e7ec <__aeabi_fsub>
    6f7c:	4601      	mov	r1, r0
    6f7e:	4630      	mov	r0, r6
    6f80:	f007 fefa 	bl	ed78 <__aeabi_fcmpgt>
    6f84:	2800      	cmp	r0, #0
    6f86:	f43f af46 	beq.w	6e16 <currentlimit()+0xca>
            chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, 0, (settings.chargecurrent2max - settings.chargecurrentend));
    6f8a:	8828      	ldrh	r0, [r5, #0]
    6f8c:	f007 fce4 	bl	e958 <__aeabi_i2f>
    6f90:	4607      	mov	r7, r0
    6f92:	480c      	ldr	r0, [pc, #48]	; (6fc4 <currentlimit()+0x278>)
    6f94:	f7fb f96a 	bl	226c <BMSModuleManager::getHighCellVolt()>
    6f98:	f8d4 9018 	ldr.w	r9, [r4, #24]
    6f9c:	6a21      	ldr	r1, [r4, #32]
    6f9e:	4680      	mov	r8, r0
    6fa0:	4648      	mov	r0, r9
    6fa2:	f007 fc23 	bl	e7ec <__aeabi_fsub>
    6fa6:	4606      	mov	r6, r0
    6fa8:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
    6fac:	e11d      	b.n	71ea <currentlimit()+0x49e>
    6fae:	bf00      	nop
    6fb0:	1fffb598 	.word	0x1fffb598
    6fb4:	1fffb5a6 	.word	0x1fffb5a6
    6fb8:	1fffb73c 	.word	0x1fffb73c
    6fbc:	1fffb638 	.word	0x1fffb638
    6fc0:	1fffb5a4 	.word	0x1fffb5a4
    6fc4:	1fff91ec 	.word	0x1fff91ec
    6fc8:	1fffb820 	.word	0x1fffb820
    6fcc:	1fff91d8 	.word	0x1fff91d8
    6fd0:	3c23d70a 	.word	0x3c23d70a
    6fd4:	1fffb5b0 	.word	0x1fffb5b0
    6fd8:	1fffb824 	.word	0x1fffb824
        discurrent = discurrent - map(bms.getHighTemperature(), settings.DisTSetpoint, settings.OverTSetpoint, 0, settings.discurrentmax);
    6fdc:	8830      	ldrh	r0, [r6, #0]
    6fde:	f007 fcbb 	bl	e958 <__aeabi_i2f>
    6fe2:	4680      	mov	r8, r0
    6fe4:	4892      	ldr	r0, [pc, #584]	; (7230 <currentlimit()+0x4e4>)
    6fe6:	f7fb f9c3 	bl	2370 <BMSModuleManager::getHighTemperature()>
    6fea:	4683      	mov	fp, r0
    6fec:	f8b4 006a 	ldrh.w	r0, [r4, #106]	; 0x6a
    6ff0:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
    6ff4:	f007 fcac 	bl	e950 <__aeabi_ui2f>
    6ff8:	4651      	mov	r1, sl
    6ffa:	4681      	mov	r9, r0
    6ffc:	4658      	mov	r0, fp
    6ffe:	f007 fbf5 	bl	e7ec <__aeabi_fsub>
    7002:	4601      	mov	r1, r0
    7004:	4648      	mov	r0, r9
    7006:	f007 fcfb 	bl	ea00 <__aeabi_fmul>
    700a:	4651      	mov	r1, sl
    700c:	4681      	mov	r9, r0
    700e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7010:	f007 fbec 	bl	e7ec <__aeabi_fsub>
    7014:	4601      	mov	r1, r0
    7016:	4648      	mov	r0, r9
    7018:	f007 fda6 	bl	eb68 <__aeabi_fdiv>
    701c:	2100      	movs	r1, #0
    701e:	f007 fbe7 	bl	e7f0 <__addsf3>
    7022:	4601      	mov	r1, r0
    7024:	4640      	mov	r0, r8
    7026:	f007 fbe1 	bl	e7ec <__aeabi_fsub>
    702a:	f007 feeb 	bl	ee04 <__aeabi_f2uiz>
    702e:	8030      	strh	r0, [r6, #0]
    7030:	e74c      	b.n	6ecc <currentlimit()+0x180>
          if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys))
    7032:	f7fb f91b 	bl	226c <BMSModuleManager::getHighCellVolt()>
    7036:	6a21      	ldr	r1, [r4, #32]
    7038:	4606      	mov	r6, r0
    703a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    703c:	f007 fbd6 	bl	e7ec <__aeabi_fsub>
    7040:	4601      	mov	r1, r0
    7042:	4630      	mov	r0, r6
    7044:	f007 fe98 	bl	ed78 <__aeabi_fcmpgt>
    7048:	2800      	cmp	r0, #0
    704a:	f43f aee4 	beq.w	6e16 <currentlimit()+0xca>
            chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrent2max);
    704e:	8828      	ldrh	r0, [r5, #0]
    7050:	f007 fc82 	bl	e958 <__aeabi_i2f>
    7054:	4680      	mov	r8, r0
    7056:	4876      	ldr	r0, [pc, #472]	; (7230 <currentlimit()+0x4e4>)
    7058:	f7fb f908 	bl	226c <BMSModuleManager::getHighCellVolt()>
    705c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    7060:	6a21      	ldr	r1, [r4, #32]
    7062:	4682      	mov	sl, r0
    7064:	4648      	mov	r0, r9
    7066:	f007 fbc1 	bl	e7ec <__aeabi_fsub>
    706a:	4607      	mov	r7, r0
    706c:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    7070:	f007 fc6e 	bl	e950 <__aeabi_ui2f>
    7074:	4606      	mov	r6, r0
    7076:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
    707a:	e023      	b.n	70c4 <currentlimit()+0x378>
          if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys))
    707c:	f7fb f8f6 	bl	226c <BMSModuleManager::getHighCellVolt()>
    7080:	6a21      	ldr	r1, [r4, #32]
    7082:	4606      	mov	r6, r0
    7084:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7086:	f007 fbb1 	bl	e7ec <__aeabi_fsub>
    708a:	4601      	mov	r1, r0
    708c:	4630      	mov	r0, r6
    708e:	f007 fe73 	bl	ed78 <__aeabi_fcmpgt>
    7092:	2800      	cmp	r0, #0
    7094:	f43f aebf 	beq.w	6e16 <currentlimit()+0xca>
            chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrentmax);
    7098:	8828      	ldrh	r0, [r5, #0]
    709a:	f007 fc5d 	bl	e958 <__aeabi_i2f>
    709e:	4680      	mov	r8, r0
    70a0:	4863      	ldr	r0, [pc, #396]	; (7230 <currentlimit()+0x4e4>)
    70a2:	f7fb f8e3 	bl	226c <BMSModuleManager::getHighCellVolt()>
    70a6:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    70aa:	6a21      	ldr	r1, [r4, #32]
    70ac:	4682      	mov	sl, r0
    70ae:	4648      	mov	r0, r9
    70b0:	f007 fb9c 	bl	e7ec <__aeabi_fsub>
    70b4:	4607      	mov	r7, r0
    70b6:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    70ba:	f007 fc49 	bl	e950 <__aeabi_ui2f>
    70be:	4606      	mov	r6, r0
    70c0:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
    70c4:	f007 fc44 	bl	e950 <__aeabi_ui2f>
    70c8:	4631      	mov	r1, r6
    70ca:	f007 fb8f 	bl	e7ec <__aeabi_fsub>
    70ce:	4639      	mov	r1, r7
    70d0:	4604      	mov	r4, r0
    70d2:	4650      	mov	r0, sl
    70d4:	f007 fb8a 	bl	e7ec <__aeabi_fsub>
    70d8:	4601      	mov	r1, r0
    70da:	4620      	mov	r0, r4
    70dc:	f007 fc90 	bl	ea00 <__aeabi_fmul>
    70e0:	4639      	mov	r1, r7
    70e2:	4604      	mov	r4, r0
    70e4:	4648      	mov	r0, r9
    70e6:	f007 fb81 	bl	e7ec <__aeabi_fsub>
    70ea:	4601      	mov	r1, r0
    70ec:	4620      	mov	r0, r4
    70ee:	f007 fd3b 	bl	eb68 <__aeabi_fdiv>
    70f2:	4631      	mov	r1, r6
    70f4:	f007 fb7c 	bl	e7f0 <__addsf3>
    70f8:	4601      	mov	r1, r0
            chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrent2max);
    70fa:	4640      	mov	r0, r8
    70fc:	f007 fb76 	bl	e7ec <__aeabi_fsub>
    7100:	f007 fe80 	bl	ee04 <__aeabi_f2uiz>
    7104:	8028      	strh	r0, [r5, #0]
    7106:	e686      	b.n	6e16 <currentlimit()+0xca>
          chargecurrent = chargecurrent - map(bms.getLowTemperature(), settings.UnderTSetpoint, settings.ChargeTSetpoint, settings.chargecurrent2max, 0);
    7108:	8828      	ldrh	r0, [r5, #0]
    710a:	f007 fc25 	bl	e958 <__aeabi_i2f>
    710e:	4607      	mov	r7, r0
    7110:	4847      	ldr	r0, [pc, #284]	; (7230 <currentlimit()+0x4e4>)
    7112:	f7fb f92f 	bl	2374 <BMSModuleManager::getLowTemperature()>
    7116:	4680      	mov	r8, r0
    7118:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
    711c:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
    7120:	f007 fc16 	bl	e950 <__aeabi_ui2f>
    7124:	4649      	mov	r1, r9
    7126:	4606      	mov	r6, r0
    7128:	4640      	mov	r0, r8
    712a:	f007 fb5f 	bl	e7ec <__aeabi_fsub>
    712e:	4631      	mov	r1, r6
    7130:	4680      	mov	r8, r0
    7132:	2000      	movs	r0, #0
    7134:	f007 fb5a 	bl	e7ec <__aeabi_fsub>
    7138:	4601      	mov	r1, r0
    713a:	4640      	mov	r0, r8
    713c:	f007 fc60 	bl	ea00 <__aeabi_fmul>
    7140:	4649      	mov	r1, r9
    7142:	4680      	mov	r8, r0
    7144:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7146:	f007 fb51 	bl	e7ec <__aeabi_fsub>
    714a:	4601      	mov	r1, r0
    714c:	4640      	mov	r0, r8
    714e:	f007 fd0b 	bl	eb68 <__aeabi_fdiv>
    7152:	4631      	mov	r1, r6
    7154:	f007 fb4c 	bl	e7f0 <__addsf3>
    7158:	4601      	mov	r1, r0
    715a:	4638      	mov	r0, r7
    715c:	f007 fb46 	bl	e7ec <__aeabi_fsub>
    7160:	f007 fe50 	bl	ee04 <__aeabi_f2uiz>
    7164:	8028      	strh	r0, [r5, #0]
    7166:	e6fd      	b.n	6f64 <currentlimit()+0x218>
          chargecurrent = chargecurrent - map(bms.getLowTemperature(), settings.UnderTSetpoint, settings.ChargeTSetpoint, settings.chargecurrentmax, 0);
    7168:	8828      	ldrh	r0, [r5, #0]
    716a:	f007 fbf5 	bl	e958 <__aeabi_i2f>
    716e:	4607      	mov	r7, r0
    7170:	482f      	ldr	r0, [pc, #188]	; (7230 <currentlimit()+0x4e4>)
    7172:	f7fb f8ff 	bl	2374 <BMSModuleManager::getLowTemperature()>
    7176:	4680      	mov	r8, r0
    7178:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
    717c:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
    7180:	f007 fbe6 	bl	e950 <__aeabi_ui2f>
    7184:	4649      	mov	r1, r9
    7186:	4606      	mov	r6, r0
    7188:	4640      	mov	r0, r8
    718a:	f007 fb2f 	bl	e7ec <__aeabi_fsub>
    718e:	4631      	mov	r1, r6
    7190:	4680      	mov	r8, r0
    7192:	2000      	movs	r0, #0
    7194:	f007 fb2a 	bl	e7ec <__aeabi_fsub>
    7198:	4601      	mov	r1, r0
    719a:	4640      	mov	r0, r8
    719c:	f007 fc30 	bl	ea00 <__aeabi_fmul>
    71a0:	4649      	mov	r1, r9
    71a2:	4680      	mov	r8, r0
    71a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    71a6:	f007 fb21 	bl	e7ec <__aeabi_fsub>
    71aa:	4601      	mov	r1, r0
    71ac:	4640      	mov	r0, r8
    71ae:	f007 fcdb 	bl	eb68 <__aeabi_fdiv>
    71b2:	4631      	mov	r1, r6
    71b4:	f007 fb1c 	bl	e7f0 <__addsf3>
    71b8:	4601      	mov	r1, r0
    71ba:	4638      	mov	r0, r7
    71bc:	f007 fb16 	bl	e7ec <__aeabi_fsub>
    71c0:	f007 fe20 	bl	ee04 <__aeabi_f2uiz>
    71c4:	8028      	strh	r0, [r5, #0]
    71c6:	e612      	b.n	6dee <currentlimit()+0xa2>
            chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, 0, (settings.chargecurrentmax - settings.chargecurrentend));
    71c8:	8828      	ldrh	r0, [r5, #0]
    71ca:	f007 fbc5 	bl	e958 <__aeabi_i2f>
    71ce:	4607      	mov	r7, r0
    71d0:	4817      	ldr	r0, [pc, #92]	; (7230 <currentlimit()+0x4e4>)
    71d2:	f7fb f84b 	bl	226c <BMSModuleManager::getHighCellVolt()>
    71d6:	f8d4 9018 	ldr.w	r9, [r4, #24]
    71da:	6a21      	ldr	r1, [r4, #32]
    71dc:	4680      	mov	r8, r0
    71de:	4648      	mov	r0, r9
    71e0:	f007 fb04 	bl	e7ec <__aeabi_fsub>
    71e4:	4606      	mov	r6, r0
    71e6:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
            chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, 0, (settings.chargecurrent2max - settings.chargecurrentend));
    71ea:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    71ee:	1ac0      	subs	r0, r0, r3
    71f0:	f007 fbb2 	bl	e958 <__aeabi_i2f>
    71f4:	4631      	mov	r1, r6
    71f6:	4604      	mov	r4, r0
    71f8:	4640      	mov	r0, r8
    71fa:	f007 faf7 	bl	e7ec <__aeabi_fsub>
    71fe:	4601      	mov	r1, r0
    7200:	4620      	mov	r0, r4
    7202:	f007 fbfd 	bl	ea00 <__aeabi_fmul>
    7206:	4631      	mov	r1, r6
    7208:	4604      	mov	r4, r0
    720a:	4648      	mov	r0, r9
    720c:	f007 faee 	bl	e7ec <__aeabi_fsub>
    7210:	4601      	mov	r1, r0
    7212:	4620      	mov	r0, r4
    7214:	f007 fca8 	bl	eb68 <__aeabi_fdiv>
    7218:	2100      	movs	r1, #0
    721a:	f007 fae9 	bl	e7f0 <__addsf3>
    721e:	4601      	mov	r1, r0
    7220:	4638      	mov	r0, r7
    7222:	f007 fae3 	bl	e7ec <__aeabi_fsub>
    7226:	f007 fded 	bl	ee04 <__aeabi_f2uiz>
    722a:	8028      	strh	r0, [r5, #0]
    722c:	e5f3      	b.n	6e16 <currentlimit()+0xca>
    722e:	bf00      	nop
    7230:	1fff91ec 	.word	0x1fff91ec

00007234 <inputdebug()>:
{
    7234:	b508      	push	{r3, lr}
  Serial.println();
    7236:	4828      	ldr	r0, [pc, #160]	; (72d8 <inputdebug()+0xa4>)
    7238:	f003 f95e 	bl	a4f8 <Print::println()>
    723c:	4827      	ldr	r0, [pc, #156]	; (72dc <inputdebug()+0xa8>)
    723e:	2108      	movs	r1, #8
    7240:	f005 fea0 	bl	cf84 <usb_serial_write>
  if (digitalRead(IN1))
    7244:	2011      	movs	r0, #17
    7246:	f004 f851 	bl	b2ec <digitalRead>
    724a:	b300      	cbz	r0, 728e <inputdebug()+0x5a>
    724c:	4824      	ldr	r0, [pc, #144]	; (72e0 <inputdebug()+0xac>)
    724e:	2106      	movs	r1, #6
    7250:	f005 fe98 	bl	cf84 <usb_serial_write>
  if (digitalRead(IN3))
    7254:	2012      	movs	r0, #18
    7256:	f004 f849 	bl	b2ec <digitalRead>
    725a:	b308      	cbz	r0, 72a0 <inputdebug()+0x6c>
    725c:	4821      	ldr	r0, [pc, #132]	; (72e4 <inputdebug()+0xb0>)
    725e:	2106      	movs	r1, #6
    7260:	f005 fe90 	bl	cf84 <usb_serial_write>
  if (digitalRead(IN3))
    7264:	2012      	movs	r0, #18
    7266:	f004 f841 	bl	b2ec <digitalRead>
    726a:	b310      	cbz	r0, 72b2 <inputdebug()+0x7e>
    726c:	481e      	ldr	r0, [pc, #120]	; (72e8 <inputdebug()+0xb4>)
    726e:	2106      	movs	r1, #6
    7270:	f005 fe88 	bl	cf84 <usb_serial_write>
  if (digitalRead(IN4))
    7274:	2013      	movs	r0, #19
    7276:	f004 f839 	bl	b2ec <digitalRead>
    727a:	b318      	cbz	r0, 72c4 <inputdebug()+0x90>
    727c:	481b      	ldr	r0, [pc, #108]	; (72ec <inputdebug()+0xb8>)
    727e:	2106      	movs	r1, #6
    7280:	f005 fe80 	bl	cf84 <usb_serial_write>
}
    7284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    7288:	4813      	ldr	r0, [pc, #76]	; (72d8 <inputdebug()+0xa4>)
    728a:	f003 b935 	b.w	a4f8 <Print::println()>
    728e:	4818      	ldr	r0, [pc, #96]	; (72f0 <inputdebug()+0xbc>)
    7290:	2106      	movs	r1, #6
    7292:	f005 fe77 	bl	cf84 <usb_serial_write>
  if (digitalRead(IN3))
    7296:	2012      	movs	r0, #18
    7298:	f004 f828 	bl	b2ec <digitalRead>
    729c:	2800      	cmp	r0, #0
    729e:	d1dd      	bne.n	725c <inputdebug()+0x28>
    72a0:	4814      	ldr	r0, [pc, #80]	; (72f4 <inputdebug()+0xc0>)
    72a2:	2106      	movs	r1, #6
    72a4:	f005 fe6e 	bl	cf84 <usb_serial_write>
  if (digitalRead(IN3))
    72a8:	2012      	movs	r0, #18
    72aa:	f004 f81f 	bl	b2ec <digitalRead>
    72ae:	2800      	cmp	r0, #0
    72b0:	d1dc      	bne.n	726c <inputdebug()+0x38>
    72b2:	4811      	ldr	r0, [pc, #68]	; (72f8 <inputdebug()+0xc4>)
    72b4:	2106      	movs	r1, #6
    72b6:	f005 fe65 	bl	cf84 <usb_serial_write>
  if (digitalRead(IN4))
    72ba:	2013      	movs	r0, #19
    72bc:	f004 f816 	bl	b2ec <digitalRead>
    72c0:	2800      	cmp	r0, #0
    72c2:	d1db      	bne.n	727c <inputdebug()+0x48>
    72c4:	480d      	ldr	r0, [pc, #52]	; (72fc <inputdebug()+0xc8>)
    72c6:	2106      	movs	r1, #6
    72c8:	f005 fe5c 	bl	cf84 <usb_serial_write>
}
    72cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    72d0:	4801      	ldr	r0, [pc, #4]	; (72d8 <inputdebug()+0xa4>)
    72d2:	f003 b911 	b.w	a4f8 <Print::println()>
    72d6:	bf00      	nop
    72d8:	1fff89f8 	.word	0x1fff89f8
    72dc:	00016ae4 	.word	0x00016ae4
    72e0:	00016af0 	.word	0x00016af0
    72e4:	00016b00 	.word	0x00016b00
    72e8:	00016b10 	.word	0x00016b10
    72ec:	00016b20 	.word	0x00016b20
    72f0:	00016af8 	.word	0x00016af8
    72f4:	00016b08 	.word	0x00016b08
    72f8:	00016b18 	.word	0x00016b18
    72fc:	00016b28 	.word	0x00016b28

00007300 <outputdebug()>:
{
    7300:	b510      	push	{r4, lr}
  if (outputstate < 5)
    7302:	4c29      	ldr	r4, [pc, #164]	; (73a8 <outputdebug()+0xa8>)
    7304:	6823      	ldr	r3, [r4, #0]
    7306:	2b04      	cmp	r3, #4
    7308:	dc26      	bgt.n	7358 <outputdebug()+0x58>
    digitalWrite(OUT1, HIGH);
    730a:	2101      	movs	r1, #1
    730c:	200b      	movs	r0, #11
    730e:	f003 ffc7 	bl	b2a0 <digitalWrite>
    digitalWrite(OUT2, HIGH);
    7312:	2101      	movs	r1, #1
    7314:	200c      	movs	r0, #12
    7316:	f003 ffc3 	bl	b2a0 <digitalWrite>
    digitalWrite(OUT3, HIGH);
    731a:	2101      	movs	r1, #1
    731c:	2014      	movs	r0, #20
    731e:	f003 ffbf 	bl	b2a0 <digitalWrite>
    digitalWrite(OUT4, HIGH);
    7322:	2101      	movs	r1, #1
    7324:	2015      	movs	r0, #21
    7326:	f003 ffbb 	bl	b2a0 <digitalWrite>
    analogWrite(OUT5, 255);
    732a:	21ff      	movs	r1, #255	; 0xff
    732c:	2016      	movs	r0, #22
    732e:	f003 fe3b 	bl	afa8 <analogWrite>
    analogWrite(OUT6, 255);
    7332:	21ff      	movs	r1, #255	; 0xff
    7334:	2017      	movs	r0, #23
    7336:	f003 fe37 	bl	afa8 <analogWrite>
    analogWrite(OUT7, 255);
    733a:	21ff      	movs	r1, #255	; 0xff
    733c:	2005      	movs	r0, #5
    733e:	f003 fe33 	bl	afa8 <analogWrite>
    analogWrite(OUT8, 255);
    7342:	21ff      	movs	r1, #255	; 0xff
    7344:	2006      	movs	r0, #6
    7346:	f003 fe2f 	bl	afa8 <analogWrite>
    outputstate ++;
    734a:	6823      	ldr	r3, [r4, #0]
    734c:	3301      	adds	r3, #1
  if (outputstate > 10)
    734e:	2b0a      	cmp	r3, #10
    outputstate = 0;
    7350:	bfc8      	it	gt
    7352:	2300      	movgt	r3, #0
    7354:	6023      	str	r3, [r4, #0]
}
    7356:	bd10      	pop	{r4, pc}
    digitalWrite(OUT1, LOW);
    7358:	2100      	movs	r1, #0
    735a:	200b      	movs	r0, #11
    735c:	f003 ffa0 	bl	b2a0 <digitalWrite>
    digitalWrite(OUT2, LOW);
    7360:	2100      	movs	r1, #0
    7362:	200c      	movs	r0, #12
    7364:	f003 ff9c 	bl	b2a0 <digitalWrite>
    digitalWrite(OUT3, LOW);
    7368:	2100      	movs	r1, #0
    736a:	2014      	movs	r0, #20
    736c:	f003 ff98 	bl	b2a0 <digitalWrite>
    digitalWrite(OUT4, LOW);
    7370:	2100      	movs	r1, #0
    7372:	2015      	movs	r0, #21
    7374:	f003 ff94 	bl	b2a0 <digitalWrite>
    analogWrite(OUT5, 0);
    7378:	2100      	movs	r1, #0
    737a:	2016      	movs	r0, #22
    737c:	f003 fe14 	bl	afa8 <analogWrite>
    analogWrite(OUT6, 0);
    7380:	2100      	movs	r1, #0
    7382:	2017      	movs	r0, #23
    7384:	f003 fe10 	bl	afa8 <analogWrite>
    analogWrite(OUT7, 0);
    7388:	2100      	movs	r1, #0
    738a:	2005      	movs	r0, #5
    738c:	f003 fe0c 	bl	afa8 <analogWrite>
    analogWrite(OUT8, 0);
    7390:	2100      	movs	r1, #0
    7392:	2006      	movs	r0, #6
    7394:	f003 fe08 	bl	afa8 <analogWrite>
    outputstate ++;
    7398:	6823      	ldr	r3, [r4, #0]
    739a:	3301      	adds	r3, #1
  if (outputstate > 10)
    739c:	2b0a      	cmp	r3, #10
    outputstate = 0;
    739e:	bfc8      	it	gt
    73a0:	2300      	movgt	r3, #0
    73a2:	6023      	str	r3, [r4, #0]
}
    73a4:	bd10      	pop	{r4, pc}
    73a6:	bf00      	nop
    73a8:	1fffb728 	.word	0x1fffb728

000073ac <dashupdate()>:
{
    73ac:	b530      	push	{r4, r5, lr}
					  serial2_write((const uint8_t *)str, len);
    73ae:	48b9      	ldr	r0, [pc, #740]	; (7694 <dashupdate()+0x2e8>)
    73b0:	b083      	sub	sp, #12
    73b2:	2109      	movs	r1, #9
    73b4:	f004 faba 	bl	b92c <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    73b8:	2022      	movs	r0, #34	; 0x22
    73ba:	f004 fa3b 	bl	b834 <serial2_putchar>
  if (settings.ESSmode == 1)
    73be:	4bb6      	ldr	r3, [pc, #728]	; (7698 <dashupdate()+0x2ec>)
    73c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    73c4:	2b01      	cmp	r3, #1
    switch (bmsstatus)
    73c6:	4bb5      	ldr	r3, [pc, #724]	; (769c <dashupdate()+0x2f0>)
    73c8:	781b      	ldrb	r3, [r3, #0]
  if (settings.ESSmode == 1)
    73ca:	d009      	beq.n	73e0 <dashupdate()+0x34>
    switch (bmsstatus)
    73cc:	2b05      	cmp	r3, #5
    73ce:	d810      	bhi.n	73f2 <dashupdate()+0x46>
    73d0:	e8df f013 	tbh	[pc, r3, lsl #1]
    73d4:	014b0146 	.word	0x014b0146
    73d8:	01550150 	.word	0x01550150
    73dc:	000b0141 	.word	0x000b0141
    switch (bmsstatus)
    73e0:	2b00      	cmp	r3, #0
    73e2:	f000 8151 	beq.w	7688 <dashupdate()+0x2dc>
    73e6:	2b05      	cmp	r3, #5
    73e8:	d103      	bne.n	73f2 <dashupdate()+0x46>
					{ serial2_write(buffer, size); return size; }
    73ea:	48ad      	ldr	r0, [pc, #692]	; (76a0 <dashupdate()+0x2f4>)
    73ec:	2107      	movs	r1, #7
    73ee:	f004 fa9d 	bl	b92c <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    73f2:	2022      	movs	r0, #34	; 0x22
    73f4:	f004 fa1e 	bl	b834 <serial2_putchar>
    73f8:	20ff      	movs	r0, #255	; 0xff
    73fa:	f004 fa1b 	bl	b834 <serial2_putchar>
    73fe:	20ff      	movs	r0, #255	; 0xff
    7400:	f004 fa18 	bl	b834 <serial2_putchar>
  Serial2.print(SOC);
    7404:	4ca7      	ldr	r4, [pc, #668]	; (76a4 <dashupdate()+0x2f8>)
    7406:	20ff      	movs	r0, #255	; 0xff
    7408:	f004 fa14 	bl	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    740c:	48a6      	ldr	r0, [pc, #664]	; (76a8 <dashupdate()+0x2fc>)
    740e:	2108      	movs	r1, #8
    7410:	f004 fa8c 	bl	b92c <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    7414:	6821      	ldr	r1, [r4, #0]
    7416:	48a5      	ldr	r0, [pc, #660]	; (76ac <dashupdate()+0x300>)
    7418:	f003 f866 	bl	a4e8 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    741c:	20ff      	movs	r0, #255	; 0xff
    741e:	f004 fa09 	bl	b834 <serial2_putchar>
    7422:	20ff      	movs	r0, #255	; 0xff
    7424:	f004 fa06 	bl	b834 <serial2_putchar>
    7428:	20ff      	movs	r0, #255	; 0xff
    742a:	f004 fa03 	bl	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    742e:	48a0      	ldr	r0, [pc, #640]	; (76b0 <dashupdate()+0x304>)
    7430:	2109      	movs	r1, #9
    7432:	f004 fa7b 	bl	b92c <serial2_write>
    7436:	6821      	ldr	r1, [r4, #0]
    7438:	489c      	ldr	r0, [pc, #624]	; (76ac <dashupdate()+0x300>)
    743a:	f003 f855 	bl	a4e8 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    743e:	20ff      	movs	r0, #255	; 0xff
    7440:	f004 f9f8 	bl	b834 <serial2_putchar>
    7444:	20ff      	movs	r0, #255	; 0xff
    7446:	f004 f9f5 	bl	b834 <serial2_putchar>
    744a:	20ff      	movs	r0, #255	; 0xff
    744c:	f004 f9f2 	bl	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    7450:	4898      	ldr	r0, [pc, #608]	; (76b4 <dashupdate()+0x308>)
    7452:	210c      	movs	r1, #12
    7454:	f004 fa6a 	bl	b92c <serial2_write>
  Serial2.print(currentact / 100, 0);
    7458:	4b97      	ldr	r3, [pc, #604]	; (76b8 <dashupdate()+0x30c>)
    745a:	4998      	ldr	r1, [pc, #608]	; (76bc <dashupdate()+0x310>)
    745c:	6818      	ldr	r0, [r3, #0]
    745e:	f007 fb83 	bl	eb68 <__aeabi_fdiv>
    7462:	f007 f8a9 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    7466:	2400      	movs	r4, #0
    7468:	4602      	mov	r2, r0
    746a:	460b      	mov	r3, r1
    746c:	9400      	str	r4, [sp, #0]
    746e:	488f      	ldr	r0, [pc, #572]	; (76ac <dashupdate()+0x300>)
    7470:	f003 f866 	bl	a540 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    7474:	20ff      	movs	r0, #255	; 0xff
    7476:	f004 f9dd 	bl	b834 <serial2_putchar>
    747a:	20ff      	movs	r0, #255	; 0xff
    747c:	f004 f9da 	bl	b834 <serial2_putchar>
    7480:	20ff      	movs	r0, #255	; 0xff
    7482:	f004 f9d7 	bl	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    7486:	2109      	movs	r1, #9
    7488:	488d      	ldr	r0, [pc, #564]	; (76c0 <dashupdate()+0x314>)
    748a:	f004 fa4f 	bl	b92c <serial2_write>
  Serial2.print(bms.getAvgTemperature(), 0);
    748e:	488d      	ldr	r0, [pc, #564]	; (76c4 <dashupdate()+0x318>)
    7490:	f7fa ff10 	bl	22b4 <BMSModuleManager::getAvgTemperature()>
    7494:	f007 f890 	bl	e5b8 <__aeabi_f2d>
    7498:	9400      	str	r4, [sp, #0]
    749a:	4602      	mov	r2, r0
    749c:	460b      	mov	r3, r1
    749e:	4883      	ldr	r0, [pc, #524]	; (76ac <dashupdate()+0x300>)
    74a0:	f003 f84e 	bl	a540 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    74a4:	20ff      	movs	r0, #255	; 0xff
    74a6:	f004 f9c5 	bl	b834 <serial2_putchar>
    74aa:	20ff      	movs	r0, #255	; 0xff
    74ac:	f004 f9c2 	bl	b834 <serial2_putchar>
    74b0:	20ff      	movs	r0, #255	; 0xff
    74b2:	f004 f9bf 	bl	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    74b6:	210c      	movs	r1, #12
    74b8:	4883      	ldr	r0, [pc, #524]	; (76c8 <dashupdate()+0x31c>)
    74ba:	f004 fa37 	bl	b92c <serial2_write>
  Serial2.print(bms.getLowTemperature(), 0);
    74be:	4881      	ldr	r0, [pc, #516]	; (76c4 <dashupdate()+0x318>)
    74c0:	f7fa ff58 	bl	2374 <BMSModuleManager::getLowTemperature()>
    74c4:	f007 f878 	bl	e5b8 <__aeabi_f2d>
    74c8:	9400      	str	r4, [sp, #0]
    74ca:	4602      	mov	r2, r0
    74cc:	460b      	mov	r3, r1
    74ce:	4877      	ldr	r0, [pc, #476]	; (76ac <dashupdate()+0x300>)
    74d0:	f003 f836 	bl	a540 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    74d4:	20ff      	movs	r0, #255	; 0xff
    74d6:	f004 f9ad 	bl	b834 <serial2_putchar>
    74da:	20ff      	movs	r0, #255	; 0xff
    74dc:	f004 f9aa 	bl	b834 <serial2_putchar>
    74e0:	20ff      	movs	r0, #255	; 0xff
    74e2:	f004 f9a7 	bl	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    74e6:	210d      	movs	r1, #13
    74e8:	4878      	ldr	r0, [pc, #480]	; (76cc <dashupdate()+0x320>)
    74ea:	f004 fa1f 	bl	b92c <serial2_write>
  Serial2.print(bms.getHighTemperature(), 0);
    74ee:	4875      	ldr	r0, [pc, #468]	; (76c4 <dashupdate()+0x318>)
    74f0:	f7fa ff3e 	bl	2370 <BMSModuleManager::getHighTemperature()>
    74f4:	f007 f860 	bl	e5b8 <__aeabi_f2d>
    74f8:	9400      	str	r4, [sp, #0]
    74fa:	4602      	mov	r2, r0
    74fc:	460b      	mov	r3, r1
    74fe:	486b      	ldr	r0, [pc, #428]	; (76ac <dashupdate()+0x300>)
    7500:	f003 f81e 	bl	a540 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    7504:	20ff      	movs	r0, #255	; 0xff
    7506:	f004 f995 	bl	b834 <serial2_putchar>
    750a:	20ff      	movs	r0, #255	; 0xff
    750c:	f004 f992 	bl	b834 <serial2_putchar>
    7510:	20ff      	movs	r0, #255	; 0xff
    7512:	f004 f98f 	bl	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    7516:	2109      	movs	r1, #9
    7518:	486d      	ldr	r0, [pc, #436]	; (76d0 <dashupdate()+0x324>)
    751a:	f004 fa07 	bl	b92c <serial2_write>
  Serial2.print(bms.getPackVoltage() * 10, 0);
    751e:	4869      	ldr	r0, [pc, #420]	; (76c4 <dashupdate()+0x318>)
    7520:	f7fa fea6 	bl	2270 <BMSModuleManager::getPackVoltage()>
    7524:	496b      	ldr	r1, [pc, #428]	; (76d4 <dashupdate()+0x328>)
    7526:	f007 fa6b 	bl	ea00 <__aeabi_fmul>
    752a:	f007 f845 	bl	e5b8 <__aeabi_f2d>
    752e:	9400      	str	r4, [sp, #0]
    7530:	4602      	mov	r2, r0
    7532:	460b      	mov	r3, r1
    7534:	485d      	ldr	r0, [pc, #372]	; (76ac <dashupdate()+0x300>)
    7536:	f003 f803 	bl	a540 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    753a:	20ff      	movs	r0, #255	; 0xff
    753c:	f004 f97a 	bl	b834 <serial2_putchar>
    7540:	20ff      	movs	r0, #255	; 0xff
    7542:	f004 f977 	bl	b834 <serial2_putchar>
    7546:	20ff      	movs	r0, #255	; 0xff
    7548:	f004 f974 	bl	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    754c:	210c      	movs	r1, #12
    754e:	4862      	ldr	r0, [pc, #392]	; (76d8 <dashupdate()+0x32c>)
    7550:	f004 f9ec 	bl	b92c <serial2_write>
  Serial2.print(bms.getLowCellVolt() * 1000, 0);
    7554:	485b      	ldr	r0, [pc, #364]	; (76c4 <dashupdate()+0x318>)
    7556:	f7fa fe81 	bl	225c <BMSModuleManager::getLowCellVolt()>
    755a:	4960      	ldr	r1, [pc, #384]	; (76dc <dashupdate()+0x330>)
    755c:	f007 fa50 	bl	ea00 <__aeabi_fmul>
    7560:	f007 f82a 	bl	e5b8 <__aeabi_f2d>
    7564:	9400      	str	r4, [sp, #0]
    7566:	4602      	mov	r2, r0
    7568:	460b      	mov	r3, r1
    756a:	4850      	ldr	r0, [pc, #320]	; (76ac <dashupdate()+0x300>)
    756c:	f002 ffe8 	bl	a540 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    7570:	20ff      	movs	r0, #255	; 0xff
    7572:	f004 f95f 	bl	b834 <serial2_putchar>
    7576:	20ff      	movs	r0, #255	; 0xff
    7578:	f004 f95c 	bl	b834 <serial2_putchar>
    757c:	20ff      	movs	r0, #255	; 0xff
    757e:	f004 f959 	bl	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    7582:	210d      	movs	r1, #13
    7584:	4856      	ldr	r0, [pc, #344]	; (76e0 <dashupdate()+0x334>)
    7586:	f004 f9d1 	bl	b92c <serial2_write>
  Serial2.print(bms.getHighCellVolt() * 1000, 0);
    758a:	484e      	ldr	r0, [pc, #312]	; (76c4 <dashupdate()+0x318>)
    758c:	f7fa fe6e 	bl	226c <BMSModuleManager::getHighCellVolt()>
    7590:	4952      	ldr	r1, [pc, #328]	; (76dc <dashupdate()+0x330>)
    7592:	f007 fa35 	bl	ea00 <__aeabi_fmul>
    7596:	f007 f80f 	bl	e5b8 <__aeabi_f2d>
    759a:	9400      	str	r4, [sp, #0]
    759c:	4602      	mov	r2, r0
    759e:	460b      	mov	r3, r1
    75a0:	4842      	ldr	r0, [pc, #264]	; (76ac <dashupdate()+0x300>)
    75a2:	f002 ffcd 	bl	a540 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    75a6:	20ff      	movs	r0, #255	; 0xff
    75a8:	f004 f944 	bl	b834 <serial2_putchar>
    75ac:	20ff      	movs	r0, #255	; 0xff
    75ae:	f004 f941 	bl	b834 <serial2_putchar>
    75b2:	20ff      	movs	r0, #255	; 0xff
    75b4:	f004 f93e 	bl	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    75b8:	484a      	ldr	r0, [pc, #296]	; (76e4 <dashupdate()+0x338>)
    75ba:	2109      	movs	r1, #9
    75bc:	f004 f9b6 	bl	b92c <serial2_write>
  Serial2.print(firmver);
    75c0:	4b49      	ldr	r3, [pc, #292]	; (76e8 <dashupdate()+0x33c>)
	size_t print(int n)				{ return print((long)n); }
    75c2:	483a      	ldr	r0, [pc, #232]	; (76ac <dashupdate()+0x300>)
    75c4:	6819      	ldr	r1, [r3, #0]
    75c6:	f002 ff8f 	bl	a4e8 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    75ca:	20ff      	movs	r0, #255	; 0xff
    75cc:	f004 f932 	bl	b834 <serial2_putchar>
    75d0:	20ff      	movs	r0, #255	; 0xff
    75d2:	f004 f92f 	bl	b834 <serial2_putchar>
    75d6:	20ff      	movs	r0, #255	; 0xff
    75d8:	f004 f92c 	bl	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    75dc:	210e      	movs	r1, #14
    75de:	4843      	ldr	r0, [pc, #268]	; (76ec <dashupdate()+0x340>)
    75e0:	f004 f9a4 	bl	b92c <serial2_write>
  Serial2.print((bms.getHighCellVolt() - bms.getLowCellVolt()) * 1000, 0);
    75e4:	4837      	ldr	r0, [pc, #220]	; (76c4 <dashupdate()+0x318>)
    75e6:	f7fa fe41 	bl	226c <BMSModuleManager::getHighCellVolt()>
    75ea:	4605      	mov	r5, r0
    75ec:	4835      	ldr	r0, [pc, #212]	; (76c4 <dashupdate()+0x318>)
    75ee:	f7fa fe35 	bl	225c <BMSModuleManager::getLowCellVolt()>
    75f2:	4601      	mov	r1, r0
    75f4:	4628      	mov	r0, r5
    75f6:	f007 f8f9 	bl	e7ec <__aeabi_fsub>
    75fa:	4938      	ldr	r1, [pc, #224]	; (76dc <dashupdate()+0x330>)
    75fc:	f007 fa00 	bl	ea00 <__aeabi_fmul>
    7600:	f006 ffda 	bl	e5b8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    7604:	9400      	str	r4, [sp, #0]
    7606:	4602      	mov	r2, r0
    7608:	460b      	mov	r3, r1
    760a:	4828      	ldr	r0, [pc, #160]	; (76ac <dashupdate()+0x300>)
    760c:	f002 ff98 	bl	a540 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    7610:	20ff      	movs	r0, #255	; 0xff
    7612:	f004 f90f 	bl	b834 <serial2_putchar>
    7616:	20ff      	movs	r0, #255	; 0xff
    7618:	f004 f90c 	bl	b834 <serial2_putchar>
    761c:	20ff      	movs	r0, #255	; 0xff
    761e:	f004 f909 	bl	b834 <serial2_putchar>
    7622:	20ff      	movs	r0, #255	; 0xff
    7624:	f004 f906 	bl	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    7628:	210c      	movs	r1, #12
    762a:	4831      	ldr	r0, [pc, #196]	; (76f0 <dashupdate()+0x344>)
    762c:	f004 f97e 	bl	b92c <serial2_write>
  Serial2.print(bms.getBalancing());
    7630:	4824      	ldr	r0, [pc, #144]	; (76c4 <dashupdate()+0x318>)
    7632:	f7fa fe0d 	bl	2250 <BMSModuleManager::getBalancing()>
    7636:	4601      	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
    7638:	481c      	ldr	r0, [pc, #112]	; (76ac <dashupdate()+0x300>)
    763a:	f002 ff55 	bl	a4e8 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    763e:	20ff      	movs	r0, #255	; 0xff
    7640:	f004 f8f8 	bl	b834 <serial2_putchar>
    7644:	20ff      	movs	r0, #255	; 0xff
    7646:	f004 f8f5 	bl	b834 <serial2_putchar>
    764a:	20ff      	movs	r0, #255	; 0xff
}
    764c:	b003      	add	sp, #12
    764e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    7652:	f004 b8ef 	b.w	b834 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    7656:	4827      	ldr	r0, [pc, #156]	; (76f4 <dashupdate()+0x348>)
    7658:	210b      	movs	r1, #11
    765a:	f004 f967 	bl	b92c <serial2_write>
    765e:	e6c8      	b.n	73f2 <dashupdate()+0x46>
    7660:	4825      	ldr	r0, [pc, #148]	; (76f8 <dashupdate()+0x34c>)
    7662:	2106      	movs	r1, #6
    7664:	f004 f962 	bl	b92c <serial2_write>
    7668:	e6c3      	b.n	73f2 <dashupdate()+0x46>
    766a:	4824      	ldr	r0, [pc, #144]	; (76fc <dashupdate()+0x350>)
    766c:	2107      	movs	r1, #7
    766e:	f004 f95d 	bl	b92c <serial2_write>
    7672:	e6be      	b.n	73f2 <dashupdate()+0x46>
    7674:	4822      	ldr	r0, [pc, #136]	; (7700 <dashupdate()+0x354>)
    7676:	2107      	movs	r1, #7
    7678:	f004 f958 	bl	b92c <serial2_write>
    767c:	e6b9      	b.n	73f2 <dashupdate()+0x46>
    767e:	4821      	ldr	r0, [pc, #132]	; (7704 <dashupdate()+0x358>)
    7680:	2108      	movs	r1, #8
    7682:	f004 f953 	bl	b92c <serial2_write>
    7686:	e6b4      	b.n	73f2 <dashupdate()+0x46>
    7688:	481f      	ldr	r0, [pc, #124]	; (7708 <dashupdate()+0x35c>)
    768a:	2108      	movs	r1, #8
    768c:	f004 f94e 	bl	b92c <serial2_write>
    7690:	e6af      	b.n	73f2 <dashupdate()+0x46>
    7692:	bf00      	nop
    7694:	00016b30 	.word	0x00016b30
    7698:	1fffb73c 	.word	0x1fffb73c
    769c:	1fffb598 	.word	0x1fffb598
    76a0:	00015b84 	.word	0x00015b84
    76a4:	1fff8828 	.word	0x1fff8828
    76a8:	00016b48 	.word	0x00016b48
    76ac:	1fff88b8 	.word	0x1fff88b8
    76b0:	00016b54 	.word	0x00016b54
    76b4:	00016b60 	.word	0x00016b60
    76b8:	1fffb62c 	.word	0x1fffb62c
    76bc:	42c80000 	.word	0x42c80000
    76c0:	00016b70 	.word	0x00016b70
    76c4:	1fff91ec 	.word	0x1fff91ec
    76c8:	00016b7c 	.word	0x00016b7c
    76cc:	00016b8c 	.word	0x00016b8c
    76d0:	00016b9c 	.word	0x00016b9c
    76d4:	41200000 	.word	0x41200000
    76d8:	00016ba8 	.word	0x00016ba8
    76dc:	447a0000 	.word	0x447a0000
    76e0:	00016bb8 	.word	0x00016bb8
    76e4:	00016bc8 	.word	0x00016bc8
    76e8:	1fff8854 	.word	0x1fff8854
    76ec:	00016bd4 	.word	0x00016bd4
    76f0:	00016be4 	.word	0x00016be4
    76f4:	00015b64 	.word	0x00015b64
    76f8:	00015b54 	.word	0x00015b54
    76fc:	00015b5c 	.word	0x00015b5c
    7700:	00015b70 	.word	0x00015b70
    7704:	00015b78 	.word	0x00015b78
    7708:	00016b3c 	.word	0x00016b3c

0000770c <balancing()>:
  if (balancecells == 1)
    770c:	4b06      	ldr	r3, [pc, #24]	; (7728 <balancing()+0x1c>)
    770e:	681b      	ldr	r3, [r3, #0]
    7710:	2b01      	cmp	r3, #1
    7712:	d106      	bne.n	7722 <balancing()+0x16>
      bms.balanceCells(settings.balanceDuty, 0);
    7714:	4b05      	ldr	r3, [pc, #20]	; (772c <balancing()+0x20>)
    7716:	4806      	ldr	r0, [pc, #24]	; (7730 <balancing()+0x24>)
    7718:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    771c:	2200      	movs	r2, #0
    771e:	f7f9 bb3d 	b.w	d9c <BMSModuleManager::balanceCells(int, int)>
    bms.StopBalancing();
    7722:	4803      	ldr	r0, [pc, #12]	; (7730 <balancing()+0x24>)
    7724:	f7fa bc34 	b.w	1f90 <BMSModuleManager::StopBalancing()>
    7728:	1fff91e8 	.word	0x1fff91e8
    772c:	1fffb73c 	.word	0x1fffb73c
    7730:	1fff91ec 	.word	0x1fff91ec

00007734 <chargercomms()>:
{
    7734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (settings.chargertype == Elcon)
    7736:	4db1      	ldr	r5, [pc, #708]	; (79fc <chargercomms()+0x2c8>)
    7738:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    773c:	2b04      	cmp	r3, #4
    773e:	f000 8115 	beq.w	796c <chargercomms()+0x238>
  if (settings.chargertype == Eltek)
    7742:	2b03      	cmp	r3, #3
    7744:	f000 80e9 	beq.w	791a <chargercomms()+0x1e6>
  if (settings.chargertype == BrusaNLG5)
    7748:	2b01      	cmp	r3, #1
    774a:	d073      	beq.n	7834 <chargercomms()+0x100>
  if (settings.chargertype == ChevyVolt)
    774c:	2b02      	cmp	r3, #2
    774e:	d03e      	beq.n	77ce <chargercomms()+0x9a>
  if (settings.chargertype == Coda)
    7750:	2b06      	cmp	r3, #6
    7752:	d000      	beq.n	7756 <chargercomms()+0x22>
}
    7754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg.id  = 0x050;
    7756:	4caa      	ldr	r4, [pc, #680]	; (7a00 <chargercomms()+0x2cc>)
    if ((settings.ChargeVsetpoint * settings.Scells ) > 200)
    7758:	6da8      	ldr	r0, [r5, #88]	; 0x58
    msg.len = 8;
    775a:	2308      	movs	r3, #8
    msg.id  = 0x050;
    775c:	2250      	movs	r2, #80	; 0x50
    msg.len = 8;
    775e:	71e3      	strb	r3, [r4, #7]
    msg.buf[0] = 0x00;
    7760:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
    msg.id  = 0x050;
    7764:	6022      	str	r2, [r4, #0]
    msg.buf[0] = 0x00;
    7766:	8123      	strh	r3, [r4, #8]
    if ((settings.ChargeVsetpoint * settings.Scells ) > 200)
    7768:	f007 f8f6 	bl	e958 <__aeabi_i2f>
    776c:	69a9      	ldr	r1, [r5, #24]
    776e:	f007 f947 	bl	ea00 <__aeabi_fmul>
    7772:	49a4      	ldr	r1, [pc, #656]	; (7a04 <chargercomms()+0x2d0>)
    7774:	4605      	mov	r5, r0
    7776:	f007 faff 	bl	ed78 <__aeabi_fcmpgt>
    777a:	2800      	cmp	r0, #0
    777c:	f040 8123 	bne.w	79c6 <chargercomms()+0x292>
    7780:	2201      	movs	r2, #1
    7782:	2390      	movs	r3, #144	; 0x90
    if ((settings.ChargeVsetpoint * settings.Scells)*chargecurrent < 3300)
    7784:	49a0      	ldr	r1, [pc, #640]	; (7a08 <chargercomms()+0x2d4>)
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 10));
    7786:	72a2      	strb	r2, [r4, #10]
    msg.buf[4] = 0x00;
    7788:	2000      	movs	r0, #0
    778a:	7320      	strb	r0, [r4, #12]
    if ((settings.ChargeVsetpoint * settings.Scells)*chargecurrent < 3300)
    778c:	8808      	ldrh	r0, [r1, #0]
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 10));
    778e:	72e3      	strb	r3, [r4, #11]
    if ((settings.ChargeVsetpoint * settings.Scells)*chargecurrent < 3300)
    7790:	f007 f8e2 	bl	e958 <__aeabi_i2f>
    7794:	4629      	mov	r1, r5
    7796:	f007 f933 	bl	ea00 <__aeabi_fmul>
    779a:	499c      	ldr	r1, [pc, #624]	; (7a0c <chargercomms()+0x2d8>)
    779c:	4605      	mov	r5, r0
    779e:	f007 facd 	bl	ed3c <__aeabi_fcmplt>
    77a2:	2800      	cmp	r0, #0
    77a4:	f000 8125 	beq.w	79f2 <chargercomms()+0x2be>
      msg.buf[5] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    77a8:	4999      	ldr	r1, [pc, #612]	; (7a10 <chargercomms()+0x2dc>)
    77aa:	4628      	mov	r0, r5
    77ac:	f007 f9dc 	bl	eb68 <__aeabi_fdiv>
    77b0:	f007 fb28 	bl	ee04 <__aeabi_f2uiz>
    77b4:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[6] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    77b8:	4618      	mov	r0, r3
    msg.buf[7] = 0x01; //HV charging
    77ba:	2201      	movs	r2, #1
      msg.buf[5] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    77bc:	7360      	strb	r0, [r4, #13]
      msg.buf[6] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    77be:	73a3      	strb	r3, [r4, #14]
    msg.buf[7] = 0x01; //HV charging
    77c0:	73e2      	strb	r2, [r4, #15]
    Can0.write(msg);
    77c2:	498f      	ldr	r1, [pc, #572]	; (7a00 <chargercomms()+0x2cc>)
    77c4:	4893      	ldr	r0, [pc, #588]	; (7a14 <chargercomms()+0x2e0>)
}
    77c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    77ca:	f002 b92b 	b.w	9a24 <FlexCAN::write(CAN_message_t const&)>
    msg.id  = 0x30E;
    77ce:	4c8c      	ldr	r4, [pc, #560]	; (7a00 <chargercomms()+0x2cc>)
    Can0.write(msg);
    77d0:	4890      	ldr	r0, [pc, #576]	; (7a14 <chargercomms()+0x2e0>)
    msg.buf[0] = 0x02; //only HV charging , 0x03 hv and 12V charging
    77d2:	7223      	strb	r3, [r4, #8]
    msg.id  = 0x30E;
    77d4:	f240 320e 	movw	r2, #782	; 0x30e
    77d8:	6022      	str	r2, [r4, #0]
    Can0.write(msg);
    77da:	4621      	mov	r1, r4
    msg.len = 1;
    77dc:	2201      	movs	r2, #1
    77de:	71e2      	strb	r2, [r4, #7]
    Can0.write(msg);
    77e0:	f002 f920 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
    if ((chargecurrent * 2) > 255)
    77e4:	4b88      	ldr	r3, [pc, #544]	; (7a08 <chargercomms()+0x2d4>)
    if ((settings.ChargeVsetpoint * settings.Scells ) > 200)
    77e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if ((chargecurrent * 2) > 255)
    77e8:	881b      	ldrh	r3, [r3, #0]
    77ea:	005b      	lsls	r3, r3, #1
    77ec:	2bff      	cmp	r3, #255	; 0xff
    msg.len = 4;
    77ee:	f04f 0204 	mov.w	r2, #4
      msg.buf[1] = (chargecurrent * 2);
    77f2:	bfd4      	ite	le
    77f4:	b2db      	uxtble	r3, r3
      msg.buf[1] = 255;
    77f6:	23ff      	movgt	r3, #255	; 0xff
    msg.id  = 0x304;
    77f8:	f44f 7141 	mov.w	r1, #772	; 0x304
    msg.len = 4;
    77fc:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x40; //fixed
    77fe:	2240      	movs	r2, #64	; 0x40
    msg.id  = 0x304;
    7800:	6021      	str	r1, [r4, #0]
    msg.buf[0] = 0x40; //fixed
    7802:	7222      	strb	r2, [r4, #8]
      msg.buf[1] = (chargecurrent * 2);
    7804:	7263      	strb	r3, [r4, #9]
    if ((settings.ChargeVsetpoint * settings.Scells ) > 200)
    7806:	f007 f8a7 	bl	e958 <__aeabi_i2f>
    780a:	69a9      	ldr	r1, [r5, #24]
    780c:	f007 f8f8 	bl	ea00 <__aeabi_fmul>
    7810:	497c      	ldr	r1, [pc, #496]	; (7a04 <chargercomms()+0x2d0>)
    7812:	4606      	mov	r6, r0
    7814:	f007 fab0 	bl	ed78 <__aeabi_fcmpgt>
    7818:	2800      	cmp	r0, #0
    781a:	f040 80e0 	bne.w	79de <chargercomms()+0x2aa>
    781e:	2301      	movs	r3, #1
    7820:	2090      	movs	r0, #144	; 0x90
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 2));
    7822:	72e0      	strb	r0, [r4, #11]
    Can0.write(msg);
    7824:	4976      	ldr	r1, [pc, #472]	; (7a00 <chargercomms()+0x2cc>)
    7826:	487b      	ldr	r0, [pc, #492]	; (7a14 <chargercomms()+0x2e0>)
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 2));
    7828:	72a3      	strb	r3, [r4, #10]
    Can0.write(msg);
    782a:	f002 f8fb 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == Coda)
    782e:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    7832:	e78d      	b.n	7750 <chargercomms()+0x1c>
    msg.id  = chargerid1;
    7834:	4b78      	ldr	r3, [pc, #480]	; (7a18 <chargercomms()+0x2e4>)
    7836:	4c72      	ldr	r4, [pc, #456]	; (7a00 <chargercomms()+0x2cc>)
    7838:	6819      	ldr	r1, [r3, #0]
    783a:	6021      	str	r1, [r4, #0]
    msg.len = 7;
    783c:	2207      	movs	r2, #7
    msg.buf[0] = 0x80;
    783e:	2380      	movs	r3, #128	; 0x80
    if (digitalRead(IN2) == LOW)//Gen OFF
    7840:	2010      	movs	r0, #16
    msg.len = 7;
    7842:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x80;
    7844:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)//Gen OFF
    7846:	f003 fd51 	bl	b2ec <digitalRead>
    784a:	2800      	cmp	r0, #0
    784c:	f000 80c5 	beq.w	79da <chargercomms()+0x2a6>
      msg.buf[1] = highByte(maxac2 * 10);
    7850:	4b72      	ldr	r3, [pc, #456]	; (7a1c <chargercomms()+0x2e8>)
    7852:	681b      	ldr	r3, [r3, #0]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    7854:	4e6c      	ldr	r6, [pc, #432]	; (7a08 <chargercomms()+0x2d4>)
    7856:	4f72      	ldr	r7, [pc, #456]	; (7a20 <chargercomms()+0x2ec>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells ) - chargerendbulk) * 10));
    7858:	6da8      	ldr	r0, [r5, #88]	; 0x58
      msg.buf[1] = highByte(maxac2 * 10);
    785a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    785e:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    7860:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    7862:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[1] = highByte(maxac1 * 10);
    7866:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = lowByte(maxac1 * 10);
    7868:	72a2      	strb	r2, [r4, #10]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    786a:	8833      	ldrh	r3, [r6, #0]
    786c:	683a      	ldr	r2, [r7, #0]
    786e:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    7872:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    7874:	121b      	asrs	r3, r3, #8
    7876:	7363      	strb	r3, [r4, #13]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells ) - chargerendbulk) * 10));
    7878:	f007 f86e 	bl	e958 <__aeabi_i2f>
    787c:	69a9      	ldr	r1, [r5, #24]
    787e:	f007 f8bf 	bl	ea00 <__aeabi_fmul>
    7882:	4b68      	ldr	r3, [pc, #416]	; (7a24 <chargercomms()+0x2f0>)
    7884:	6819      	ldr	r1, [r3, #0]
    7886:	f006 ffb1 	bl	e7ec <__aeabi_fsub>
    788a:	4967      	ldr	r1, [pc, #412]	; (7a28 <chargercomms()+0x2f4>)
    788c:	f007 f8b8 	bl	ea00 <__aeabi_fmul>
    7890:	f007 fab8 	bl	ee04 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells ) - chargerendbulk)  * 10));
    7894:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells ) - chargerendbulk) * 10));
    7896:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    789a:	4959      	ldr	r1, [pc, #356]	; (7a00 <chargercomms()+0x2cc>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells ) - chargerendbulk) * 10));
    789c:	72e0      	strb	r0, [r4, #11]
    Can0.write(msg);
    789e:	485d      	ldr	r0, [pc, #372]	; (7a14 <chargercomms()+0x2e0>)
    78a0:	f002 f8c0 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    78a4:	2002      	movs	r0, #2
    78a6:	f003 fd8b 	bl	b3c0 <delay>
    msg.id  = chargerid2;
    78aa:	4b60      	ldr	r3, [pc, #384]	; (7a2c <chargercomms()+0x2f8>)
    78ac:	681b      	ldr	r3, [r3, #0]
    78ae:	6023      	str	r3, [r4, #0]
    msg.len = 7;
    78b0:	2307      	movs	r3, #7
    78b2:	71e3      	strb	r3, [r4, #7]
    if (digitalRead(IN2) == LOW)//Gen OFF
    78b4:	2010      	movs	r0, #16
    msg.buf[0] = 0x80;
    78b6:	2380      	movs	r3, #128	; 0x80
    78b8:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)//Gen OFF
    78ba:	f003 fd17 	bl	b2ec <digitalRead>
    78be:	2800      	cmp	r0, #0
    78c0:	f040 8099 	bne.w	79f6 <chargercomms()+0x2c2>
      msg.buf[1] = highByte(maxac1 * 10);
    78c4:	4b5a      	ldr	r3, [pc, #360]	; (7a30 <chargercomms()+0x2fc>)
      msg.buf[1] = highByte(maxac2 * 10);
    78c6:	681b      	ldr	r3, [r3, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells ) - chargerend) * 10));
    78c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
      msg.buf[1] = highByte(maxac2 * 10);
    78ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    78ce:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    78d0:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    78d2:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[2] = lowByte(maxac1 * 10);
    78d6:	72a2      	strb	r2, [r4, #10]
      msg.buf[1] = highByte(maxac1 * 10);
    78d8:	7263      	strb	r3, [r4, #9]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells ) - chargerend) * 10));
    78da:	f007 f83d 	bl	e958 <__aeabi_i2f>
    78de:	69a9      	ldr	r1, [r5, #24]
    78e0:	f007 f88e 	bl	ea00 <__aeabi_fmul>
    78e4:	4b53      	ldr	r3, [pc, #332]	; (7a34 <chargercomms()+0x300>)
    78e6:	6819      	ldr	r1, [r3, #0]
    78e8:	f006 ff80 	bl	e7ec <__aeabi_fsub>
    78ec:	494e      	ldr	r1, [pc, #312]	; (7a28 <chargercomms()+0x2f4>)
    78ee:	f007 f887 	bl	ea00 <__aeabi_fmul>
    78f2:	f007 fa87 	bl	ee04 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells ) - chargerend) * 10));
    78f6:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells ) - chargerend) * 10));
    78f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
    msg.buf[5] = highByte(chargecurrent / ncharger);
    78fc:	683a      	ldr	r2, [r7, #0]
    78fe:	8833      	ldrh	r3, [r6, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells ) - chargerend) * 10));
    7900:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    7902:	fb93 f3f2 	sdiv	r3, r3, r2
    Can0.write(msg);
    7906:	493e      	ldr	r1, [pc, #248]	; (7a00 <chargercomms()+0x2cc>)
    7908:	4842      	ldr	r0, [pc, #264]	; (7a14 <chargercomms()+0x2e0>)
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    790a:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    790c:	121a      	asrs	r2, r3, #8
    790e:	7362      	strb	r2, [r4, #13]
    Can0.write(msg);
    7910:	f002 f888 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == ChevyVolt)
    7914:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    7918:	e718      	b.n	774c <chargercomms()+0x18>
    msg.id  = 0x2FF; //broadcast to all Elteks
    791a:	4c39      	ldr	r4, [pc, #228]	; (7a00 <chargercomms()+0x2cc>)
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    791c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    msg.buf[2] = highByte(1000);
    791e:	72a3      	strb	r3, [r4, #10]
    msg.id  = 0x2FF; //broadcast to all Elteks
    7920:	f240 22ff 	movw	r2, #767	; 0x2ff
    msg.buf[0] = 0x01;
    7924:	f64e 0301 	movw	r3, #59393	; 0xe801
    msg.id  = 0x2FF; //broadcast to all Elteks
    7928:	6022      	str	r2, [r4, #0]
    msg.len = 7;
    792a:	2207      	movs	r2, #7
    792c:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x01;
    792e:	8123      	strh	r3, [r4, #8]
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    7930:	f007 f812 	bl	e958 <__aeabi_i2f>
    7934:	69a9      	ldr	r1, [r5, #24]
    7936:	f007 f863 	bl	ea00 <__aeabi_fmul>
    793a:	493b      	ldr	r1, [pc, #236]	; (7a28 <chargercomms()+0x2f4>)
    793c:	f007 f860 	bl	ea00 <__aeabi_fmul>
    7940:	f007 fa60 	bl	ee04 <__aeabi_f2uiz>
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    7944:	4a36      	ldr	r2, [pc, #216]	; (7a20 <chargercomms()+0x2ec>)
    7946:	4b30      	ldr	r3, [pc, #192]	; (7a08 <chargercomms()+0x2d4>)
    7948:	6811      	ldr	r1, [r2, #0]
    794a:	881b      	ldrh	r3, [r3, #0]
    794c:	fb93 f3f1 	sdiv	r3, r3, r1
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    7950:	b280      	uxth	r0, r0
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    7952:	0a02      	lsrs	r2, r0, #8
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    7954:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    7956:	7363      	strb	r3, [r4, #13]
    Can0.write(msg);
    7958:	482e      	ldr	r0, [pc, #184]	; (7a14 <chargercomms()+0x2e0>)
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    795a:	7322      	strb	r2, [r4, #12]
    msg.buf[6] = highByte(chargecurrent / ncharger);
    795c:	121b      	asrs	r3, r3, #8
    Can0.write(msg);
    795e:	4621      	mov	r1, r4
    msg.buf[6] = highByte(chargecurrent / ncharger);
    7960:	73a3      	strb	r3, [r4, #14]
    Can0.write(msg);
    7962:	f002 f85f 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == BrusaNLG5)
    7966:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    796a:	e6ed      	b.n	7748 <chargercomms()+0x14>
    msg.id  =  0x1806E5F4; //broadcast to all Elteks
    796c:	4c24      	ldr	r4, [pc, #144]	; (7a00 <chargercomms()+0x2cc>)
    796e:	4a32      	ldr	r2, [pc, #200]	; (7a38 <chargercomms()+0x304>)
    msg.ext = 1;
    7970:	88e3      	ldrh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    7972:	6da8      	ldr	r0, [r5, #88]	; 0x58
    msg.id  =  0x1806E5F4; //broadcast to all Elteks
    7974:	6022      	str	r2, [r4, #0]
    msg.ext = 1;
    7976:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    797a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    797e:	f043 0301 	orr.w	r3, r3, #1
    7982:	80e3      	strh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    7984:	f006 ffe8 	bl	e958 <__aeabi_i2f>
    7988:	69a9      	ldr	r1, [r5, #24]
    798a:	f007 f839 	bl	ea00 <__aeabi_fmul>
    798e:	4926      	ldr	r1, [pc, #152]	; (7a28 <chargercomms()+0x2f4>)
    7990:	f007 f836 	bl	ea00 <__aeabi_fmul>
    7994:	f007 fa36 	bl	ee04 <__aeabi_f2uiz>
    msg.buf[2] = highByte(chargecurrent / ncharger);
    7998:	4b1b      	ldr	r3, [pc, #108]	; (7a08 <chargercomms()+0x2d4>)
    799a:	4a21      	ldr	r2, [pc, #132]	; (7a20 <chargercomms()+0x2ec>)
    799c:	881b      	ldrh	r3, [r3, #0]
    799e:	6812      	ldr	r2, [r2, #0]
    79a0:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    79a4:	ba40      	rev16	r0, r0
    msg.buf[2] = highByte(chargecurrent / ncharger);
    79a6:	ba5b      	rev16	r3, r3
    msg.buf[4] = 0x00;
    79a8:	2600      	movs	r6, #0
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    79aa:	8120      	strh	r0, [r4, #8]
    Can0.write(msg);
    79ac:	4621      	mov	r1, r4
    79ae:	4819      	ldr	r0, [pc, #100]	; (7a14 <chargercomms()+0x2e0>)
    msg.buf[2] = highByte(chargecurrent / ncharger);
    79b0:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = 0x00;
    79b2:	60e6      	str	r6, [r4, #12]
    Can0.write(msg);
    79b4:	f002 f836 	bl	9a24 <FlexCAN::write(CAN_message_t const&)>
    msg.ext = 0;
    79b8:	79a2      	ldrb	r2, [r4, #6]
  if (settings.chargertype == Eltek)
    79ba:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    msg.ext = 0;
    79be:	f366 0200 	bfi	r2, r6, #0, #1
    79c2:	71a2      	strb	r2, [r4, #6]
    79c4:	e6bd      	b.n	7742 <chargercomms()+0xe>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 10));
    79c6:	4918      	ldr	r1, [pc, #96]	; (7a28 <chargercomms()+0x2f4>)
    79c8:	4628      	mov	r0, r5
    79ca:	f007 f819 	bl	ea00 <__aeabi_fmul>
    79ce:	f007 fa19 	bl	ee04 <__aeabi_f2uiz>
    79d2:	f3c0 2207 	ubfx	r2, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 10));
    79d6:	b2c3      	uxtb	r3, r0
    79d8:	e6d4      	b.n	7784 <chargercomms()+0x50>
      msg.buf[1] = highByte(maxac1 * 10);
    79da:	4b15      	ldr	r3, [pc, #84]	; (7a30 <chargercomms()+0x2fc>)
    79dc:	e739      	b.n	7852 <chargercomms()+0x11e>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 2));
    79de:	4631      	mov	r1, r6
    79e0:	4630      	mov	r0, r6
    79e2:	f006 ff05 	bl	e7f0 <__addsf3>
    79e6:	f007 fa0d 	bl	ee04 <__aeabi_f2uiz>
    79ea:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells ) * 2));
    79ee:	b2c0      	uxtb	r0, r0
    79f0:	e717      	b.n	7822 <chargercomms()+0xee>
    79f2:	2396      	movs	r3, #150	; 0x96
    79f4:	e6e1      	b.n	77ba <chargercomms()+0x86>
      msg.buf[1] = highByte(maxac2 * 10);
    79f6:	4b09      	ldr	r3, [pc, #36]	; (7a1c <chargercomms()+0x2e8>)
    79f8:	e765      	b.n	78c6 <chargercomms()+0x192>
    79fa:	bf00      	nop
    79fc:	1fffb73c 	.word	0x1fffb73c
    7a00:	1fffb694 	.word	0x1fffb694
    7a04:	43480000 	.word	0x43480000
    7a08:	1fffb5a4 	.word	0x1fffb5a4
    7a0c:	454e4000 	.word	0x454e4000
    7a10:	43700000 	.word	0x43700000
    7a14:	1fffb844 	.word	0x1fffb844
    7a18:	1fff8840 	.word	0x1fff8840
    7a1c:	1fff885c 	.word	0x1fff885c
    7a20:	1fff8860 	.word	0x1fff8860
    7a24:	1fffb5ac 	.word	0x1fffb5ac
    7a28:	41200000 	.word	0x41200000
    7a2c:	1fff8844 	.word	0x1fff8844
    7a30:	1fff8858 	.word	0x1fff8858
    7a34:	1fffb5a8 	.word	0x1fffb5a8
    7a38:	1806e5f4 	.word	0x1806e5f4

00007a3c <loop>:
{
    7a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (Can0.available())
    7a40:	4c93      	ldr	r4, [pc, #588]	; (7c90 <loop+0x254>)
{
    7a42:	b09d      	sub	sp, #116	; 0x74
  while (Can0.available())
    7a44:	e001      	b.n	7a4a <loop+0xe>
    canread();
    7a46:	f7ff f875 	bl	6b34 <canread()>
  while (Can0.available())
    7a4a:	4620      	mov	r0, r4
    7a4c:	f001 fefc 	bl	9848 <FlexCAN::available()>
    7a50:	2800      	cmp	r0, #0
    7a52:	d1f8      	bne.n	7a46 <loop+0xa>
        virtual int available() { return usb_serial_available(); }
    7a54:	f005 fa64 	bl	cf20 <usb_serial_available>
  if (SERIALCONSOLE.available() > 0)
    7a58:	2800      	cmp	r0, #0
    7a5a:	dd01      	ble.n	7a60 <loop+0x24>
    menu();
    7a5c:	f7fc feb8 	bl	47d0 <menu()>
  if (outputcheck != 1)
    7a60:	4e8c      	ldr	r6, [pc, #560]	; (7c94 <loop+0x258>)
    if (settings.ESSmode == 1)
    7a62:	4c8d      	ldr	r4, [pc, #564]	; (7c98 <loop+0x25c>)
  if (outputcheck != 1)
    7a64:	6833      	ldr	r3, [r6, #0]
    7a66:	2b01      	cmp	r3, #1
    7a68:	d12e      	bne.n	7ac8 <loop+0x8c>
    7a6a:	4d8c      	ldr	r5, [pc, #560]	; (7c9c <loop+0x260>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a6c:	682b      	ldr	r3, [r5, #0]
  if (millis() - looptime > 500)
    7a6e:	4a8c      	ldr	r2, [pc, #560]	; (7ca0 <loop+0x264>)
    7a70:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    7a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a74:	6811      	ldr	r1, [r2, #0]
    7a76:	1a5b      	subs	r3, r3, r1
    7a78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    7a7c:	d840      	bhi.n	7b00 <loop+0xc4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a7e:	682b      	ldr	r3, [r5, #0]
  if (millis() - cleartime > 5000)
    7a80:	4e88      	ldr	r6, [pc, #544]	; (7ca4 <loop+0x268>)
    7a82:	9318      	str	r3, [sp, #96]	; 0x60
    7a84:	6832      	ldr	r2, [r6, #0]
	return ret;
    7a86:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7a88:	1a9b      	subs	r3, r3, r2
    7a8a:	f241 3288 	movw	r2, #5000	; 0x1388
    7a8e:	4293      	cmp	r3, r2
    7a90:	d82e      	bhi.n	7af0 <loop+0xb4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a92:	682b      	ldr	r3, [r5, #0]
  if (millis() - looptime1 > settings.chargerspd)
    7a94:	4a84      	ldr	r2, [pc, #528]	; (7ca8 <loop+0x26c>)
    7a96:	931a      	str	r3, [sp, #104]	; 0x68
    7a98:	6811      	ldr	r1, [r2, #0]
	return ret;
    7a9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7a9c:	1a5b      	subs	r3, r3, r1
    7a9e:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
    7aa2:	428b      	cmp	r3, r1
    7aa4:	d90d      	bls.n	7ac2 <loop+0x86>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7aa6:	682b      	ldr	r3, [r5, #0]
    7aa8:	931b      	str	r3, [sp, #108]	; 0x6c
    if (settings.ESSmode == 1)
    7aaa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
	return ret;
    7aae:	991b      	ldr	r1, [sp, #108]	; 0x6c
    looptime1 = millis();
    7ab0:	6011      	str	r1, [r2, #0]
    if (settings.ESSmode == 1)
    7ab2:	2b01      	cmp	r3, #1
    7ab4:	f000 80e7 	beq.w	7c86 <loop+0x24a>
      if (bmsstatus == Charge)
    7ab8:	4b7c      	ldr	r3, [pc, #496]	; (7cac <loop+0x270>)
    7aba:	781b      	ldrb	r3, [r3, #0]
    7abc:	2b03      	cmp	r3, #3
    7abe:	f000 80e2 	beq.w	7c86 <loop+0x24a>
}
    7ac2:	b01d      	add	sp, #116	; 0x74
    7ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    contcon();
    7ac8:	f7fc fb16 	bl	40f8 <contcon()>
    if (settings.ESSmode == 1)
    7acc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7ad0:	2b01      	cmp	r3, #1
    7ad2:	f000 8099 	beq.w	7c08 <loop+0x1cc>
      switch (bmsstatus)
    7ad6:	4f75      	ldr	r7, [pc, #468]	; (7cac <loop+0x270>)
    7ad8:	783b      	ldrb	r3, [r7, #0]
    7ada:	2b05      	cmp	r3, #5
    7adc:	f200 80bd 	bhi.w	7c5a <loop+0x21e>
    7ae0:	e8df f013 	tbh	[pc, r3, lsl #1]
    7ae4:	021f035f 	.word	0x021f035f
    7ae8:	02cb0298 	.word	0x02cb0298
    7aec:	0332032b 	.word	0x0332032b
    bms.clearmodules();
    7af0:	486f      	ldr	r0, [pc, #444]	; (7cb0 <loop+0x274>)
    7af2:	f7f9 f91b 	bl	d2c <BMSModuleManager::clearmodules()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7af6:	682b      	ldr	r3, [r5, #0]
    7af8:	9319      	str	r3, [sp, #100]	; 0x64
	return ret;
    7afa:	9b19      	ldr	r3, [sp, #100]	; 0x64
    cleartime = millis();
    7afc:	6033      	str	r3, [r6, #0]
    7afe:	e7c8      	b.n	7a92 <loop+0x56>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7b00:	682b      	ldr	r3, [r5, #0]
    7b02:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    7b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bms.getAllVoltTemp();
    7b06:	486a      	ldr	r0, [pc, #424]	; (7cb0 <loop+0x274>)
    looptime = millis();
    7b08:	6013      	str	r3, [r2, #0]
    bms.getAllVoltTemp();
    7b0a:	f7fa fa57 	bl	1fbc <BMSModuleManager::getAllVoltTemp()>
    if (settings.ESSmode == 1)
    7b0e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
      if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint)
    7b12:	4867      	ldr	r0, [pc, #412]	; (7cb0 <loop+0x274>)
    if (settings.ESSmode == 1)
    7b14:	2b01      	cmp	r3, #1
    7b16:	f000 818a 	beq.w	7e2e <loop+0x3f2>
      if (bms.getLowCellVolt() < settings.UnderVSetpoint)
    7b1a:	f7fa fb9f 	bl	225c <BMSModuleManager::getLowCellVolt()>
    7b1e:	6921      	ldr	r1, [r4, #16]
    7b20:	f007 f90c 	bl	ed3c <__aeabi_fcmplt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7b24:	682b      	ldr	r3, [r5, #0]
    7b26:	2800      	cmp	r0, #0
    7b28:	f040 80a2 	bne.w	7c70 <loop+0x234>
    7b2c:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    7b2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
        UnderTimer = millis() + settings.triptime;
    7b30:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    7b32:	4a60      	ldr	r2, [pc, #384]	; (7cb4 <loop+0x278>)
    7b34:	440b      	add	r3, r1
    7b36:	6013      	str	r3, [r2, #0]
      if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint)
    7b38:	485d      	ldr	r0, [pc, #372]	; (7cb0 <loop+0x274>)
    7b3a:	f7fa fb97 	bl	226c <BMSModuleManager::getHighCellVolt()>
    7b3e:	6921      	ldr	r1, [r4, #16]
    7b40:	f007 f8fc 	bl	ed3c <__aeabi_fcmplt>
    7b44:	2800      	cmp	r0, #0
    7b46:	f000 81e2 	beq.w	7f0e <loop+0x4d2>
        bmsstatus = Error;
    7b4a:	4b58      	ldr	r3, [pc, #352]	; (7cac <loop+0x270>)
    7b4c:	2205      	movs	r2, #5
    7b4e:	701a      	strb	r2, [r3, #0]
      if (bms.getHighCellVolt() > settings.OverVSetpoint)
    7b50:	4857      	ldr	r0, [pc, #348]	; (7cb0 <loop+0x274>)
    7b52:	f7fa fb8b 	bl	226c <BMSModuleManager::getHighCellVolt()>
    7b56:	68e1      	ldr	r1, [r4, #12]
    7b58:	f007 f90e 	bl	ed78 <__aeabi_fcmpgt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7b5c:	682b      	ldr	r3, [r5, #0]
    7b5e:	2800      	cmp	r0, #0
    7b60:	f000 8187 	beq.w	7e72 <loop+0x436>
        if (OverTime < millis()) //check is last time not undervoltage is longer thatn UnderDur ago
    7b64:	4a54      	ldr	r2, [pc, #336]	; (7cb8 <loop+0x27c>)
    7b66:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    7b68:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7b6a:	6812      	ldr	r2, [r2, #0]
    7b6c:	429a      	cmp	r2, r3
    7b6e:	d202      	bcs.n	7b76 <loop+0x13a>
          bmsstatus = Error;
    7b70:	4b4e      	ldr	r3, [pc, #312]	; (7cac <loop+0x270>)
    7b72:	2205      	movs	r2, #5
    7b74:	701a      	strb	r2, [r3, #0]
    if (debug != 0)
    7b76:	f8df 8144 	ldr.w	r8, [pc, #324]	; 7cbc <loop+0x280>
    balancing();
    7b7a:	f7ff fdc7 	bl	770c <balancing()>
    if (debug != 0)
    7b7e:	f8d8 3000 	ldr.w	r3, [r8]
    7b82:	2b00      	cmp	r3, #0
    7b84:	f040 8184 	bne.w	7e90 <loop+0x454>
    if (CSVdebug != 0)
    7b88:	4f4d      	ldr	r7, [pc, #308]	; (7cc0 <loop+0x284>)
    7b8a:	683b      	ldr	r3, [r7, #0]
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	f040 818b 	bne.w	7ea8 <loop+0x46c>
    if (inputcheck != 0)
    7b92:	4b4c      	ldr	r3, [pc, #304]	; (7cc4 <loop+0x288>)
    7b94:	681b      	ldr	r3, [r3, #0]
    7b96:	2b00      	cmp	r3, #0
    7b98:	f040 8198 	bne.w	7ecc <loop+0x490>
    if (outputcheck != 0)
    7b9c:	6833      	ldr	r3, [r6, #0]
    7b9e:	2b00      	cmp	r3, #0
    7ba0:	f000 8120 	beq.w	7de4 <loop+0x3a8>
      outputdebug();
    7ba4:	f7ff fbac 	bl	7300 <outputdebug()>
    updateSOC();
    7ba8:	f7fc f8cc 	bl	3d44 <updateSOC()>
    currentlimit();
    7bac:	f7ff f8ce 	bl	6d4c <currentlimit()>
    VEcan();
    7bb0:	f7fc fc66 	bl	4480 <VEcan()>
    if (settings.ESSmode == 1 && settings.ChargerDirect == 0 && CanOnRev == true)
    7bb4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7bb8:	2b01      	cmp	r3, #1
    7bba:	f000 8116 	beq.w	7dea <loop+0x3ae>
    if (cellspresent == 0 && SOCset == 1)
    7bbe:	4e42      	ldr	r6, [pc, #264]	; (7cc8 <loop+0x28c>)
      cellspresent = bms.seriescells();
    7bc0:	483b      	ldr	r0, [pc, #236]	; (7cb0 <loop+0x274>)
    if (cellspresent == 0 && SOCset == 1)
    7bc2:	6833      	ldr	r3, [r6, #0]
    7bc4:	b923      	cbnz	r3, 7bd0 <loop+0x194>
    7bc6:	4b41      	ldr	r3, [pc, #260]	; (7ccc <loop+0x290>)
    7bc8:	681b      	ldr	r3, [r3, #0]
    7bca:	2b01      	cmp	r3, #1
    7bcc:	f000 8352 	beq.w	8274 <loop+0x838>
      if (cellspresent != bms.seriescells() || cellspresent != (settings.Scells * settings.Pstrings)) //detect a fault in cells detected
    7bd0:	f7f9 f8c2 	bl	d58 <BMSModuleManager::seriescells()>
    7bd4:	6833      	ldr	r3, [r6, #0]
    7bd6:	4298      	cmp	r0, r3
    7bd8:	f000 817b 	beq.w	7ed2 <loop+0x496>
        if (debug != 0)
    7bdc:	f8d8 3000 	ldr.w	r3, [r8]
    7be0:	2b00      	cmp	r3, #0
    7be2:	f040 817e 	bne.w	7ee2 <loop+0x4a6>
    alarmupdate();
    7be6:	f7fb f9a9 	bl	2f3c <alarmupdate()>
    if (CSVdebug != 1)
    7bea:	683b      	ldr	r3, [r7, #0]
    7bec:	2b01      	cmp	r3, #1
    7bee:	d001      	beq.n	7bf4 <loop+0x1b8>
      dashupdate();
    7bf0:	f7ff fbdc 	bl	73ac <dashupdate()>
  noInterrupts();                                     //   No - reset WDT
    7bf4:	b672      	cpsid	i
  WDOG_REFRESH = 0xA602;
    7bf6:	4b36      	ldr	r3, [pc, #216]	; (7cd0 <loop+0x294>)
    7bf8:	f24a 6102 	movw	r1, #42498	; 0xa602
  WDOG_REFRESH = 0xB480;
    7bfc:	f24b 4280 	movw	r2, #46208	; 0xb480
  WDOG_REFRESH = 0xA602;
    7c00:	8199      	strh	r1, [r3, #12]
  WDOG_REFRESH = 0xB480;
    7c02:	819a      	strh	r2, [r3, #12]
  interrupts();
    7c04:	b662      	cpsie	i
}
    7c06:	e73a      	b.n	7a7e <loop+0x42>
      if (settings.ChargerDirect == 1)
    7c08:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    7c0c:	2b01      	cmp	r3, #1
    7c0e:	d069      	beq.n	7ce4 <loop+0x2a8>
        if (digitalRead(IN2) == HIGH || CanOnReq == true)
    7c10:	2010      	movs	r0, #16
    7c12:	f003 fb6b 	bl	b2ec <digitalRead>
    7c16:	2801      	cmp	r0, #1
    7c18:	d064      	beq.n	7ce4 <loop+0x2a8>
    7c1a:	4b2e      	ldr	r3, [pc, #184]	; (7cd4 <loop+0x298>)
    7c1c:	781b      	ldrb	r3, [r3, #0]
    7c1e:	2b00      	cmp	r3, #0
    7c20:	d160      	bne.n	7ce4 <loop+0x2a8>
        OutputEnable = 1;
    7c22:	4a2d      	ldr	r2, [pc, #180]	; (7cd8 <loop+0x29c>)
    7c24:	7013      	strb	r3, [r2, #0]
        Discharge = 0;
    7c26:	4b2d      	ldr	r3, [pc, #180]	; (7cdc <loop+0x2a0>)
    7c28:	2500      	movs	r5, #0
        digitalWrite(OUT4, LOW);
    7c2a:	2015      	movs	r0, #21
    7c2c:	4629      	mov	r1, r5
        Discharge = 0;
    7c2e:	601d      	str	r5, [r3, #0]
        digitalWrite(OUT4, LOW);
    7c30:	f003 fb36 	bl	b2a0 <digitalWrite>
        digitalWrite(OUT3, LOW);//turn off charger
    7c34:	4629      	mov	r1, r5
    7c36:	2014      	movs	r0, #20
    7c38:	f003 fb32 	bl	b2a0 <digitalWrite>
        digitalWrite(OUT2, LOW);
    7c3c:	4629      	mov	r1, r5
    7c3e:	200c      	movs	r0, #12
    7c40:	f003 fb2e 	bl	b2a0 <digitalWrite>
        digitalWrite(OUT1, LOW);//turn off discharge
    7c44:	4629      	mov	r1, r5
    7c46:	200b      	movs	r0, #11
    7c48:	f003 fb2a 	bl	b2a0 <digitalWrite>
        if (SOCset == 1)
    7c4c:	4a1f      	ldr	r2, [pc, #124]	; (7ccc <loop+0x290>)
        contctrl = 0; //turn off out 5 and 6
    7c4e:	4b24      	ldr	r3, [pc, #144]	; (7ce0 <loop+0x2a4>)
        if (SOCset == 1)
    7c50:	6811      	ldr	r1, [r2, #0]
        contctrl = 0; //turn off out 5 and 6
    7c52:	601d      	str	r5, [r3, #0]
        if (SOCset == 1)
    7c54:	2901      	cmp	r1, #1
    7c56:	f000 82be 	beq.w	81d6 <loop+0x79a>
    7c5a:	4d10      	ldr	r5, [pc, #64]	; (7c9c <loop+0x260>)
    if ( settings.cursens == Analoguedual || settings.cursens == Analoguesing)
    7c5c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    7c60:	f023 0302 	bic.w	r3, r3, #2
    7c64:	2b01      	cmp	r3, #1
    7c66:	f47f af01 	bne.w	7a6c <loop+0x30>
      getcurrent();
    7c6a:	f7fb fd6d 	bl	3748 <getcurrent()>
    7c6e:	e6fd      	b.n	7a6c <loop+0x30>
        if (UnderTimer < millis()) //check is last time not undervoltage is longer thatn UnderDur ago
    7c70:	4a10      	ldr	r2, [pc, #64]	; (7cb4 <loop+0x278>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c72:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    7c74:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7c76:	6812      	ldr	r2, [r2, #0]
    7c78:	429a      	cmp	r2, r3
    7c7a:	f4bf af5d 	bcs.w	7b38 <loop+0xfc>
          bmsstatus = Error;
    7c7e:	4b0b      	ldr	r3, [pc, #44]	; (7cac <loop+0x270>)
    7c80:	2205      	movs	r2, #5
    7c82:	701a      	strb	r2, [r3, #0]
    7c84:	e758      	b.n	7b38 <loop+0xfc>
}
    7c86:	b01d      	add	sp, #116	; 0x74
    7c88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      chargercomms();
    7c8c:	f7ff bd52 	b.w	7734 <chargercomms()>
    7c90:	1fffb844 	.word	0x1fffb844
    7c94:	1fffb724 	.word	0x1fffb724
    7c98:	1fffb73c 	.word	0x1fffb73c
    7c9c:	1fffba38 	.word	0x1fffba38
    7ca0:	1fffb664 	.word	0x1fffb664
    7ca4:	1fffb5b4 	.word	0x1fffb5b4
    7ca8:	1fffb668 	.word	0x1fffb668
    7cac:	1fffb598 	.word	0x1fffb598
    7cb0:	1fff91ec 	.word	0x1fff91ec
    7cb4:	1fff91d4 	.word	0x1fff91d4
    7cb8:	1fff91b8 	.word	0x1fff91b8
    7cbc:	1fff8848 	.word	0x1fff8848
    7cc0:	1fff91a0 	.word	0x1fff91a0
    7cc4:	1fffb658 	.word	0x1fffb658
    7cc8:	1fffb5a0 	.word	0x1fffb5a0
    7ccc:	1fff91cc 	.word	0x1fff91cc
    7cd0:	40052000 	.word	0x40052000
    7cd4:	1fff91a4 	.word	0x1fff91a4
    7cd8:	1fff91b4 	.word	0x1fff91b4
    7cdc:	1fff91b0 	.word	0x1fff91b0
    7ce0:	1fffb618 	.word	0x1fffb618
        OutputEnable = 1;
    7ce4:	4baf      	ldr	r3, [pc, #700]	; (7fa4 <loop+0x568>)
      if (bmsstatus != Error && bmsstatus != Boot && OutputEnable == 1)
    7ce6:	4fb0      	ldr	r7, [pc, #704]	; (7fa8 <loop+0x56c>)
        OutputEnable = 1;
    7ce8:	2501      	movs	r5, #1
    7cea:	701d      	strb	r5, [r3, #0]
      if (bmsstatus != Error && bmsstatus != Boot && OutputEnable == 1)
    7cec:	783b      	ldrb	r3, [r7, #0]
    7cee:	2b05      	cmp	r3, #5
    7cf0:	d099      	beq.n	7c26 <loop+0x1ea>
    7cf2:	2b00      	cmp	r3, #0
    7cf4:	d097      	beq.n	7c26 <loop+0x1ea>
        contctrl = contctrl | 4; //turn on negative contactor
    7cf6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 7fac <loop+0x570>
        if (settings.tripcont != 0)
    7cfa:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
        contctrl = contctrl | 4; //turn on negative contactor
    7cfe:	f8d8 3000 	ldr.w	r3, [r8]
    7d02:	f043 0304 	orr.w	r3, r3, #4
    7d06:	f8c8 3000 	str.w	r3, [r8]
        if (settings.tripcont != 0)
    7d0a:	2a00      	cmp	r2, #0
    7d0c:	f040 829a 	bne.w	8244 <loop+0x808>
    7d10:	4da7      	ldr	r5, [pc, #668]	; (7fb0 <loop+0x574>)
          if (storagemode == 1)
    7d12:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 7fb4 <loop+0x578>
        if (digitalRead(IN1) == LOW)//Key OFF
    7d16:	2011      	movs	r0, #17
    7d18:	f003 fae8 	bl	b2ec <digitalRead>
          if (storagemode == 1)
    7d1c:	f8d9 3000 	ldr.w	r3, [r9]
        if (digitalRead(IN1) == LOW)//Key OFF
    7d20:	2800      	cmp	r0, #0
    7d22:	f040 82d6 	bne.w	82d2 <loop+0x896>
          if (storagemode == 1)
    7d26:	2b01      	cmp	r3, #1
    7d28:	d101      	bne.n	7d2e <loop+0x2f2>
            storagemode = 0;
    7d2a:	f8c9 0000 	str.w	r0, [r9]
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst)
    7d2e:	48a2      	ldr	r0, [pc, #648]	; (7fb8 <loop+0x57c>)
    7d30:	f7fa fa9c 	bl	226c <BMSModuleManager::getHighCellVolt()>
    7d34:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7d36:	f007 f81f 	bl	ed78 <__aeabi_fcmpgt>
    7d3a:	2800      	cmp	r0, #0
    7d3c:	f040 832d 	bne.w	839a <loop+0x95e>
        if (storagemode == 1)
    7d40:	f8d9 9000 	ldr.w	r9, [r9]
    7d44:	4b9d      	ldr	r3, [pc, #628]	; (7fbc <loop+0x580>)
    7d46:	f1b9 0f01 	cmp.w	r9, #1
    7d4a:	6018      	str	r0, [r3, #0]
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0)
    7d4c:	489a      	ldr	r0, [pc, #616]	; (7fb8 <loop+0x57c>)
        if (storagemode == 1)
    7d4e:	f000 830c 	beq.w	836a <loop+0x92e>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0)
    7d52:	f7fa fa8b 	bl	226c <BMSModuleManager::getHighCellVolt()>
    7d56:	68e1      	ldr	r1, [r4, #12]
    7d58:	f007 f80e 	bl	ed78 <__aeabi_fcmpgt>
    7d5c:	2800      	cmp	r0, #0
    7d5e:	f000 838f 	beq.w	8480 <loop+0xa44>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7d62:	682b      	ldr	r3, [r5, #0]
    7d64:	9306      	str	r3, [sp, #24]
            if ((millis() - overtriptimer) > settings.triptime)
    7d66:	4b96      	ldr	r3, [pc, #600]	; (7fc0 <loop+0x584>)
    7d68:	681a      	ldr	r2, [r3, #0]
	return ret;
    7d6a:	9b06      	ldr	r3, [sp, #24]
    7d6c:	1a9b      	subs	r3, r3, r2
    7d6e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    7d70:	4293      	cmp	r3, r2
    7d72:	f200 83ae 	bhi.w	84d2 <loop+0xa96>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint)
    7d76:	4890      	ldr	r0, [pc, #576]	; (7fb8 <loop+0x57c>)
    7d78:	f7fa fa70 	bl	225c <BMSModuleManager::getLowCellVolt()>
    7d7c:	6921      	ldr	r1, [r4, #16]
    7d7e:	f006 ffdd 	bl	ed3c <__aeabi_fcmplt>
    7d82:	b940      	cbnz	r0, 7d96 <loop+0x35a>
    7d84:	488c      	ldr	r0, [pc, #560]	; (7fb8 <loop+0x57c>)
    7d86:	f7fa fa69 	bl	225c <BMSModuleManager::getLowCellVolt()>
    7d8a:	69e1      	ldr	r1, [r4, #28]
    7d8c:	f006 ffd6 	bl	ed3c <__aeabi_fcmplt>
    7d90:	2800      	cmp	r0, #0
    7d92:	f000 83c0 	beq.w	8516 <loop+0xada>
          if (digitalRead(OUT1) == 1)
    7d96:	200b      	movs	r0, #11
    7d98:	f003 faa8 	bl	b2ec <digitalRead>
    7d9c:	2801      	cmp	r0, #1
    7d9e:	f000 833a 	beq.w	8416 <loop+0x9da>
        if (SOCset == 1)
    7da2:	4b88      	ldr	r3, [pc, #544]	; (7fc4 <loop+0x588>)
    7da4:	681b      	ldr	r3, [r3, #0]
    7da6:	2b01      	cmp	r3, #1
    7da8:	f47f af58 	bne.w	7c5c <loop+0x220>
          if (settings.tripcont == 0)
    7dac:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint)
    7db0:	4881      	ldr	r0, [pc, #516]	; (7fb8 <loop+0x57c>)
          if (settings.tripcont == 0)
    7db2:	2b00      	cmp	r3, #0
    7db4:	f040 83d5 	bne.w	8562 <loop+0xb26>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint)
    7db8:	f7fa fa50 	bl	225c <BMSModuleManager::getLowCellVolt()>
    7dbc:	6921      	ldr	r1, [r4, #16]
    7dbe:	f006 ffbd 	bl	ed3c <__aeabi_fcmplt>
    7dc2:	b940      	cbnz	r0, 7dd6 <loop+0x39a>
    7dc4:	487c      	ldr	r0, [pc, #496]	; (7fb8 <loop+0x57c>)
    7dc6:	f7fa fa51 	bl	226c <BMSModuleManager::getHighCellVolt()>
    7dca:	68e1      	ldr	r1, [r4, #12]
    7dcc:	f006 ffd4 	bl	ed78 <__aeabi_fcmpgt>
    7dd0:	2800      	cmp	r0, #0
    7dd2:	f000 8477 	beq.w	86c4 <loop+0xc88>
              digitalWrite(OUT2, HIGH);//trip breaker
    7dd6:	2101      	movs	r1, #1
    7dd8:	200c      	movs	r0, #12
    7dda:	f003 fa61 	bl	b2a0 <digitalWrite>
              bmsstatus = Error;
    7dde:	2305      	movs	r3, #5
    7de0:	703b      	strb	r3, [r7, #0]
    7de2:	e73b      	b.n	7c5c <loop+0x220>
      gaugeupdate();
    7de4:	f7fb f93e 	bl	3064 <gaugeupdate()>
    7de8:	e6de      	b.n	7ba8 <loop+0x16c>
    if (settings.ESSmode == 1 && settings.ChargerDirect == 0 && CanOnRev == true)
    7dea:	f894 60cc 	ldrb.w	r6, [r4, #204]	; 0xcc
    7dee:	2e00      	cmp	r6, #0
    7df0:	f47f aee5 	bne.w	7bbe <loop+0x182>
    7df4:	4b74      	ldr	r3, [pc, #464]	; (7fc8 <loop+0x58c>)
    7df6:	781b      	ldrb	r3, [r3, #0]
    7df8:	2b00      	cmp	r3, #0
    7dfa:	f43f aee0 	beq.w	7bbe <loop+0x182>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7dfe:	682b      	ldr	r3, [r5, #0]
    7e00:	9317      	str	r3, [sp, #92]	; 0x5c
      if ((millis() - CanOntimeout) > 5000)
    7e02:	4b72      	ldr	r3, [pc, #456]	; (7fcc <loop+0x590>)
    7e04:	681a      	ldr	r2, [r3, #0]
	return ret;
    7e06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    7e08:	1a9b      	subs	r3, r3, r2
    7e0a:	f241 3288 	movw	r2, #5000	; 0x1388
    7e0e:	4293      	cmp	r3, r2
    7e10:	f67f aed5 	bls.w	7bbe <loop+0x182>
        Serial.println();
    7e14:	486e      	ldr	r0, [pc, #440]	; (7fd0 <loop+0x594>)
    7e16:	f002 fb6f 	bl	a4f8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7e1a:	211c      	movs	r1, #28
    7e1c:	486d      	ldr	r0, [pc, #436]	; (7fd4 <loop+0x598>)
    7e1e:	f005 f8b1 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    7e22:	486b      	ldr	r0, [pc, #428]	; (7fd0 <loop+0x594>)
    7e24:	f002 fb68 	bl	a4f8 <Print::println()>
        CanOnReq = false;
    7e28:	4b6b      	ldr	r3, [pc, #428]	; (7fd8 <loop+0x59c>)
    7e2a:	701e      	strb	r6, [r3, #0]
    7e2c:	e6c7      	b.n	7bbe <loop+0x182>
      if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint)
    7e2e:	f7fa fa15 	bl	225c <BMSModuleManager::getLowCellVolt()>
    7e32:	6921      	ldr	r1, [r4, #16]
    7e34:	f006 ff82 	bl	ed3c <__aeabi_fcmplt>
    7e38:	2800      	cmp	r0, #0
    7e3a:	f000 8236 	beq.w	82aa <loop+0x86e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e3e:	682b      	ldr	r3, [r5, #0]
        if (undertriptimer > millis()) //check is last time not undervoltage is longer thatn UnderDur ago
    7e40:	4a66      	ldr	r2, [pc, #408]	; (7fdc <loop+0x5a0>)
    7e42:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    7e44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7e46:	6812      	ldr	r2, [r2, #0]
    7e48:	429a      	cmp	r2, r3
    7e4a:	f200 81c0 	bhi.w	81ce <loop+0x792>
      if (bms.getLowCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint)
    7e4e:	485a      	ldr	r0, [pc, #360]	; (7fb8 <loop+0x57c>)
    7e50:	f7fa fa04 	bl	225c <BMSModuleManager::getLowCellVolt()>
    7e54:	68e1      	ldr	r1, [r4, #12]
    7e56:	f006 ff8f 	bl	ed78 <__aeabi_fcmpgt>
    7e5a:	2800      	cmp	r0, #0
    7e5c:	f000 8214 	beq.w	8288 <loop+0x84c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e60:	682b      	ldr	r3, [r5, #0]
        if (overtriptimer > millis()) //check is last time not undervoltage is longer thatn UnderDur ago
    7e62:	4a57      	ldr	r2, [pc, #348]	; (7fc0 <loop+0x584>)
    7e64:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    7e66:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7e68:	6812      	ldr	r2, [r2, #0]
    7e6a:	429a      	cmp	r2, r3
    7e6c:	f67f ae83 	bls.w	7b76 <loop+0x13a>
    7e70:	e67e      	b.n	7b70 <loop+0x134>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e72:	9315      	str	r3, [sp, #84]	; 0x54
	return ret;
    7e74:	9915      	ldr	r1, [sp, #84]	; 0x54
        OverTime = millis() + settings.triptime;
    7e76:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    7e78:	4a59      	ldr	r2, [pc, #356]	; (7fe0 <loop+0x5a4>)
    if (debug != 0)
    7e7a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 7fe4 <loop+0x5a8>
        OverTime = millis() + settings.triptime;
    7e7e:	440b      	add	r3, r1
    7e80:	6013      	str	r3, [r2, #0]
    balancing();
    7e82:	f7ff fc43 	bl	770c <balancing()>
    if (debug != 0)
    7e86:	f8d8 3000 	ldr.w	r3, [r8]
    7e8a:	2b00      	cmp	r3, #0
    7e8c:	f43f ae7c 	beq.w	7b88 <loop+0x14c>
      printbmsstat();
    7e90:	f7fb fa00 	bl	3294 <printbmsstat()>
      bms.printPackDetails(debugdigits);
    7e94:	4b54      	ldr	r3, [pc, #336]	; (7fe8 <loop+0x5ac>)
    if (CSVdebug != 0)
    7e96:	4f55      	ldr	r7, [pc, #340]	; (7fec <loop+0x5b0>)
      bms.printPackDetails(debugdigits);
    7e98:	6819      	ldr	r1, [r3, #0]
    7e9a:	4847      	ldr	r0, [pc, #284]	; (7fb8 <loop+0x57c>)
    7e9c:	f7fa fa94 	bl	23c8 <BMSModuleManager::printPackDetails(int)>
    if (CSVdebug != 0)
    7ea0:	683b      	ldr	r3, [r7, #0]
    7ea2:	2b00      	cmp	r3, #0
    7ea4:	f43f ae75 	beq.w	7b92 <loop+0x156>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ea8:	682b      	ldr	r3, [r5, #0]
    7eaa:	9316      	str	r3, [sp, #88]	; 0x58
      bms.printAllCSV(millis(), currentact, SOC, delim);
    7eac:	4b50      	ldr	r3, [pc, #320]	; (7ff0 <loop+0x5b4>)
    7eae:	4a51      	ldr	r2, [pc, #324]	; (7ff4 <loop+0x5b8>)
    7eb0:	681b      	ldr	r3, [r3, #0]
    7eb2:	9300      	str	r3, [sp, #0]
    7eb4:	4b50      	ldr	r3, [pc, #320]	; (7ff8 <loop+0x5bc>)
	return ret;
    7eb6:	9916      	ldr	r1, [sp, #88]	; 0x58
    7eb8:	681b      	ldr	r3, [r3, #0]
    7eba:	6812      	ldr	r2, [r2, #0]
    7ebc:	483e      	ldr	r0, [pc, #248]	; (7fb8 <loop+0x57c>)
    7ebe:	f7fa fbd9 	bl	2674 <BMSModuleManager::printAllCSV(unsigned long, float, int, int)>
    if (inputcheck != 0)
    7ec2:	4b4e      	ldr	r3, [pc, #312]	; (7ffc <loop+0x5c0>)
    7ec4:	681b      	ldr	r3, [r3, #0]
    7ec6:	2b00      	cmp	r3, #0
    7ec8:	f43f ae68 	beq.w	7b9c <loop+0x160>
      inputdebug();
    7ecc:	f7ff f9b2 	bl	7234 <inputdebug()>
    7ed0:	e664      	b.n	7b9c <loop+0x160>
      if (cellspresent != bms.seriescells() || cellspresent != (settings.Scells * settings.Pstrings)) //detect a fault in cells detected
    7ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    7ed4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    7ed6:	fb02 f303 	mul.w	r3, r2, r3
    7eda:	4298      	cmp	r0, r3
    7edc:	f47f ae7e 	bne.w	7bdc <loop+0x1a0>
    7ee0:	e681      	b.n	7be6 <loop+0x1aa>
    7ee2:	2102      	movs	r1, #2
    7ee4:	4846      	ldr	r0, [pc, #280]	; (8000 <loop+0x5c4>)
    7ee6:	f005 f84d 	bl	cf84 <usb_serial_write>
    7eea:	4839      	ldr	r0, [pc, #228]	; (7fd0 <loop+0x594>)
    7eec:	f002 fb04 	bl	a4f8 <Print::println()>
    7ef0:	211d      	movs	r1, #29
    7ef2:	4844      	ldr	r0, [pc, #272]	; (8004 <loop+0x5c8>)
    7ef4:	f005 f846 	bl	cf84 <usb_serial_write>
    7ef8:	2102      	movs	r1, #2
    7efa:	4841      	ldr	r0, [pc, #260]	; (8000 <loop+0x5c4>)
    7efc:	f005 f842 	bl	cf84 <usb_serial_write>
    7f00:	4833      	ldr	r0, [pc, #204]	; (7fd0 <loop+0x594>)
    7f02:	f002 faf9 	bl	a4f8 <Print::println()>
          bmsstatus = Error;
    7f06:	4b28      	ldr	r3, [pc, #160]	; (7fa8 <loop+0x56c>)
    7f08:	2205      	movs	r2, #5
    7f0a:	701a      	strb	r2, [r3, #0]
    7f0c:	e66b      	b.n	7be6 <loop+0x1aa>
      if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint)
    7f0e:	482a      	ldr	r0, [pc, #168]	; (7fb8 <loop+0x57c>)
    7f10:	f7fa fa2e 	bl	2370 <BMSModuleManager::getHighTemperature()>
    7f14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7f16:	f006 ff2f 	bl	ed78 <__aeabi_fcmpgt>
    7f1a:	2800      	cmp	r0, #0
    7f1c:	f47f ae15 	bne.w	7b4a <loop+0x10e>
    7f20:	e616      	b.n	7b50 <loop+0x114>
          Discharge = 0;
    7f22:	2500      	movs	r5, #0
    7f24:	4b38      	ldr	r3, [pc, #224]	; (8008 <loop+0x5cc>)
          digitalWrite(OUT4, LOW);
    7f26:	4629      	mov	r1, r5
    7f28:	2015      	movs	r0, #21
          Discharge = 0;
    7f2a:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT4, LOW);
    7f2c:	f003 f9b8 	bl	b2a0 <digitalWrite>
          digitalWrite(OUT3, LOW);//turn off charger
    7f30:	4629      	mov	r1, r5
    7f32:	2014      	movs	r0, #20
    7f34:	f003 f9b4 	bl	b2a0 <digitalWrite>
          digitalWrite(OUT2, LOW);
    7f38:	4629      	mov	r1, r5
    7f3a:	200c      	movs	r0, #12
    7f3c:	f003 f9b0 	bl	b2a0 <digitalWrite>
          digitalWrite(OUT1, LOW);//turn off discharge
    7f40:	4629      	mov	r1, r5
    7f42:	200b      	movs	r0, #11
    7f44:	f003 f9ac 	bl	b2a0 <digitalWrite>
          contctrl = 0; //turn off out 5 and 6
    7f48:	4b18      	ldr	r3, [pc, #96]	; (7fac <loop+0x570>)
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst)
    7f4a:	481b      	ldr	r0, [pc, #108]	; (7fb8 <loop+0x57c>)
          contctrl = 0; //turn off out 5 and 6
    7f4c:	601d      	str	r5, [r3, #0]
          accurlim = 0;
    7f4e:	4b2f      	ldr	r3, [pc, #188]	; (800c <loop+0x5d0>)
    7f50:	801d      	strh	r5, [r3, #0]
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst)
    7f52:	f7fa f98b 	bl	226c <BMSModuleManager::getHighCellVolt()>
    7f56:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7f58:	f006 ff0e 	bl	ed78 <__aeabi_fcmpgt>
    7f5c:	2800      	cmp	r0, #0
    7f5e:	f040 81dd 	bne.w	831c <loop+0x8e0>
    7f62:	4b16      	ldr	r3, [pc, #88]	; (7fbc <loop+0x580>)
    7f64:	6018      	str	r0, [r3, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) && bms.getHighTemperature() < (settings.OverTSetpoint - settings.WarnToff)) //detect AC present for charging and check not balancing
    7f66:	2012      	movs	r0, #18
    7f68:	f003 f9c0 	bl	b2ec <digitalRead>
    7f6c:	2801      	cmp	r0, #1
    7f6e:	f000 8226 	beq.w	83be <loop+0x982>
    7f72:	4d0f      	ldr	r5, [pc, #60]	; (7fb0 <loop+0x574>)
          if (digitalRead(IN1) == HIGH && bms.getLowCellVolt() > settings.DischVsetpoint) //detect Key ON
    7f74:	2011      	movs	r0, #17
    7f76:	f003 f9b9 	bl	b2ec <digitalRead>
    7f7a:	2801      	cmp	r0, #1
    7f7c:	f47f ae6e 	bne.w	7c5c <loop+0x220>
    7f80:	480d      	ldr	r0, [pc, #52]	; (7fb8 <loop+0x57c>)
    7f82:	f7fa f96b 	bl	225c <BMSModuleManager::getLowCellVolt()>
    7f86:	69e1      	ldr	r1, [r4, #28]
    7f88:	f006 fef6 	bl	ed78 <__aeabi_fcmpgt>
    7f8c:	2800      	cmp	r0, #0
    7f8e:	f43f ae65 	beq.w	7c5c <loop+0x220>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7f92:	682a      	ldr	r2, [r5, #0]
    7f94:	920b      	str	r2, [sp, #44]	; 0x2c
            bmsstatus = Precharge;
    7f96:	2304      	movs	r3, #4
    7f98:	703b      	strb	r3, [r7, #0]
            Pretimer = millis();
    7f9a:	4b1d      	ldr	r3, [pc, #116]	; (8010 <loop+0x5d4>)
	return ret;
    7f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7f9e:	601a      	str	r2, [r3, #0]
    7fa0:	e65c      	b.n	7c5c <loop+0x220>
    7fa2:	bf00      	nop
    7fa4:	1fff91b4 	.word	0x1fff91b4
    7fa8:	1fffb598 	.word	0x1fffb598
    7fac:	1fffb618 	.word	0x1fffb618
    7fb0:	1fffba38 	.word	0x1fffba38
    7fb4:	1fffb820 	.word	0x1fffb820
    7fb8:	1fff91ec 	.word	0x1fff91ec
    7fbc:	1fff91e8 	.word	0x1fff91e8
    7fc0:	1fffb72c 	.word	0x1fffb72c
    7fc4:	1fff91cc 	.word	0x1fff91cc
    7fc8:	1fff91a5 	.word	0x1fff91a5
    7fcc:	1fff91a8 	.word	0x1fff91a8
    7fd0:	1fff89f8 	.word	0x1fff89f8
    7fd4:	00016c78 	.word	0x00016c78
    7fd8:	1fff91a4 	.word	0x1fff91a4
    7fdc:	1fffb82c 	.word	0x1fffb82c
    7fe0:	1fff91b8 	.word	0x1fff91b8
    7fe4:	1fff8848 	.word	0x1fff8848
    7fe8:	1fff884c 	.word	0x1fff884c
    7fec:	1fff91a0 	.word	0x1fff91a0
    7ff0:	1fffb634 	.word	0x1fffb634
    7ff4:	1fffb62c 	.word	0x1fffb62c
    7ff8:	1fff8828 	.word	0x1fff8828
    7ffc:	1fffb658 	.word	0x1fffb658
    8000:	00016af4 	.word	0x00016af4
    8004:	00016c98 	.word	0x00016c98
    8008:	1fff91b0 	.word	0x1fff91b0
    800c:	1fff91d8 	.word	0x1fff91d8
    8010:	1fff91bc 	.word	0x1fff91bc
          Discharge = 1;
    8014:	4bb2      	ldr	r3, [pc, #712]	; (82e0 <loop+0x8a4>)
    8016:	2501      	movs	r5, #1
    8018:	601d      	str	r5, [r3, #0]
          accurlim = 0;
    801a:	4bb2      	ldr	r3, [pc, #712]	; (82e4 <loop+0x8a8>)
    801c:	2200      	movs	r2, #0
          if (digitalRead(IN1) == LOW)//Key OFF
    801e:	2011      	movs	r0, #17
          accurlim = 0;
    8020:	801a      	strh	r2, [r3, #0]
          if (digitalRead(IN1) == LOW)//Key OFF
    8022:	f003 f963 	bl	b2ec <digitalRead>
    8026:	b900      	cbnz	r0, 802a <loop+0x5ee>
            bmsstatus = Ready;
    8028:	703d      	strb	r5, [r7, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) && bms.getHighTemperature() < (settings.OverTSetpoint - settings.WarnToff)) //detect AC present for charging and check not balancing
    802a:	2012      	movs	r0, #18
    802c:	f003 f95e 	bl	b2ec <digitalRead>
    8030:	2801      	cmp	r0, #1
    8032:	f47f ae12 	bne.w	7c5a <loop+0x21e>
    8036:	48ac      	ldr	r0, [pc, #688]	; (82e8 <loop+0x8ac>)
    8038:	f7fa f918 	bl	226c <BMSModuleManager::getHighCellVolt()>
    803c:	6a21      	ldr	r1, [r4, #32]
    803e:	4605      	mov	r5, r0
    8040:	69a0      	ldr	r0, [r4, #24]
    8042:	f006 fbd3 	bl	e7ec <__aeabi_fsub>
    8046:	4601      	mov	r1, r0
    8048:	4628      	mov	r0, r5
    804a:	f006 fe77 	bl	ed3c <__aeabi_fcmplt>
    804e:	2800      	cmp	r0, #0
    8050:	f43f ae03 	beq.w	7c5a <loop+0x21e>
    8054:	48a4      	ldr	r0, [pc, #656]	; (82e8 <loop+0x8ac>)
    8056:	f7fa f98b 	bl	2370 <BMSModuleManager::getHighTemperature()>
    805a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    805c:	4605      	mov	r5, r0
    805e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8060:	f006 fbc4 	bl	e7ec <__aeabi_fsub>
    8064:	4601      	mov	r1, r0
    8066:	4628      	mov	r0, r5
    8068:	f006 fe68 	bl	ed3c <__aeabi_fcmplt>
    806c:	2800      	cmp	r0, #0
    806e:	f43f adf4 	beq.w	7c5a <loop+0x21e>
            bmsstatus = Charge;
    8072:	2303      	movs	r3, #3
    8074:	4d9d      	ldr	r5, [pc, #628]	; (82ec <loop+0x8b0>)
    8076:	703b      	strb	r3, [r7, #0]
    8078:	e5f0      	b.n	7c5c <loop+0x220>
          if (settings.ChargerDirect > 0)
    807a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    807e:	2b00      	cmp	r3, #0
    8080:	f040 815e 	bne.w	8340 <loop+0x904>
    8084:	4d96      	ldr	r5, [pc, #600]	; (82e0 <loop+0x8a4>)
          Discharge = 0;
    8086:	2300      	movs	r3, #0
          if (digitalRead(IN2) == HIGH)
    8088:	2010      	movs	r0, #16
          Discharge = 0;
    808a:	602b      	str	r3, [r5, #0]
          if (digitalRead(IN2) == HIGH)
    808c:	f003 f92e 	bl	b2ec <digitalRead>
    8090:	f1a0 0301 	sub.w	r3, r0, #1
    8094:	4a96      	ldr	r2, [pc, #600]	; (82f0 <loop+0x8b4>)
    8096:	4d97      	ldr	r5, [pc, #604]	; (82f4 <loop+0x8b8>)
    8098:	fab3 f383 	clz	r3, r3
    809c:	095b      	lsrs	r3, r3, #5
          digitalWrite(OUT3, HIGH);//enable charger
    809e:	2101      	movs	r1, #1
    80a0:	2014      	movs	r0, #20
          if (digitalRead(IN2) == HIGH)
    80a2:	7013      	strb	r3, [r2, #0]
          digitalWrite(OUT3, HIGH);//enable charger
    80a4:	f003 f8fc 	bl	b2a0 <digitalWrite>
          if (bms.getHighCellVolt() > settings.balanceVoltage)
    80a8:	488f      	ldr	r0, [pc, #572]	; (82e8 <loop+0x8ac>)
    80aa:	f7fa f8df 	bl	226c <BMSModuleManager::getHighCellVolt()>
    80ae:	6d21      	ldr	r1, [r4, #80]	; 0x50
    80b0:	f006 fe62 	bl	ed78 <__aeabi_fcmpgt>
    80b4:	3800      	subs	r0, #0
    80b6:	bf18      	it	ne
    80b8:	2001      	movne	r0, #1
    80ba:	6028      	str	r0, [r5, #0]
          if (bms.getHighCellVolt() > settings.ChargeVsetpoint || bms.getHighTemperature() > settings.OverTSetpoint)
    80bc:	488a      	ldr	r0, [pc, #552]	; (82e8 <loop+0x8ac>)
    80be:	f7fa f8d5 	bl	226c <BMSModuleManager::getHighCellVolt()>
    80c2:	69a1      	ldr	r1, [r4, #24]
    80c4:	f006 fe58 	bl	ed78 <__aeabi_fcmpgt>
    80c8:	b930      	cbnz	r0, 80d8 <loop+0x69c>
    80ca:	4887      	ldr	r0, [pc, #540]	; (82e8 <loop+0x8ac>)
    80cc:	f7fa f950 	bl	2370 <BMSModuleManager::getHighTemperature()>
    80d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    80d2:	f006 fe51 	bl	ed78 <__aeabi_fcmpgt>
    80d6:	b330      	cbz	r0, 8126 <loop+0x6ea>
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys))
    80d8:	4883      	ldr	r0, [pc, #524]	; (82e8 <loop+0x8ac>)
    80da:	f7fa f94d 	bl	2378 <BMSModuleManager::getAvgCellVolt()>
    80de:	6a21      	ldr	r1, [r4, #32]
    80e0:	4605      	mov	r5, r0
    80e2:	69a0      	ldr	r0, [r4, #24]
    80e4:	f006 fb82 	bl	e7ec <__aeabi_fsub>
    80e8:	4601      	mov	r1, r0
    80ea:	4628      	mov	r0, r5
    80ec:	f006 fe44 	bl	ed78 <__aeabi_fcmpgt>
    80f0:	2800      	cmp	r0, #0
    80f2:	f000 80eb 	beq.w	82cc <loop+0x890>
    SOC = 100;
    80f6:	4b80      	ldr	r3, [pc, #512]	; (82f8 <loop+0x8bc>)
    80f8:	2264      	movs	r2, #100	; 0x64
    SOC = 95;
    80fa:	601a      	str	r2, [r3, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778 ; //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    80fc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    80fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
    8100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8104:	fb02 f303 	mul.w	r3, r2, r3
    8108:	fb03 f000 	mul.w	r0, r3, r0
    810c:	f006 fc24 	bl	e958 <__aeabi_i2f>
    8110:	497a      	ldr	r1, [pc, #488]	; (82fc <loop+0x8c0>)
    8112:	f006 fd29 	bl	eb68 <__aeabi_fdiv>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778 ; //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    8116:	4a7a      	ldr	r2, [pc, #488]	; (8300 <loop+0x8c4>)
            digitalWrite(OUT3, LOW);//turn off charger
    8118:	2100      	movs	r1, #0
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778 ; //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    811a:	6010      	str	r0, [r2, #0]
            digitalWrite(OUT3, LOW);//turn off charger
    811c:	2014      	movs	r0, #20
    811e:	f003 f8bf 	bl	b2a0 <digitalWrite>
            bmsstatus = Ready;
    8122:	2301      	movs	r3, #1
    8124:	703b      	strb	r3, [r7, #0]
          if (digitalRead(IN3) == LOW)//detect AC not present for charging
    8126:	2012      	movs	r0, #18
    8128:	f003 f8e0 	bl	b2ec <digitalRead>
    812c:	2800      	cmp	r0, #0
    812e:	f47f ad94 	bne.w	7c5a <loop+0x21e>
          bmsstatus = Ready;
    8132:	2301      	movs	r3, #1
    8134:	4d6d      	ldr	r5, [pc, #436]	; (82ec <loop+0x8b0>)
    8136:	703b      	strb	r3, [r7, #0]
          break;
    8138:	e590      	b.n	7c5c <loop+0x220>
          Discharge = 0;
    813a:	4b69      	ldr	r3, [pc, #420]	; (82e0 <loop+0x8a4>)
    813c:	4d6b      	ldr	r5, [pc, #428]	; (82ec <loop+0x8b0>)
    813e:	2200      	movs	r2, #0
    8140:	601a      	str	r2, [r3, #0]
          Prechargecon();
    8142:	f7fb ff65 	bl	4010 <Prechargecon()>
          break;
    8146:	e589      	b.n	7c5c <loop+0x220>
          Discharge = 0;
    8148:	4b65      	ldr	r3, [pc, #404]	; (82e0 <loop+0x8a4>)
    814a:	2500      	movs	r5, #0
          digitalWrite(OUT4, LOW);
    814c:	4629      	mov	r1, r5
    814e:	2015      	movs	r0, #21
          Discharge = 0;
    8150:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT4, LOW);
    8152:	f003 f8a5 	bl	b2a0 <digitalWrite>
          digitalWrite(OUT3, LOW);//turn off charger
    8156:	4629      	mov	r1, r5
    8158:	2014      	movs	r0, #20
    815a:	f003 f8a1 	bl	b2a0 <digitalWrite>
          digitalWrite(OUT2, LOW);
    815e:	4629      	mov	r1, r5
    8160:	200c      	movs	r0, #12
    8162:	f003 f89d 	bl	b2a0 <digitalWrite>
          digitalWrite(OUT1, LOW);//turn off discharge
    8166:	4629      	mov	r1, r5
    8168:	200b      	movs	r0, #11
    816a:	f003 f899 	bl	b2a0 <digitalWrite>
          contctrl = 0; //turn off out 5 and 6
    816e:	4b65      	ldr	r3, [pc, #404]	; (8304 <loop+0x8c8>)
            if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW)
    8170:	485d      	ldr	r0, [pc, #372]	; (82e8 <loop+0x8ac>)
          contctrl = 0; //turn off out 5 and 6
    8172:	601d      	str	r5, [r3, #0]
            if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW)
    8174:	f7fa f872 	bl	225c <BMSModuleManager::getLowCellVolt()>
    8178:	6921      	ldr	r1, [r4, #16]
    817a:	f006 fdf3 	bl	ed64 <__aeabi_fcmpge>
    817e:	2800      	cmp	r0, #0
    8180:	f43f ad6b 	beq.w	7c5a <loop+0x21e>
    8184:	4858      	ldr	r0, [pc, #352]	; (82e8 <loop+0x8ac>)
    8186:	f7fa f871 	bl	226c <BMSModuleManager::getHighCellVolt()>
    818a:	68e1      	ldr	r1, [r4, #12]
    818c:	f006 fde0 	bl	ed50 <__aeabi_fcmple>
    8190:	2800      	cmp	r0, #0
    8192:	f43f ad62 	beq.w	7c5a <loop+0x21e>
    8196:	2011      	movs	r0, #17
    8198:	f003 f8a8 	bl	b2ec <digitalRead>
    819c:	2800      	cmp	r0, #0
    819e:	d0c8      	beq.n	8132 <loop+0x6f6>
    81a0:	e55b      	b.n	7c5a <loop+0x21e>
          Discharge = 0;
    81a2:	4b4f      	ldr	r3, [pc, #316]	; (82e0 <loop+0x8a4>)
    81a4:	2500      	movs	r5, #0
          digitalWrite(OUT4, LOW);
    81a6:	4629      	mov	r1, r5
    81a8:	2015      	movs	r0, #21
          Discharge = 0;
    81aa:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT4, LOW);
    81ac:	f003 f878 	bl	b2a0 <digitalWrite>
          digitalWrite(OUT3, LOW);//turn off charger
    81b0:	4629      	mov	r1, r5
    81b2:	2014      	movs	r0, #20
    81b4:	f003 f874 	bl	b2a0 <digitalWrite>
          digitalWrite(OUT2, LOW);
    81b8:	4629      	mov	r1, r5
    81ba:	200c      	movs	r0, #12
    81bc:	f003 f870 	bl	b2a0 <digitalWrite>
          digitalWrite(OUT1, LOW);//turn off discharge
    81c0:	4629      	mov	r1, r5
    81c2:	200b      	movs	r0, #11
    81c4:	f003 f86c 	bl	b2a0 <digitalWrite>
          contctrl = 0;
    81c8:	4b4e      	ldr	r3, [pc, #312]	; (8304 <loop+0x8c8>)
    81ca:	601d      	str	r5, [r3, #0]
    81cc:	e7b1      	b.n	8132 <loop+0x6f6>
          bmsstatus = Error;
    81ce:	4b4e      	ldr	r3, [pc, #312]	; (8308 <loop+0x8cc>)
    81d0:	2205      	movs	r2, #5
    81d2:	701a      	strb	r2, [r3, #0]
    81d4:	e63b      	b.n	7e4e <loop+0x412>
          if (settings.tripcont == 0)
    81d6:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
            digitalWrite(OUT2, HIGH);//trip breaker
    81da:	200c      	movs	r0, #12
          if (settings.tripcont == 0)
    81dc:	b123      	cbz	r3, 81e8 <loop+0x7ac>
            digitalWrite(OUT2, LOW);//turn off contactor
    81de:	4629      	mov	r1, r5
    81e0:	f003 f85e 	bl	b2a0 <digitalWrite>
            digitalWrite(OUT4, LOW);//ensure precharge is low
    81e4:	4629      	mov	r1, r5
    81e6:	2015      	movs	r0, #21
    81e8:	f003 f85a 	bl	b2a0 <digitalWrite>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint && bms.getHighTemperature() < settings.OverTSetpoint && cellspresent == bms.seriescells() && cellspresent == (settings.Scells * settings.Pstrings))
    81ec:	483e      	ldr	r0, [pc, #248]	; (82e8 <loop+0x8ac>)
    81ee:	f7fa f835 	bl	225c <BMSModuleManager::getLowCellVolt()>
    81f2:	6921      	ldr	r1, [r4, #16]
    81f4:	f006 fdc0 	bl	ed78 <__aeabi_fcmpgt>
    81f8:	2800      	cmp	r0, #0
    81fa:	f43f ad2e 	beq.w	7c5a <loop+0x21e>
    81fe:	483a      	ldr	r0, [pc, #232]	; (82e8 <loop+0x8ac>)
    8200:	f7fa f834 	bl	226c <BMSModuleManager::getHighCellVolt()>
    8204:	68e1      	ldr	r1, [r4, #12]
    8206:	f006 fd99 	bl	ed3c <__aeabi_fcmplt>
    820a:	2800      	cmp	r0, #0
    820c:	f43f ad25 	beq.w	7c5a <loop+0x21e>
    8210:	4835      	ldr	r0, [pc, #212]	; (82e8 <loop+0x8ac>)
    8212:	f7fa f8ad 	bl	2370 <BMSModuleManager::getHighTemperature()>
    8216:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8218:	f006 fd90 	bl	ed3c <__aeabi_fcmplt>
    821c:	2800      	cmp	r0, #0
    821e:	f43f ad1c 	beq.w	7c5a <loop+0x21e>
    8222:	4831      	ldr	r0, [pc, #196]	; (82e8 <loop+0x8ac>)
    8224:	f7f8 fd98 	bl	d58 <BMSModuleManager::seriescells()>
    8228:	4a38      	ldr	r2, [pc, #224]	; (830c <loop+0x8d0>)
    822a:	6812      	ldr	r2, [r2, #0]
    822c:	4290      	cmp	r0, r2
    822e:	f47f ad14 	bne.w	7c5a <loop+0x21e>
    8232:	6da2      	ldr	r2, [r4, #88]	; 0x58
    8234:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    8236:	fb01 f202 	mul.w	r2, r1, r2
    823a:	4290      	cmp	r0, r2
    823c:	f47f ad0d 	bne.w	7c5a <loop+0x21e>
    8240:	4f31      	ldr	r7, [pc, #196]	; (8308 <loop+0x8cc>)
            bmsstatus = Ready;
    8242:	e776      	b.n	8132 <loop+0x6f6>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint)
    8244:	4828      	ldr	r0, [pc, #160]	; (82e8 <loop+0x8ac>)
    8246:	f7fa f809 	bl	225c <BMSModuleManager::getLowCellVolt()>
    824a:	6921      	ldr	r1, [r4, #16]
    824c:	f006 fd94 	bl	ed78 <__aeabi_fcmpgt>
    8250:	b140      	cbz	r0, 8264 <loop+0x828>
    8252:	4825      	ldr	r0, [pc, #148]	; (82e8 <loop+0x8ac>)
    8254:	f7fa f80a 	bl	226c <BMSModuleManager::getHighCellVolt()>
    8258:	68e1      	ldr	r1, [r4, #12]
    825a:	f006 fd6f 	bl	ed3c <__aeabi_fcmplt>
    825e:	2800      	cmp	r0, #0
    8260:	f040 819e 	bne.w	85a0 <loop+0xb64>
            digitalWrite(OUT4, LOW);//ensure precharge is low
    8264:	2100      	movs	r1, #0
    8266:	2015      	movs	r0, #21
    8268:	f003 f81a 	bl	b2a0 <digitalWrite>
            mainconttimer = 0;
    826c:	4b28      	ldr	r3, [pc, #160]	; (8310 <loop+0x8d4>)
    826e:	2200      	movs	r2, #0
    8270:	601a      	str	r2, [r3, #0]
    8272:	e54d      	b.n	7d10 <loop+0x2d4>
      cellspresent = bms.seriescells();
    8274:	f7f8 fd70 	bl	d58 <BMSModuleManager::seriescells()>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    8278:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      cellspresent = bms.seriescells();
    827a:	6030      	str	r0, [r6, #0]
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    827c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    8280:	4819      	ldr	r0, [pc, #100]	; (82e8 <loop+0x8ac>)
    8282:	f7f9 fff9 	bl	2278 <BMSModuleManager::setSensors(int, float)>
    8286:	e4ae      	b.n	7be6 <loop+0x1aa>
      if (bms.getLowCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint)
    8288:	4817      	ldr	r0, [pc, #92]	; (82e8 <loop+0x8ac>)
    828a:	f7f9 ffef 	bl	226c <BMSModuleManager::getHighCellVolt()>
    828e:	68e1      	ldr	r1, [r4, #12]
    8290:	f006 fd72 	bl	ed78 <__aeabi_fcmpgt>
    8294:	2800      	cmp	r0, #0
    8296:	f47f ade3 	bne.w	7e60 <loop+0x424>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    829a:	682b      	ldr	r3, [r5, #0]
    829c:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    829e:	9911      	ldr	r1, [sp, #68]	; 0x44
        overtriptimer = millis() + settings.triptime;
    82a0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    82a2:	4a1c      	ldr	r2, [pc, #112]	; (8314 <loop+0x8d8>)
    82a4:	440b      	add	r3, r1
    82a6:	6013      	str	r3, [r2, #0]
    82a8:	e465      	b.n	7b76 <loop+0x13a>
      if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint)
    82aa:	480f      	ldr	r0, [pc, #60]	; (82e8 <loop+0x8ac>)
    82ac:	f7f9 ffde 	bl	226c <BMSModuleManager::getHighCellVolt()>
    82b0:	6921      	ldr	r1, [r4, #16]
    82b2:	f006 fd43 	bl	ed3c <__aeabi_fcmplt>
    82b6:	2800      	cmp	r0, #0
    82b8:	f47f adc1 	bne.w	7e3e <loop+0x402>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    82bc:	682b      	ldr	r3, [r5, #0]
    82be:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    82c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
        undertriptimer = millis() + settings.triptime;
    82c2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    82c4:	4a14      	ldr	r2, [pc, #80]	; (8318 <loop+0x8dc>)
    82c6:	440b      	add	r3, r1
    82c8:	6013      	str	r3, [r2, #0]
    82ca:	e5c0      	b.n	7e4e <loop+0x412>
    SOC = 95;
    82cc:	4b0a      	ldr	r3, [pc, #40]	; (82f8 <loop+0x8bc>)
    82ce:	225f      	movs	r2, #95	; 0x5f
    82d0:	e713      	b.n	80fa <loop+0x6be>
          if (storagemode == 0)
    82d2:	2b00      	cmp	r3, #0
    82d4:	f47f ad2b 	bne.w	7d2e <loop+0x2f2>
            storagemode = 1;
    82d8:	2301      	movs	r3, #1
    82da:	f8c9 3000 	str.w	r3, [r9]
    82de:	e526      	b.n	7d2e <loop+0x2f2>
    82e0:	1fff91b0 	.word	0x1fff91b0
    82e4:	1fff91d8 	.word	0x1fff91d8
    82e8:	1fff91ec 	.word	0x1fff91ec
    82ec:	1fffba38 	.word	0x1fffba38
    82f0:	1fffb5a6 	.word	0x1fffb5a6
    82f4:	1fff91e8 	.word	0x1fff91e8
    82f8:	1fff8828 	.word	0x1fff8828
    82fc:	3e8e38e4 	.word	0x3e8e38e4
    8300:	1fff91e4 	.word	0x1fff91e4
    8304:	1fffb618 	.word	0x1fffb618
    8308:	1fffb598 	.word	0x1fffb598
    830c:	1fffb5a0 	.word	0x1fffb5a0
    8310:	1fffb68c 	.word	0x1fffb68c
    8314:	1fffb72c 	.word	0x1fffb72c
    8318:	1fffb82c 	.word	0x1fffb82c
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst)
    831c:	48b5      	ldr	r0, [pc, #724]	; (85f4 <loop+0xbb8>)
    831e:	f7f9 ffa5 	bl	226c <BMSModuleManager::getHighCellVolt()>
    8322:	4605      	mov	r5, r0
    8324:	48b3      	ldr	r0, [pc, #716]	; (85f4 <loop+0xbb8>)
    8326:	f7f9 ff99 	bl	225c <BMSModuleManager::getLowCellVolt()>
    832a:	6d61      	ldr	r1, [r4, #84]	; 0x54
    832c:	f006 fa60 	bl	e7f0 <__addsf3>
    8330:	4601      	mov	r1, r0
    8332:	4628      	mov	r0, r5
    8334:	f006 fd20 	bl	ed78 <__aeabi_fcmpgt>
    8338:	3800      	subs	r0, #0
    833a:	bf18      	it	ne
    833c:	2001      	movne	r0, #1
    833e:	e610      	b.n	7f62 <loop+0x526>
            Discharge = 0;
    8340:	f04f 0800 	mov.w	r8, #0
    8344:	4dac      	ldr	r5, [pc, #688]	; (85f8 <loop+0xbbc>)
            digitalWrite(OUT4, LOW);
    8346:	2015      	movs	r0, #21
    8348:	4641      	mov	r1, r8
            Discharge = 0;
    834a:	f8c5 8000 	str.w	r8, [r5]
            digitalWrite(OUT4, LOW);
    834e:	f002 ffa7 	bl	b2a0 <digitalWrite>
            digitalWrite(OUT2, LOW);
    8352:	4641      	mov	r1, r8
    8354:	200c      	movs	r0, #12
    8356:	f002 ffa3 	bl	b2a0 <digitalWrite>
            digitalWrite(OUT1, LOW);//turn off discharge
    835a:	4641      	mov	r1, r8
    835c:	200b      	movs	r0, #11
    835e:	f002 ff9f 	bl	b2a0 <digitalWrite>
            contctrl = 0; //turn off out 5 and 6
    8362:	4ba6      	ldr	r3, [pc, #664]	; (85fc <loop+0xbc0>)
    8364:	f8c3 8000 	str.w	r8, [r3]
    8368:	e68d      	b.n	8086 <loop+0x64a>
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0)
    836a:	f7f9 ff7f 	bl	226c <BMSModuleManager::getHighCellVolt()>
    836e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8370:	f006 fd02 	bl	ed78 <__aeabi_fcmpgt>
    8374:	4682      	mov	sl, r0
    8376:	2800      	cmp	r0, #0
    8378:	d166      	bne.n	8448 <loop+0xa0c>
    837a:	4ba1      	ldr	r3, [pc, #644]	; (8600 <loop+0xbc4>)
    837c:	881b      	ldrh	r3, [r3, #0]
    837e:	2b00      	cmp	r3, #0
    8380:	d062      	beq.n	8448 <loop+0xa0c>
            if (Charged == 1)
    8382:	4ba0      	ldr	r3, [pc, #640]	; (8604 <loop+0xbc8>)
    8384:	f8d3 b000 	ldr.w	fp, [r3]
    8388:	f1bb 0f01 	cmp.w	fp, #1
    838c:	f000 81d2 	beq.w	8734 <loop+0xcf8>
                digitalWrite(OUT3, HIGH);//turn on charger
    8390:	2101      	movs	r1, #1
    8392:	2014      	movs	r0, #20
    8394:	f002 ff84 	bl	b2a0 <digitalWrite>
    8398:	e4ed      	b.n	7d76 <loop+0x33a>
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst)
    839a:	4896      	ldr	r0, [pc, #600]	; (85f4 <loop+0xbb8>)
    839c:	f7f9 ff66 	bl	226c <BMSModuleManager::getHighCellVolt()>
    83a0:	4682      	mov	sl, r0
    83a2:	4894      	ldr	r0, [pc, #592]	; (85f4 <loop+0xbb8>)
    83a4:	f7f9 ff5a 	bl	225c <BMSModuleManager::getLowCellVolt()>
    83a8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    83aa:	f006 fa21 	bl	e7f0 <__addsf3>
    83ae:	4601      	mov	r1, r0
    83b0:	4650      	mov	r0, sl
    83b2:	f006 fce1 	bl	ed78 <__aeabi_fcmpgt>
    83b6:	3800      	subs	r0, #0
    83b8:	bf18      	it	ne
    83ba:	2001      	movne	r0, #1
    83bc:	e4c0      	b.n	7d40 <loop+0x304>
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) && bms.getHighTemperature() < (settings.OverTSetpoint - settings.WarnToff)) //detect AC present for charging and check not balancing
    83be:	488d      	ldr	r0, [pc, #564]	; (85f4 <loop+0xbb8>)
    83c0:	f7f9 ff54 	bl	226c <BMSModuleManager::getHighCellVolt()>
    83c4:	6a21      	ldr	r1, [r4, #32]
    83c6:	4605      	mov	r5, r0
    83c8:	69a0      	ldr	r0, [r4, #24]
    83ca:	f006 fa0f 	bl	e7ec <__aeabi_fsub>
    83ce:	4601      	mov	r1, r0
    83d0:	4628      	mov	r0, r5
    83d2:	f006 fcb3 	bl	ed3c <__aeabi_fcmplt>
    83d6:	2800      	cmp	r0, #0
    83d8:	f43f adcb 	beq.w	7f72 <loop+0x536>
    83dc:	4885      	ldr	r0, [pc, #532]	; (85f4 <loop+0xbb8>)
    83de:	f7f9 ffc7 	bl	2370 <BMSModuleManager::getHighTemperature()>
    83e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    83e4:	4605      	mov	r5, r0
    83e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    83e8:	f006 fa00 	bl	e7ec <__aeabi_fsub>
    83ec:	4601      	mov	r1, r0
    83ee:	4628      	mov	r0, r5
    83f0:	f006 fca4 	bl	ed3c <__aeabi_fcmplt>
    83f4:	2800      	cmp	r0, #0
    83f6:	f43f adbc 	beq.w	7f72 <loop+0x536>
            if (settings.ChargerDirect == 1)
    83fa:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    83fe:	2b01      	cmp	r3, #1
    8400:	f000 816f 	beq.w	86e2 <loop+0xca6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8404:	4d80      	ldr	r5, [pc, #512]	; (8608 <loop+0xbcc>)
              bmsstatus = Precharge;
    8406:	2304      	movs	r3, #4
    8408:	703b      	strb	r3, [r7, #0]
    840a:	682b      	ldr	r3, [r5, #0]
    840c:	930a      	str	r3, [sp, #40]	; 0x28
              Pretimer = millis();
    840e:	4b7f      	ldr	r3, [pc, #508]	; (860c <loop+0xbd0>)
	return ret;
    8410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8412:	601a      	str	r2, [r3, #0]
    8414:	e5ae      	b.n	7f74 <loop+0x538>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8416:	682b      	ldr	r3, [r5, #0]
    8418:	9308      	str	r3, [sp, #32]
            if ((millis() - undertriptimer) > settings.triptime)
    841a:	4b7d      	ldr	r3, [pc, #500]	; (8610 <loop+0xbd4>)
    841c:	681a      	ldr	r2, [r3, #0]
	return ret;
    841e:	9b08      	ldr	r3, [sp, #32]
    8420:	1a9b      	subs	r3, r3, r2
    8422:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    8424:	4293      	cmp	r3, r2
    8426:	f67f acbc 	bls.w	7da2 <loop+0x366>
              Serial.println();
    842a:	487a      	ldr	r0, [pc, #488]	; (8614 <loop+0xbd8>)
    842c:	f002 f864 	bl	a4f8 <Print::println()>
    8430:	2112      	movs	r1, #18
    8432:	4879      	ldr	r0, [pc, #484]	; (8618 <loop+0xbdc>)
    8434:	f004 fda6 	bl	cf84 <usb_serial_write>
    8438:	4876      	ldr	r0, [pc, #472]	; (8614 <loop+0xbd8>)
    843a:	f002 f85d 	bl	a4f8 <Print::println()>
              digitalWrite(OUT1, LOW);//turn off discharge
    843e:	2100      	movs	r1, #0
    8440:	200b      	movs	r0, #11
    8442:	f002 ff2d 	bl	b2a0 <digitalWrite>
    8446:	e4ac      	b.n	7da2 <loop+0x366>
            digitalWrite(OUT3, LOW);//turn off charger
    8448:	2100      	movs	r1, #0
    844a:	2014      	movs	r0, #20
    844c:	f002 ff28 	bl	b2a0 <digitalWrite>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778 ; //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    8450:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    8452:	6e23      	ldr	r3, [r4, #96]	; 0x60
            Charged = 1;
    8454:	496b      	ldr	r1, [pc, #428]	; (8604 <loop+0xbc8>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778 ; //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    8456:	fb02 f303 	mul.w	r3, r2, r3
    845a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    845e:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    8462:	4a6e      	ldr	r2, [pc, #440]	; (861c <loop+0xbe0>)
            Charged = 1;
    8464:	2301      	movs	r3, #1
    8466:	600b      	str	r3, [r1, #0]
    SOC = 100;
    8468:	2364      	movs	r3, #100	; 0x64
    846a:	6013      	str	r3, [r2, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778 ; //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    846c:	f006 fa74 	bl	e958 <__aeabi_i2f>
    8470:	496b      	ldr	r1, [pc, #428]	; (8620 <loop+0xbe4>)
    8472:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8624 <loop+0xbe8>
    8476:	f006 fb77 	bl	eb68 <__aeabi_fdiv>
    847a:	f8c9 0000 	str.w	r0, [r9]
    847e:	e47a      	b.n	7d76 <loop+0x33a>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0)
    8480:	485c      	ldr	r0, [pc, #368]	; (85f4 <loop+0xbb8>)
    8482:	f7f9 fef3 	bl	226c <BMSModuleManager::getHighCellVolt()>
    8486:	69a1      	ldr	r1, [r4, #24]
    8488:	f006 fc76 	bl	ed78 <__aeabi_fcmpgt>
    848c:	2800      	cmp	r0, #0
    848e:	f47f ac68 	bne.w	7d62 <loop+0x326>
    8492:	4b5b      	ldr	r3, [pc, #364]	; (8600 <loop+0xbc4>)
    8494:	881b      	ldrh	r3, [r3, #0]
    8496:	2b00      	cmp	r3, #0
    8498:	f43f ac63 	beq.w	7d62 <loop+0x326>
            if (Charged == 1)
    849c:	f8df b164 	ldr.w	fp, [pc, #356]	; 8604 <loop+0xbc8>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    84a0:	682b      	ldr	r3, [r5, #0]
    84a2:	f8db a000 	ldr.w	sl, [fp]
    84a6:	9307      	str	r3, [sp, #28]
            overtriptimer = millis();
    84a8:	4b5f      	ldr	r3, [pc, #380]	; (8628 <loop+0xbec>)
	return ret;
    84aa:	9a07      	ldr	r2, [sp, #28]
    84ac:	601a      	str	r2, [r3, #0]
            if (Charged == 1)
    84ae:	f1ba 0f01 	cmp.w	sl, #1
    84b2:	f000 811a 	beq.w	86ea <loop+0xcae>
              if (digitalRead(OUT3) == 0)
    84b6:	2014      	movs	r0, #20
    84b8:	f002 ff18 	bl	b2ec <digitalRead>
    84bc:	2800      	cmp	r0, #0
    84be:	f47f ac5a 	bne.w	7d76 <loop+0x33a>
                Serial.println();
    84c2:	4854      	ldr	r0, [pc, #336]	; (8614 <loop+0xbd8>)
    84c4:	f002 f818 	bl	a4f8 <Print::println()>
                Serial.println("Reset Over Voltage Trip Not Charged");
    84c8:	4958      	ldr	r1, [pc, #352]	; (862c <loop+0xbf0>)
    84ca:	4852      	ldr	r0, [pc, #328]	; (8614 <loop+0xbd8>)
    84cc:	f7fa fc64 	bl	2d98 <Print::println(char const*) [clone .isra.0]>
    84d0:	e75e      	b.n	8390 <loop+0x954>
              if (digitalRead(OUT3) == 1)
    84d2:	2014      	movs	r0, #20
    84d4:	f002 ff0a 	bl	b2ec <digitalRead>
    84d8:	2801      	cmp	r0, #1
    84da:	4681      	mov	r9, r0
    84dc:	f47f ac4b 	bne.w	7d76 <loop+0x33a>
                Serial.println();
    84e0:	484c      	ldr	r0, [pc, #304]	; (8614 <loop+0xbd8>)
    84e2:	f002 f809 	bl	a4f8 <Print::println()>
    84e6:	2111      	movs	r1, #17
    84e8:	4851      	ldr	r0, [pc, #324]	; (8630 <loop+0xbf4>)
    84ea:	f004 fd4b 	bl	cf84 <usb_serial_write>
    84ee:	4849      	ldr	r0, [pc, #292]	; (8614 <loop+0xbd8>)
    84f0:	f002 f802 	bl	a4f8 <Print::println()>
                digitalWrite(OUT3, LOW);//turn off charger
    84f4:	2014      	movs	r0, #20
    84f6:	2100      	movs	r1, #0
    84f8:	f002 fed2 	bl	b2a0 <digitalWrite>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778 ; //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    84fc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    84fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
    8500:	fb02 f303 	mul.w	r3, r2, r3
                Charged = 1;
    8504:	4a3f      	ldr	r2, [pc, #252]	; (8604 <loop+0xbc8>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778 ; //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    8506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
                Charged = 1;
    850a:	f8c2 9000 	str.w	r9, [r2]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778 ; //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    850e:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    8512:	4a42      	ldr	r2, [pc, #264]	; (861c <loop+0xbe0>)
    8514:	e7a8      	b.n	8468 <loop+0xa2c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8516:	682b      	ldr	r3, [r5, #0]
    8518:	9309      	str	r3, [sp, #36]	; 0x24
          undertriptimer = millis();
    851a:	4b3d      	ldr	r3, [pc, #244]	; (8610 <loop+0xbd4>)
	return ret;
    851c:	9a09      	ldr	r2, [sp, #36]	; 0x24
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys)
    851e:	4835      	ldr	r0, [pc, #212]	; (85f4 <loop+0xbb8>)
          undertriptimer = millis();
    8520:	601a      	str	r2, [r3, #0]
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys)
    8522:	f7f9 fe9b 	bl	225c <BMSModuleManager::getLowCellVolt()>
    8526:	6961      	ldr	r1, [r4, #20]
    8528:	4681      	mov	r9, r0
    852a:	69e0      	ldr	r0, [r4, #28]
    852c:	f006 f960 	bl	e7f0 <__addsf3>
    8530:	4601      	mov	r1, r0
    8532:	4648      	mov	r0, r9
    8534:	f006 fc20 	bl	ed78 <__aeabi_fcmpgt>
    8538:	2800      	cmp	r0, #0
    853a:	f43f ac32 	beq.w	7da2 <loop+0x366>
            if (digitalRead(OUT1) == 0)
    853e:	200b      	movs	r0, #11
    8540:	f002 fed4 	bl	b2ec <digitalRead>
    8544:	2800      	cmp	r0, #0
    8546:	f47f ac2c 	bne.w	7da2 <loop+0x366>
              Serial.println();
    854a:	4832      	ldr	r0, [pc, #200]	; (8614 <loop+0xbd8>)
    854c:	f001 ffd4 	bl	a4f8 <Print::println()>
              Serial.println("Reset Under Voltage Trip");
    8550:	4938      	ldr	r1, [pc, #224]	; (8634 <loop+0xbf8>)
    8552:	4830      	ldr	r0, [pc, #192]	; (8614 <loop+0xbd8>)
    8554:	f7fa fc20 	bl	2d98 <Print::println(char const*) [clone .isra.0]>
              digitalWrite(OUT1, HIGH);//turn on discharge
    8558:	2101      	movs	r1, #1
    855a:	200b      	movs	r0, #11
    855c:	f002 fea0 	bl	b2a0 <digitalWrite>
    8560:	e41f      	b.n	7da2 <loop+0x366>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint)
    8562:	f7f9 fe7b 	bl	225c <BMSModuleManager::getLowCellVolt()>
    8566:	6921      	ldr	r1, [r4, #16]
    8568:	f006 fbe8 	bl	ed3c <__aeabi_fcmplt>
    856c:	b930      	cbnz	r0, 857c <loop+0xb40>
    856e:	4821      	ldr	r0, [pc, #132]	; (85f4 <loop+0xbb8>)
    8570:	f7f9 fe7c 	bl	226c <BMSModuleManager::getHighCellVolt()>
    8574:	68e1      	ldr	r1, [r4, #12]
    8576:	f006 fbff 	bl	ed78 <__aeabi_fcmpgt>
    857a:	b388      	cbz	r0, 85e0 <loop+0xba4>
              digitalWrite(OUT2, LOW);//turn off contactor
    857c:	2100      	movs	r1, #0
    857e:	200c      	movs	r0, #12
    8580:	f002 fe8e 	bl	b2a0 <digitalWrite>
              contctrl = contctrl & 253; //turn off contactor
    8584:	f8d8 3000 	ldr.w	r3, [r8]
              digitalWrite(OUT4, LOW);//ensure precharge is low
    8588:	2100      	movs	r1, #0
              contctrl = contctrl & 253; //turn off contactor
    858a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
              digitalWrite(OUT4, LOW);//ensure precharge is low
    858e:	2015      	movs	r0, #21
              contctrl = contctrl & 253; //turn off contactor
    8590:	f8c8 3000 	str.w	r3, [r8]
              digitalWrite(OUT4, LOW);//ensure precharge is low
    8594:	f002 fe84 	bl	b2a0 <digitalWrite>
              bmsstatus = Error;
    8598:	2305      	movs	r3, #5
    859a:	703b      	strb	r3, [r7, #0]
    859c:	f7ff bb5e 	b.w	7c5c <loop+0x220>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW)
    85a0:	200c      	movs	r0, #12
    85a2:	f002 fea3 	bl	b2ec <digitalRead>
    85a6:	2800      	cmp	r0, #0
    85a8:	d065      	beq.n	8676 <loop+0xc3a>
    85aa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8638 <loop+0xbfc>
    85ae:	4d16      	ldr	r5, [pc, #88]	; (8608 <loop+0xbcc>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    85b0:	682b      	ldr	r3, [r5, #0]
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent)
    85b2:	f8d9 2000 	ldr.w	r2, [r9]
    85b6:	9303      	str	r3, [sp, #12]
    85b8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    85bc:	4413      	add	r3, r2
	return ret;
    85be:	9a03      	ldr	r2, [sp, #12]
    85c0:	4293      	cmp	r3, r2
    85c2:	d33b      	bcc.n	863c <loop+0xc00>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    85c4:	682a      	ldr	r2, [r5, #0]
    85c6:	9205      	str	r2, [sp, #20]
	return ret;
    85c8:	9a05      	ldr	r2, [sp, #20]
            if (mainconttimer + settings.Pretime + 1000 < millis() )
    85ca:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    85ce:	4293      	cmp	r3, r2
    85d0:	f4bf ab9f 	bcs.w	7d12 <loop+0x2d6>
              digitalWrite(OUT4, LOW);//ensure precharge is low
    85d4:	2100      	movs	r1, #0
    85d6:	2015      	movs	r0, #21
    85d8:	f002 fe62 	bl	b2a0 <digitalWrite>
    85dc:	f7ff bb99 	b.w	7d12 <loop+0x2d6>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint)
    85e0:	4804      	ldr	r0, [pc, #16]	; (85f4 <loop+0xbb8>)
    85e2:	f7f9 fec5 	bl	2370 <BMSModuleManager::getHighTemperature()>
    85e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    85e8:	f006 fbc6 	bl	ed78 <__aeabi_fcmpgt>
    85ec:	2800      	cmp	r0, #0
    85ee:	d1c5      	bne.n	857c <loop+0xb40>
    85f0:	f7ff bb34 	b.w	7c5c <loop+0x220>
    85f4:	1fff91ec 	.word	0x1fff91ec
    85f8:	1fff91b0 	.word	0x1fff91b0
    85fc:	1fffb618 	.word	0x1fffb618
    8600:	1fffb5a4 	.word	0x1fffb5a4
    8604:	1fff91ac 	.word	0x1fff91ac
    8608:	1fffba38 	.word	0x1fffba38
    860c:	1fff91bc 	.word	0x1fff91bc
    8610:	1fffb82c 	.word	0x1fffb82c
    8614:	1fff89f8 	.word	0x1fff89f8
    8618:	00016c48 	.word	0x00016c48
    861c:	1fff8828 	.word	0x1fff8828
    8620:	3e8e38e4 	.word	0x3e8e38e4
    8624:	1fff91e4 	.word	0x1fff91e4
    8628:	1fffb72c 	.word	0x1fffb72c
    862c:	00016c24 	.word	0x00016c24
    8630:	00016c10 	.word	0x00016c10
    8634:	00016c5c 	.word	0x00016c5c
    8638:	1fffb68c 	.word	0x1fffb68c
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent)
    863c:	200c      	movs	r0, #12
    863e:	f002 fe55 	bl	b2ec <digitalRead>
    8642:	b990      	cbnz	r0, 866a <loop+0xc2e>
    8644:	4b56      	ldr	r3, [pc, #344]	; (87a0 <loop+0xd64>)
    8646:	f8d3 a000 	ldr.w	sl, [r3]
    864a:	2100      	movs	r1, #0
    864c:	4650      	mov	r0, sl
    864e:	f006 fb93 	bl	ed78 <__aeabi_fcmpgt>
    8652:	b908      	cbnz	r0, 8658 <loop+0xc1c>
    8654:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    8658:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    865c:	f006 f97c 	bl	e958 <__aeabi_i2f>
    8660:	4651      	mov	r1, sl
    8662:	f006 fb89 	bl	ed78 <__aeabi_fcmpgt>
    8666:	2800      	cmp	r0, #0
    8668:	d17c      	bne.n	8764 <loop+0xd28>
            if (mainconttimer + settings.Pretime + 1000 < millis() )
    866a:	f8d9 2000 	ldr.w	r2, [r9]
    866e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    8672:	4413      	add	r3, r2
    8674:	e7a6      	b.n	85c4 <loop+0xb88>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW)
    8676:	2015      	movs	r0, #21
    8678:	f002 fe38 	bl	b2ec <digitalRead>
    867c:	4682      	mov	sl, r0
    867e:	2800      	cmp	r0, #0
    8680:	d193      	bne.n	85aa <loop+0xb6e>
              digitalWrite(OUT4, HIGH);//Precharge start
    8682:	4629      	mov	r1, r5
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8684:	4d47      	ldr	r5, [pc, #284]	; (87a4 <loop+0xd68>)
              mainconttimer = millis();
    8686:	f8df 9120 	ldr.w	r9, [pc, #288]	; 87a8 <loop+0xd6c>
    868a:	682b      	ldr	r3, [r5, #0]
    868c:	9302      	str	r3, [sp, #8]
	return ret;
    868e:	9b02      	ldr	r3, [sp, #8]
    8690:	f8c9 3000 	str.w	r3, [r9]
              digitalWrite(OUT4, HIGH);//Precharge start
    8694:	2015      	movs	r0, #21
    8696:	f002 fe03 	bl	b2a0 <digitalWrite>
              Serial.println();
    869a:	4844      	ldr	r0, [pc, #272]	; (87ac <loop+0xd70>)
    869c:	f001 ff2c 	bl	a4f8 <Print::println()>
              Serial.println("Precharge!!!");
    86a0:	4943      	ldr	r1, [pc, #268]	; (87b0 <loop+0xd74>)
    86a2:	4842      	ldr	r0, [pc, #264]	; (87ac <loop+0xd70>)
    86a4:	f7fa fb78 	bl	2d98 <Print::println(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    86a8:	f8d9 1000 	ldr.w	r1, [r9]
    86ac:	483f      	ldr	r0, [pc, #252]	; (87ac <loop+0xd70>)
    86ae:	4653      	mov	r3, sl
    86b0:	220a      	movs	r2, #10
    86b2:	f001 ff39 	bl	a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    86b6:	483d      	ldr	r0, [pc, #244]	; (87ac <loop+0xd70>)
    86b8:	f001 ff1e 	bl	a4f8 <Print::println()>
              Serial.println();
    86bc:	483b      	ldr	r0, [pc, #236]	; (87ac <loop+0xd70>)
    86be:	f001 ff1b 	bl	a4f8 <Print::println()>
    86c2:	e775      	b.n	85b0 <loop+0xb74>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint)
    86c4:	483b      	ldr	r0, [pc, #236]	; (87b4 <loop+0xd78>)
    86c6:	f7f9 fe53 	bl	2370 <BMSModuleManager::getHighTemperature()>
    86ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    86cc:	f006 fb54 	bl	ed78 <__aeabi_fcmpgt>
    86d0:	4601      	mov	r1, r0
    86d2:	2800      	cmp	r0, #0
    86d4:	f47f ab7f 	bne.w	7dd6 <loop+0x39a>
              digitalWrite(OUT2, LOW);//trip breaker
    86d8:	200c      	movs	r0, #12
    86da:	f002 fde1 	bl	b2a0 <digitalWrite>
    86de:	f7ff babd 	b.w	7c5c <loop+0x220>
              bmsstatus = Charge;
    86e2:	2303      	movs	r3, #3
    86e4:	4d2f      	ldr	r5, [pc, #188]	; (87a4 <loop+0xd68>)
    86e6:	703b      	strb	r3, [r7, #0]
    86e8:	e444      	b.n	7f74 <loop+0x538>
              if (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys))
    86ea:	4832      	ldr	r0, [pc, #200]	; (87b4 <loop+0xd78>)
    86ec:	f7f9 fdbe 	bl	226c <BMSModuleManager::getHighCellVolt()>
    86f0:	6a21      	ldr	r1, [r4, #32]
    86f2:	4681      	mov	r9, r0
    86f4:	69a0      	ldr	r0, [r4, #24]
    86f6:	f006 f879 	bl	e7ec <__aeabi_fsub>
    86fa:	4601      	mov	r1, r0
    86fc:	4648      	mov	r0, r9
    86fe:	f006 fb1d 	bl	ed3c <__aeabi_fcmplt>
    8702:	2800      	cmp	r0, #0
    8704:	f43f ab37 	beq.w	7d76 <loop+0x33a>
                if (digitalRead(OUT3) == 0)
    8708:	2014      	movs	r0, #20
    870a:	f002 fdef 	bl	b2ec <digitalRead>
    870e:	4681      	mov	r9, r0
    8710:	2800      	cmp	r0, #0
    8712:	f47f ab30 	bne.w	7d76 <loop+0x33a>
                  Serial.println();
    8716:	4825      	ldr	r0, [pc, #148]	; (87ac <loop+0xd70>)
    8718:	f001 feee 	bl	a4f8 <Print::println()>
                  Serial.println("Reset Over Voltage Trip Not Charged");
    871c:	4926      	ldr	r1, [pc, #152]	; (87b8 <loop+0xd7c>)
    871e:	4823      	ldr	r0, [pc, #140]	; (87ac <loop+0xd70>)
    8720:	f7fa fb3a 	bl	2d98 <Print::println(char const*) [clone .isra.0]>
                  digitalWrite(OUT3, HIGH);//turn on charger
    8724:	4651      	mov	r1, sl
    8726:	2014      	movs	r0, #20
                  Charged = 0;
    8728:	f8cb 9000 	str.w	r9, [fp]
                  digitalWrite(OUT3, HIGH);//turn on charger
    872c:	f002 fdb8 	bl	b2a0 <digitalWrite>
    8730:	f7ff bb21 	b.w	7d76 <loop+0x33a>
              if (bms.getHighCellVolt() < (settings.StoreVsetpoint - settings.ChargeHys))
    8734:	481f      	ldr	r0, [pc, #124]	; (87b4 <loop+0xd78>)
    8736:	f7f9 fd99 	bl	226c <BMSModuleManager::getHighCellVolt()>
    873a:	6a21      	ldr	r1, [r4, #32]
    873c:	4681      	mov	r9, r0
    873e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8740:	f006 f854 	bl	e7ec <__aeabi_fsub>
    8744:	4601      	mov	r1, r0
    8746:	4648      	mov	r0, r9
    8748:	f006 faf8 	bl	ed3c <__aeabi_fcmplt>
    874c:	4b1b      	ldr	r3, [pc, #108]	; (87bc <loop+0xd80>)
    874e:	2800      	cmp	r0, #0
    8750:	f43f ab11 	beq.w	7d76 <loop+0x33a>
                digitalWrite(OUT3, HIGH);//turn on charger
    8754:	4659      	mov	r1, fp
    8756:	2014      	movs	r0, #20
                Charged = 0;
    8758:	f8c3 a000 	str.w	sl, [r3]
                digitalWrite(OUT3, HIGH);//turn on charger
    875c:	f002 fda0 	bl	b2a0 <digitalWrite>
    8760:	f7ff bb09 	b.w	7d76 <loop+0x33a>
              digitalWrite(OUT2, HIGH);//turn on contactor
    8764:	2101      	movs	r1, #1
    8766:	200c      	movs	r0, #12
    8768:	f002 fd9a 	bl	b2a0 <digitalWrite>
              contctrl = contctrl | 2; //turn on contactor
    876c:	f8d8 3000 	ldr.w	r3, [r8]
              Serial.println();
    8770:	480e      	ldr	r0, [pc, #56]	; (87ac <loop+0xd70>)
              contctrl = contctrl | 2; //turn on contactor
    8772:	f043 0302 	orr.w	r3, r3, #2
    8776:	f8c8 3000 	str.w	r3, [r8]
              Serial.println();
    877a:	f001 febd 	bl	a4f8 <Print::println()>
              Serial.println("Main On!!!");
    877e:	4910      	ldr	r1, [pc, #64]	; (87c0 <loop+0xd84>)
    8780:	480a      	ldr	r0, [pc, #40]	; (87ac <loop+0xd70>)
    8782:	f7fa fb09 	bl	2d98 <Print::println(char const*) [clone .isra.0]>
              Serial.println();
    8786:	4809      	ldr	r0, [pc, #36]	; (87ac <loop+0xd70>)
    8788:	f001 feb6 	bl	a4f8 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    878c:	682b      	ldr	r3, [r5, #0]
    878e:	9304      	str	r3, [sp, #16]
	return ret;
    8790:	9a04      	ldr	r2, [sp, #16]
              mainconttimer = millis() + settings.Pretime;
    8792:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    8796:	441a      	add	r2, r3
    8798:	f8c9 2000 	str.w	r2, [r9]
    879c:	4413      	add	r3, r2
    879e:	e711      	b.n	85c4 <loop+0xb88>
    87a0:	1fffb62c 	.word	0x1fffb62c
    87a4:	1fffba38 	.word	0x1fffba38
    87a8:	1fffb68c 	.word	0x1fffb68c
    87ac:	1fff89f8 	.word	0x1fff89f8
    87b0:	00016bf4 	.word	0x00016bf4
    87b4:	1fff91ec 	.word	0x1fff91ec
    87b8:	00016c24 	.word	0x00016c24
    87bc:	1fff91ac 	.word	0x1fff91ac
    87c0:	00016c04 	.word	0x00016c04

000087c4 <low_voltage_isr>:

void low_voltage_isr(void) {
  EEPROM.update(1000, uint8_t(SOC));
    87c4:	4b0b      	ldr	r3, [pc, #44]	; (87f4 <low_voltage_isr+0x30>)
void low_voltage_isr(void) {
    87c6:	b510      	push	{r4, lr}
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    87c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  EEPROM.update(1000, uint8_t(SOC));
    87cc:	781c      	ldrb	r4, [r3, #0]
    87ce:	f002 f8af 	bl	a930 <eeprom_read_byte>
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    87d2:	4284      	cmp	r4, r0
    87d4:	d004      	beq.n	87e0 <low_voltage_isr+0x1c>
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    87d6:	4621      	mov	r1, r4
    87d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    87dc:	f002 f8c2 	bl	a964 <eeprom_write_byte>

  PMC_LVDSC2 |= PMC_LVDSC2_LVWACK;  // clear if we can
    87e0:	4b05      	ldr	r3, [pc, #20]	; (87f8 <low_voltage_isr+0x34>)
    87e2:	785a      	ldrb	r2, [r3, #1]
    87e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    87e8:	705a      	strb	r2, [r3, #1]
  PMC_LVDSC1 |= PMC_LVDSC1_LVDACK;
    87ea:	781a      	ldrb	r2, [r3, #0]
    87ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    87f0:	701a      	strb	r2, [r3, #0]
}
    87f2:	bd10      	pop	{r4, pc}
    87f4:	1fff8828 	.word	0x1fff8828
    87f8:	4007d000 	.word	0x4007d000

000087fc <_GLOBAL__sub_I_can>:
    87fc:	b510      	push	{r4, lr}
    EEPROMClass()                        { eeprom_initialize(); }
    87fe:	f002 f861 	bl	a8c4 <eeprom_initialize>
BMSModuleManager bms;
    8802:	480b      	ldr	r0, [pc, #44]	; (8830 <_GLOBAL__sub_I_can+0x34>)
    8804:	f7f8 fa60 	bl	cc8 <BMSModuleManager::BMSModuleManager()>
SerialConsole console;
    8808:	480a      	ldr	r0, [pc, #40]	; (8834 <_GLOBAL__sub_I_can+0x38>)
    880a:	f7fa fa57 	bl	2cbc <SerialConsole::SerialConsole()>
FilterOnePole lowpassFilter( LOWPASS, filterFrequency );
    880e:	4a0a      	ldr	r2, [pc, #40]	; (8838 <_GLOBAL__sub_I_can+0x3c>)
    8810:	480a      	ldr	r0, [pc, #40]	; (883c <_GLOBAL__sub_I_can+0x40>)
    8812:	6812      	ldr	r2, [r2, #0]
    8814:	2300      	movs	r3, #0
    8816:	2101      	movs	r1, #1
    8818:	f001 fbc8 	bl	9fac <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>
ADC *adc = new ADC(); // adc object
    881c:	2094      	movs	r0, #148	; 0x94
    881e:	f002 fa9b 	bl	ad58 <operator new(unsigned int)>
    8822:	4604      	mov	r4, r0
    8824:	f000 fa70 	bl	8d08 <ADC::ADC()>
    8828:	4b05      	ldr	r3, [pc, #20]	; (8840 <_GLOBAL__sub_I_can+0x44>)
    882a:	601c      	str	r4, [r3, #0]
}
    882c:	bd10      	pop	{r4, pc}
    882e:	bf00      	nop
    8830:	1fff91ec 	.word	0x1fff91ec
    8834:	1fffb5b8 	.word	0x1fffb5b8
    8838:	1fff8850 	.word	0x1fff8850
    883c:	1fffb66c 	.word	0x1fffb66c
    8840:	1fff91dc 	.word	0x1fff91dc

00008844 <setup>:
{
    8844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  SERIALBMS.begin(612500); //Tesla serial bus
    8848:	49b7      	ldr	r1, [pc, #732]	; (8b28 <L_29753_delayMicroseconds+0xa6>)
    884a:	48b8      	ldr	r0, [pc, #736]	; (8b2c <L_29753_delayMicroseconds+0xaa>)
  analogWriteFrequency(OUT5, pwmfreq);
    884c:	4cb8      	ldr	r4, [pc, #736]	; (8b30 <L_29753_delayMicroseconds+0xae>)
    884e:	4fb9      	ldr	r7, [pc, #740]	; (8b34 <L_29753_delayMicroseconds+0xb2>)
{
    8850:	b086      	sub	sp, #24
  SERIALBMS.begin(612500); //Tesla serial bus
    8852:	f001 fd4f 	bl	a2f4 <HardwareSerial3::begin(unsigned long)>
  delay(2000);  //just for easy debugging. It takes a few seconds for USB to come up properly on most OS's
    8856:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    885a:	f002 fdb1 	bl	b3c0 <delay>
  pinMode(IN1, INPUT);
    885e:	2100      	movs	r1, #0
    8860:	2011      	movs	r0, #17
    8862:	f002 fd51 	bl	b308 <pinMode>
  pinMode(IN2, INPUT);
    8866:	2100      	movs	r1, #0
    8868:	2010      	movs	r0, #16
    886a:	f002 fd4d 	bl	b308 <pinMode>
  pinMode(IN3, INPUT);
    886e:	2100      	movs	r1, #0
    8870:	2012      	movs	r0, #18
    8872:	f002 fd49 	bl	b308 <pinMode>
  pinMode(IN4, INPUT);
    8876:	2100      	movs	r1, #0
    8878:	2013      	movs	r0, #19
    887a:	f002 fd45 	bl	b308 <pinMode>
  pinMode(OUT1, OUTPUT); // drive contactor
    887e:	2101      	movs	r1, #1
    8880:	200b      	movs	r0, #11
    8882:	f002 fd41 	bl	b308 <pinMode>
  pinMode(OUT2, OUTPUT); // precharge
    8886:	2101      	movs	r1, #1
    8888:	200c      	movs	r0, #12
    888a:	f002 fd3d 	bl	b308 <pinMode>
  pinMode(OUT3, OUTPUT); // charge relay
    888e:	2101      	movs	r1, #1
    8890:	2014      	movs	r0, #20
    8892:	f002 fd39 	bl	b308 <pinMode>
  pinMode(OUT4, OUTPUT); // Negative contactor
    8896:	2101      	movs	r1, #1
    8898:	2015      	movs	r0, #21
    889a:	f002 fd35 	bl	b308 <pinMode>
  pinMode(OUT5, OUTPUT); // pwm driver output
    889e:	2101      	movs	r1, #1
    88a0:	2016      	movs	r0, #22
    88a2:	f002 fd31 	bl	b308 <pinMode>
  pinMode(OUT6, OUTPUT); // pwm driver output
    88a6:	2101      	movs	r1, #1
    88a8:	2017      	movs	r0, #23
    88aa:	f002 fd2d 	bl	b308 <pinMode>
  pinMode(OUT7, OUTPUT); // pwm driver output
    88ae:	2101      	movs	r1, #1
    88b0:	2005      	movs	r0, #5
    88b2:	f002 fd29 	bl	b308 <pinMode>
  pinMode(OUT8, OUTPUT); // pwm driver output
    88b6:	2101      	movs	r1, #1
    88b8:	2006      	movs	r0, #6
    88ba:	f002 fd25 	bl	b308 <pinMode>
  pinMode(led, OUTPUT);
    88be:	2101      	movs	r1, #1
    88c0:	200d      	movs	r0, #13
    88c2:	f002 fd21 	bl	b308 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    88c6:	8820      	ldrh	r0, [r4, #0]
    88c8:	f006 f842 	bl	e950 <__aeabi_ui2f>
    88cc:	4601      	mov	r1, r0
    88ce:	2016      	movs	r0, #22
    88d0:	f002 fc7c 	bl	b1cc <analogWriteFrequency>
  analogWriteFrequency(OUT6, pwmfreq);
    88d4:	8820      	ldrh	r0, [r4, #0]
    88d6:	f006 f83b 	bl	e950 <__aeabi_ui2f>
    88da:	4601      	mov	r1, r0
    88dc:	2017      	movs	r0, #23
    88de:	f002 fc75 	bl	b1cc <analogWriteFrequency>
  analogWriteFrequency(OUT7, pwmfreq);
    88e2:	8820      	ldrh	r0, [r4, #0]
    88e4:	f006 f834 	bl	e950 <__aeabi_ui2f>
    88e8:	4601      	mov	r1, r0
    88ea:	2005      	movs	r0, #5
    88ec:	f002 fc6e 	bl	b1cc <analogWriteFrequency>
  analogWriteFrequency(OUT8, pwmfreq);
    88f0:	8820      	ldrh	r0, [r4, #0]
    88f2:	f006 f82d 	bl	e950 <__aeabi_ui2f>
    88f6:	4601      	mov	r1, r0
    88f8:	2006      	movs	r0, #6
    88fa:	f002 fc67 	bl	b1cc <analogWriteFrequency>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    88fe:	1e7c      	subs	r4, r7, #1
    8900:	f107 06e3 	add.w	r6, r7, #227	; 0xe3
    8904:	f1c7 0501 	rsb	r5, r7, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    8908:	1928      	adds	r0, r5, r4
    890a:	f002 f811 	bl	a930 <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    890e:	f804 0f01 	strb.w	r0, [r4, #1]!
    8912:	42b4      	cmp	r4, r6
    8914:	d1f8      	bne.n	8908 <setup+0xc4>
  if (settings.version != EEPROM_VERSION)
    8916:	783b      	ldrb	r3, [r7, #0]
    8918:	2b14      	cmp	r3, #20
    891a:	d001      	beq.n	8920 <setup+0xdc>
    loadSettings();
    891c:	f7fa fa4e 	bl	2dbc <loadSettings()>
  Can0.begin(settings.canSpeed);
    8920:	2400      	movs	r4, #0
    8922:	4a85      	ldr	r2, [pc, #532]	; (8b38 <L_29753_delayMicroseconds+0xb6>)
    8924:	9400      	str	r4, [sp, #0]
    8926:	4623      	mov	r3, r4
    8928:	6879      	ldr	r1, [r7, #4]
    892a:	4884      	ldr	r0, [pc, #528]	; (8b3c <L_29753_delayMicroseconds+0xba>)
    Can0.setFilter(allPassFilter, filterNum);
    892c:	4d83      	ldr	r5, [pc, #524]	; (8b3c <L_29753_delayMicroseconds+0xba>)
  Can0.begin(settings.canSpeed);
    892e:	f000 feaf 	bl	9690 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>
  allPassFilter.ext = 1;
    8932:	f89d 2014 	ldrb.w	r2, [sp, #20]
  allPassFilter.id = 0;
    8936:	9404      	str	r4, [sp, #16]
  allPassFilter.ext = 1;
    8938:	f022 0203 	bic.w	r2, r2, #3
    893c:	f042 0201 	orr.w	r2, r2, #1
    8940:	f88d 2014 	strb.w	r2, [sp, #20]
  for (int filterNum = 4; filterNum < 16; filterNum++) {
    8944:	2404      	movs	r4, #4
    Can0.setFilter(allPassFilter, filterNum);
    8946:	b2e2      	uxtb	r2, r4
    8948:	a904      	add	r1, sp, #16
    894a:	4628      	mov	r0, r5
  for (int filterNum = 4; filterNum < 16; filterNum++) {
    894c:	3401      	adds	r4, #1
    Can0.setFilter(allPassFilter, filterNum);
    894e:	f000 fe2b 	bl	95a8 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int filterNum = 4; filterNum < 16; filterNum++) {
    8952:	2c10      	cmp	r4, #16
    8954:	d1f7      	bne.n	8946 <setup+0x102>
  adc->adc0->setAveraging(16); // set number of averages
    8956:	4d7a      	ldr	r5, [pc, #488]	; (8b40 <L_29753_delayMicroseconds+0xbe>)
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    8958:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8b44 <L_29753_delayMicroseconds+0xc2>
    895c:	682b      	ldr	r3, [r5, #0]
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    895e:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8b48 <L_29753_delayMicroseconds+0xc6>
    8962:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    8966:	4621      	mov	r1, r4
    8968:	f000 fca6 	bl	92b8 <ADC_Module::setAveraging(unsigned char)>
  adc->adc0->setResolution(16); // set bits of resolution
    896c:	682b      	ldr	r3, [r5, #0]
    896e:	4621      	mov	r1, r4
    8970:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    8974:	4c75      	ldr	r4, [pc, #468]	; (8b4c <L_29753_delayMicroseconds+0xca>)
    8976:	f000 fb65 	bl	9044 <ADC_Module::setResolution(unsigned char)>
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::HIGH_SPEED);
    897a:	682b      	ldr	r3, [r5, #0]
    897c:	2104      	movs	r1, #4
    897e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    8982:	f000 fa47 	bl	8e14 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  adc->adc0->setSamplingSpeed(ADC_SAMPLING_SPEED::LOW_SPEED);
    8986:	682b      	ldr	r3, [r5, #0]
    8988:	2101      	movs	r1, #1
    898a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    898e:	f000 fc3f 	bl	9210 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
  adc->adc0->startContinuous(ACUR1);
    8992:	682b      	ldr	r3, [r5, #0]
		uint32_t millis_begin = systick_millis_count;
    8994:	4d6e      	ldr	r5, [pc, #440]	; (8b50 <L_29753_delayMicroseconds+0xce>)
    8996:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    899a:	210f      	movs	r1, #15
    899c:	f000 fcf0 	bl	9380 <ADC_Module::startContinuous(unsigned char)>
    89a0:	682e      	ldr	r6, [r5, #0]
				if (elapsed > 750) break;
    89a2:	f240 29ee 	movw	r9, #750	; 0x2ee
		yield();
    89a6:	f004 fbf3 	bl	d190 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    89aa:	7823      	ldrb	r3, [r4, #0]
    89ac:	2b00      	cmp	r3, #0
    89ae:	f000 810b 	beq.w	8bc8 <L_29753_delayMicroseconds+0x146>
    89b2:	f898 3000 	ldrb.w	r3, [r8]
    89b6:	07db      	lsls	r3, r3, #31
    89b8:	f140 8106 	bpl.w	8bc8 <L_29753_delayMicroseconds+0x146>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    89bc:	682b      	ldr	r3, [r5, #0]
    89be:	f8da 2000 	ldr.w	r2, [sl]
    89c2:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    89c4:	2b0e      	cmp	r3, #14
    89c6:	f240 80ff 	bls.w	8bc8 <L_29753_delayMicroseconds+0x146>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    89ca:	210c      	movs	r1, #12
    89cc:	4861      	ldr	r0, [pc, #388]	; (8b54 <L_29753_delayMicroseconds+0xd2>)
    89ce:	f004 fad9 	bl	cf84 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    89d2:	4861      	ldr	r0, [pc, #388]	; (8b58 <L_29753_delayMicroseconds+0xd6>)
    89d4:	f001 fd90 	bl	a4f8 <Print::println()>
    89d8:	2110      	movs	r1, #16
    89da:	4860      	ldr	r0, [pc, #384]	; (8b5c <L_29753_delayMicroseconds+0xda>)
    89dc:	f004 fad2 	bl	cf84 <usb_serial_write>
    89e0:	485d      	ldr	r0, [pc, #372]	; (8b58 <L_29753_delayMicroseconds+0xd6>)
    89e2:	f001 fd89 	bl	a4f8 <Print::println()>
  Serial2.begin(115200); //display and can adpater canbus
    89e6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    89ea:	485d      	ldr	r0, [pc, #372]	; (8b60 <L_29753_delayMicroseconds+0xde>)
    89ec:	f001 fbca 	bl	a184 <HardwareSerial2::begin(unsigned long)>
  Serial.println();
    89f0:	4859      	ldr	r0, [pc, #356]	; (8b58 <L_29753_delayMicroseconds+0xd6>)
    89f2:	f001 fd81 	bl	a4f8 <Print::println()>
    89f6:	2117      	movs	r1, #23
    89f8:	485a      	ldr	r0, [pc, #360]	; (8b64 <L_29753_delayMicroseconds+0xe2>)
    89fa:	f004 fac3 	bl	cf84 <usb_serial_write>
    89fe:	4856      	ldr	r0, [pc, #344]	; (8b58 <L_29753_delayMicroseconds+0xd6>)
    8a00:	f001 fd7a 	bl	a4f8 <Print::println()>
  if (RCM_SRS1 & RCM_SRS1_SACKERR)   Serial.println("Stop Mode Acknowledge Error Reset");
    8a04:	4b58      	ldr	r3, [pc, #352]	; (8b68 <L_29753_delayMicroseconds+0xe6>)
    8a06:	785b      	ldrb	r3, [r3, #1]
    8a08:	0698      	lsls	r0, r3, #26
    8a0a:	f100 80eb 	bmi.w	8be4 <L_29753_delayMicroseconds+0x162>
  if (RCM_SRS1 & RCM_SRS1_MDM_AP)    Serial.println("MDM-AP Reset");
    8a0e:	4b56      	ldr	r3, [pc, #344]	; (8b68 <L_29753_delayMicroseconds+0xe6>)
    8a10:	785b      	ldrb	r3, [r3, #1]
    8a12:	0719      	lsls	r1, r3, #28
    8a14:	f100 80f2 	bmi.w	8bfc <L_29753_delayMicroseconds+0x17a>
  if (RCM_SRS1 & RCM_SRS1_SW)        Serial.println("Software Reset");                   // reboot with SCB_AIRCR = 0x05FA0004
    8a18:	4b53      	ldr	r3, [pc, #332]	; (8b68 <L_29753_delayMicroseconds+0xe6>)
    8a1a:	785b      	ldrb	r3, [r3, #1]
    8a1c:	075a      	lsls	r2, r3, #29
    8a1e:	f100 80f9 	bmi.w	8c14 <L_29753_delayMicroseconds+0x192>
  if (RCM_SRS1 & RCM_SRS1_LOCKUP)    Serial.println("Core Lockup Event Reset");
    8a22:	4b51      	ldr	r3, [pc, #324]	; (8b68 <L_29753_delayMicroseconds+0xe6>)
    8a24:	785b      	ldrb	r3, [r3, #1]
    8a26:	079b      	lsls	r3, r3, #30
    8a28:	f100 8100 	bmi.w	8c2c <L_29753_delayMicroseconds+0x1aa>
  if (RCM_SRS0 & RCM_SRS0_POR)       Serial.println("Power-on Reset");                   // removed / applied power
    8a2c:	4b4e      	ldr	r3, [pc, #312]	; (8b68 <L_29753_delayMicroseconds+0xe6>)
    8a2e:	781b      	ldrb	r3, [r3, #0]
    8a30:	061e      	lsls	r6, r3, #24
    8a32:	f100 8107 	bmi.w	8c44 <L_29753_delayMicroseconds+0x1c2>
  if (RCM_SRS0 & RCM_SRS0_PIN)       Serial.println("External Pin Reset");               // Reboot with software download
    8a36:	4b4c      	ldr	r3, [pc, #304]	; (8b68 <L_29753_delayMicroseconds+0xe6>)
    8a38:	781b      	ldrb	r3, [r3, #0]
    8a3a:	065c      	lsls	r4, r3, #25
    8a3c:	f100 810e 	bmi.w	8c5c <L_29753_delayMicroseconds+0x1da>
  if (RCM_SRS0 & RCM_SRS0_WDOG)      Serial.println("Watchdog(COP) Reset");              // WDT timed out
    8a40:	4b49      	ldr	r3, [pc, #292]	; (8b68 <L_29753_delayMicroseconds+0xe6>)
    8a42:	781b      	ldrb	r3, [r3, #0]
    8a44:	0698      	lsls	r0, r3, #26
    8a46:	f100 8115 	bmi.w	8c74 <L_29753_delayMicroseconds+0x1f2>
  if (RCM_SRS0 & RCM_SRS0_LOC)       Serial.println("Loss of External Clock Reset");
    8a4a:	4b47      	ldr	r3, [pc, #284]	; (8b68 <L_29753_delayMicroseconds+0xe6>)
    8a4c:	781b      	ldrb	r3, [r3, #0]
    8a4e:	0759      	lsls	r1, r3, #29
    8a50:	f100 811c 	bmi.w	8c8c <L_29753_delayMicroseconds+0x20a>
  if (RCM_SRS0 & RCM_SRS0_LOL)       Serial.println("Loss of Lock in PLL Reset");
    8a54:	4b44      	ldr	r3, [pc, #272]	; (8b68 <L_29753_delayMicroseconds+0xe6>)
    8a56:	781b      	ldrb	r3, [r3, #0]
    8a58:	071a      	lsls	r2, r3, #28
    8a5a:	f100 8123 	bmi.w	8ca4 <L_29753_delayMicroseconds+0x222>
  if (RCM_SRS0 & RCM_SRS0_LVD)       Serial.println("Low-voltage Detect Reset");
    8a5e:	4b42      	ldr	r3, [pc, #264]	; (8b68 <L_29753_delayMicroseconds+0xe6>)
    8a60:	781b      	ldrb	r3, [r3, #0]
    8a62:	079b      	lsls	r3, r3, #30
    8a64:	f100 812a 	bmi.w	8cbc <L_29753_delayMicroseconds+0x23a>
  Serial.println();
    8a68:	483b      	ldr	r0, [pc, #236]	; (8b58 <L_29753_delayMicroseconds+0xd6>)
    8a6a:	f001 fd45 	bl	a4f8 <Print::println()>
  noInterrupts();                                         // don't allow interrupts while setting up WDOG
    8a6e:	b672      	cpsid	i
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;                         // unlock access to WDOG registers
    8a70:	4b3e      	ldr	r3, [pc, #248]	; (8b6c <L_29753_delayMicroseconds+0xea>)
    8a72:	f24c 5120 	movw	r1, #50464	; 0xc520
    8a76:	81d9      	strh	r1, [r3, #14]
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    8a78:	f64d 1228 	movw	r2, #55592	; 0xd928
#elif F_CPU == 2000000
	uint32_t n = usec >> 1;
#endif
    // changed because a delay of 1 micro Sec @ 2MHz will be 0
	if (n == 0) return;
	__asm__ volatile(
    8a7c:	2120      	movs	r1, #32
    8a7e:	81da      	strh	r2, [r3, #14]
    8a80:	460a      	mov	r2, r1

00008a82 <L_29753_delayMicroseconds>:
    8a82:	3a01      	subs	r2, #1
    8a84:	d1fd      	bne.n	8a82 <L_29753_delayMicroseconds>
  WDOG_TOVALL = 0x0000;
    8a86:	2400      	movs	r4, #0
  WDOG_TOVALH = 0x1000;
    8a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    8a8c:	809a      	strh	r2, [r3, #4]
  WDOG_TOVALL = 0x0000;
    8a8e:	80dc      	strh	r4, [r3, #6]
  WDOG_PRESC  = 0;
    8a90:	82dc      	strh	r4, [r3, #22]
  WDOG_STCTRLH |= WDOG_STCTRLH_ALLOWUPDATE |
    8a92:	881a      	ldrh	r2, [r3, #0]
    8a94:	b292      	uxth	r2, r2
    8a96:	f042 02d3 	orr.w	r2, r2, #211	; 0xd3
    8a9a:	801a      	strh	r2, [r3, #0]
  interrupts();
    8a9c:	b662      	cpsie	i
    8a9e:	4834      	ldr	r0, [pc, #208]	; (8b70 <L_29753_delayMicroseconds+0xee>)
    8aa0:	f004 fa70 	bl	cf84 <usb_serial_write>
    8aa4:	482c      	ldr	r0, [pc, #176]	; (8b58 <L_29753_delayMicroseconds+0xd6>)
    8aa6:	f001 fd27 	bl	a4f8 <Print::println()>
  bms.renumberBoardIDs();
    8aaa:	4832      	ldr	r0, [pc, #200]	; (8b74 <L_29753_delayMicroseconds+0xf2>)
    8aac:	f7f8 fe18 	bl	16e0 <BMSModuleManager::renumberBoardIDs()>
  Logger::setLoglevel(Logger::Off); //Debug = 0, Info = 1, Warn = 2, Error = 3, Off = 4
    8ab0:	2004      	movs	r0, #4
    8ab2:	f7f9 ff93 	bl	29dc <Logger::setLoglevel(Logger::LogLevel)>
  lastUpdate = 0;
    8ab6:	4b30      	ldr	r3, [pc, #192]	; (8b78 <L_29753_delayMicroseconds+0xf6>)
  bms.findBoards();
    8ab8:	482e      	ldr	r0, [pc, #184]	; (8b74 <L_29753_delayMicroseconds+0xf2>)
  lastUpdate = 0;
    8aba:	601c      	str	r4, [r3, #0]
  bms.findBoards();
    8abc:	f7f8 fd48 	bl	1550 <BMSModuleManager::findBoards()>
  digitalWrite(led, HIGH);
    8ac0:	2101      	movs	r1, #1
    8ac2:	200d      	movs	r0, #13
    8ac4:	f002 fbec 	bl	b2a0 <digitalWrite>
  bms.setPstrings(settings.Pstrings);
    8ac8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    8aca:	482a      	ldr	r0, [pc, #168]	; (8b74 <L_29753_delayMicroseconds+0xf2>)
    8acc:	f7f9 fbd2 	bl	2274 <BMSModuleManager::setPstrings(int)>
  bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    8ad0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    8ad2:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
    8ad6:	4827      	ldr	r0, [pc, #156]	; (8b74 <L_29753_delayMicroseconds+0xf2>)
    8ad8:	f7f9 fbce 	bl	2278 <BMSModuleManager::setSensors(int, float)>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    8adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8ae0:	f001 ff26 	bl	a930 <eeprom_read_byte>
  if (settings.voltsoc == 1)
    8ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  SOC = (EEPROM.read(1000));
    8ae8:	4a24      	ldr	r2, [pc, #144]	; (8b7c <L_29753_delayMicroseconds+0xfa>)
  if (settings.voltsoc == 1)
    8aea:	2b01      	cmp	r3, #1
  SOC = (EEPROM.read(1000));
    8aec:	6010      	str	r0, [r2, #0]
  if (settings.voltsoc == 1)
    8aee:	d001      	beq.n	8af4 <L_29753_delayMicroseconds+0x72>
    if (SOC > 100)
    8af0:	2864      	cmp	r0, #100	; 0x64
    8af2:	dd02      	ble.n	8afa <L_29753_delayMicroseconds+0x78>
    SOCmem = 0;
    8af4:	4b22      	ldr	r3, [pc, #136]	; (8b80 <L_29753_delayMicroseconds+0xfe>)
    8af6:	2200      	movs	r2, #0
    8af8:	601a      	str	r2, [r3, #0]
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    8afa:	4b22      	ldr	r3, [pc, #136]	; (8b84 <L_29753_delayMicroseconds+0x102>)
    8afc:	4a22      	ldr	r2, [pc, #136]	; (8b88 <L_29753_delayMicroseconds+0x106>)
    8afe:	681b      	ldr	r3, [r3, #0]
    8b00:	4922      	ldr	r1, [pc, #136]	; (8b8c <L_29753_delayMicroseconds+0x10a>)
  Pretimer = millis();
    8b02:	4c23      	ldr	r4, [pc, #140]	; (8b90 <L_29753_delayMicroseconds+0x10e>)
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    8b04:	6809      	ldr	r1, [r1, #0]
    8b06:	fb82 0203 	smull	r0, r2, r2, r3
    8b0a:	17db      	asrs	r3, r3, #31
    8b0c:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    8b10:	4a20      	ldr	r2, [pc, #128]	; (8b94 <L_29753_delayMicroseconds+0x112>)
  bms.clearFaults();
    8b12:	4818      	ldr	r0, [pc, #96]	; (8b74 <L_29753_delayMicroseconds+0xf2>)
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    8b14:	fb13 f301 	smulbb	r3, r3, r1
    8b18:	8013      	strh	r3, [r2, #0]
  bms.clearFaults();
    8b1a:	f7f8 fed9 	bl	18d0 <BMSModuleManager::clearFaults()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8b1e:	682b      	ldr	r3, [r5, #0]
    8b20:	9303      	str	r3, [sp, #12]
	return ret;
    8b22:	9e03      	ldr	r6, [sp, #12]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8b24:	682b      	ldr	r3, [r5, #0]
    8b26:	e037      	b.n	8b98 <L_29753_delayMicroseconds+0x116>
    8b28:	00095894 	.word	0x00095894
    8b2c:	1fff88cc 	.word	0x1fff88cc
    8b30:	1fff8870 	.word	0x1fff8870
    8b34:	1fffb73c 	.word	0x1fffb73c
    8b38:	1fffb9e0 	.word	0x1fffb9e0
    8b3c:	1fffb844 	.word	0x1fffb844
    8b40:	1fff91dc 	.word	0x1fff91dc
    8b44:	1fffbc54 	.word	0x1fffbc54
    8b48:	1fffbc58 	.word	0x1fffbc58
    8b4c:	1fffbc30 	.word	0x1fffbc30
    8b50:	1fffba38 	.word	0x1fffba38
    8b54:	00016cb8 	.word	0x00016cb8
    8b58:	1fff89f8 	.word	0x1fff89f8
    8b5c:	00016cc8 	.word	0x00016cc8
    8b60:	1fff88b8 	.word	0x1fff88b8
    8b64:	00016cdc 	.word	0x00016cdc
    8b68:	4007f000 	.word	0x4007f000
    8b6c:	40052000 	.word	0x40052000
    8b70:	00016de0 	.word	0x00016de0
    8b74:	1fff91ec 	.word	0x1fff91ec
    8b78:	1fffb65c 	.word	0x1fffb65c
    8b7c:	1fff8828 	.word	0x1fff8828
    8b80:	1fff91c8 	.word	0x1fff91c8
    8b84:	1fff886c 	.word	0x1fff886c
    8b88:	51eb851f 	.word	0x51eb851f
    8b8c:	1fff8868 	.word	0x1fff8868
    8b90:	1fff91bc 	.word	0x1fff91bc
    8b94:	1fffb734 	.word	0x1fffb734
    8b98:	9302      	str	r3, [sp, #8]
  Pretimer1  = millis();
    8b9a:	4b4c      	ldr	r3, [pc, #304]	; (8ccc <L_29753_delayMicroseconds+0x24a>)
	return ret;
    8b9c:	9802      	ldr	r0, [sp, #8]
    8b9e:	6018      	str	r0, [r3, #0]
  attachInterrupt (IN4, isrCP , CHANGE); // attach BUTTON 1 interrupt handler [ pin# 7 ]
    8ba0:	494b      	ldr	r1, [pc, #300]	; (8cd0 <L_29753_delayMicroseconds+0x24e>)
  Pretimer = millis();
    8ba2:	6026      	str	r6, [r4, #0]
  attachInterrupt (IN4, isrCP , CHANGE); // attach BUTTON 1 interrupt handler [ pin# 7 ]
    8ba4:	2204      	movs	r2, #4
    8ba6:	2013      	movs	r0, #19
    8ba8:	f002 f92c 	bl	ae04 <attachInterrupt>
  PMC_LVDSC1 =  PMC_LVDSC1_LVDV(1);  // enable hi v
    8bac:	4b49      	ldr	r3, [pc, #292]	; (8cd4 <L_29753_delayMicroseconds+0x252>)
  NVIC_ENABLE_IRQ(IRQ_LOW_VOLTAGE);
    8bae:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  PMC_LVDSC1 =  PMC_LVDSC1_LVDV(1);  // enable hi v
    8bb2:	2401      	movs	r4, #1
  PMC_LVDSC2 = PMC_LVDSC2_LVWIE | PMC_LVDSC2_LVWV(3); // 2.92-3.08v
    8bb4:	2023      	movs	r0, #35	; 0x23
  NVIC_ENABLE_IRQ(IRQ_LOW_VOLTAGE);
    8bb6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  PMC_LVDSC1 =  PMC_LVDSC1_LVDV(1);  // enable hi v
    8bba:	701c      	strb	r4, [r3, #0]
  PMC_LVDSC2 = PMC_LVDSC2_LVWIE | PMC_LVDSC2_LVWV(3); // 2.92-3.08v
    8bbc:	7058      	strb	r0, [r3, #1]
  NVIC_ENABLE_IRQ(IRQ_LOW_VOLTAGE);
    8bbe:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
}
    8bc2:	b006      	add	sp, #24
    8bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
    8bc8:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    8bca:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    8bcc:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    8bce:	b132      	cbz	r2, 8bde <L_29753_delayMicroseconds+0x15c>
				if (elapsed > 2000) break;
    8bd0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    8bd4:	f63f aef9 	bhi.w	89ca <setup+0x186>
			yield();
    8bd8:	f004 fada 	bl	d190 <yield>
    8bdc:	e6e3      	b.n	89a6 <setup+0x162>
				if (elapsed > 750) break;
    8bde:	454b      	cmp	r3, r9
    8be0:	d9fa      	bls.n	8bd8 <L_29753_delayMicroseconds+0x156>
    8be2:	e6f2      	b.n	89ca <setup+0x186>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8be4:	2121      	movs	r1, #33	; 0x21
    8be6:	483c      	ldr	r0, [pc, #240]	; (8cd8 <L_29753_delayMicroseconds+0x256>)
    8be8:	f004 f9cc 	bl	cf84 <usb_serial_write>
    8bec:	483b      	ldr	r0, [pc, #236]	; (8cdc <L_29753_delayMicroseconds+0x25a>)
    8bee:	f001 fc83 	bl	a4f8 <Print::println()>
  if (RCM_SRS1 & RCM_SRS1_MDM_AP)    Serial.println("MDM-AP Reset");
    8bf2:	4b3b      	ldr	r3, [pc, #236]	; (8ce0 <L_29753_delayMicroseconds+0x25e>)
    8bf4:	785b      	ldrb	r3, [r3, #1]
    8bf6:	0719      	lsls	r1, r3, #28
    8bf8:	f57f af0e 	bpl.w	8a18 <setup+0x1d4>
    8bfc:	210c      	movs	r1, #12
    8bfe:	4839      	ldr	r0, [pc, #228]	; (8ce4 <L_29753_delayMicroseconds+0x262>)
    8c00:	f004 f9c0 	bl	cf84 <usb_serial_write>
    8c04:	4835      	ldr	r0, [pc, #212]	; (8cdc <L_29753_delayMicroseconds+0x25a>)
    8c06:	f001 fc77 	bl	a4f8 <Print::println()>
  if (RCM_SRS1 & RCM_SRS1_SW)        Serial.println("Software Reset");                   // reboot with SCB_AIRCR = 0x05FA0004
    8c0a:	4b35      	ldr	r3, [pc, #212]	; (8ce0 <L_29753_delayMicroseconds+0x25e>)
    8c0c:	785b      	ldrb	r3, [r3, #1]
    8c0e:	075a      	lsls	r2, r3, #29
    8c10:	f57f af07 	bpl.w	8a22 <setup+0x1de>
    8c14:	210e      	movs	r1, #14
    8c16:	4834      	ldr	r0, [pc, #208]	; (8ce8 <L_29753_delayMicroseconds+0x266>)
    8c18:	f004 f9b4 	bl	cf84 <usb_serial_write>
    8c1c:	482f      	ldr	r0, [pc, #188]	; (8cdc <L_29753_delayMicroseconds+0x25a>)
    8c1e:	f001 fc6b 	bl	a4f8 <Print::println()>
  if (RCM_SRS1 & RCM_SRS1_LOCKUP)    Serial.println("Core Lockup Event Reset");
    8c22:	4b2f      	ldr	r3, [pc, #188]	; (8ce0 <L_29753_delayMicroseconds+0x25e>)
    8c24:	785b      	ldrb	r3, [r3, #1]
    8c26:	079b      	lsls	r3, r3, #30
    8c28:	f57f af00 	bpl.w	8a2c <setup+0x1e8>
    8c2c:	2117      	movs	r1, #23
    8c2e:	482f      	ldr	r0, [pc, #188]	; (8cec <L_29753_delayMicroseconds+0x26a>)
    8c30:	f004 f9a8 	bl	cf84 <usb_serial_write>
    8c34:	4829      	ldr	r0, [pc, #164]	; (8cdc <L_29753_delayMicroseconds+0x25a>)
    8c36:	f001 fc5f 	bl	a4f8 <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_POR)       Serial.println("Power-on Reset");                   // removed / applied power
    8c3a:	4b29      	ldr	r3, [pc, #164]	; (8ce0 <L_29753_delayMicroseconds+0x25e>)
    8c3c:	781b      	ldrb	r3, [r3, #0]
    8c3e:	061e      	lsls	r6, r3, #24
    8c40:	f57f aef9 	bpl.w	8a36 <setup+0x1f2>
    8c44:	210e      	movs	r1, #14
    8c46:	482a      	ldr	r0, [pc, #168]	; (8cf0 <L_29753_delayMicroseconds+0x26e>)
    8c48:	f004 f99c 	bl	cf84 <usb_serial_write>
    8c4c:	4823      	ldr	r0, [pc, #140]	; (8cdc <L_29753_delayMicroseconds+0x25a>)
    8c4e:	f001 fc53 	bl	a4f8 <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_PIN)       Serial.println("External Pin Reset");               // Reboot with software download
    8c52:	4b23      	ldr	r3, [pc, #140]	; (8ce0 <L_29753_delayMicroseconds+0x25e>)
    8c54:	781b      	ldrb	r3, [r3, #0]
    8c56:	065c      	lsls	r4, r3, #25
    8c58:	f57f aef2 	bpl.w	8a40 <setup+0x1fc>
    8c5c:	2112      	movs	r1, #18
    8c5e:	4825      	ldr	r0, [pc, #148]	; (8cf4 <L_29753_delayMicroseconds+0x272>)
    8c60:	f004 f990 	bl	cf84 <usb_serial_write>
    8c64:	481d      	ldr	r0, [pc, #116]	; (8cdc <L_29753_delayMicroseconds+0x25a>)
    8c66:	f001 fc47 	bl	a4f8 <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_WDOG)      Serial.println("Watchdog(COP) Reset");              // WDT timed out
    8c6a:	4b1d      	ldr	r3, [pc, #116]	; (8ce0 <L_29753_delayMicroseconds+0x25e>)
    8c6c:	781b      	ldrb	r3, [r3, #0]
    8c6e:	0698      	lsls	r0, r3, #26
    8c70:	f57f aeeb 	bpl.w	8a4a <setup+0x206>
    8c74:	2113      	movs	r1, #19
    8c76:	4820      	ldr	r0, [pc, #128]	; (8cf8 <L_29753_delayMicroseconds+0x276>)
    8c78:	f004 f984 	bl	cf84 <usb_serial_write>
    8c7c:	4817      	ldr	r0, [pc, #92]	; (8cdc <L_29753_delayMicroseconds+0x25a>)
    8c7e:	f001 fc3b 	bl	a4f8 <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_LOC)       Serial.println("Loss of External Clock Reset");
    8c82:	4b17      	ldr	r3, [pc, #92]	; (8ce0 <L_29753_delayMicroseconds+0x25e>)
    8c84:	781b      	ldrb	r3, [r3, #0]
    8c86:	0759      	lsls	r1, r3, #29
    8c88:	f57f aee4 	bpl.w	8a54 <setup+0x210>
    8c8c:	211c      	movs	r1, #28
    8c8e:	481b      	ldr	r0, [pc, #108]	; (8cfc <L_29753_delayMicroseconds+0x27a>)
    8c90:	f004 f978 	bl	cf84 <usb_serial_write>
    8c94:	4811      	ldr	r0, [pc, #68]	; (8cdc <L_29753_delayMicroseconds+0x25a>)
    8c96:	f001 fc2f 	bl	a4f8 <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_LOL)       Serial.println("Loss of Lock in PLL Reset");
    8c9a:	4b11      	ldr	r3, [pc, #68]	; (8ce0 <L_29753_delayMicroseconds+0x25e>)
    8c9c:	781b      	ldrb	r3, [r3, #0]
    8c9e:	071a      	lsls	r2, r3, #28
    8ca0:	f57f aedd 	bpl.w	8a5e <setup+0x21a>
    8ca4:	2119      	movs	r1, #25
    8ca6:	4816      	ldr	r0, [pc, #88]	; (8d00 <L_29753_delayMicroseconds+0x27e>)
    8ca8:	f004 f96c 	bl	cf84 <usb_serial_write>
    8cac:	480b      	ldr	r0, [pc, #44]	; (8cdc <L_29753_delayMicroseconds+0x25a>)
    8cae:	f001 fc23 	bl	a4f8 <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_LVD)       Serial.println("Low-voltage Detect Reset");
    8cb2:	4b0b      	ldr	r3, [pc, #44]	; (8ce0 <L_29753_delayMicroseconds+0x25e>)
    8cb4:	781b      	ldrb	r3, [r3, #0]
    8cb6:	079b      	lsls	r3, r3, #30
    8cb8:	f57f aed6 	bpl.w	8a68 <setup+0x224>
    8cbc:	2118      	movs	r1, #24
    8cbe:	4811      	ldr	r0, [pc, #68]	; (8d04 <L_29753_delayMicroseconds+0x282>)
    8cc0:	f004 f960 	bl	cf84 <usb_serial_write>
    8cc4:	4805      	ldr	r0, [pc, #20]	; (8cdc <L_29753_delayMicroseconds+0x25a>)
    8cc6:	f001 fc17 	bl	a4f8 <Print::println()>
    8cca:	e6cd      	b.n	8a68 <setup+0x224>
    8ccc:	1fff91c0 	.word	0x1fff91c0
    8cd0:	00002ce9 	.word	0x00002ce9
    8cd4:	4007d000 	.word	0x4007d000
    8cd8:	00016cf4 	.word	0x00016cf4
    8cdc:	1fff89f8 	.word	0x1fff89f8
    8ce0:	4007f000 	.word	0x4007f000
    8ce4:	00016d18 	.word	0x00016d18
    8ce8:	00016d28 	.word	0x00016d28
    8cec:	00016d38 	.word	0x00016d38
    8cf0:	00016d50 	.word	0x00016d50
    8cf4:	00016d60 	.word	0x00016d60
    8cf8:	00016d74 	.word	0x00016d74
    8cfc:	00016d88 	.word	0x00016d88
    8d00:	00016da8 	.word	0x00016da8
    8d04:	00016dc4 	.word	0x00016dc4

00008d08 <ADC::ADC()>:
    0, 0, 0, 0, 0, 0                                    //22-27
};
#endif

// Constructor
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    8d08:	b530      	push	{r4, r5, lr}
    8d0a:	b083      	sub	sp, #12
#if ADC_DIFF_PAIRS > 0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    8d0c:	490f      	ldr	r1, [pc, #60]	; (8d4c <ADC::ADC()+0x44>)
    8d0e:	9100      	str	r1, [sp, #0]
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    8d10:	4604      	mov	r4, r0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    8d12:	4b0f      	ldr	r3, [pc, #60]	; (8d50 <ADC::ADC()+0x48>)
    8d14:	4a0f      	ldr	r2, [pc, #60]	; (8d54 <ADC::ADC()+0x4c>)
    8d16:	2100      	movs	r1, #0
    8d18:	f000 fa60 	bl	91dc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    8d1c:	f104 0540 	add.w	r5, r4, #64	; 0x40
    8d20:	490d      	ldr	r1, [pc, #52]	; (8d58 <ADC::ADC()+0x50>)
    8d22:	9100      	str	r1, [sp, #0]
    8d24:	4b0d      	ldr	r3, [pc, #52]	; (8d5c <ADC::ADC()+0x54>)
    8d26:	4a0e      	ldr	r2, [pc, #56]	; (8d60 <ADC::ADC()+0x58>)
    8d28:	2101      	movs	r1, #1
    8d2a:	4628      	mov	r0, r5
    8d2c:	f000 fa56 	bl	91dc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
    8d30:	2302      	movs	r3, #2
#endif
{
    //ctor

    //digitalWriteFast(LED_BUILTIN, HIGH);
}
    8d32:	4620      	mov	r0, r4
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    8d34:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    8d38:	f8c4 4084 	str.w	r4, [r4, #132]	; 0x84
    8d3c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    8d40:	f8c4 408c 	str.w	r4, [r4, #140]	; 0x8c
    8d44:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
    8d48:	b003      	add	sp, #12
    8d4a:	bd30      	pop	{r4, r5, pc}
    8d4c:	4003b000 	.word	0x4003b000
    8d50:	00016e04 	.word	0x00016e04
    8d54:	00016e0c 	.word	0x00016e0c
    8d58:	400bb000 	.word	0x400bb000
    8d5c:	00016e08 	.word	0x00016e08
    8d60:	00016e38 	.word	0x00016e38

00008d64 <ADC::startContinuous(unsigned char, signed char)>:
#ifdef ADC_SINGLE_ADC
    return adc0->startContinuous(pin); // use ADC0
#else
    /* Teensy 3.1
    */
    if (adc_num == -1)
    8d64:	1c53      	adds	r3, r2, #1
{
    8d66:	b570      	push	{r4, r5, r6, lr}
    8d68:	4604      	mov	r4, r0
    if (adc_num == -1)
    8d6a:	d011      	beq.n	8d90 <ADC::startContinuous(unsigned char, signed char)+0x2c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
            return false; // all others are invalid
        }
    }
    else if (adc_num == 0)
    8d6c:	b152      	cbz	r2, 8d84 <ADC::startContinuous(unsigned char, signed char)+0x20>
    { // user wants ADC0
        return adc0->startContinuous(pin);
    }
    else if (adc_num == 1)
    8d6e:	2a01      	cmp	r2, #1
    8d70:	d029      	beq.n	8dc6 <ADC::startContinuous(unsigned char, signed char)+0x62>
    { // user wants ADC 1
        return adc1->startContinuous(pin);
    }
    adc0->fail_flag |= ADC_ERROR::OTHER;
    8d72:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    8d76:	8ad3      	ldrh	r3, [r2, #22]
    8d78:	b29b      	uxth	r3, r3
    8d7a:	f043 0301 	orr.w	r3, r3, #1
    8d7e:	82d3      	strh	r3, [r2, #22]
    return false;
#endif
}
    8d80:	2000      	movs	r0, #0
    8d82:	bd70      	pop	{r4, r5, r6, pc}
    8d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc0->startContinuous(pin);
    8d88:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    8d8c:	f000 baf8 	b.w	9380 <ADC_Module::startContinuous(unsigned char)>
        bool adc0Pin = adc0->checkPin(pin);
    8d90:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    8d94:	460d      	mov	r5, r1
    8d96:	f000 fac9 	bl	932c <ADC_Module::checkPin(unsigned char)>
        bool adc1Pin = adc1->checkPin(pin);
    8d9a:	4629      	mov	r1, r5
        bool adc0Pin = adc0->checkPin(pin);
    8d9c:	4606      	mov	r6, r0
        bool adc1Pin = adc1->checkPin(pin);
    8d9e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8da2:	f000 fac3 	bl	932c <ADC_Module::checkPin(unsigned char)>
        if (adc0Pin && adc1Pin)
    8da6:	b1a6      	cbz	r6, 8dd2 <ADC::startContinuous(unsigned char, signed char)+0x6e>
    8da8:	b318      	cbz	r0, 8df2 <ADC::startContinuous(unsigned char, signed char)+0x8e>
            if ((adc0->num_measurements) > (adc1->num_measurements))
    8daa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    8dae:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8db2:	7d59      	ldrb	r1, [r3, #21]
    8db4:	7d42      	ldrb	r2, [r0, #21]
    8db6:	4291      	cmp	r1, r2
                return adc1->startContinuous(pin);
    8db8:	4629      	mov	r1, r5
            if ((adc0->num_measurements) > (adc1->num_measurements))
    8dba:	d806      	bhi.n	8dca <ADC::startContinuous(unsigned char, signed char)+0x66>
}
    8dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                return adc0->startContinuous(pin);
    8dc0:	4618      	mov	r0, r3
    8dc2:	f000 badd 	b.w	9380 <ADC_Module::startContinuous(unsigned char)>
        return adc1->startContinuous(pin);
    8dc6:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
    8dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc1->startContinuous(pin);
    8dce:	f000 bad7 	b.w	9380 <ADC_Module::startContinuous(unsigned char)>
        else if (adc1Pin)
    8dd2:	b9a8      	cbnz	r0, 8e00 <ADC::startContinuous(unsigned char, signed char)+0x9c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
    8dd4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
    8dd8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    8ddc:	8acb      	ldrh	r3, [r1, #22]
    8dde:	b29b      	uxth	r3, r3
    8de0:	f043 0304 	orr.w	r3, r3, #4
    8de4:	82cb      	strh	r3, [r1, #22]
    8de6:	8ad3      	ldrh	r3, [r2, #22]
    8de8:	b29b      	uxth	r3, r3
    8dea:	f043 0304 	orr.w	r3, r3, #4
    8dee:	82d3      	strh	r3, [r2, #22]
            return false; // all others are invalid
    8df0:	e7c6      	b.n	8d80 <ADC::startContinuous(unsigned char, signed char)+0x1c>
            return adc0->startContinuous(pin);
    8df2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    8df6:	4629      	mov	r1, r5
}
    8df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc0->startContinuous(pin);
    8dfc:	f000 bac0 	b.w	9380 <ADC_Module::startContinuous(unsigned char)>
            return adc1->startContinuous(pin);
    8e00:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8e04:	4629      	mov	r1, r5
}
    8e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc1->startContinuous(pin);
    8e0a:	f000 bab9 	b.w	9380 <ADC_Module::startContinuous(unsigned char)>
    8e0e:	bf00      	nop

00008e10 <ADC_Module::getMaxValue()>:
*
*/
uint32_t ADC_Module::getMaxValue()
{
    return analog_max_val;
}
    8e10:	69c0      	ldr	r0, [r0, #28]
    8e12:	4770      	bx	lr

00008e14 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setConversionSpeed(ADC_CONVERSION_SPEED speed)
{

    if (speed == conversion_speed)
    8e14:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    8e18:	428b      	cmp	r3, r1
    8e1a:	d00a      	beq.n	8e32 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e>
{
    8e1c:	b470      	push	{r4, r5, r6}
    //if (calibrating) wait_for_cal();

    bool is_adack = false;
    uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

    switch (speed)
    8e1e:	2909      	cmp	r1, #9
    8e20:	f200 8093 	bhi.w	8f4a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x136>
    8e24:	e8df f001 	tbb	[pc, r1]
    8e28:	06612f2f 	.word	0x06612f2f
    8e2c:	8e817106 	.word	0x8e817106
    8e30:	5440      	.short	0x5440
    8e32:	4770      	bx	lr
    case ADC_CONVERSION_SPEED::HIGH_SPEED:
#ifdef ADC_TEENSY_4
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
#else
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8e34:	6b43      	ldr	r3, [r0, #52]	; 0x34
    *   \return A pointer to the aliased address of the bit of reg
    */
    template <typename T>
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    {
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e36:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8e3a:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8e3e:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8e42:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, bit) = 0;
    }
    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8e46:	2400      	movs	r4, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8e48:	2201      	movs	r2, #1
    8e4a:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8e4e:	4626      	mov	r6, r4
    8e50:	61dc      	str	r4, [r3, #28]
    8e52:	2500      	movs	r5, #0
    8e54:	f8cc 500c 	str.w	r5, [ip, #12]
        bitband_address(reg, bit) = state;
    }
    template <typename T>
    __attribute__((always_inline)) inline void changeBitFlag(volatile T &reg, T flag, T state)
    {
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8e58:	601e      	str	r6, [r3, #0]
        if (__builtin_popcount(flag) > 1)
        {
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8e5a:	605d      	str	r5, [r3, #4]
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8e5c:	615c      	str	r4, [r3, #20]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8e5e:	619a      	str	r2, [r3, #24]
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADICLK(3), ADC_CFG1_speed & ADC_CFG1_ADICLK(3));
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADIV(3), ADC_CFG1_speed & ADC_CFG1_ADIV(3));
#endif
    }

    conversion_speed = speed;
    8e60:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    __disable_irq();
    8e64:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8e66:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e68:	015b      	lsls	r3, r3, #5
    8e6a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    calibrating = 1;
    8e6e:	2201      	movs	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8e70:	2100      	movs	r1, #0
    8e72:	7642      	strb	r2, [r0, #25]
    8e74:	f8c3 149c 	str.w	r1, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8e78:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    8e7c:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    8e80:	b662      	cpsie	i
    calibrate();
}
    8e82:	bc70      	pop	{r4, r5, r6}
    8e84:	4770      	bx	lr
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8e86:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e88:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8e8c:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8e90:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8e94:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8e98:	2200      	movs	r2, #0
    8e9a:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8e9e:	2201      	movs	r2, #1
    8ea0:	61da      	str	r2, [r3, #28]
    8ea2:	4614      	mov	r4, r2
    8ea4:	4616      	mov	r6, r2
    8ea6:	e7d4      	b.n	8e52 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8ea8:	6b43      	ldr	r3, [r0, #52]	; 0x34
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8eaa:	2400      	movs	r4, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8eac:	015a      	lsls	r2, r3, #5
    8eae:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8eb2:	f502 7380 	add.w	r3, r2, #256	; 0x100
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8eb6:	f8c2 4188 	str.w	r4, [r2, #392]	; 0x188
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8eba:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8ebe:	61dc      	str	r4, [r3, #28]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ec0:	2401      	movs	r4, #1
    8ec2:	60d4      	str	r4, [r2, #12]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8ec4:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ec6:	605c      	str	r4, [r3, #4]
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8ec8:	601c      	str	r4, [r3, #0]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8eca:	619a      	str	r2, [r3, #24]
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8ecc:	615a      	str	r2, [r3, #20]
    }
    8ece:	e7c7      	b.n	8e60 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x4c>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8ed0:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8ed2:	015a      	lsls	r2, r3, #5
    8ed4:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8ed8:	f502 7380 	add.w	r3, r2, #256	; 0x100
    8edc:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ee0:	2401      	movs	r4, #1
    8ee2:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8ee4:	2400      	movs	r4, #0
    8ee6:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    8ee8:	e7ea      	b.n	8ec0 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8eea:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8eec:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8ef0:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8ef4:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8ef8:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8efc:	2600      	movs	r6, #0
    8efe:	2201      	movs	r2, #1
    8f00:	f8cc 6008 	str.w	r6, [ip, #8]
    8f04:	4614      	mov	r4, r2
    8f06:	61de      	str	r6, [r3, #28]
    if (is_adack)
    8f08:	e7a3      	b.n	8e52 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8f0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f0c:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8f10:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8f14:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8f18:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8f1c:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f1e:	2401      	movs	r4, #1
    8f20:	f8cc 4008 	str.w	r4, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8f24:	4616      	mov	r6, r2
    8f26:	61da      	str	r2, [r3, #28]
    if (is_adack)
    8f28:	e793      	b.n	8e52 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8f2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f2c:	015a      	lsls	r2, r3, #5
    8f2e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8f32:	f502 7380 	add.w	r3, r2, #256	; 0x100
    8f36:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8f3a:	2400      	movs	r4, #0
    8f3c:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f3e:	2401      	movs	r4, #1
    8f40:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    8f42:	e7bd      	b.n	8ec0 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8f44:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8f46:	2401      	movs	r4, #1
    8f48:	e7b0      	b.n	8eac <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x98>
    8f4a:	8ac3      	ldrh	r3, [r0, #22]
    8f4c:	b29b      	uxth	r3, r3
    8f4e:	f043 0301 	orr.w	r3, r3, #1
    8f52:	82c3      	strh	r3, [r0, #22]
    8f54:	e795      	b.n	8e82 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x6e>
    8f56:	bf00      	nop

00008f58 <ADC_Module::wait_for_cal()>:
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8f58:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f5a:	015b      	lsls	r3, r3, #5
    8f5c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
{
    8f60:	b510      	push	{r4, lr}
        return (volatile bool)bitband_address(reg, bit);
    }
    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8f62:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f66:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    8f6a:	4604      	mov	r4, r0
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8f6c:	b152      	cbz	r2, 8f84 <ADC_Module::wait_for_cal()+0x2c>
        yield();
    8f6e:	f004 f90f 	bl	d190 <yield>
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8f74:	015b      	lsls	r3, r3, #5
    8f76:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    8f7a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8f7e:	69da      	ldr	r2, [r3, #28]
    8f80:	2a00      	cmp	r2, #0
    8f82:	d1f4      	bne.n	8f6e <ADC_Module::wait_for_cal()+0x16>
    8f84:	699b      	ldr	r3, [r3, #24]
    if (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CALF))
    8f86:	b123      	cbz	r3, 8f92 <ADC_Module::wait_for_cal()+0x3a>
    8f88:	8ae3      	ldrh	r3, [r4, #22]
    8f8a:	b29b      	uxth	r3, r3
    8f8c:	f043 0302 	orr.w	r3, r3, #2
    8f90:	82e3      	strh	r3, [r4, #22]
    __disable_irq();
    8f92:	b672      	cpsid	i
    if (calibrating)
    8f94:	7e63      	ldrb	r3, [r4, #25]
    8f96:	b303      	cbz	r3, 8fda <ADC_Module::wait_for_cal()+0x82>
        sum = adc_regs.CLPS + adc_regs.CLP4 + adc_regs.CLP3 + adc_regs.CLP2 + adc_regs.CLP1 + adc_regs.CLP0;
    8f98:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8f9a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8f9c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    8f9e:	440b      	add	r3, r1
    8fa0:	6c11      	ldr	r1, [r2, #64]	; 0x40
    8fa2:	6c50      	ldr	r0, [r2, #68]	; 0x44
    8fa4:	440b      	add	r3, r1
    8fa6:	6c91      	ldr	r1, [r2, #72]	; 0x48
    8fa8:	4403      	add	r3, r0
    8faa:	440b      	add	r3, r1
    8fac:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    8fae:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    8fb0:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.PG = sum;
    8fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8fb8:	62d3      	str	r3, [r2, #44]	; 0x2c
        sum = adc_regs.CLMS + adc_regs.CLM4 + adc_regs.CLM3 + adc_regs.CLM2 + adc_regs.CLM1 + adc_regs.CLM0;
    8fba:	6d93      	ldr	r3, [r2, #88]	; 0x58
    8fbc:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    8fbe:	440b      	add	r3, r1
    8fc0:	6e11      	ldr	r1, [r2, #96]	; 0x60
    8fc2:	6e50      	ldr	r0, [r2, #100]	; 0x64
    8fc4:	440b      	add	r3, r1
    8fc6:	6e91      	ldr	r1, [r2, #104]	; 0x68
    8fc8:	4403      	add	r3, r0
    8fca:	440b      	add	r3, r1
    8fcc:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    8fce:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    8fd0:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.MG = sum;
    8fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8fd8:	6313      	str	r3, [r2, #48]	; 0x30
    __enable_irq();
    8fda:	b662      	cpsie	i
    if (init_calib)
    8fdc:	7ea3      	ldrb	r3, [r4, #26]
    calibrating = 0;
    8fde:	2200      	movs	r2, #0
    8fe0:	7662      	strb	r2, [r4, #25]
    if (init_calib)
    8fe2:	b903      	cbnz	r3, 8fe6 <ADC_Module::wait_for_cal()+0x8e>
}
    8fe4:	bd10      	pop	{r4, pc}
        setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    8fe6:	2102      	movs	r1, #2
    8fe8:	4620      	mov	r0, r4
    8fea:	f7ff ff13 	bl	8e14 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setSamplingSpeed(ADC_SAMPLING_SPEED speed)
{
    if (calibrating)
    8fee:	7e63      	ldrb	r3, [r4, #25]
    8ff0:	bb03      	cbnz	r3, 9034 <ADC_Module::wait_for_cal()+0xdc>
    case ADC_SAMPLING_SPEED::LOW_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
        atomic::changeBitFlag(adc_regs.CFG2, ADC_CFG2_ADLSTS(3), ADC_CFG2_ADLSTS(1)); // high sampling time (+16 ADCK)
        break;
    case ADC_SAMPLING_SPEED::MED_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8ff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8ff4:	0159      	lsls	r1, r3, #5
    8ff6:	f101 4284 	add.w	r2, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ffa:	2001      	movs	r0, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8ffc:	2100      	movs	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ffe:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    9002:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9006:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
*
*/
void ADC_Module::setAveraging(uint8_t num)
{

    if (calibrating)
    900a:	7e62      	ldrb	r2, [r4, #25]
    sampling_speed = speed;
    900c:	2102      	movs	r1, #2
    900e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if (calibrating)
    9012:	b992      	cbnz	r2, 903a <ADC_Module::wait_for_cal()+0xe2>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9014:	015b      	lsls	r3, r3, #5
    9016:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    901a:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    901c:	2001      	movs	r0, #1
#else
            atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGS(3));
#endif
        }
    }
    analog_num_average = num;
    901e:	2104      	movs	r1, #4
    9020:	f8c3 0488 	str.w	r0, [r3, #1160]	; 0x488
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9024:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    9028:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    902c:	f884 1020 	strb.w	r1, [r4, #32]
        init_calib = 0; // clear
    9030:	76a2      	strb	r2, [r4, #26]
}
    9032:	bd10      	pop	{r4, pc}
        wait_for_cal();
    9034:	f7ff ff90 	bl	8f58 <ADC_Module::wait_for_cal()>
    9038:	e7db      	b.n	8ff2 <ADC_Module::wait_for_cal()+0x9a>
        wait_for_cal();
    903a:	4620      	mov	r0, r4
    903c:	f7ff ff8c 	bl	8f58 <ADC_Module::wait_for_cal()>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    9040:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9042:	e7e7      	b.n	9014 <ADC_Module::wait_for_cal()+0xbc>

00009044 <ADC_Module::setResolution(unsigned char)>:
{
    9044:	b538      	push	{r3, r4, r5, lr}
    if (analog_res_bits == bits)
    9046:	7ec3      	ldrb	r3, [r0, #27]
    9048:	428b      	cmp	r3, r1
    904a:	d012      	beq.n	9072 <ADC_Module::setResolution(unsigned char)+0x2e>
    if (calibrating)
    904c:	7e43      	ldrb	r3, [r0, #25]
    904e:	4604      	mov	r4, r0
    9050:	460d      	mov	r5, r1
    9052:	bb0b      	cbnz	r3, 9098 <ADC_Module::setResolution(unsigned char)+0x54>
    if (bits <= 9)
    9054:	2d09      	cmp	r5, #9
    9056:	d80d      	bhi.n	9074 <ADC_Module::setResolution(unsigned char)+0x30>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    9058:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    905a:	015b      	lsls	r3, r3, #5
    905c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9060:	2000      	movs	r0, #0
    9062:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    9066:	21ff      	movs	r1, #255	; 0xff
        config = 8;
    9068:	2208      	movs	r2, #8
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    906a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    906e:	61e1      	str	r1, [r4, #28]
    analog_res_bits = config;
    9070:	76e2      	strb	r2, [r4, #27]
}
    9072:	bd38      	pop	{r3, r4, r5, pc}
    else if (bits <= 11)
    9074:	2d0b      	cmp	r5, #11
    9076:	d912      	bls.n	909e <ADC_Module::setResolution(unsigned char)+0x5a>
    else if (bits <= 13)
    9078:	2d0d      	cmp	r5, #13
    907a:	d81e      	bhi.n	90ba <ADC_Module::setResolution(unsigned char)+0x76>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(1));
    907c:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    907e:	015b      	lsls	r3, r3, #5
    9080:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9084:	2200      	movs	r2, #0
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    9086:	2001      	movs	r0, #1
    9088:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    908c:	f640 71ff 	movw	r1, #4095	; 0xfff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9090:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 12;
    9094:	220c      	movs	r2, #12
    9096:	e7ea      	b.n	906e <ADC_Module::setResolution(unsigned char)+0x2a>
        wait_for_cal();
    9098:	f7ff ff5e 	bl	8f58 <ADC_Module::wait_for_cal()>
    909c:	e7da      	b.n	9054 <ADC_Module::setResolution(unsigned char)+0x10>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(2));
    909e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    90a0:	015b      	lsls	r3, r3, #5
    90a2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    90a6:	2201      	movs	r2, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    90a8:	2000      	movs	r0, #0
    90aa:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    90ae:	f240 31ff 	movw	r1, #1023	; 0x3ff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    90b2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 10;
    90b6:	220a      	movs	r2, #10
    90b8:	e7d9      	b.n	906e <ADC_Module::setResolution(unsigned char)+0x2a>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    90ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    90bc:	015b      	lsls	r3, r3, #5
    90be:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    90c2:	2001      	movs	r0, #1
    90c4:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    90c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
        config = 16;
    90cc:	2210      	movs	r2, #16
    90ce:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 65535;
    90d2:	e7cc      	b.n	906e <ADC_Module::setResolution(unsigned char)+0x2a>

000090d4 <ADC_Module::analog_init()>:
{
    90d4:	b538      	push	{r3, r4, r5, lr}
        else
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
        }
#else
        if (ADC_num == 0)
    90d6:	7e03      	ldrb	r3, [r0, #24]
        {
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    90d8:	4a3d      	ldr	r2, [pc, #244]	; (91d0 <ADC_Module::analog_init()+0xfc>)
    90da:	4604      	mov	r4, r0
        if (ADC_num == 0)
    90dc:	2b00      	cmp	r3, #0
    90de:	d16a      	bne.n	91b6 <ADC_Module::analog_init()+0xe2>
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    90e0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    90e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    90e6:	63d3      	str	r3, [r2, #60]	; 0x3c
    atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    90e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    //! Stops the internal reference
    /** This is called automatically by ADC_Module::setReference(ref) when ref is any other than REF_1V2
    */
    __attribute__((always_inline)) inline void stop()
    {
        VREF_SC = 0;
    90ea:	483a      	ldr	r0, [pc, #232]	; (91d4 <ADC_Module::analog_init()+0x100>)
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    90ec:	493a      	ldr	r1, [pc, #232]	; (91d8 <ADC_Module::analog_init()+0x104>)
    pga_value = 1;
    90ee:	f240 4501 	movw	r5, #1025	; 0x401
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    90f2:	0152      	lsls	r2, r2, #5
    90f4:	8465      	strh	r5, [r4, #34]	; 0x22
    90f6:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    90fa:	2504      	movs	r5, #4
    analog_res_bits = 0;
    90fc:	2300      	movs	r3, #0
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    90fe:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9102:	2501      	movs	r5, #1
    analog_res_bits = 0;
    9104:	76e3      	strb	r3, [r4, #27]
    analog_max_val = 0;
    9106:	61e3      	str	r3, [r4, #28]
    analog_num_average = 0;
    9108:	f884 3020 	strb.w	r3, [r4, #32]
    interrupts_enabled = false;
    910c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    calibrating = 0;
    9110:	7663      	strb	r3, [r4, #25]
    fail_flag = ADC_ERROR::CLEAR; // clear all errors
    9112:	82e3      	strh	r3, [r4, #22]
    num_measurements = 0;
    9114:	7563      	strb	r3, [r4, #21]
    9116:	f8c2 5190 	str.w	r5, [r2, #400]	; 0x190
    911a:	7043      	strb	r3, [r0, #1]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    911c:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
        atomic::clearBitFlag(adc_regs.SC2, ADC_SC2_REFSEL(1));
    9120:	6b62      	ldr	r2, [r4, #52]	; 0x34
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    9122:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9126:	0152      	lsls	r2, r2, #5
    9128:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    912c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
    __disable_irq();
    9130:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    9132:	6b62      	ldr	r2, [r4, #52]	; 0x34
    calibrating = 1;
    9134:	7665      	strb	r5, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9136:	0152      	lsls	r2, r2, #5
    9138:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    913c:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9140:	f8c2 5498 	str.w	r5, [r2, #1176]	; 0x498
    9144:	f8c2 549c 	str.w	r5, [r2, #1180]	; 0x49c
    __enable_irq();
    9148:	b662      	cpsie	i
    setResolution(10);
    914a:	210a      	movs	r1, #10
    914c:	4620      	mov	r0, r4
    914e:	f7ff ff79 	bl	9044 <ADC_Module::setResolution(unsigned char)>
    if (calibrating)
    9152:	7e63      	ldrb	r3, [r4, #25]
    init_calib = 1;
    9154:	76a5      	strb	r5, [r4, #26]
    if (calibrating)
    9156:	bb9b      	cbnz	r3, 91c0 <ADC_Module::analog_init()+0xec>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    9158:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    915a:	015b      	lsls	r3, r3, #5
    915c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9160:	2101      	movs	r1, #1
    analog_num_average = num;
    9162:	2220      	movs	r2, #32
    9164:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    9168:	4620      	mov	r0, r4
    916a:	f8c3 1484 	str.w	r1, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    916e:	f8c3 1480 	str.w	r1, [r3, #1152]	; 0x480
    analog_num_average = num;
    9172:	f884 2020 	strb.w	r2, [r4, #32]
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    9176:	f7ff fe4d 	bl	8e14 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    if (calibrating)
    917a:	7e63      	ldrb	r3, [r4, #25]
    917c:	bb23      	cbnz	r3, 91c8 <ADC_Module::analog_init()+0xf4>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    917e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9180:	0159      	lsls	r1, r3, #5
    9182:	f101 4384 	add.w	r3, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9186:	2201      	movs	r2, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9188:	2000      	movs	r0, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    918a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    918e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9192:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    sampling_speed = speed;
    9196:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __disable_irq();
    919a:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    919c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    calibrating = 1;
    919e:	7662      	strb	r2, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    91a0:	015b      	lsls	r3, r3, #5
    91a2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    91a6:	f8c3 049c 	str.w	r0, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    91aa:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    91ae:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    91b2:	b662      	cpsie	i
}
    91b4:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
            SIM_SCGC3 |= SIM_SCGC3_ADC1;
    91b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    91b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    91bc:	6313      	str	r3, [r2, #48]	; 0x30
    91be:	e793      	b.n	90e8 <ADC_Module::analog_init()+0x14>
        wait_for_cal();
    91c0:	4620      	mov	r0, r4
    91c2:	f7ff fec9 	bl	8f58 <ADC_Module::wait_for_cal()>
    91c6:	e7c7      	b.n	9158 <ADC_Module::analog_init()+0x84>
        wait_for_cal();
    91c8:	f7ff fec6 	bl	8f58 <ADC_Module::wait_for_cal()>
    91cc:	e7d7      	b.n	917e <ADC_Module::analog_init()+0xaa>
    91ce:	bf00      	nop
    91d0:	40048000 	.word	0x40048000
    91d4:	40074000 	.word	0x40074000
    91d8:	42fa0000 	.word	0x42fa0000

000091dc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>:
ADC_Module::ADC_Module(uint8_t ADC_number,
    91dc:	b510      	push	{r4, lr}
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    91de:	2900      	cmp	r1, #0
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    91e0:	6282      	str	r2, [r0, #40]	; 0x28
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    91e2:	4a09      	ldr	r2, [pc, #36]	; (9208 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x2c>)
                                                 diff_table(a_diff_table)
    91e4:	6303      	str	r3, [r0, #48]	; 0x30
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    91e6:	bf0c      	ite	eq
    91e8:	2339      	moveq	r3, #57	; 0x39
    91ea:	233a      	movne	r3, #58	; 0x3a
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    91ec:	7601      	strb	r1, [r0, #24]
                                                 IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC1 : IRQ_NUMBER_t::IRQ_ADC0)
    91ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    91f2:	4906      	ldr	r1, [pc, #24]	; (920c <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x30>)
ADC_Module::ADC_Module(uint8_t ADC_number,
    91f4:	9b02      	ldr	r3, [sp, #8]
                                                 adc_regs(a_adc_regs)
    91f6:	6343      	str	r3, [r0, #52]	; 0x34
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    91f8:	bf18      	it	ne
    91fa:	4611      	movne	r1, r2
ADC_Module::ADC_Module(uint8_t ADC_number,
    91fc:	4604      	mov	r4, r0
    91fe:	6381      	str	r1, [r0, #56]	; 0x38
    analog_init();
    9200:	f7ff ff68 	bl	90d4 <ADC_Module::analog_init()>
}
    9204:	4620      	mov	r0, r4
    9206:	bd10      	pop	{r4, pc}
    9208:	40036038 	.word	0x40036038
    920c:	40036010 	.word	0x40036010

00009210 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
{
    9210:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    9212:	7e43      	ldrb	r3, [r0, #25]
{
    9214:	4605      	mov	r5, r0
    9216:	460c      	mov	r4, r1
    if (calibrating)
    9218:	b9a3      	cbnz	r3, 9244 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x34>
    switch (speed)
    921a:	2c04      	cmp	r4, #4
    921c:	d80f      	bhi.n	923e <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x2e>
    921e:	e8df f004 	tbb	[pc, r4]
    9222:	2d1e      	.short	0x2d1e
    9224:	033c      	.short	0x033c
    9226:	14          	.byte	0x14
    9227:	00          	.byte	0x00
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);    // long sampling time enable
    9228:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    922a:	015a      	lsls	r2, r3, #5
    922c:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9230:	2101      	movs	r1, #1
    9232:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
    9236:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    923a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    923e:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    9242:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    9244:	f7ff fe88 	bl	8f58 <ADC_Module::wait_for_cal()>
    9248:	e7e7      	b.n	921a <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP); // shortest sampling time
    924a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    924c:	015b      	lsls	r3, r3, #5
    924e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9252:	2200      	movs	r2, #0
    9254:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    sampling_speed = speed;
    9258:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    925c:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);      // long sampling time enable
    925e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9260:	015a      	lsls	r2, r3, #5
    9262:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9266:	2101      	movs	r1, #1
    9268:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    926c:	2100      	movs	r1, #0
    926e:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    9272:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    9276:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    927a:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    927c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    927e:	015a      	lsls	r2, r3, #5
    9280:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9284:	2101      	movs	r1, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9286:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9288:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    928c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9290:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    sampling_speed = speed;
    9294:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    9298:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    929a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    929c:	015a      	lsls	r2, r3, #5
    929e:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    92a2:	2101      	movs	r1, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    92a4:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    92a6:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    92aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    92ae:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    sampling_speed = speed;
    92b2:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    92b6:	bd38      	pop	{r3, r4, r5, pc}

000092b8 <ADC_Module::setAveraging(unsigned char)>:
{
    92b8:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    92ba:	7e43      	ldrb	r3, [r0, #25]
{
    92bc:	4604      	mov	r4, r0
    92be:	460d      	mov	r5, r1
    if (calibrating)
    92c0:	bb2b      	cbnz	r3, 930e <ADC_Module::setAveraging(unsigned char)+0x56>
    if (num <= 1)
    92c2:	2d01      	cmp	r5, #1
        atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    92c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (num <= 1)
    92c6:	d918      	bls.n	92fa <ADC_Module::setAveraging(unsigned char)+0x42>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    92c8:	015b      	lsls	r3, r3, #5
    92ca:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    92ce:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    92d2:	2101      	movs	r1, #1
        if (num <= 4)
    92d4:	2d04      	cmp	r5, #4
    92d6:	6099      	str	r1, [r3, #8]
    92d8:	d806      	bhi.n	92e8 <ADC_Module::setAveraging(unsigned char)+0x30>
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    92da:	2100      	movs	r1, #0
    92dc:	6059      	str	r1, [r3, #4]
            num = 4;
    92de:	2204      	movs	r2, #4
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    92e0:	6019      	str	r1, [r3, #0]
    analog_num_average = num;
    92e2:	f884 2020 	strb.w	r2, [r4, #32]
}
    92e6:	bd38      	pop	{r3, r4, r5, pc}
        else if (num <= 8)
    92e8:	2d08      	cmp	r5, #8
    92ea:	d913      	bls.n	9314 <ADC_Module::setAveraging(unsigned char)+0x5c>
        else if (num <= 16)
    92ec:	2d10      	cmp	r5, #16
    92ee:	d818      	bhi.n	9322 <ADC_Module::setAveraging(unsigned char)+0x6a>
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    92f0:	2200      	movs	r2, #0
    92f2:	601a      	str	r2, [r3, #0]
            num = 16;
    92f4:	2210      	movs	r2, #16
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    92f6:	6059      	str	r1, [r3, #4]
    }
    92f8:	e7f3      	b.n	92e2 <ADC_Module::setAveraging(unsigned char)+0x2a>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    92fa:	015b      	lsls	r3, r3, #5
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    92fc:	2100      	movs	r1, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    92fe:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        num = 0;
    9302:	460a      	mov	r2, r1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9304:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    analog_num_average = num;
    9308:	f884 2020 	strb.w	r2, [r4, #32]
}
    930c:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    930e:	f7ff fe23 	bl	8f58 <ADC_Module::wait_for_cal()>
    9312:	e7d6      	b.n	92c2 <ADC_Module::setAveraging(unsigned char)+0xa>
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9314:	2000      	movs	r0, #0
            num = 8;
    9316:	2208      	movs	r2, #8
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    9318:	6019      	str	r1, [r3, #0]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    931a:	6058      	str	r0, [r3, #4]
    analog_num_average = num;
    931c:	f884 2020 	strb.w	r2, [r4, #32]
}
    9320:	bd38      	pop	{r3, r4, r5, pc}
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9322:	6059      	str	r1, [r3, #4]
            num = 32;
    9324:	2220      	movs	r2, #32
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    9326:	6019      	str	r1, [r3, #0]
    }
    9328:	e7db      	b.n	92e2 <ADC_Module::setAveraging(unsigned char)+0x2a>
    932a:	bf00      	nop

0000932c <ADC_Module::checkPin(unsigned char)>:

// check whether the pin is a valid analog pin
bool ADC_Module::checkPin(uint8_t pin)
{

    if (pin > ADC_MAX_PIN)
    932c:	292b      	cmp	r1, #43	; 0x2b
    932e:	d807      	bhi.n	9340 <ADC_Module::checkPin(unsigned char)+0x14>
    {
        return false; // all others are invalid
    }

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    9330:	6a83      	ldr	r3, [r0, #40]	; 0x28

    // check for valid pin
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    9332:	5c58      	ldrb	r0, [r3, r1]
    9334:	f000 001f 	and.w	r0, r0, #31
    9338:	381f      	subs	r0, #31
    933a:	bf18      	it	ne
    933c:	2001      	movne	r0, #1
    933e:	4770      	bx	lr
        return false; // all others are invalid
    9340:	2000      	movs	r0, #0
    {
        return false; // all others are invalid
    }

    return true;
}
    9342:	4770      	bx	lr

00009344 <ADC_Module::startReadFast(unsigned char)>:
// It doesn't change the continuous conversion bit
void ADC_Module::startReadFast(uint8_t pin)
{

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    9344:	6a83      	ldr	r3, [r0, #40]	; 0x28

#ifdef ADC_TEENSY_4
// Teensy 4 has no a or b channels
#else
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    9346:	565a      	ldrsb	r2, [r3, r1]
    const uint8_t sc1a_pin = channel2sc1a[pin];
    9348:	5c5b      	ldrb	r3, [r3, r1]
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    934a:	2a00      	cmp	r2, #0
    { // mux a
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    934c:	6b42      	ldr	r2, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    934e:	ea4f 1242 	mov.w	r2, r2, lsl #5
    9352:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9356:	bfb4      	ite	lt
    9358:	2100      	movlt	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    935a:	2101      	movge	r1, #1
    935c:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    }
#endif

    // select pin for single-ended mode and start conversion, enable interrupts if requested
    __disable_irq();
    9360:	b672      	cpsid	i
#ifdef ADC_TEENSY_4
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
#else
    adc_regs.SC1A = (sc1a_pin & ADC_SC1A_CHANNELS) + atomic::getBitFlag(adc_regs.SC1A, ADC_SC1_AIEN) * ADC_SC1_AIEN;
    9362:	6b41      	ldr	r1, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9364:	014a      	lsls	r2, r1, #5
    9366:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    936a:	f003 031f 	and.w	r3, r3, #31
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    936e:	6992      	ldr	r2, [r2, #24]
    9370:	3a00      	subs	r2, #0
    9372:	bf18      	it	ne
    9374:	2201      	movne	r2, #1
    9376:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    937a:	600b      	str	r3, [r1, #0]
#endif
    __enable_irq();
    937c:	b662      	cpsie	i
}
    937e:	4770      	bx	lr

00009380 <ADC_Module::startContinuous(unsigned char)>:
/* Starts continuous conversion on the pin
 * It returns as soon as the ADC is set, use analogReadContinuous() to read the values
 * Set the resolution, number of averages and voltage reference using the appropriate functions BEFORE calling this function
*/
bool ADC_Module::startContinuous(uint8_t pin)
{
    9380:	b550      	push	{r4, r6, lr}
    if (pin > ADC_MAX_PIN)
    9382:	292b      	cmp	r1, #43	; 0x2b
{
    9384:	b083      	sub	sp, #12
    9386:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    9388:	d817      	bhi.n	93ba <ADC_Module::startContinuous(unsigned char)+0x3a>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    938a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    938c:	5c5b      	ldrb	r3, [r3, r1]
    938e:	f003 031f 	and.w	r3, r3, #31
    9392:	2b1f      	cmp	r3, #31
    9394:	d011      	beq.n	93ba <ADC_Module::startContinuous(unsigned char)+0x3a>
        fail_flag |= ADC_ERROR::WRONG_PIN;
        return false;
    }

    // check for calibration before setting channels,
    if (calibrating)
    9396:	7e43      	ldrb	r3, [r0, #25]
    9398:	b9bb      	cbnz	r3, 93ca <ADC_Module::startContinuous(unsigned char)+0x4a>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_ADCO);
    939a:	6b63      	ldr	r3, [r4, #52]	; 0x34
        wait_for_cal();

    // increase the counter of measurements
    num_measurements++;
    939c:	7d62      	ldrb	r2, [r4, #21]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    939e:	015b      	lsls	r3, r3, #5
    93a0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    93a4:	3201      	adds	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    93a6:	2601      	movs	r6, #1
    93a8:	7562      	strb	r2, [r4, #21]

    // set continuous conversion flag
    continuousMode();

    startReadFast(pin);
    93aa:	4620      	mov	r0, r4
    93ac:	f8c3 648c 	str.w	r6, [r3, #1164]	; 0x48c
    93b0:	f7ff ffc8 	bl	9344 <ADC_Module::startReadFast(unsigned char)>

    return true;
    93b4:	4630      	mov	r0, r6
}
    93b6:	b003      	add	sp, #12
    93b8:	bd50      	pop	{r4, r6, pc}
    93ba:	8ae3      	ldrh	r3, [r4, #22]
    93bc:	b29b      	uxth	r3, r3
        return false;
    93be:	2000      	movs	r0, #0
    93c0:	f043 0304 	orr.w	r3, r3, #4
    93c4:	82e3      	strh	r3, [r4, #22]
}
    93c6:	b003      	add	sp, #12
    93c8:	bd50      	pop	{r4, r6, pc}
    93ca:	9101      	str	r1, [sp, #4]
        wait_for_cal();
    93cc:	f7ff fdc4 	bl	8f58 <ADC_Module::wait_for_cal()>
    93d0:	9901      	ldr	r1, [sp, #4]
    93d2:	e7e2      	b.n	939a <ADC_Module::startContinuous(unsigned char)+0x1a>

000093d4 <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
{

    /* default implementation that doesn't handle frames */

    return (false);
}
    93d4:	2000      	movs	r0, #0
    93d6:	4770      	bx	lr

000093d8 <CANListener::txHandler(int, unsigned char)>:
 */

void CANListener::txHandler (int /*mailbox*/, uint8_t /*controller*/)
{

}
    93d8:	4770      	bx	lr
    93da:	bf00      	nop

000093dc <FlexCAN::FlexCAN(unsigned char)>:
FlexCAN::FlexCAN (uint8_t id)
    93dc:	b538      	push	{r3, r4, r5, lr}
    defaultMask.id = 0;
    93de:	4b1b      	ldr	r3, [pc, #108]	; (944c <FlexCAN::FlexCAN(unsigned char)+0x70>)
    flexcanBase = FLEXCAN0_BASE;
    93e0:	491b      	ldr	r1, [pc, #108]	; (9450 <FlexCAN::FlexCAN(unsigned char)+0x74>)
    defaultMask.flags.extended = 0;
    93e2:	791a      	ldrb	r2, [r3, #4]
FlexCAN::FlexCAN (uint8_t id)
    93e4:	4604      	mov	r4, r0
    defaultMask.id = 0;
    93e6:	2500      	movs	r5, #0
    flexcanBase = FLEXCAN0_BASE;
    93e8:	6021      	str	r1, [r4, #0]
    defaultMask.flags.extended = 0;
    93ea:	f022 0203 	bic.w	r2, r2, #3
    IrqMessage=IRQ_CAN_MESSAGE;
    93ee:	211d      	movs	r1, #29
    93f0:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
    defaultMask.id = 0;
    93f4:	601d      	str	r5, [r3, #0]
    defaultMask.flags.extended = 0;
    93f6:	711a      	strb	r2, [r3, #4]
    numTxMailboxes=2;
    93f8:	2002      	movs	r0, #2
    sizeTxBuffer=SIZE_TX_BUFFER;
    93fa:	2310      	movs	r3, #16
    sizeRxBuffer=SIZE_RX_BUFFER;
    93fc:	2120      	movs	r1, #32
    sizeTxBuffer=SIZE_TX_BUFFER;
    93fe:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
    numTxMailboxes=2;
    9402:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    sizeRxBuffer=SIZE_RX_BUFFER;
    9406:	f8a4 1196 	strh.w	r1, [r4, #406]	; 0x196
    tx_buffer=0;
    940a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
      txRings[i]=0;
    940e:	4629      	mov	r1, r5
    rx_buffer=0;
    9410:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
      txRings[i]=0;
    9414:	2240      	movs	r2, #64	; 0x40
    9416:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    941a:	f006 fb89 	bl	fb30 <memset>
        listener[i] = NULL;
    941e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    9422:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    9426:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
    942a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    memset (&stats, 0, sizeof(stats));
    942e:	2298      	movs	r2, #152	; 0x98
    9430:	4629      	mov	r1, r5
    9432:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
    9436:	f006 fb7b 	bl	fb30 <memset>
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    943a:	221f      	movs	r2, #31
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    943c:	230f      	movs	r3, #15
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    943e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    9442:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
}
    9446:	4620      	mov	r0, r4
    9448:	bd38      	pop	{r3, r4, r5, pc}
    944a:	bf00      	nop
    944c:	1fffb9e0 	.word	0x1fffb9e0
    9450:	40024000 	.word	0x40024000

00009454 <FlexCAN::end()>:
    FLEXCANb_MCR(flexcanBase) |= (FLEXCAN_MCR_HALT);
    9454:	6802      	ldr	r2, [r0, #0]
    9456:	6813      	ldr	r3, [r2, #0]
    9458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    945c:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    945e:	6802      	ldr	r2, [r0, #0]
    9460:	6813      	ldr	r3, [r2, #0]
  while (!isFrozen());
    9462:	01d9      	lsls	r1, r3, #7
    9464:	d5fc      	bpl.n	9460 <FlexCAN::end()+0xc>
    FLEXCANb_MCR (flexcanBase) |= (FLEXCAN_MCR_HALT);
    9466:	6813      	ldr	r3, [r2, #0]
    9468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    946c:	6013      	str	r3, [r2, #0]
    while (!(FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK))
    946e:	6802      	ldr	r2, [r0, #0]
    9470:	6813      	ldr	r3, [r2, #0]
    9472:	01db      	lsls	r3, r3, #7
    9474:	d5fc      	bpl.n	9470 <FlexCAN::end()+0x1c>
}
    9476:	4770      	bx	lr

00009478 <FlexCAN::setBaudRate(unsigned long)>:
void FlexCAN::setBaudRate(uint32_t baud) {
    9478:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = 16000000 / baud / (divisor + 1);
    947a:	4e2d      	ldr	r6, [pc, #180]	; (9530 <FlexCAN::setBaudRate(unsigned long)+0xb8>)
    947c:	fbb6 fcf1 	udiv	ip, r6, r1
    while (result > 5) {
    9480:	f1bc 0f05 	cmp.w	ip, #5
    int error = baud - (16000000 / (result * (divisor + 1)));
    9484:	fbb6 f4fc 	udiv	r4, r6, ip
    uint32_t bestDivisor = 0;
    9488:	f04f 0500 	mov.w	r5, #0
    int error = baud - (16000000 / (result * (divisor + 1)));
    948c:	eba1 0404 	sub.w	r4, r1, r4
    while (result > 5) {
    9490:	d921      	bls.n	94d6 <FlexCAN::setBaudRate(unsigned long)+0x5e>
    uint32_t divisor = 0;
    9492:	462b      	mov	r3, r5
        divisor++;
    9494:	f103 0e01 	add.w	lr, r3, #1
        result = 16000000 / baud / (divisor + 1);
    9498:	3302      	adds	r3, #2
    949a:	fbbc f2f3 	udiv	r2, ip, r3
        if (result <= 25) {
    949e:	2a19      	cmp	r2, #25
            error = baud - (16000000 / (result * (divisor + 1)));
    94a0:	fb02 f303 	mul.w	r3, r2, r3
        if (result <= 25) {
    94a4:	d80f      	bhi.n	94c6 <FlexCAN::setBaudRate(unsigned long)+0x4e>
            error = baud - (16000000 / (result * (divisor + 1)));
    94a6:	fbb6 f3f3 	udiv	r3, r6, r3
    94aa:	1acb      	subs	r3, r1, r3
            if (error < 0)
    94ac:	2b00      	cmp	r3, #0
    94ae:	bfb8      	it	lt
    94b0:	425b      	neglt	r3, r3
            if (error < bestError) {
    94b2:	42a3      	cmp	r3, r4
    94b4:	da09      	bge.n	94ca <FlexCAN::setBaudRate(unsigned long)+0x52>
    94b6:	461c      	mov	r4, r3
                bestDivisor = divisor;
    94b8:	4675      	mov	r5, lr
            if ((error == bestError) && (result > 11) && (result < 19)) {
    94ba:	2a0b      	cmp	r2, #11
    94bc:	d906      	bls.n	94cc <FlexCAN::setBaudRate(unsigned long)+0x54>
    94be:	2a12      	cmp	r2, #18
    94c0:	bf9c      	itt	ls
    94c2:	461c      	movls	r4, r3
    94c4:	4675      	movls	r5, lr
void FlexCAN::setBaudRate(uint32_t baud) {
    94c6:	4673      	mov	r3, lr
    94c8:	e7e4      	b.n	9494 <FlexCAN::setBaudRate(unsigned long)+0x1c>
            if ((error == bestError) && (result > 11) && (result < 19)) {
    94ca:	d0f6      	beq.n	94ba <FlexCAN::setBaudRate(unsigned long)+0x42>
    while (result > 5) {
    94cc:	2a05      	cmp	r2, #5
    94ce:	d8fa      	bhi.n	94c6 <FlexCAN::setBaudRate(unsigned long)+0x4e>
    result = 16000000 / baud / (divisor + 1);
    94d0:	1c6b      	adds	r3, r5, #1
    94d2:	fbbc fcf3 	udiv	ip, ip, r3
    if ((result < 5) || (result > 25) || (bestError > 300)) {
    94d6:	f1ac 0c05 	sub.w	ip, ip, #5
    94da:	f1bc 0f14 	cmp.w	ip, #20
    94de:	d81e      	bhi.n	951e <FlexCAN::setBaudRate(unsigned long)+0xa6>
    94e0:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    94e4:	dc1b      	bgt.n	951e <FlexCAN::setBaudRate(unsigned long)+0xa6>
    uint8_t pSeg1   = bitTimingTable[result][1];
    94e6:	4b13      	ldr	r3, [pc, #76]	; (9534 <FlexCAN::setBaudRate(unsigned long)+0xbc>)
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    94e8:	6800      	ldr	r0, [r0, #0]
    uint8_t pSeg1   = bitTimingTable[result][1];
    94ea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    94ee:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    94f2:	f813 100c 	ldrb.w	r1, [r3, ip]
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    94f6:	7853      	ldrb	r3, [r2, #1]
    94f8:	7892      	ldrb	r2, [r2, #2]
    94fa:	04db      	lsls	r3, r3, #19
    94fc:	0412      	lsls	r2, r2, #16
    94fe:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
    9502:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    9506:	f001 0107 	and.w	r1, r1, #7
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    950a:	4313      	orrs	r3, r2
    950c:	430b      	orrs	r3, r1
    950e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    9512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    9516:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    951a:	6043      	str	r3, [r0, #4]
}
    951c:	bd70      	pop	{r4, r5, r6, pc}
    951e:	4806      	ldr	r0, [pc, #24]	; (9538 <FlexCAN::setBaudRate(unsigned long)+0xc0>)
    9520:	2139      	movs	r1, #57	; 0x39
    9522:	f003 fd2f 	bl	cf84 <usb_serial_write>
    9526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    952a:	4804      	ldr	r0, [pc, #16]	; (953c <FlexCAN::setBaudRate(unsigned long)+0xc4>)
    952c:	f000 bfe4 	b.w	a4f8 <Print::println()>
    9530:	00f42400 	.word	0x00f42400
    9534:	1fff8878 	.word	0x1fff8878
    9538:	00016e64 	.word	0x00016e64
    953c:	1fff89f8 	.word	0x1fff89f8

00009540 <FlexCAN::setNumTxBoxes(unsigned char)>:
{
    9540:	b530      	push	{r4, r5, lr}
    9542:	2901      	cmp	r1, #1
    9544:	4604      	mov	r4, r0
    9546:	bf38      	it	cc
    9548:	2101      	movcc	r1, #1
    954a:	290f      	cmp	r1, #15
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    954c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9550:	4608      	mov	r0, r1
    9552:	bf28      	it	cs
    9554:	200f      	movcs	r0, #15
    numTxMailboxes = txboxes;
    9556:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    955a:	b31b      	cbz	r3, 95a4 <FlexCAN::setNumTxBoxes(unsigned char)+0x64>
    void setMailBoxTxBufferSize(uint8_t mbox, uint16_t size);

    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    inline uint8_t getLastTxBox() { return getNumMailBoxes()-1; }
    inline uint8_t getNumMailBoxes() { return NUM_MAILBOXES; }
    inline uint8_t getNumRxBoxes() { return getNumMailBoxes()-numTxMailboxes; }
    955c:	f1c0 0e10 	rsb	lr, r0, #16
    9560:	fa5f f58e 	uxtb.w	r5, lr
    9564:	46ae      	mov	lr, r5
    9566:	2200      	movs	r2, #0
    9568:	012d      	lsls	r5, r5, #4
        oldIde = FLEXCANb_MBn_CS(flexcanBase, c) & FLEXCAN_MB_CS_IDE;
    956a:	6823      	ldr	r3, [r4, #0]
    956c:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    9570:	f85c 3002 	ldr.w	r3, [ip, r2]
    9574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | oldIde;
    9578:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    957c:	f84c 3002 	str.w	r3, [ip, r2]
    for (c = 0; c < getNumRxBoxes(); c++) {
    9580:	3210      	adds	r2, #16
    9582:	4295      	cmp	r5, r2
    9584:	d1f1      	bne.n	956a <FlexCAN::setNumTxBoxes(unsigned char)+0x2a>
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    9586:	2510      	movs	r5, #16
    9588:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    958c:	6823      	ldr	r3, [r4, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    958e:	f10e 0201 	add.w	r2, lr, #1
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    9592:	3380      	adds	r3, #128	; 0x80
    9594:	fb15 330e 	smlabb	r3, r5, lr, r3
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    9598:	fa5f fe82 	uxtb.w	lr, r2
    959c:	f1be 0f10 	cmp.w	lr, #16
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    95a0:	6019      	str	r1, [r3, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    95a2:	d1f3      	bne.n	958c <FlexCAN::setNumTxBoxes(unsigned char)+0x4c>
}
    95a4:	bd30      	pop	{r4, r5, pc}
    95a6:	bf00      	nop

000095a8 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>:
    95a8:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    95ac:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    95b0:	b2db      	uxtb	r3, r3
    95b2:	429a      	cmp	r2, r3
    95b4:	d222      	bcs.n	95fc <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x54>
{
    95b6:	b510      	push	{r4, lr}
    95b8:	468c      	mov	ip, r1
    95ba:	4686      	mov	lr, r0
        MBFilters[mbox] = filter;
    95bc:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    95c0:	e9d1 0100 	ldrd	r0, r1, [r1]
    95c4:	3304      	adds	r3, #4
    95c6:	e883 0003 	stmia.w	r3, {r0, r1}
        if (filter.flags.extended) {
    95ca:	f89c 3004 	ldrb.w	r3, [ip, #4]
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    95ce:	f8de 1000 	ldr.w	r1, [lr]
        if (filter.flags.extended) {
    95d2:	07db      	lsls	r3, r3, #31
    95d4:	d513      	bpl.n	95fe <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x56>
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    95d6:	f8dc 0000 	ldr.w	r0, [ip]
    95da:	2310      	movs	r3, #16
    95dc:	3184      	adds	r1, #132	; 0x84
    95de:	fb13 1102 	smlabb	r1, r3, r2, r1
    95e2:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
    95e6:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) |= FLEXCAN_MB_CS_IDE;
    95e8:	f8de 1000 	ldr.w	r1, [lr]
    95ec:	3180      	adds	r1, #128	; 0x80
    95ee:	fb13 1302 	smlabb	r3, r3, r2, r1
    95f2:	681a      	ldr	r2, [r3, #0]
    95f4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    95f8:	601a      	str	r2, [r3, #0]
}
    95fa:	bd10      	pop	{r4, pc}
    95fc:	4770      	bx	lr
            FLEXCANb_MBn_ID(flexcanBase, mbox) = FLEXCAN_MB_ID_IDSTD(filter.id);
    95fe:	f8dc 4000 	ldr.w	r4, [ip]
    9602:	4809      	ldr	r0, [pc, #36]	; (9628 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x80>)
    9604:	2310      	movs	r3, #16
    9606:	3184      	adds	r1, #132	; 0x84
    9608:	fb13 1102 	smlabb	r1, r3, r2, r1
    960c:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    9610:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) &= ~FLEXCAN_MB_CS_IDE;
    9612:	f8de 1000 	ldr.w	r1, [lr]
    9616:	3180      	adds	r1, #128	; 0x80
    9618:	fb13 1302 	smlabb	r3, r3, r2, r1
    961c:	681a      	ldr	r2, [r3, #0]
    961e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    9622:	601a      	str	r2, [r3, #0]
}
    9624:	bd10      	pop	{r4, pc}
    9626:	bf00      	nop
    9628:	1ffc0000 	.word	0x1ffc0000

0000962c <FlexCAN::setMask(unsigned long, unsigned char)>:
    962c:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    9630:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    9634:	b2db      	uxtb	r3, r3
    9636:	429a      	cmp	r2, r3
    9638:	d221      	bcs.n	967e <FlexCAN::setMask(unsigned long, unsigned char)+0x52>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    963a:	6803      	ldr	r3, [r0, #0]
{
    963c:	b410      	push	{r4}
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    963e:	681c      	ldr	r4, [r3, #0]
      if (!wasFrozen) {
    9640:	01e4      	lsls	r4, r4, #7
    9642:	d41d      	bmi.n	9680 <FlexCAN::setMask(unsigned long, unsigned char)+0x54>
  FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_FRZ;
    9644:	681c      	ldr	r4, [r3, #0]
    9646:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    964a:	601c      	str	r4, [r3, #0]
    FLEXCANb_MCR(flexcanBase) |= (FLEXCAN_MCR_HALT);
    964c:	6804      	ldr	r4, [r0, #0]
    964e:	6823      	ldr	r3, [r4, #0]
    9650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    9654:	6023      	str	r3, [r4, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    9656:	6804      	ldr	r4, [r0, #0]
    9658:	6823      	ldr	r3, [r4, #0]
  while (!isFrozen());
    965a:	01db      	lsls	r3, r3, #7
    965c:	d5fc      	bpl.n	9658 <FlexCAN::setMask(unsigned long, unsigned char)+0x2c>
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    965e:	f504 6408 	add.w	r4, r4, #2176	; 0x880
    9662:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    9666:	6021      	str	r1, [r4, #0]
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    9668:	6802      	ldr	r2, [r0, #0]
    966a:	6813      	ldr	r3, [r2, #0]
    966c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    9670:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    9672:	6802      	ldr	r2, [r0, #0]
    9674:	6813      	ldr	r3, [r2, #0]
  while (isFrozen());
    9676:	01db      	lsls	r3, r3, #7
    9678:	d4fc      	bmi.n	9674 <FlexCAN::setMask(unsigned long, unsigned char)+0x48>
}
    967a:	bc10      	pop	{r4}
    967c:	4770      	bx	lr
    967e:	4770      	bx	lr
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    9680:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    9684:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
    9688:	bc10      	pop	{r4}
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    968a:	6019      	str	r1, [r3, #0]
}
    968c:	4770      	bx	lr
    968e:	bf00      	nop

00009690 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>:
{
    9690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9694:	4617      	mov	r7, r2
    if ( isInitialized() ) return;
    9696:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
{
    969a:	f89d 8018 	ldrb.w	r8, [sp, #24]
    969e:	4606      	mov	r6, r0
    96a0:	460d      	mov	r5, r1
    96a2:	461c      	mov	r4, r3
    if ( isInitialized() ) return;
    96a4:	2a00      	cmp	r2, #0
    96a6:	f000 808f 	beq.w	97c8 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x138>
    if (flexcanBase == FLEXCAN0_BASE) {
    96aa:	4a63      	ldr	r2, [pc, #396]	; (9838 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a8>)
    96ac:	6831      	ldr	r1, [r6, #0]
    96ae:	4291      	cmp	r1, r2
    96b0:	d07c      	beq.n	97ac <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x11c>
    OSC0_CR |= OSC_ERCLKEN;
    96b2:	4a62      	ldr	r2, [pc, #392]	; (983c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1ac>)
    96b4:	7813      	ldrb	r3, [r2, #0]
    96b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    96ba:	7013      	strb	r3, [r2, #0]
    if (flexcanBase == FLEXCAN0_BASE) {
    96bc:	6833      	ldr	r3, [r6, #0]
    96be:	f5a2 2282 	sub.w	r2, r2, #266240	; 0x41000
    96c2:	4293      	cmp	r3, r2
    96c4:	d106      	bne.n	96d4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x44>
        SIM_SCGC6 |=  SIM_SCGC6_FLEXCAN0;
    96c6:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    96ca:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    96cc:	f043 0310 	orr.w	r3, r3, #16
    96d0:	63d3      	str	r3, [r2, #60]	; 0x3c
    FLEXCANb_CTRL1(flexcanBase) &= ~FLEXCAN_CTRL_CLK_SRC;
    96d2:	6833      	ldr	r3, [r6, #0]
    96d4:	685a      	ldr	r2, [r3, #4]
    96d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    96da:	605a      	str	r2, [r3, #4]
    FLEXCANb_MCR (flexcanBase) |=  FLEXCAN_MCR_FRZ;
    96dc:	6832      	ldr	r2, [r6, #0]
    96de:	6813      	ldr	r3, [r2, #0]
    96e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    96e4:	6013      	str	r3, [r2, #0]
    FLEXCANb_MCR (flexcanBase) &= ~FLEXCAN_MCR_MDIS;
    96e6:	6832      	ldr	r2, [r6, #0]
    96e8:	6813      	ldr	r3, [r2, #0]
    96ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    96ee:	6013      	str	r3, [r2, #0]
    while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_LPM_ACK)
    96f0:	6832      	ldr	r2, [r6, #0]
    96f2:	6813      	ldr	r3, [r2, #0]
    96f4:	02d9      	lsls	r1, r3, #11
    96f6:	d4fc      	bmi.n	96f2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x62>
  FLEXCANb_MCR (flexcanBase) ^=  FLEXCAN_MCR_SOFT_RST;
    96f8:	6813      	ldr	r3, [r2, #0]
    96fa:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
    96fe:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR (flexcanBase) & FLEXCAN_MCR_SOFT_RST)
    9700:	6833      	ldr	r3, [r6, #0]
    9702:	681c      	ldr	r4, [r3, #0]
    9704:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
    9708:	d1fb      	bne.n	9702 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x72>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    970a:	681a      	ldr	r2, [r3, #0]
  while (!isFrozen());
    970c:	01d2      	lsls	r2, r2, #7
    970e:	d5fc      	bpl.n	970a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x7a>
    FLEXCANb_MCR (flexcanBase) |= FLEXCAN_MCR_SRX_DIS;
    9710:	681a      	ldr	r2, [r3, #0]
    9712:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    9716:	601a      	str	r2, [r3, #0]
    setBaudRate(baud);
    9718:	4629      	mov	r1, r5
    971a:	4630      	mov	r0, r6
    971c:	f7ff feac 	bl	9478 <FlexCAN::setBaudRate(unsigned long)>
    FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_IRMQ;
    9720:	6832      	ldr	r2, [r6, #0]
    9722:	6813      	ldr	r3, [r2, #0]
    9724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9728:	6013      	str	r3, [r2, #0]
    972a:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    972e:	2910      	cmp	r1, #16
    9730:	d012      	beq.n	9758 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xc8>
    9732:	2500      	movs	r5, #0
        setMask (0, c);
    9734:	462a      	mov	r2, r5
    9736:	4630      	mov	r0, r6
    9738:	2100      	movs	r1, #0
    973a:	f7ff ff77 	bl	962c <FlexCAN::setMask(unsigned long, unsigned char)>
        setFilter (mask, c);
    973e:	462a      	mov	r2, r5
    9740:	4639      	mov	r1, r7
    9742:	f7ff ff31 	bl	95a8 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
    9746:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    974a:	3401      	adds	r4, #1
    974c:	f1c1 0310 	rsb	r3, r1, #16
    9750:	b2e5      	uxtb	r5, r4
    9752:	b2db      	uxtb	r3, r3
    9754:	429d      	cmp	r5, r3
    9756:	d3ed      	bcc.n	9734 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xa4>
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    9758:	6832      	ldr	r2, [r6, #0]
    975a:	6813      	ldr	r3, [r2, #0]
    975c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    9760:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    9762:	6833      	ldr	r3, [r6, #0]
    9764:	681a      	ldr	r2, [r3, #0]
  while (isFrozen());
    9766:	01d0      	lsls	r0, r2, #7
    9768:	d4fc      	bmi.n	9764 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xd4>
  while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_NOT_RDY);
    976a:	681a      	ldr	r2, [r3, #0]
    976c:	0112      	lsls	r2, r2, #4
    976e:	d4fc      	bmi.n	976a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xda>
    setNumTxBoxes (numTxMailboxes);
    9770:	4630      	mov	r0, r6
    9772:	f7ff fee5 	bl	9540 <FlexCAN::setNumTxBoxes(unsigned char)>
    NVIC_SET_PRIORITY (IrqMessage, IRQ_PRIORITY);
    9776:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    977a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    977e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    9782:	2240      	movs	r2, #64	; 0x40
    9784:	701a      	strb	r2, [r3, #0]
    NVIC_ENABLE_IRQ (IrqMessage);
    9786:	f8d6 20f8 	ldr.w	r2, [r6, #248]	; 0xf8
    978a:	0953      	lsrs	r3, r2, #5
    978c:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    9790:	3340      	adds	r3, #64	; 0x40
    9792:	009b      	lsls	r3, r3, #2
    9794:	2101      	movs	r1, #1
    9796:	f002 021f 	and.w	r2, r2, #31
    979a:	fa01 f202 	lsl.w	r2, r1, r2
    979e:	601a      	str	r2, [r3, #0]
    FLEXCANb_IMASK1 (flexcanBase) = 0xFFFF;
    97a0:	6833      	ldr	r3, [r6, #0]
    97a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    97a6:	6298      	str	r0, [r3, #40]	; 0x28
}
    97a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (txAlt == 1)
    97ac:	2c01      	cmp	r4, #1
    97ae:	d02b      	beq.n	9808 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x178>
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    97b0:	4b23      	ldr	r3, [pc, #140]	; (9840 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    97b2:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    97b6:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    97ba:	631a      	str	r2, [r3, #48]	; 0x30
        if (rxAlt == 1)
    97bc:	d02b      	beq.n	9816 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x186>
            CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
    97be:	4b20      	ldr	r3, [pc, #128]	; (9840 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    97c0:	f44f 7200 	mov.w	r2, #512	; 0x200
    97c4:	635a      	str	r2, [r3, #52]	; 0x34
    97c6:	e774      	b.n	96b2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    97c8:	f8b0 0198 	ldrh.w	r0, [r0, #408]	; 0x198
    97cc:	0100      	lsls	r0, r0, #4
    97ce:	f001 fac5 	bl	ad5c <operator new[](unsigned int)>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    97d2:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    97d6:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    97da:	b30b      	cbz	r3, 9820 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x190>
    ring.buffer = buffer;
    97dc:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
    ring.head = 0;
    97e0:	2300      	movs	r3, #0
    97e2:	f8a6 3094 	strh.w	r3, [r6, #148]	; 0x94
    ring.tail = 0;
    97e6:	f8a6 3096 	strh.w	r3, [r6, #150]	; 0x96
    ring.head = 0;
    97ea:	f8a6 30a4 	strh.w	r3, [r6, #164]	; 0xa4
    ring.tail = 0;
    97ee:	f8a6 30a6 	strh.w	r3, [r6, #166]	; 0xa6
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    97f2:	f8b6 3198 	ldrh.w	r3, [r6, #408]	; 0x198
    ring.size = size;
    97f6:	f8a6 3098 	strh.w	r3, [r6, #152]	; 0x98
    initRingBuffer (rxRing, rx_buffer, sizeRxBuffer);
    97fa:	f8b6 3196 	ldrh.w	r3, [r6, #406]	; 0x196
    ring.buffer = buffer;
    97fe:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
    ring.size = size;
    9802:	f8a6 30a8 	strh.w	r3, [r6, #168]	; 0xa8
    ring.tail = 0;
    9806:	e750      	b.n	96aa <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a>
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    9808:	4b0e      	ldr	r3, [pc, #56]	; (9844 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    980a:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    980e:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    9812:	649a      	str	r2, [r3, #72]	; 0x48
        if (rxAlt == 1)
    9814:	d1d3      	bne.n	97be <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x12e>
            CORE_PIN25_CONFIG = PORT_PCR_MUX(2);
    9816:	4b0b      	ldr	r3, [pc, #44]	; (9844 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    9818:	f44f 7200 	mov.w	r2, #512	; 0x200
    981c:	64da      	str	r2, [r3, #76]	; 0x4c
    981e:	e748      	b.n	96b2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    9820:	f8b6 0196 	ldrh.w	r0, [r6, #406]	; 0x196
    9824:	0100      	lsls	r0, r0, #4
    9826:	f001 fa99 	bl	ad5c <operator new[](unsigned int)>
    982a:	4603      	mov	r3, r0
    982c:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    9830:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
    9834:	e7d2      	b.n	97dc <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x14c>
    9836:	bf00      	nop
    9838:	40024000 	.word	0x40024000
    983c:	40065000 	.word	0x40065000
    9840:	40049000 	.word	0x40049000
    9844:	4004a000 	.word	0x4004a000

00009848 <FlexCAN::available()>:
{
    9848:	b410      	push	{r4}
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    984a:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    984e:	0963      	lsrs	r3, r4, #5
    9850:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    9854:	3340      	adds	r3, #64	; 0x40
    9856:	009b      	lsls	r3, r3, #2
    9858:	4602      	mov	r2, r0
    985a:	f004 041f 	and.w	r4, r4, #31
    985e:	6818      	ldr	r0, [r3, #0]
    9860:	2101      	movs	r1, #1
    9862:	40a1      	lsls	r1, r4
    9864:	ea10 0401 	ands.w	r4, r0, r1
    9868:	bf14      	ite	ne
    986a:	2001      	movne	r0, #1
    986c:	2000      	moveq	r0, #0
    986e:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    9872:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    entries = ring.head - ring.tail;
    9876:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
    987a:	f8b2 30a6 	ldrh.w	r3, [r2, #166]	; 0xa6
    987e:	b280      	uxth	r0, r0
    9880:	b29b      	uxth	r3, r3
    if (entries < 0) {
    9882:	1ac0      	subs	r0, r0, r3
        entries += ring.size;
    9884:	bf44      	itt	mi
    9886:	f8b2 30a8 	ldrhmi.w	r3, [r2, #168]	; 0xa8
    988a:	18c0      	addmi	r0, r0, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    988c:	b164      	cbz	r4, 98a8 <FlexCAN::available()+0x60>
    988e:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
    9892:	0953      	lsrs	r3, r2, #5
    9894:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    9898:	3340      	adds	r3, #64	; 0x40
    989a:	2101      	movs	r1, #1
    989c:	009b      	lsls	r3, r3, #2
    989e:	f002 021f 	and.w	r2, r2, #31
    98a2:	fa01 f202 	lsl.w	r2, r1, r2
    98a6:	601a      	str	r2, [r3, #0]
}
    98a8:	bc10      	pop	{r4}
    98aa:	4770      	bx	lr

000098ac <FlexCAN::read(CAN_message_t&)>:
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    98ac:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
{
    98b0:	b538      	push	{r3, r4, r5, lr}
    98b2:	0953      	lsrs	r3, r2, #5
    98b4:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    98b8:	3340      	adds	r3, #64	; 0x40
    98ba:	009b      	lsls	r3, r3, #2
    98bc:	4604      	mov	r4, r0
    98be:	2501      	movs	r5, #1
    98c0:	4608      	mov	r0, r1
    98c2:	f002 021f 	and.w	r2, r2, #31
    98c6:	6819      	ldr	r1, [r3, #0]
    98c8:	fa05 f202 	lsl.w	r2, r5, r2
    98cc:	4211      	tst	r1, r2
    98ce:	bf14      	ite	ne
    98d0:	4629      	movne	r1, r5
    98d2:	2100      	moveq	r1, #0
    98d4:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
    98d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    98dc:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    98e0:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    98e4:	b292      	uxth	r2, r2
    98e6:	b29b      	uxth	r3, r3
    98e8:	429a      	cmp	r2, r3
    98ea:	d028      	beq.n	993e <FlexCAN::read(CAN_message_t&)+0x92>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    98ec:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    98f0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    98f4:	b29b      	uxth	r3, r3
    98f6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    98fa:	2210      	movs	r2, #16
    98fc:	f001 f8de 	bl	aabc <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    9900:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    9904:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
    9908:	b29b      	uxth	r3, r3
    990a:	442b      	add	r3, r5
    990c:	fbb3 f1f2 	udiv	r1, r3, r2
    9910:	fb02 3311 	mls	r3, r2, r1, r3
    9914:	b29b      	uxth	r3, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    9916:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    991a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
        result=1;
    991e:	4628      	mov	r0, r5
    9920:	b161      	cbz	r1, 993c <FlexCAN::read(CAN_message_t&)+0x90>
    9922:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    9926:	0953      	lsrs	r3, r2, #5
    9928:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    992c:	3340      	adds	r3, #64	; 0x40
    992e:	2101      	movs	r1, #1
    9930:	009b      	lsls	r3, r3, #2
    9932:	f002 021f 	and.w	r2, r2, #31
    9936:	fa01 f202 	lsl.w	r2, r1, r2
    993a:	601a      	str	r2, [r3, #0]
}
    993c:	bd38      	pop	{r3, r4, r5, pc}
    int result=0;
    993e:	2000      	movs	r0, #0
    9940:	e7ee      	b.n	9920 <FlexCAN::read(CAN_message_t&)+0x74>
    9942:	bf00      	nop

00009944 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>:
{
    9944:	b530      	push	{r4, r5, lr}
    if (msg.flags.extended) {
    9946:	798b      	ldrb	r3, [r1, #6]
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    9948:	6804      	ldr	r4, [r0, #0]
    994a:	f04f 0e10 	mov.w	lr, #16
    994e:	f104 0c84 	add.w	ip, r4, #132	; 0x84
    if (msg.flags.extended) {
    9952:	07dc      	lsls	r4, r3, #31
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    9954:	fb1e cc02 	smlabb	ip, lr, r2, ip
    if (msg.flags.extended) {
    9958:	d525      	bpl.n	99a6 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0x62>
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    995a:	680c      	ldr	r4, [r1, #0]
    995c:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    9960:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    9964:	6804      	ldr	r4, [r0, #0]
    9966:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    996a:	688c      	ldr	r4, [r1, #8]
    996c:	fb1e cc02 	smlabb	ip, lr, r2, ip
    9970:	ba24      	rev	r4, r4
    9972:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    9976:	6804      	ldr	r4, [r0, #0]
    9978:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    997c:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    9980:	fb12 fe0e 	smulbb	lr, r2, lr
    9984:	68ca      	ldr	r2, [r1, #12]
    9986:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    9988:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    998c:	079a      	lsls	r2, r3, #30
    998e:	d53c      	bpl.n	9a0a <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xc6>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    9990:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    9992:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    9994:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    9996:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    9998:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                                                   FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_RTR;
    999c:	f043 6347 	orr.w	r3, r3, #208666624	; 0xc700000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    99a0:	f842 300e 	str.w	r3, [r2, lr]
}
    99a4:	bd30      	pop	{r4, r5, pc}
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    99a6:	680d      	ldr	r5, [r1, #0]
    99a8:	4c1d      	ldr	r4, [pc, #116]	; (9a20 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xdc>)
    99aa:	ea04 4485 	and.w	r4, r4, r5, lsl #18
    99ae:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    99b2:	6804      	ldr	r4, [r0, #0]
    99b4:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    99b8:	688c      	ldr	r4, [r1, #8]
    99ba:	fb1e cc02 	smlabb	ip, lr, r2, ip
    99be:	ba24      	rev	r4, r4
    99c0:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    99c4:	6804      	ldr	r4, [r0, #0]
    99c6:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    99ca:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    99ce:	fb12 fe0e 	smulbb	lr, r2, lr
    99d2:	68ca      	ldr	r2, [r1, #12]
        if (msg.flags.remote) {
    99d4:	079b      	lsls	r3, r3, #30
    99d6:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    99d8:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    99dc:	d50a      	bpl.n	99f4 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xb0>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    99de:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    99e0:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    99e2:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    99e4:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    99e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    99ea:	f043 6341 	orr.w	r3, r3, #202375168	; 0xc100000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    99ee:	f842 300e 	str.w	r3, [r2, lr]
}
    99f2:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    99f4:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    99f6:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    99f8:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    99fa:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    99fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    9a00:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
    9a04:	f842 300e 	str.w	r3, [r2, lr]
}
    9a08:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    9a0a:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    9a0c:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    9a0e:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    9a10:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    9a12:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    9a16:	f043 6346 	orr.w	r3, r3, #207618048	; 0xc600000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    9a1a:	f842 300e 	str.w	r3, [r2, lr]
}
    9a1e:	bd30      	pop	{r4, r5, pc}
    9a20:	1ffc0000 	.word	0x1ffc0000

00009a24 <FlexCAN::write(CAN_message_t const&)>:
{
    9a24:	b570      	push	{r4, r5, r6, lr}
    9a26:	4604      	mov	r4, r0
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    9a28:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
    9a2c:	0943      	lsrs	r3, r0, #5
    9a2e:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    9a32:	3340      	adds	r3, #64	; 0x40
    9a34:	009b      	lsls	r3, r3, #2
    9a36:	f000 001f 	and.w	r0, r0, #31
    9a3a:	681d      	ldr	r5, [r3, #0]
    9a3c:	2201      	movs	r2, #1
    9a3e:	4082      	lsls	r2, r0
    9a40:	4215      	tst	r5, r2
    9a42:	bf14      	ite	ne
    9a44:	2501      	movne	r5, #1
    9a46:	2500      	moveq	r5, #0
    9a48:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
    9a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    9a50:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    9a54:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    9a58:	b29b      	uxth	r3, r3
    9a5a:	b292      	uxth	r2, r2
    9a5c:	429a      	cmp	r2, r3
    9a5e:	d02d      	beq.n	9abc <FlexCAN::write(CAN_message_t const&)+0x98>
    nextEntry = (ring.head + 1) % ring.size;
    9a60:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    9a64:	f8b4 0098 	ldrh.w	r0, [r4, #152]	; 0x98
    if (nextEntry == ring.tail) {
    9a68:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    nextEntry = (ring.head + 1) % ring.size;
    9a6c:	b29b      	uxth	r3, r3
    9a6e:	3301      	adds	r3, #1
    9a70:	fbb3 f6f0 	udiv	r6, r3, r0
    9a74:	fb00 3316 	mls	r3, r0, r6, r3
    if (nextEntry == ring.tail) {
    9a78:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    9a7a:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    9a7c:	4296      	cmp	r6, r2
    9a7e:	d042      	beq.n	9b06 <FlexCAN::write(CAN_message_t const&)+0xe2>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    9a80:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    9a84:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    9a88:	b29b      	uxth	r3, r3
    9a8a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    9a8e:	2210      	movs	r2, #16
    9a90:	f001 f814 	bl	aabc <memcpy>
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    9a94:	f894 50f4 	ldrb.w	r5, [r4, #244]	; 0xf4
    ring.head = nextEntry;
    9a98:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
            result=1;
    9a9c:	2001      	movs	r0, #1
    9a9e:	b165      	cbz	r5, 9aba <FlexCAN::write(CAN_message_t const&)+0x96>
    9aa0:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    9aa4:	0953      	lsrs	r3, r2, #5
    9aa6:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    9aaa:	3340      	adds	r3, #64	; 0x40
    9aac:	2101      	movs	r1, #1
    9aae:	009b      	lsls	r3, r3, #2
    9ab0:	f002 021f 	and.w	r2, r2, #31
    9ab4:	fa01 f202 	lsl.w	r2, r1, r2
    9ab8:	601a      	str	r2, [r3, #0]
}
    9aba:	bd70      	pop	{r4, r5, r6, pc}
    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    9abc:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    9ac0:	f1c2 0210 	rsb	r2, r2, #16
      for (index = getFirstTxBox(); index < getNumMailBoxes(); index++) {
    9ac4:	b2d2      	uxtb	r2, r2
    9ac6:	2a0f      	cmp	r2, #15
    9ac8:	d8ca      	bhi.n	9a60 <FlexCAN::write(CAN_message_t const&)+0x3c>
    9aca:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    9ace:	332c      	adds	r3, #44	; 0x2c
    9ad0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    9ad4:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
    9ad8:	e003      	b.n	9ae2 <FlexCAN::write(CAN_message_t const&)+0xbe>
    9ada:	4563      	cmp	r3, ip
    9adc:	f102 0201 	add.w	r2, r2, #1
    9ae0:	d0be      	beq.n	9a60 <FlexCAN::write(CAN_message_t const&)+0x3c>
    bool usesGlobalTxRing(uint8_t mbox) { return (mbox<getNumMailBoxes()?txRings[mbox]==0:true); }
    9ae2:	f853 0f04 	ldr.w	r0, [r3, #4]!
    9ae6:	2800      	cmp	r0, #0
    9ae8:	d1f7      	bne.n	9ada <FlexCAN::write(CAN_message_t const&)+0xb6>
          if ( usesGlobalTxRing(index) && FLEXCAN_get_code(FLEXCANb_MBn_CS(flexcanBase, index)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    9aea:	6826      	ldr	r6, [r4, #0]
    9aec:	0110      	lsls	r0, r2, #4
    9aee:	3680      	adds	r6, #128	; 0x80
    9af0:	5830      	ldr	r0, [r6, r0]
    9af2:	f3c0 6003 	ubfx	r0, r0, #24, #4
    9af6:	2808      	cmp	r0, #8
    9af8:	d1ef      	bne.n	9ada <FlexCAN::write(CAN_message_t const&)+0xb6>
        writeTxRegisters (msg, index);
    9afa:	4620      	mov	r0, r4
    9afc:	b2d2      	uxtb	r2, r2
    9afe:	f7ff ff21 	bl	9944 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
        result=1;
    9b02:	2001      	movs	r0, #1
    9b04:	e7cb      	b.n	9a9e <FlexCAN::write(CAN_message_t const&)+0x7a>
    int result=0;
    9b06:	2000      	movs	r0, #0
    9b08:	e7c9      	b.n	9a9e <FlexCAN::write(CAN_message_t const&)+0x7a>
    9b0a:	bf00      	nop

00009b0c <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>:
{
    9b0c:	460b      	mov	r3, r1
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    9b0e:	6801      	ldr	r1, [r0, #0]
    9b10:	f04f 0c10 	mov.w	ip, #16
    9b14:	3180      	adds	r1, #128	; 0x80
    9b16:	fb1c 1102 	smlabb	r1, ip, r2, r1
{
    9b1a:	b570      	push	{r4, r5, r6, lr}
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    9b1c:	6809      	ldr	r1, [r1, #0]
    msg.timestamp = FLEXCAN_get_timestamp (mb_CS);
    9b1e:	8099      	strh	r1, [r3, #4]
    msg.len = FLEXCAN_get_length (mb_CS);
    9b20:	f3c1 4603 	ubfx	r6, r1, #16, #4
    9b24:	71de      	strb	r6, [r3, #7]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    9b26:	6804      	ldr	r4, [r0, #0]
    9b28:	3484      	adds	r4, #132	; 0x84
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    9b2a:	fb12 fe0c 	smulbb	lr, r2, ip
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    9b2e:	fb1c 4c02 	smlabb	ip, ip, r2, r4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    9b32:	f3c1 5500 	ubfx	r5, r1, #20, #1
    9b36:	f3c1 5240 	ubfx	r2, r1, #21, #1
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    9b3a:	f8dc 4000 	ldr.w	r4, [ip]
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    9b3e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    9b42:	f3c1 6c03 	ubfx	ip, r1, #24, #4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    9b46:	719a      	strb	r2, [r3, #6]
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    9b48:	f1ac 0c06 	sub.w	ip, ip, #6
    if (!msg.flags.extended) {
    9b4c:	b2d2      	uxtb	r2, r2
    9b4e:	07d2      	lsls	r2, r2, #31
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    9b50:	fabc fc8c 	clz	ip, ip
    9b54:	799a      	ldrb	r2, [r3, #6]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    9b56:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    9b5a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    9b5e:	601c      	str	r4, [r3, #0]
    9b60:	f36c 0282 	bfi	r2, ip, #2, #1
        msg.id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    9b64:	bf5c      	itt	pl
    9b66:	0ca4      	lsrpl	r4, r4, #18
    9b68:	601c      	strpl	r4, [r3, #0]
    9b6a:	719a      	strb	r2, [r3, #6]
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    9b6c:	6802      	ldr	r2, [r0, #0]
    9b6e:	3288      	adds	r2, #136	; 0x88
    if (msg.len > 4) {
    9b70:	2e04      	cmp	r6, #4
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    9b72:	f852 200e 	ldr.w	r2, [r2, lr]
    msg.buf[0] = dataIn;
    9b76:	ba12      	rev	r2, r2
    msg.len = FLEXCAN_get_length (mb_CS);
    9b78:	f3c1 4507 	ubfx	r5, r1, #16, #8
    msg.buf[0] = dataIn;
    9b7c:	609a      	str	r2, [r3, #8]
    if (msg.len > 4) {
    9b7e:	d905      	bls.n	9b8c <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x80>
        dataIn = FLEXCANb_MBn_WORD1(flexcanBase, buffer);
    9b80:	6802      	ldr	r2, [r0, #0]
    9b82:	328c      	adds	r2, #140	; 0x8c
    9b84:	f852 200e 	ldr.w	r2, [r2, lr]
        msg.buf[4] = dataIn;
    9b88:	ba12      	rev	r2, r2
    9b8a:	60da      	str	r2, [r3, #12]
    for (uint32_t loop=msg.len; loop < 8; loop++ ) {
    9b8c:	f015 0108 	ands.w	r1, r5, #8
    9b90:	d108      	bne.n	9ba4 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x98>
        msg.buf[loop] = 0;
    9b92:	f106 0008 	add.w	r0, r6, #8
    9b96:	f1c6 0208 	rsb	r2, r6, #8
    9b9a:	4418      	add	r0, r3
}
    9b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        msg.buf[loop] = 0;
    9ba0:	f005 bfc6 	b.w	fb30 <memset>
}
    9ba4:	bd70      	pop	{r4, r5, r6, pc}
    9ba6:	bf00      	nop

00009ba8 <FlexCAN::message_isr()>:
{
    9ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    9bac:	4683      	mov	fp, r0
{
    9bae:	b089      	sub	sp, #36	; 0x24
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    9bb0:	f85b 2bb4 	ldr.w	r2, [fp], #180
    9bb4:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
    9bb8:	f8cd 900c 	str.w	r9, [sp, #12]
{
    9bbc:	4605      	mov	r5, r0
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    9bbe:	4682      	mov	sl, r0
    for (i = 0; i < getNumMailBoxes(); i++) {
    9bc0:	2400      	movs	r4, #0
    9bc2:	e008      	b.n	9bd6 <FlexCAN::message_isr()+0x2e>
        switch (code) {
    9bc4:	2b02      	cmp	r3, #2
    9bc6:	d04c      	beq.n	9c62 <FlexCAN::message_isr()+0xba>
    for (i = 0; i < getNumMailBoxes(); i++) {
    9bc8:	3401      	adds	r4, #1
    9bca:	2c10      	cmp	r4, #16
    9bcc:	f10a 0a08 	add.w	sl, sl, #8
    9bd0:	f10b 0b04 	add.w	fp, fp, #4
    9bd4:	d040      	beq.n	9c58 <FlexCAN::message_isr()+0xb0>
        if ((status & (1UL << i)) == 0) {
    9bd6:	fa29 f304 	lsr.w	r3, r9, r4
    9bda:	07d9      	lsls	r1, r3, #31
    9bdc:	d5f4      	bpl.n	9bc8 <FlexCAN::message_isr()+0x20>
        uint32_t code = FLEXCAN_get_code (FLEXCANb_MBn_CS(flexcanBase, i));
    9bde:	0127      	lsls	r7, r4, #4
    9be0:	f102 0380 	add.w	r3, r2, #128	; 0x80
    9be4:	59db      	ldr	r3, [r3, r7]
    9be6:	f3c3 6303 	ubfx	r3, r3, #24, #4
        switch (code) {
    9bea:	2b06      	cmp	r3, #6
    9bec:	d039      	beq.n	9c62 <FlexCAN::message_isr()+0xba>
    9bee:	2b08      	cmp	r3, #8
    9bf0:	d1e8      	bne.n	9bc4 <FlexCAN::message_isr()+0x1c>
    9bf2:	f8db 6000 	ldr.w	r6, [fp]
    9bf6:	2e00      	cmp	r6, #0
    9bf8:	f000 80b9 	beq.w	9d6e <FlexCAN::message_isr()+0x1c6>
    if (ring.head == ring.tail) {
    9bfc:	8831      	ldrh	r1, [r6, #0]
    9bfe:	8873      	ldrh	r3, [r6, #2]
    9c00:	b289      	uxth	r1, r1
    9c02:	b29b      	uxth	r3, r3
    9c04:	4299      	cmp	r1, r3
    9c06:	f000 80be 	beq.w	9d86 <FlexCAN::message_isr()+0x1de>
    9c0a:	8831      	ldrh	r1, [r6, #0]
    9c0c:	8873      	ldrh	r3, [r6, #2]
    9c0e:	b289      	uxth	r1, r1
    9c10:	b29b      	uxth	r3, r3
    9c12:	4299      	cmp	r1, r3
    9c14:	d0d8      	beq.n	9bc8 <FlexCAN::message_isr()+0x20>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    9c16:	8873      	ldrh	r3, [r6, #2]
    9c18:	68b1      	ldr	r1, [r6, #8]
    9c1a:	b29b      	uxth	r3, r3
    9c1c:	2210      	movs	r2, #16
    9c1e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    9c22:	eb0d 0002 	add.w	r0, sp, r2
    9c26:	f000 ff49 	bl	aabc <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    9c2a:	8873      	ldrh	r3, [r6, #2]
    9c2c:	88b2      	ldrh	r2, [r6, #4]
    9c2e:	b29b      	uxth	r3, r3
    9c30:	3301      	adds	r3, #1
    9c32:	fbb3 f1f2 	udiv	r1, r3, r2
    9c36:	fb02 3311 	mls	r3, r2, r1, r3
    9c3a:	b29b      	uxth	r3, r3
                    writeTxRegisters (msg, i);
    9c3c:	b2e2      	uxtb	r2, r4
    ring.tail = (ring.tail + 1) % ring.size;
    9c3e:	8073      	strh	r3, [r6, #2]
                    writeTxRegisters (msg, i);
    9c40:	a904      	add	r1, sp, #16
    9c42:	4628      	mov	r0, r5
    for (i = 0; i < getNumMailBoxes(); i++) {
    9c44:	3401      	adds	r4, #1
                    writeTxRegisters (msg, i);
    9c46:	f7ff fe7d 	bl	9944 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
    for (i = 0; i < getNumMailBoxes(); i++) {
    9c4a:	2c10      	cmp	r4, #16
    FLEXCANb_IFLAG1(flexcanBase) = status;
    9c4c:	682a      	ldr	r2, [r5, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    9c4e:	f10a 0a08 	add.w	sl, sl, #8
    9c52:	f10b 0b04 	add.w	fp, fp, #4
    9c56:	d1be      	bne.n	9bd6 <FlexCAN::message_isr()+0x2e>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    9c58:	9b03      	ldr	r3, [sp, #12]
    9c5a:	6313      	str	r3, [r2, #48]	; 0x30
}
    9c5c:	b009      	add	sp, #36	; 0x24
    9c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            readRxRegisters (msg, i);
    9c62:	b2e2      	uxtb	r2, r4
    9c64:	a904      	add	r1, sp, #16
    9c66:	4628      	mov	r0, r5
    9c68:	f7ff ff50 	bl	9b0c <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>
            if (stats.enabled == true) {
    9c6c:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    9c70:	b16b      	cbz	r3, 9c8e <FlexCAN::message_isr()+0xe6>
                stats.mb[i].refCount++;
    9c72:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
    9c76:	3301      	adds	r3, #1
    9c78:	f8ca 3114 	str.w	r3, [sl, #276]	; 0x114
                if (msg.flags.overrun) {
    9c7c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9c80:	075b      	lsls	r3, r3, #29
    9c82:	d504      	bpl.n	9c8e <FlexCAN::message_isr()+0xe6>
                    stats.mb[i].overrunCount++;
    9c84:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    9c88:	3301      	adds	r3, #1
    9c8a:	f8ca 3118 	str.w	r3, [sl, #280]	; 0x118
    9c8e:	2301      	movs	r3, #1
    9c90:	40a3      	lsls	r3, r4
    9c92:	9300      	str	r3, [sp, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    9c94:	2300      	movs	r3, #0
    9c96:	f105 0680 	add.w	r6, r5, #128	; 0x80
    9c9a:	f105 0890 	add.w	r8, r5, #144	; 0x90
    9c9e:	9301      	str	r3, [sp, #4]
    9ca0:	f8cd b008 	str.w	fp, [sp, #8]
                thisListener = listener[listenerPos];
    9ca4:	f856 0f04 	ldr.w	r0, [r6, #4]!
                if (thisListener != NULL) {
    9ca8:	b148      	cbz	r0, 9cbe <FlexCAN::message_isr()+0x116>
                    if (thisListener->callbacksActive & (1UL << i)) {
    9caa:	6842      	ldr	r2, [r0, #4]
    9cac:	9b00      	ldr	r3, [sp, #0]
    9cae:	4013      	ands	r3, r2
    9cb0:	d033      	beq.n	9d1a <FlexCAN::message_isr()+0x172>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    9cb2:	6803      	ldr	r3, [r0, #0]
    9cb4:	f8d3 b000 	ldr.w	fp, [r3]
    9cb8:	4b45      	ldr	r3, [pc, #276]	; (9dd0 <FlexCAN::message_isr()+0x228>)
    9cba:	459b      	cmp	fp, r3
    9cbc:	d15a      	bne.n	9d74 <FlexCAN::message_isr()+0x1cc>
            for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    9cbe:	45b0      	cmp	r8, r6
    9cc0:	d1f0      	bne.n	9ca4 <FlexCAN::message_isr()+0xfc>
            if (handledFrame == false) {
    9cc2:	9b01      	ldr	r3, [sp, #4]
    9cc4:	f8dd b008 	ldr.w	fp, [sp, #8]
    9cc8:	b393      	cbz	r3, 9d30 <FlexCAN::message_isr()+0x188>
            if (stats.enabled == true) {
    9cca:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    9cce:	b183      	cbz	r3, 9cf2 <FlexCAN::message_isr()+0x14a>
    entries = ring.head - ring.tail;
    9cd0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    9cd4:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    9cd8:	b29b      	uxth	r3, r3
    9cda:	b292      	uxth	r2, r2
    if (entries < 0) {
    9cdc:	1a9b      	subs	r3, r3, r2
        entries += ring.size;
    9cde:	bf44      	itt	mi
    9ce0:	f8b5 20a8 	ldrhmi.w	r2, [r5, #168]	; 0xa8
    9ce4:	189b      	addmi	r3, r3, r2
                if (stats.ringRxHighWater < rxEntries) {
    9ce6:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    9cea:	429a      	cmp	r2, r3
                    stats.ringRxHighWater = rxEntries;
    9cec:	bf38      	it	cc
    9cee:	f8c5 3104 	strcc.w	r3, [r5, #260]	; 0x104
            if (MBFilters[i].flags.extended) {
    9cf2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    9cf6:	f8da 2004 	ldr.w	r2, [sl, #4]
            if (MBFilters[i].flags.extended) {
    9cfa:	7a1b      	ldrb	r3, [r3, #8]
    9cfc:	f013 0f01 	tst.w	r3, #1
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    9d00:	682b      	ldr	r3, [r5, #0]
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    9d02:	bf08      	it	eq
    9d04:	4933      	ldreq	r1, [pc, #204]	; (9dd4 <FlexCAN::message_isr()+0x22c>)
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    9d06:	f103 0384 	add.w	r3, r3, #132	; 0x84
    9d0a:	bf14      	ite	ne
    9d0c:	f022 4260 	bicne.w	r2, r2, #3758096384	; 0xe0000000
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    9d10:	ea01 4282 	andeq.w	r2, r1, r2, lsl #18
    9d14:	51da      	str	r2, [r3, r7]
    FLEXCANb_IFLAG1(flexcanBase) = status;
    9d16:	682a      	ldr	r2, [r5, #0]
    9d18:	e756      	b.n	9bc8 <FlexCAN::message_isr()+0x20>
                    } else if (thisListener->callbacksActive & (1UL << 31)) {
    9d1a:	2a00      	cmp	r2, #0
    9d1c:	dacf      	bge.n	9cbe <FlexCAN::message_isr()+0x116>
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    9d1e:	6802      	ldr	r2, [r0, #0]
    9d20:	f8d2 b000 	ldr.w	fp, [r2]
    9d24:	4a2a      	ldr	r2, [pc, #168]	; (9dd0 <FlexCAN::message_isr()+0x228>)
    9d26:	4593      	cmp	fp, r2
    9d28:	d0c9      	beq.n	9cbe <FlexCAN::message_isr()+0x116>
    9d2a:	f04f 32ff 	mov.w	r2, #4294967295
    9d2e:	e023      	b.n	9d78 <FlexCAN::message_isr()+0x1d0>
    nextEntry = (ring.head + 1) % ring.size;
    9d30:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    9d34:	f8b5 10a8 	ldrh.w	r1, [r5, #168]	; 0xa8
    if (nextEntry == ring.tail) {
    9d38:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    nextEntry = (ring.head + 1) % ring.size;
    9d3c:	b29b      	uxth	r3, r3
    9d3e:	3301      	adds	r3, #1
    9d40:	fbb3 f0f1 	udiv	r0, r3, r1
    9d44:	fb01 3310 	mls	r3, r1, r0, r3
    if (nextEntry == ring.tail) {
    9d48:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    9d4a:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    9d4c:	4296      	cmp	r6, r2
    9d4e:	d031      	beq.n	9db4 <FlexCAN::message_isr()+0x20c>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    9d50:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    9d54:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
    9d58:	b29b      	uxth	r3, r3
    9d5a:	2210      	movs	r2, #16
    9d5c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    9d60:	eb0d 0102 	add.w	r1, sp, r2
    9d64:	f000 feaa 	bl	aabc <memcpy>
    ring.head = nextEntry;
    9d68:	f8a5 60a4 	strh.w	r6, [r5, #164]	; 0xa4
    return (true);
    9d6c:	e7ad      	b.n	9cca <FlexCAN::message_isr()+0x122>
            pRing=( usesGlobalTxRing(i) ? &txRing : txRings[i] );
    9d6e:	f105 0694 	add.w	r6, r5, #148	; 0x94
    9d72:	e743      	b.n	9bfc <FlexCAN::message_isr()+0x54>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    9d74:	2300      	movs	r3, #0
    9d76:	4622      	mov	r2, r4
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    9d78:	a904      	add	r1, sp, #16
    9d7a:	47d8      	blx	fp
    9d7c:	9b01      	ldr	r3, [sp, #4]
    9d7e:	4318      	orrs	r0, r3
    9d80:	b2c3      	uxtb	r3, r0
    9d82:	9301      	str	r3, [sp, #4]
    9d84:	e79b      	b.n	9cbe <FlexCAN::message_isr()+0x116>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    9d86:	2701      	movs	r7, #1
    9d88:	40a7      	lsls	r7, r4
    9d8a:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
    9d8e:	f105 0680 	add.w	r6, r5, #128	; 0x80
    9d92:	f105 0890 	add.w	r8, r5, #144	; 0x90
                    thisListener = listener[listenerPos];
    9d96:	f856 0f04 	ldr.w	r0, [r6, #4]!
                    if (thisListener != NULL) {
    9d9a:	b138      	cbz	r0, 9dac <FlexCAN::message_isr()+0x204>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    9d9c:	6843      	ldr	r3, [r0, #4]
    9d9e:	421f      	tst	r7, r3
    9da0:	d004      	beq.n	9dac <FlexCAN::message_isr()+0x204>
                            thisListener->txHandler (i, controller);
    9da2:	6803      	ldr	r3, [r0, #0]
    9da4:	4a0c      	ldr	r2, [pc, #48]	; (9dd8 <FlexCAN::message_isr()+0x230>)
    9da6:	685b      	ldr	r3, [r3, #4]
    9da8:	4293      	cmp	r3, r2
    9daa:	d10d      	bne.n	9dc8 <FlexCAN::message_isr()+0x220>
                for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    9dac:	45b0      	cmp	r8, r6
    9dae:	d1f2      	bne.n	9d96 <FlexCAN::message_isr()+0x1ee>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    9db0:	682a      	ldr	r2, [r5, #0]
    9db2:	e709      	b.n	9bc8 <FlexCAN::message_isr()+0x20>
                    if (stats.enabled == true) {
    9db4:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    9db8:	2b00      	cmp	r3, #0
    9dba:	d09a      	beq.n	9cf2 <FlexCAN::message_isr()+0x14a>
                        stats.ringRxFramesLost++;
    9dbc:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    9dc0:	3301      	adds	r3, #1
    9dc2:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            if (stats.enabled == true) {
    9dc6:	e783      	b.n	9cd0 <FlexCAN::message_isr()+0x128>
                            thisListener->txHandler (i, controller);
    9dc8:	2200      	movs	r2, #0
    9dca:	4621      	mov	r1, r4
    9dcc:	4798      	blx	r3
    9dce:	e7ed      	b.n	9dac <FlexCAN::message_isr()+0x204>
    9dd0:	000093d5 	.word	0x000093d5
    9dd4:	1ffc0000 	.word	0x1ffc0000
    9dd8:	000093d9 	.word	0x000093d9

00009ddc <can0_message_isr>:
    Can0.message_isr ();
    9ddc:	4801      	ldr	r0, [pc, #4]	; (9de4 <can0_message_isr+0x8>)
    9dde:	f7ff bee3 	b.w	9ba8 <FlexCAN::message_isr()>
    9de2:	bf00      	nop
    9de4:	1fffb844 	.word	0x1fffb844

00009de8 <can0_bus_off_isr>:
}
    9de8:	4770      	bx	lr
    9dea:	bf00      	nop

00009dec <can0_error_isr>:
    uint32_t status = FLEXCANb_ESR1 (flexcanBase);
    9dec:	4b01      	ldr	r3, [pc, #4]	; (9df4 <can0_error_isr+0x8>)
    9dee:	681b      	ldr	r3, [r3, #0]
    9df0:	6a1b      	ldr	r3, [r3, #32]
}
    9df2:	4770      	bx	lr
    9df4:	1fffb844 	.word	0x1fffb844

00009df8 <can0_tx_warn_isr>:
    9df8:	4770      	bx	lr
    9dfa:	bf00      	nop

00009dfc <can0_rx_warn_isr>:
    9dfc:	4770      	bx	lr
    9dfe:	bf00      	nop

00009e00 <can0_wakeup_isr>:
    9e00:	4770      	bx	lr
    9e02:	bf00      	nop

00009e04 <_GLOBAL__sub_I_Can0>:
FlexCAN Can0 (0);
    9e04:	4801      	ldr	r0, [pc, #4]	; (9e0c <_GLOBAL__sub_I_Can0+0x8>)
    9e06:	2100      	movs	r1, #0
    9e08:	f7ff bae8 	b.w	93dc <FlexCAN::FlexCAN(unsigned char)>
    9e0c:	1fffb844 	.word	0x1fffb844

00009e10 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9e10:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    9e14:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    9e16:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    9e1a:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    9e1c:	d101      	bne.n	9e22 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    9e1e:	6883      	ldr	r3, [r0, #8]
    9e20:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    9e22:	f000 b941 	b.w	a0a8 <EventResponder::triggerEventNotImmediate()>
    9e26:	bf00      	nop

00009e28 <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    9e28:	b470      	push	{r4, r5, r6}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    9e2a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    9e2c:	4a4a      	ldr	r2, [pc, #296]	; (9f58 <SPIClass::dma_rxisr()+0x130>)
    9e2e:	7909      	ldrb	r1, [r1, #4]
    9e30:	77d1      	strb	r1, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    9e32:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    9e34:	7909      	ldrb	r1, [r1, #4]
    9e36:	7711      	strb	r1, [r2, #28]
    9e38:	6b01      	ldr	r1, [r0, #48]	; 0x30
    9e3a:	7909      	ldrb	r1, [r1, #4]
    9e3c:	7711      	strb	r1, [r2, #28]
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    9e3e:	6a82      	ldr	r2, [r0, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
    9e40:	4603      	mov	r3, r0
	if (_dma_count_remaining) {
    9e42:	b32a      	cbz	r2, 9e90 <SPIClass::dma_rxisr()+0x68>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    9e44:	6841      	ldr	r1, [r0, #4]
    9e46:	68c9      	ldr	r1, [r1, #12]
    9e48:	428a      	cmp	r2, r1
    9e4a:	d943      	bls.n	9ed4 <SPIClass::dma_rxisr()+0xac>
			_dma_count_remaining -= hardware().max_dma_count;
    9e4c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    9e4e:	6b00      	ldr	r0, [r0, #48]	; 0x30
			_dma_count_remaining -= hardware().max_dma_count;
    9e50:	1a52      	subs	r2, r2, r1
    9e52:	6821      	ldr	r1, [r4, #0]
    9e54:	629a      	str	r2, [r3, #40]	; 0x28
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9e56:	680d      	ldr	r5, [r1, #0]
    9e58:	f103 0424 	add.w	r4, r3, #36	; 0x24
    9e5c:	42a5      	cmp	r5, r4
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    9e5e:	f04f 0201 	mov.w	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9e62:	d059      	beq.n	9f18 <SPIClass::dma_rxisr()+0xf0>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    9e64:	681c      	ldr	r4, [r3, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    9e66:	68e5      	ldr	r5, [r4, #12]
    9e68:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    9e6c:	680d      	ldr	r5, [r1, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    9e6e:	d129      	bne.n	9ec4 <SPIClass::dma_rxisr()+0x9c>
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    9e70:	782d      	ldrb	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    9e72:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9e74:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    9e78:	3601      	adds	r6, #1
    9e7a:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9e7c:	6365      	str	r5, [r4, #52]	; 0x34
		DMA_SERQ = channel;
    9e7e:	4936      	ldr	r1, [pc, #216]	; (9f58 <SPIClass::dma_rxisr()+0x130>)
    9e80:	7900      	ldrb	r0, [r0, #4]
    9e82:	76c8      	strb	r0, [r1, #27]
			}
		}
		_dmaRX->enable();
		if (should_reenable_tx)
    9e84:	b112      	cbz	r2, 9e8c <SPIClass::dma_rxisr()+0x64>
    9e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9e88:	791b      	ldrb	r3, [r3, #4]
    9e8a:	76cb      	strb	r3, [r1, #27]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();

	}
}
    9e8c:	bc70      	pop	{r4, r5, r6}
    9e8e:	4770      	bx	lr
    9e90:	6801      	ldr	r1, [r0, #0]
		port().SR = 0xFF0F0000;
    9e92:	4c32      	ldr	r4, [pc, #200]	; (9f5c <SPIClass::dma_rxisr()+0x134>)
		_dma_event_responder->triggerEvent();
    9e94:	6b40      	ldr	r0, [r0, #52]	; 0x34
		port().RSER = 0;
    9e96:	630a      	str	r2, [r1, #48]	; 0x30
		port().SR = 0xFF0F0000;
    9e98:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    9e9a:	68cc      	ldr	r4, [r1, #12]
    9e9c:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
    9ea0:	60cc      	str	r4, [r1, #12]
		_dma_event_responder->triggerEvent();
    9ea2:	6804      	ldr	r4, [r0, #0]
    9ea4:	492e      	ldr	r1, [pc, #184]	; (9f60 <SPIClass::dma_rxisr()+0x138>)
    9ea6:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    9ea8:	f04f 0c03 	mov.w	ip, #3
    9eac:	428c      	cmp	r4, r1
    9eae:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
		_dma_event_responder->triggerEvent();
    9eb2:	d139      	bne.n	9f28 <SPIClass::dma_rxisr()+0x100>
		if (_type == EventTypeImmediate) {
    9eb4:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    9eb6:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    9eb8:	2b02      	cmp	r3, #2
		_data = data;
    9eba:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    9ebc:	d138      	bne.n	9f30 <SPIClass::dma_rxisr()+0x108>
}
    9ebe:	bc70      	pop	{r4, r5, r6}
			(*_function)(*this);
    9ec0:	6883      	ldr	r3, [r0, #8]
    9ec2:	4718      	bx	r3
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    9ec4:	882d      	ldrh	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    9ec6:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9ec8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    9ecc:	3602      	adds	r6, #2
    9ece:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9ed0:	6365      	str	r5, [r4, #52]	; 0x34
    9ed2:	e7d4      	b.n	9e7e <SPIClass::dma_rxisr()+0x56>
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    9ed4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    9ed6:	6809      	ldr	r1, [r1, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9ed8:	8bcc      	ldrh	r4, [r1, #30]
    9eda:	0426      	lsls	r6, r4, #16
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    9edc:	f102 30ff 	add.w	r0, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9ee0:	d431      	bmi.n	9f46 <SPIClass::dma_rxisr()+0x11e>
		tcd->BITER = len & 0x7fff;
    9ee2:	f3c0 000e 	ubfx	r0, r0, #0, #15
    9ee6:	83c8      	strh	r0, [r1, #30]
	tcd->CITER = tcd->BITER; 
    9ee8:	8bcc      	ldrh	r4, [r1, #30]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    9eea:	6b18      	ldr	r0, [r3, #48]	; 0x30
	tcd->CITER = tcd->BITER; 
    9eec:	b2a4      	uxth	r4, r4
    9eee:	82cc      	strh	r4, [r1, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    9ef0:	6804      	ldr	r4, [r0, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9ef2:	8be5      	ldrh	r5, [r4, #30]
    9ef4:	042d      	lsls	r5, r5, #16
    9ef6:	d41e      	bmi.n	9f36 <SPIClass::dma_rxisr()+0x10e>
		tcd->BITER = len & 0x7fff;
    9ef8:	f3c2 050e 	ubfx	r5, r2, #0, #15
    9efc:	83e5      	strh	r5, [r4, #30]
	tcd->CITER = tcd->BITER; 
    9efe:	8be5      	ldrh	r5, [r4, #30]
    9f00:	b2ad      	uxth	r5, r5
    9f02:	82e5      	strh	r5, [r4, #22]
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9f04:	680d      	ldr	r5, [r1, #0]
			_dma_count_remaining = 0;
    9f06:	2400      	movs	r4, #0
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    9f08:	3a01      	subs	r2, #1
			_dma_count_remaining = 0;
    9f0a:	629c      	str	r4, [r3, #40]	; 0x28
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9f0c:	f103 0424 	add.w	r4, r3, #36	; 0x24
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    9f10:	bf18      	it	ne
    9f12:	2201      	movne	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9f14:	42a5      	cmp	r5, r4
    9f16:	d1a5      	bne.n	9e64 <SPIClass::dma_rxisr()+0x3c>
    9f18:	6819      	ldr	r1, [r3, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    9f1a:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9f1c:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
    9f20:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    9f24:	634c      	str	r4, [r1, #52]	; 0x34
    9f26:	e7aa      	b.n	9e7e <SPIClass::dma_rxisr()+0x56>
		_dma_event_responder->triggerEvent();
    9f28:	4623      	mov	r3, r4
    9f2a:	4611      	mov	r1, r2
}
    9f2c:	bc70      	pop	{r4, r5, r6}
		_dma_event_responder->triggerEvent();
    9f2e:	4718      	bx	r3
}
    9f30:	bc70      	pop	{r4, r5, r6}
			triggerEventNotImmediate();
    9f32:	f000 b8b9 	b.w	a0a8 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    9f36:	8be5      	ldrh	r5, [r4, #30]
    9f38:	f3c2 0608 	ubfx	r6, r2, #0, #9
    9f3c:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
    9f40:	4335      	orrs	r5, r6
    9f42:	83e5      	strh	r5, [r4, #30]
    9f44:	e7db      	b.n	9efe <SPIClass::dma_rxisr()+0xd6>
    9f46:	8bcc      	ldrh	r4, [r1, #30]
    9f48:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9f4c:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    9f50:	4320      	orrs	r0, r4
    9f52:	83c8      	strh	r0, [r1, #30]
    9f54:	e7c8      	b.n	9ee8 <SPIClass::dma_rxisr()+0xc0>
    9f56:	bf00      	nop
    9f58:	40008000 	.word	0x40008000
    9f5c:	ff0f0000 	.word	0xff0f0000
    9f60:	00009e11 	.word	0x00009e11

00009f64 <_spi_dma_rxISR0()>:
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9f64:	b508      	push	{r3, lr}
    9f66:	4802      	ldr	r0, [pc, #8]	; (9f70 <_spi_dma_rxISR0()+0xc>)
    9f68:	f7ff ff5e 	bl	9e28 <SPIClass::dma_rxisr()>
    9f6c:	bd08      	pop	{r3, pc}
    9f6e:	bf00      	nop
    9f70:	1fffb9e8 	.word	0x1fffb9e8

00009f74 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v>:
		: port_addr(myport), hardware_addr(myhardware) {
    9f74:	4a0a      	ldr	r2, [pc, #40]	; (9fa0 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x2c>)
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);
    9f76:	490b      	ldr	r1, [pc, #44]	; (9fa4 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x30>)
    9f78:	2300      	movs	r3, #0
}
    9f7a:	b410      	push	{r4}
    9f7c:	4c0a      	ldr	r4, [pc, #40]	; (9fa8 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x34>)
    9f7e:	6093      	str	r3, [r2, #8]
    9f80:	8493      	strh	r3, [r2, #36]	; 0x24
    9f82:	6014      	str	r4, [r2, #0]
    9f84:	6051      	str	r1, [r2, #4]
    9f86:	bc10      	pop	{r4}
    9f88:	60d3      	str	r3, [r2, #12]
    9f8a:	6193      	str	r3, [r2, #24]
    9f8c:	6293      	str	r3, [r2, #40]	; 0x28
    9f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
    9f90:	6313      	str	r3, [r2, #48]	; 0x30
    9f92:	6353      	str	r3, [r2, #52]	; 0x34
    9f94:	6113      	str	r3, [r2, #16]
    9f96:	6153      	str	r3, [r2, #20]
    9f98:	61d3      	str	r3, [r2, #28]
    9f9a:	6213      	str	r3, [r2, #32]
    9f9c:	4770      	bx	lr
    9f9e:	bf00      	nop
    9fa0:	1fffb9e8 	.word	0x1fffb9e8
    9fa4:	00016ea0 	.word	0x00016ea0
    9fa8:	4002c000 	.word	0x4002c000

00009fac <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>:
#include "FilterOnePole.h"
#include "FloatDefine.h"

FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    9fac:	b538      	push	{r3, r4, r5, lr}
    9fae:	4604      	mov	r4, r0
    9fb0:	4608      	mov	r0, r1
  setFilter( ft, fc, initialValue );
}

void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
  FT = ft;
    9fb2:	7020      	strb	r0, [r4, #0]

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    9fb4:	490a      	ldr	r1, [pc, #40]	; (9fe0 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x34>)
    9fb6:	4610      	mov	r0, r2
FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    9fb8:	461d      	mov	r5, r3
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    9fba:	f004 fd21 	bl	ea00 <__aeabi_fmul>
    9fbe:	4601      	mov	r1, r0
    9fc0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    9fc4:	f004 fdd0 	bl	eb68 <__aeabi_fdiv>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    9fc8:	4906      	ldr	r1, [pc, #24]	; (9fe4 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x38>)
    9fca:	f004 fd19 	bl	ea00 <__aeabi_fmul>
  Y = initialValue;
    9fce:	60e5      	str	r5, [r4, #12]
  TauUS = newTau * 1e6;
    9fd0:	6060      	str	r0, [r4, #4]
  Ylast = initialValue;
    9fd2:	6125      	str	r5, [r4, #16]
  X = initialValue;
    9fd4:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    9fd6:	f001 f9d3 	bl	b380 <micros>
    9fda:	61e0      	str	r0, [r4, #28]
}
    9fdc:	4620      	mov	r0, r4
    9fde:	bd38      	pop	{r3, r4, r5, pc}
    9fe0:	40c90fdb 	.word	0x40c90fdb
    9fe4:	49742400 	.word	0x49742400

00009fe8 <FilterOnePole::output()>:
}

float FilterOnePole::output() {
    // figure out which button to read
  switch (FT) {
    9fe8:	7803      	ldrb	r3, [r0, #0]
float FilterOnePole::output() {
    9fea:	b510      	push	{r4, lr}
    9fec:	4604      	mov	r4, r0
  switch (FT) {
    9fee:	2b03      	cmp	r3, #3
    9ff0:	d821      	bhi.n	a036 <FilterOnePole::output()+0x4e>
    9ff2:	e8df f003 	tbb	[pc, r3]
    9ff6:	1e19      	.short	0x1e19
    9ff8:	0211      	.short	0x0211
      // highpass is the _difference_
      return X-Y;
      break;
    case DIFFERENTIATOR:
      // like a highpass, but normalize
      return (X-Y)/(TauUS/1.0e6);
    9ffa:	68c1      	ldr	r1, [r0, #12]
    9ffc:	6940      	ldr	r0, [r0, #20]
    9ffe:	f004 fbf5 	bl	e7ec <__aeabi_fsub>
    a002:	490e      	ldr	r1, [pc, #56]	; (a03c <FilterOnePole::output()+0x54>)
    a004:	4603      	mov	r3, r0
    a006:	6860      	ldr	r0, [r4, #4]
    a008:	461c      	mov	r4, r3
    a00a:	f004 fdad 	bl	eb68 <__aeabi_fdiv>
    a00e:	4601      	mov	r1, r0
    a010:	4620      	mov	r0, r4
    a012:	f004 fda9 	bl	eb68 <__aeabi_fdiv>
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    a016:	bd10      	pop	{r4, pc}
      return Y * (TauUS/1.0e6);
    a018:	4908      	ldr	r1, [pc, #32]	; (a03c <FilterOnePole::output()+0x54>)
    a01a:	6840      	ldr	r0, [r0, #4]
    a01c:	f004 fda4 	bl	eb68 <__aeabi_fdiv>
    a020:	68e1      	ldr	r1, [r4, #12]
    a022:	f004 fced 	bl	ea00 <__aeabi_fmul>
}
    a026:	bd10      	pop	{r4, pc}
      return X-Y;
    a028:	68c1      	ldr	r1, [r0, #12]
    a02a:	6940      	ldr	r0, [r0, #20]
    a02c:	f004 fbde 	bl	e7ec <__aeabi_fsub>
}
    a030:	bd10      	pop	{r4, pc}
      return Y; 
    a032:	68c0      	ldr	r0, [r0, #12]
}
    a034:	bd10      	pop	{r4, pc}
  switch (FT) {
    a036:	2000      	movs	r0, #0
}
    a038:	bd10      	pop	{r4, pc}
    a03a:	bf00      	nop
    a03c:	49742400 	.word	0x49742400

0000a040 <FilterOnePole::input(float)>:
float FilterOnePole::input( float inVal ) {
    a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a042:	4604      	mov	r4, r0
    a044:	460e      	mov	r6, r1
  long time = micros();
    a046:	f001 f99b 	bl	b380 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    a04a:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    a04c:	4605      	mov	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    a04e:	1ac0      	subs	r0, r0, r3
    a050:	f004 fc82 	bl	e958 <__aeabi_i2f>
  Ylast = Y;
    a054:	68e7      	ldr	r7, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    a056:	61a0      	str	r0, [r4, #24]
    a058:	4601      	mov	r1, r0
  LastUS = time;                      // update this now
    a05a:	61e5      	str	r5, [r4, #28]
  TauSamps = TauUS / ElapsedUS;
    a05c:	6860      	ldr	r0, [r4, #4]
  X = inVal;                          // this is now the most recent input value
    a05e:	6166      	str	r6, [r4, #20]
  Ylast = Y;
    a060:	6127      	str	r7, [r4, #16]
  TauSamps = TauUS / ElapsedUS;
    a062:	f004 fd81 	bl	eb68 <__aeabi_fdiv>
    a066:	4601      	mov	r1, r0
    a068:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    a06a:	480e      	ldr	r0, [pc, #56]	; (a0a4 <FilterOnePole::input(float)+0x64>)
    a06c:	f004 fd7c 	bl	eb68 <__aeabi_fdiv>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    a070:	f003 f968 	bl	d344 <expf>
    a074:	4605      	mov	r5, r0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    a076:	4601      	mov	r1, r0
    a078:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    a07c:	f004 fbb6 	bl	e7ec <__aeabi_fsub>
    a080:	4631      	mov	r1, r6
    a082:	f004 fcbd 	bl	ea00 <__aeabi_fmul>
    a086:	4629      	mov	r1, r5
    a088:	4606      	mov	r6, r0
    a08a:	4638      	mov	r0, r7
    a08c:	f004 fcb8 	bl	ea00 <__aeabi_fmul>
    a090:	4601      	mov	r1, r0
    a092:	4630      	mov	r0, r6
    a094:	f004 fbac 	bl	e7f0 <__addsf3>
    a098:	60e0      	str	r0, [r4, #12]
  return output();
    a09a:	4620      	mov	r0, r4
}
    a09c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return output();
    a0a0:	f7ff bfa2 	b.w	9fe8 <FilterOnePole::output()>
    a0a4:	bf800000 	.word	0xbf800000

0000a0a8 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a0a8:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    a0ac:	b672      	cpsid	i
extern const uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    a0ae:	7f43      	ldrb	r3, [r0, #29]
    a0b0:	b95b      	cbnz	r3, a0ca <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    a0b2:	7f01      	ldrb	r1, [r0, #28]
    a0b4:	2901      	cmp	r1, #1
{
    a0b6:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    a0b8:	d00b      	beq.n	a0d2 <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    a0ba:	2903      	cmp	r1, #3
    a0bc:	d013      	beq.n	a0e6 <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    a0be:	2301      	movs	r3, #1
    a0c0:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a0c2:	b902      	cbnz	r2, a0c6 <EventResponder::triggerEventNotImmediate()+0x1e>
    a0c4:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    a0c6:	bc30      	pop	{r4, r5}
    a0c8:	4770      	bx	lr
    a0ca:	b90a      	cbnz	r2, a0d0 <EventResponder::triggerEventNotImmediate()+0x28>
    a0cc:	b662      	cpsie	i
    a0ce:	4770      	bx	lr
    a0d0:	4770      	bx	lr
			if (firstYield == nullptr) {
    a0d2:	4c12      	ldr	r4, [pc, #72]	; (a11c <EventResponder::triggerEventNotImmediate()+0x74>)
    a0d4:	6821      	ldr	r1, [r4, #0]
    a0d6:	b1b1      	cbz	r1, a106 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    a0d8:	4911      	ldr	r1, [pc, #68]	; (a120 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    a0da:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    a0dc:	680b      	ldr	r3, [r1, #0]
    a0de:	6183      	str	r3, [r0, #24]
				lastYield = this;
    a0e0:	6008      	str	r0, [r1, #0]
				_prev->_next = this;
    a0e2:	6158      	str	r0, [r3, #20]
				lastYield = this;
    a0e4:	e7eb      	b.n	a0be <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    a0e6:	4d0f      	ldr	r5, [pc, #60]	; (a124 <EventResponder::triggerEventNotImmediate()+0x7c>)
    a0e8:	490f      	ldr	r1, [pc, #60]	; (a128 <EventResponder::triggerEventNotImmediate()+0x80>)
    a0ea:	682c      	ldr	r4, [r5, #0]
    a0ec:	b18c      	cbz	r4, a112 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    a0ee:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    a0f0:	680b      	ldr	r3, [r1, #0]
    a0f2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    a0f4:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    a0f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a0fa:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    a0fe:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    a100:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    a104:	e7db      	b.n	a0be <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    a106:	4b06      	ldr	r3, [pc, #24]	; (a120 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    a108:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    a10a:	6181      	str	r1, [r0, #24]
				firstYield = this;
    a10c:	6020      	str	r0, [r4, #0]
				lastYield = this;
    a10e:	6018      	str	r0, [r3, #0]
    a110:	e7d5      	b.n	a0be <EventResponder::triggerEventNotImmediate()+0x16>
				_next = nullptr;
    a112:	6144      	str	r4, [r0, #20]
				_prev = nullptr;
    a114:	6184      	str	r4, [r0, #24]
				firstInterrupt = this;
    a116:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    a118:	e7ed      	b.n	a0f6 <EventResponder::triggerEventNotImmediate()+0x4e>
    a11a:	bf00      	nop
    a11c:	1fffba20 	.word	0x1fffba20
    a120:	1fffba30 	.word	0x1fffba30
    a124:	1fffba28 	.word	0x1fffba28
    a128:	1fffba24 	.word	0x1fffba24

0000a12c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a12c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a12e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    a132:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a134:	4c0c      	ldr	r4, [pc, #48]	; (a168 <EventResponder::runFromInterrupt()+0x3c>)
    a136:	6820      	ldr	r0, [r4, #0]
		if (first) {
    a138:	b180      	cbz	r0, a15c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a13a:	4e0c      	ldr	r6, [pc, #48]	; (a16c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    a13c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    a13e:	6943      	ldr	r3, [r0, #20]
    a140:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    a142:	b173      	cbz	r3, a162 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a144:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    a146:	b902      	cbnz	r2, a14a <EventResponder::runFromInterrupt()+0x1e>
    a148:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    a14a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    a14c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a14e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a150:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    a154:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    a156:	6820      	ldr	r0, [r4, #0]
		if (first) {
    a158:	2800      	cmp	r0, #0
    a15a:	d1f0      	bne.n	a13e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    a15c:	b902      	cbnz	r2, a160 <EventResponder::runFromInterrupt()+0x34>
    a15e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    a160:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    a162:	6033      	str	r3, [r6, #0]
    a164:	e7ef      	b.n	a146 <EventResponder::runFromInterrupt()+0x1a>
    a166:	bf00      	nop
    a168:	1fffba28 	.word	0x1fffba28
    a16c:	1fffba24 	.word	0x1fffba24

0000a170 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    a170:	f7ff bfdc 	b.w	a12c <EventResponder::runFromInterrupt()>

0000a174 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    a174:	4a02      	ldr	r2, [pc, #8]	; (a180 <systick_isr+0xc>)
    a176:	6813      	ldr	r3, [r2, #0]
    a178:	3301      	adds	r3, #1
    a17a:	6013      	str	r3, [r2, #0]
}
    a17c:	4770      	bx	lr
    a17e:	bf00      	nop
    a180:	1fffba38 	.word	0x1fffba38

0000a184 <HardwareSerial2::begin(unsigned long)>:
HardwareSerial2 Serial2(&serialEvent2);

uint8_t _serialEvent2_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial2::begin(uint32_t baud) {
	serial2_begin(BAUD2DIV2(baud));
    a184:	084b      	lsrs	r3, r1, #1
    a186:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
    a18a:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
void HardwareSerial2::begin(uint32_t baud) {
    a18e:	b510      	push	{r4, lr}
    a190:	4604      	mov	r4, r0
	serial2_begin(BAUD2DIV2(baud));
    a192:	fbb3 f0f1 	udiv	r0, r3, r1
    a196:	f001 f95f 	bl	b458 <serial2_begin>
	if (!_serialEvent2_default) addToSerialEventsList();
    a19a:	4b04      	ldr	r3, [pc, #16]	; (a1ac <HardwareSerial2::begin(unsigned long)+0x28>)
    a19c:	781b      	ldrb	r3, [r3, #0]
    a19e:	b103      	cbz	r3, a1a2 <HardwareSerial2::begin(unsigned long)+0x1e>
}
    a1a0:	bd10      	pop	{r4, pc}
	if (!_serialEvent2_default) addToSerialEventsList();
    a1a2:	4620      	mov	r0, r4
}
    a1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent2_default) addToSerialEventsList();
    a1a8:	f003 b86a 	b.w	d280 <HardwareSerial::addToSerialEventsList()>
    a1ac:	1fff89f5 	.word	0x1fff89f5

0000a1b0 <HardwareSerial2::write9bit(unsigned long)>:
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    a1b0:	b508      	push	{r3, lr}
    a1b2:	4608      	mov	r0, r1
    a1b4:	f001 fb3e 	bl	b834 <serial2_putchar>
    a1b8:	2001      	movs	r0, #1
    a1ba:	bd08      	pop	{r3, pc}

0000a1bc <HardwareSerial2::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    a1bc:	b508      	push	{r3, lr}
    a1be:	4608      	mov	r0, r1
    a1c0:	f001 fb38 	bl	b834 <serial2_putchar>
    a1c4:	2001      	movs	r0, #1
    a1c6:	bd08      	pop	{r3, pc}

0000a1c8 <HardwareSerial2::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    a1c8:	b538      	push	{r3, r4, r5, lr}
    a1ca:	4608      	mov	r0, r1
    a1cc:	460d      	mov	r5, r1
    a1ce:	f005 fdd7 	bl	fd80 <strlen>
    a1d2:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    a1d4:	4601      	mov	r1, r0
    a1d6:	4628      	mov	r0, r5
    a1d8:	f001 fba8 	bl	b92c <serial2_write>
					  return len; }
    a1dc:	4620      	mov	r0, r4
    a1de:	bd38      	pop	{r3, r4, r5, pc}

0000a1e0 <HardwareSerial2::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    a1e0:	b510      	push	{r4, lr}
    a1e2:	4608      	mov	r0, r1
    a1e4:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    a1e6:	4611      	mov	r1, r2
    a1e8:	f001 fba0 	bl	b92c <serial2_write>
    a1ec:	4620      	mov	r0, r4
    a1ee:	bd10      	pop	{r4, pc}

0000a1f0 <HardwareSerial2::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial2_add_memory_for_write(buffer, length);}
    a1f0:	4608      	mov	r0, r1
    a1f2:	4611      	mov	r1, r2
    a1f4:	f001 bdc8 	b.w	bd88 <serial2_add_memory_for_write>

0000a1f8 <HardwareSerial2::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial2_add_memory_for_read(buffer, length);}
    a1f8:	4608      	mov	r0, r1
    a1fa:	4611      	mov	r1, r2
    a1fc:	f001 bda8 	b.w	bd50 <serial2_add_memory_for_read>

0000a200 <HardwareSerial2::clear()>:
	virtual void clear(void)	{ serial2_clear(); }
    a200:	f001 bcc0 	b.w	bb84 <serial2_clear>

0000a204 <HardwareSerial2::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
    a204:	b508      	push	{r3, lr}
    a206:	4608      	mov	r0, r1
    a208:	f001 faf4 	bl	b7f4 <serial2_set_cts>
    a20c:	3800      	subs	r0, #0
    a20e:	bf18      	it	ne
    a210:	2001      	movne	r0, #1
    a212:	bd08      	pop	{r3, pc}

0000a214 <HardwareSerial2::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
    a214:	b508      	push	{r3, lr}
    a216:	4608      	mov	r0, r1
    a218:	f001 faca 	bl	b7b0 <serial2_set_rts>
    a21c:	3800      	subs	r0, #0
    a21e:	bf18      	it	ne
    a220:	2001      	movne	r0, #1
    a222:	bd08      	pop	{r3, pc}

0000a224 <HardwareSerial2::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    a224:	4608      	mov	r0, r1
    a226:	4611      	mov	r1, r2
    a228:	f001 ba56 	b.w	b6d8 <serial2_set_tx>

0000a22c <HardwareSerial2::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    a22c:	4608      	mov	r0, r1
    a22e:	f001 ba91 	b.w	b754 <serial2_set_rx>
    a232:	bf00      	nop

0000a234 <HardwareSerial2::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
    a234:	4608      	mov	r0, r1
    a236:	f001 ba33 	b.w	b6a0 <serial2_set_transmit_pin>
    a23a:	bf00      	nop

0000a23c <HardwareSerial2::end()>:
	virtual void end(void)		{ serial2_end(); }
    a23c:	f001 b9c8 	b.w	b5d0 <serial2_end>

0000a240 <HardwareSerial2::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    a240:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV2(baud));
    a242:	084b      	lsrs	r3, r1, #1
    a244:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
	virtual void begin(uint32_t baud, uint32_t format) {
    a248:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV2(baud));
    a24a:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
    a24e:	fbb3 f0f1 	udiv	r0, r3, r1
    a252:	f001 f901 	bl	b458 <serial2_begin>
					  serial2_format(format); }
    a256:	4620      	mov	r0, r4
    a258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a25c:	f001 b96a 	b.w	b534 <serial2_format>

0000a260 <HardwareSerial2::peek()>:
	virtual int peek(void)          { return serial2_peek(); }
    a260:	f001 bc6a 	b.w	bb38 <serial2_peek>

0000a264 <HardwareSerial2::read()>:
	virtual int read(void)          { return serial2_getchar(); }
    a264:	f001 bc22 	b.w	baac <serial2_getchar>

0000a268 <HardwareSerial2::available()>:
	virtual int available(void)     { return serial2_available(); }
    a268:	f001 bc0c 	b.w	ba84 <serial2_available>

0000a26c <HardwareSerial2::flush()>:
	virtual void flush(void)        { serial2_flush(); }
    a26c:	f001 bbe6 	b.w	ba3c <serial2_flush>

0000a270 <HardwareSerial2::availableForWrite()>:
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
    a270:	f001 bbf0 	b.w	ba54 <serial2_write_buffer_free>

0000a274 <HardwareSerial2::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    a274:	6803      	ldr	r3, [r0, #0]
    a276:	4a06      	ldr	r2, [pc, #24]	; (a290 <HardwareSerial2::write(int)+0x1c>)
    a278:	681b      	ldr	r3, [r3, #0]
    a27a:	4293      	cmp	r3, r2
    a27c:	d105      	bne.n	a28a <HardwareSerial2::write(int)+0x16>
    a27e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    a280:	b2c8      	uxtb	r0, r1
    a282:	f001 fad7 	bl	b834 <serial2_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    a286:	2001      	movs	r0, #1
    a288:	bd10      	pop	{r4, pc}
    a28a:	b2c9      	uxtb	r1, r1
    a28c:	4718      	bx	r3
    a28e:	bf00      	nop
    a290:	0000a1bd 	.word	0x0000a1bd

0000a294 <HardwareSerial2::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    a294:	6803      	ldr	r3, [r0, #0]
    a296:	4a06      	ldr	r2, [pc, #24]	; (a2b0 <HardwareSerial2::write(unsigned long)+0x1c>)
    a298:	681b      	ldr	r3, [r3, #0]
    a29a:	4293      	cmp	r3, r2
    a29c:	d105      	bne.n	a2aa <HardwareSerial2::write(unsigned long)+0x16>
    a29e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    a2a0:	b2c8      	uxtb	r0, r1
    a2a2:	f001 fac7 	bl	b834 <serial2_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    a2a6:	2001      	movs	r0, #1
    a2a8:	bd10      	pop	{r4, pc}
    a2aa:	b2c9      	uxtb	r1, r1
    a2ac:	4718      	bx	r3
    a2ae:	bf00      	nop
    a2b0:	0000a1bd 	.word	0x0000a1bd

0000a2b4 <HardwareSerial2::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    a2b4:	6803      	ldr	r3, [r0, #0]
    a2b6:	4a06      	ldr	r2, [pc, #24]	; (a2d0 <HardwareSerial2::write(long)+0x1c>)
    a2b8:	681b      	ldr	r3, [r3, #0]
    a2ba:	4293      	cmp	r3, r2
    a2bc:	d105      	bne.n	a2ca <HardwareSerial2::write(long)+0x16>
    a2be:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    a2c0:	b2c8      	uxtb	r0, r1
    a2c2:	f001 fab7 	bl	b834 <serial2_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    a2c6:	2001      	movs	r0, #1
    a2c8:	bd10      	pop	{r4, pc}
    a2ca:	b2c9      	uxtb	r1, r1
    a2cc:	4718      	bx	r3
    a2ce:	bf00      	nop
    a2d0:	0000a1bd 	.word	0x0000a1bd

0000a2d4 <HardwareSerial2::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    a2d4:	6803      	ldr	r3, [r0, #0]
    a2d6:	4a06      	ldr	r2, [pc, #24]	; (a2f0 <HardwareSerial2::write(unsigned int)+0x1c>)
    a2d8:	681b      	ldr	r3, [r3, #0]
    a2da:	4293      	cmp	r3, r2
    a2dc:	d105      	bne.n	a2ea <HardwareSerial2::write(unsigned int)+0x16>
    a2de:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    a2e0:	b2c8      	uxtb	r0, r1
    a2e2:	f001 faa7 	bl	b834 <serial2_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    a2e6:	2001      	movs	r0, #1
    a2e8:	bd10      	pop	{r4, pc}
    a2ea:	b2c9      	uxtb	r1, r1
    a2ec:	4718      	bx	r3
    a2ee:	bf00      	nop
    a2f0:	0000a1bd 	.word	0x0000a1bd

0000a2f4 <HardwareSerial3::begin(unsigned long)>:
HardwareSerial3 Serial3(&serialEvent3);

uint8_t _serialEvent3_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial3::begin(uint32_t baud) { 
	serial3_begin(BAUD2DIV3(baud));
    a2f4:	084b      	lsrs	r3, r1, #1
    a2f6:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
    a2fa:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
void HardwareSerial3::begin(uint32_t baud) { 
    a2fe:	b510      	push	{r4, lr}
    a300:	4604      	mov	r4, r0
	serial3_begin(BAUD2DIV3(baud));
    a302:	fbb3 f0f1 	udiv	r0, r3, r1
    a306:	f001 fdc5 	bl	be94 <serial3_begin>
	if (!_serialEvent3_default) addToSerialEventsList();
    a30a:	4b04      	ldr	r3, [pc, #16]	; (a31c <HardwareSerial3::begin(unsigned long)+0x28>)
    a30c:	781b      	ldrb	r3, [r3, #0]
    a30e:	b103      	cbz	r3, a312 <HardwareSerial3::begin(unsigned long)+0x1e>
}
    a310:	bd10      	pop	{r4, pc}
	if (!_serialEvent3_default) addToSerialEventsList();
    a312:	4620      	mov	r0, r4
}
    a314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent3_default) addToSerialEventsList();
    a318:	f002 bfb2 	b.w	d280 <HardwareSerial::addToSerialEventsList()>
    a31c:	1fff89f6 	.word	0x1fff89f6

0000a320 <HardwareSerial3::write9bit(unsigned long)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    a320:	b508      	push	{r3, lr}
    a322:	4608      	mov	r0, r1
    a324:	f001 ff12 	bl	c14c <serial3_putchar>
    a328:	2001      	movs	r0, #1
    a32a:	bd08      	pop	{r3, pc}

0000a32c <HardwareSerial3::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    a32c:	b508      	push	{r3, lr}
    a32e:	4608      	mov	r0, r1
    a330:	f001 ff0c 	bl	c14c <serial3_putchar>
    a334:	2001      	movs	r0, #1
    a336:	bd08      	pop	{r3, pc}

0000a338 <HardwareSerial3::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    a338:	b538      	push	{r3, r4, r5, lr}
    a33a:	4608      	mov	r0, r1
    a33c:	460d      	mov	r5, r1
    a33e:	f005 fd1f 	bl	fd80 <strlen>
    a342:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    a344:	4601      	mov	r1, r0
    a346:	4628      	mov	r0, r5
    a348:	f001 ff0a 	bl	c160 <serial3_write>
					  return len; }
    a34c:	4620      	mov	r0, r4
    a34e:	bd38      	pop	{r3, r4, r5, pc}

0000a350 <HardwareSerial3::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    a350:	b510      	push	{r4, lr}
    a352:	4608      	mov	r0, r1
    a354:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    a356:	4611      	mov	r1, r2
    a358:	f001 ff02 	bl	c160 <serial3_write>
    a35c:	4620      	mov	r0, r4
    a35e:	bd10      	pop	{r4, pc}

0000a360 <HardwareSerial3::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial3_add_memory_for_write(buffer, length);}
    a360:	4608      	mov	r0, r1
    a362:	4611      	mov	r1, r2
    a364:	f002 b876 	b.w	c454 <serial3_add_memory_for_write>

0000a368 <HardwareSerial3::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial3_add_memory_for_read(buffer, length);}
    a368:	4608      	mov	r0, r1
    a36a:	4611      	mov	r1, r2
    a36c:	f002 b856 	b.w	c41c <serial3_add_memory_for_read>

0000a370 <HardwareSerial3::clear()>:
	virtual void clear(void)	{ serial3_clear(); }
    a370:	f001 bfae 	b.w	c2d0 <serial3_clear>

0000a374 <HardwareSerial3::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
    a374:	b508      	push	{r3, lr}
    a376:	4608      	mov	r0, r1
    a378:	f001 fec8 	bl	c10c <serial3_set_cts>
    a37c:	3800      	subs	r0, #0
    a37e:	bf18      	it	ne
    a380:	2001      	movne	r0, #1
    a382:	bd08      	pop	{r3, pc}

0000a384 <HardwareSerial3::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
    a384:	b508      	push	{r3, lr}
    a386:	4608      	mov	r0, r1
    a388:	f001 fe9e 	bl	c0c8 <serial3_set_rts>
    a38c:	3800      	subs	r0, #0
    a38e:	bf18      	it	ne
    a390:	2001      	movne	r0, #1
    a392:	bd08      	pop	{r3, pc}

0000a394 <HardwareSerial3::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
    a394:	4608      	mov	r0, r1
    a396:	4611      	mov	r1, r2
    a398:	f001 be68 	b.w	c06c <serial3_set_tx>

0000a39c <HardwareSerial3::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
    a39c:	4608      	mov	r0, r1
    a39e:	f001 be91 	b.w	c0c4 <serial3_set_rx>
    a3a2:	bf00      	nop

0000a3a4 <HardwareSerial3::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
    a3a4:	4608      	mov	r0, r1
    a3a6:	f001 be45 	b.w	c034 <serial3_set_transmit_pin>
    a3aa:	bf00      	nop

0000a3ac <HardwareSerial3::end()>:
	virtual void end(void)          { serial3_end(); }
    a3ac:	f001 be0c 	b.w	bfc8 <serial3_end>

0000a3b0 <HardwareSerial3::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    a3b0:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    a3b2:	084b      	lsrs	r3, r1, #1
    a3b4:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
	virtual void begin(uint32_t baud, uint32_t format) {
    a3b8:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    a3ba:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    a3be:	fbb3 f0f1 	udiv	r0, r3, r1
    a3c2:	f001 fd67 	bl	be94 <serial3_begin>
					  serial3_format(format); }
    a3c6:	4620      	mov	r0, r4
    a3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3cc:	f001 bdae 	b.w	bf2c <serial3_format>

0000a3d0 <HardwareSerial3::peek()>:
	virtual int peek(void)          { return serial3_peek(); }
    a3d0:	f001 bf58 	b.w	c284 <serial3_peek>

0000a3d4 <HardwareSerial3::read()>:
	virtual int read(void)          { return serial3_getchar(); }
    a3d4:	f001 bf10 	b.w	c1f8 <serial3_getchar>

0000a3d8 <HardwareSerial3::available()>:
	virtual int available(void)     { return serial3_available(); }
    a3d8:	f001 befa 	b.w	c1d0 <serial3_available>

0000a3dc <HardwareSerial3::flush()>:
	virtual void flush(void)        { serial3_flush(); }
    a3dc:	f001 bed4 	b.w	c188 <serial3_flush>

0000a3e0 <HardwareSerial3::availableForWrite()>:
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
    a3e0:	f001 bede 	b.w	c1a0 <serial3_write_buffer_free>

0000a3e4 <HardwareSerial3::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    a3e4:	6803      	ldr	r3, [r0, #0]
    a3e6:	4a06      	ldr	r2, [pc, #24]	; (a400 <HardwareSerial3::write(int)+0x1c>)
    a3e8:	681b      	ldr	r3, [r3, #0]
    a3ea:	4293      	cmp	r3, r2
    a3ec:	d105      	bne.n	a3fa <HardwareSerial3::write(int)+0x16>
    a3ee:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    a3f0:	b2c8      	uxtb	r0, r1
    a3f2:	f001 feab 	bl	c14c <serial3_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    a3f6:	2001      	movs	r0, #1
    a3f8:	bd10      	pop	{r4, pc}
    a3fa:	b2c9      	uxtb	r1, r1
    a3fc:	4718      	bx	r3
    a3fe:	bf00      	nop
    a400:	0000a32d 	.word	0x0000a32d

0000a404 <HardwareSerial3::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    a404:	6803      	ldr	r3, [r0, #0]
    a406:	4a06      	ldr	r2, [pc, #24]	; (a420 <HardwareSerial3::write(unsigned long)+0x1c>)
    a408:	681b      	ldr	r3, [r3, #0]
    a40a:	4293      	cmp	r3, r2
    a40c:	d105      	bne.n	a41a <HardwareSerial3::write(unsigned long)+0x16>
    a40e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    a410:	b2c8      	uxtb	r0, r1
    a412:	f001 fe9b 	bl	c14c <serial3_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    a416:	2001      	movs	r0, #1
    a418:	bd10      	pop	{r4, pc}
    a41a:	b2c9      	uxtb	r1, r1
    a41c:	4718      	bx	r3
    a41e:	bf00      	nop
    a420:	0000a32d 	.word	0x0000a32d

0000a424 <HardwareSerial3::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    a424:	6803      	ldr	r3, [r0, #0]
    a426:	4a06      	ldr	r2, [pc, #24]	; (a440 <HardwareSerial3::write(long)+0x1c>)
    a428:	681b      	ldr	r3, [r3, #0]
    a42a:	4293      	cmp	r3, r2
    a42c:	d105      	bne.n	a43a <HardwareSerial3::write(long)+0x16>
    a42e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    a430:	b2c8      	uxtb	r0, r1
    a432:	f001 fe8b 	bl	c14c <serial3_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    a436:	2001      	movs	r0, #1
    a438:	bd10      	pop	{r4, pc}
    a43a:	b2c9      	uxtb	r1, r1
    a43c:	4718      	bx	r3
    a43e:	bf00      	nop
    a440:	0000a32d 	.word	0x0000a32d

0000a444 <HardwareSerial3::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    a444:	6803      	ldr	r3, [r0, #0]
    a446:	4a06      	ldr	r2, [pc, #24]	; (a460 <HardwareSerial3::write(unsigned int)+0x1c>)
    a448:	681b      	ldr	r3, [r3, #0]
    a44a:	4293      	cmp	r3, r2
    a44c:	d105      	bne.n	a45a <HardwareSerial3::write(unsigned int)+0x16>
    a44e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    a450:	b2c8      	uxtb	r0, r1
    a452:	f001 fe7b 	bl	c14c <serial3_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    a456:	2001      	movs	r0, #1
    a458:	bd10      	pop	{r4, pc}
    a45a:	b2c9      	uxtb	r1, r1
    a45c:	4718      	bx	r3
    a45e:	bf00      	nop
    a460:	0000a32d 	.word	0x0000a32d

0000a464 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
        return write(p, sizeof(buf) - (p - buf));
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    a464:	b570      	push	{r4, r5, r6, lr}
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a466:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    a468:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    a46a:	bf08      	it	eq
    a46c:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    a46e:	b3a1      	cbz	r1, a4da <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    a470:	f04f 0e21 	mov.w	lr, #33	; 0x21
    a474:	e002      	b.n	a47c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a476:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    a47a:	4629      	mov	r1, r5
			digit = n % base;
    a47c:	fbb1 f5f2 	udiv	r5, r1, r2
    a480:	fb02 1415 	mls	r4, r2, r5, r1
    a484:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a488:	2c09      	cmp	r4, #9
    a48a:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    a48e:	bf98      	it	ls
    a490:	fa5f fc84 	uxtbls.w	ip, r4
    a494:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    a498:	bf88      	it	hi
    a49a:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    a49e:	446c      	add	r4, sp
    a4a0:	bf88      	it	hi
    a4a2:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    a4a6:	4291      	cmp	r1, r2
			i--;
    a4a8:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a4ac:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    a4b0:	d2e1      	bcs.n	a476 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    a4b2:	b14b      	cbz	r3, a4c8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    a4b4:	f10e 3eff 	add.w	lr, lr, #4294967295
    a4b8:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    a4bc:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    a4c0:	446b      	add	r3, sp
    a4c2:	222d      	movs	r2, #45	; 0x2d
    a4c4:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a4c8:	6803      	ldr	r3, [r0, #0]
    a4ca:	a901      	add	r1, sp, #4
    a4cc:	685b      	ldr	r3, [r3, #4]
    a4ce:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    a4d2:	4471      	add	r1, lr
    a4d4:	4798      	blx	r3
}
    a4d6:	b00a      	add	sp, #40	; 0x28
    a4d8:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    a4da:	2230      	movs	r2, #48	; 0x30
    a4dc:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    a4e0:	f04f 0e21 	mov.w	lr, #33	; 0x21
    a4e4:	e7e5      	b.n	a4b2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    a4e6:	bf00      	nop

0000a4e8 <Print::print(long)>:
	if (n < 0) {
    a4e8:	2900      	cmp	r1, #0
		n = -n;
    a4ea:	bfba      	itte	lt
    a4ec:	4249      	neglt	r1, r1
		sign = '-';
    a4ee:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    a4f0:	2300      	movge	r3, #0
	if (base == 0) {
    a4f2:	220a      	movs	r2, #10
    a4f4:	f7ff bfb6 	b.w	a464 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000a4f8 <Print::println()>:
{
    a4f8:	b500      	push	{lr}
	return write(buf, 2);
    a4fa:	6803      	ldr	r3, [r0, #0]
{
    a4fc:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    a4fe:	f640 220d 	movw	r2, #2573	; 0xa0d
    a502:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    a506:	685b      	ldr	r3, [r3, #4]
    a508:	2202      	movs	r2, #2
    a50a:	a901      	add	r1, sp, #4
    a50c:	4798      	blx	r3
}
    a50e:	b003      	add	sp, #12
    a510:	f85d fb04 	ldr.w	pc, [sp], #4

0000a514 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    a514:	4b03      	ldr	r3, [pc, #12]	; (a524 <_write+0x10>)
    a516:	2802      	cmp	r0, #2
    a518:	bf88      	it	hi
    a51a:	4603      	movhi	r3, r0
    a51c:	4618      	mov	r0, r3
    a51e:	681b      	ldr	r3, [r3, #0]
    a520:	685b      	ldr	r3, [r3, #4]
    a522:	4718      	bx	r3
    a524:	1fff89f8 	.word	0x1fff89f8

0000a528 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    a528:	b932      	cbnz	r2, a538 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    a52a:	6803      	ldr	r3, [r0, #0]
{
    a52c:	b500      	push	{lr}
		return write((uint8_t)n);
    a52e:	681b      	ldr	r3, [r3, #0]
}
    a530:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    a534:	b2c9      	uxtb	r1, r1
    a536:	4718      	bx	r3
    a538:	f7ff bf94 	b.w	a464 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    a53c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000a540 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    a540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    a544:	4619      	mov	r1, r3
{
    a546:	b087      	sub	sp, #28
    a548:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    a54a:	4610      	mov	r0, r2
{
    a54c:	4614      	mov	r4, r2
    a54e:	469a      	mov	sl, r3
	if (isnan(number)) return print("nan");
    a550:	f004 f912 	bl	e778 <__aeabi_dcmpun>
{
    a554:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
	if (isnan(number)) return print("nan");
    a558:	2800      	cmp	r0, #0
    a55a:	f040 80a9 	bne.w	a6b0 <Print::printFloat(double, unsigned char)+0x170>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    a55e:	f02a 4500 	bic.w	r5, sl, #2147483648	; 0x80000000
    	if (isinf(number)) return print("inf");
    a562:	4b5f      	ldr	r3, [pc, #380]	; (a6e0 <Print::printFloat(double, unsigned char)+0x1a0>)
    a564:	4620      	mov	r0, r4
    a566:	4629      	mov	r1, r5
    a568:	f04f 32ff 	mov.w	r2, #4294967295
    a56c:	f004 f904 	bl	e778 <__aeabi_dcmpun>
    a570:	b948      	cbnz	r0, a586 <Print::printFloat(double, unsigned char)+0x46>
    a572:	4b5b      	ldr	r3, [pc, #364]	; (a6e0 <Print::printFloat(double, unsigned char)+0x1a0>)
    a574:	4620      	mov	r0, r4
    a576:	4629      	mov	r1, r5
    a578:	f04f 32ff 	mov.w	r2, #4294967295
    a57c:	f004 f8de 	bl	e73c <__aeabi_dcmple>
    a580:	2800      	cmp	r0, #0
    a582:	f000 808e 	beq.w	a6a2 <Print::printFloat(double, unsigned char)+0x162>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    a586:	4b57      	ldr	r3, [pc, #348]	; (a6e4 <Print::printFloat(double, unsigned char)+0x1a4>)
    a588:	4620      	mov	r0, r4
    a58a:	4651      	mov	r1, sl
    a58c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    a590:	f004 f8e8 	bl	e764 <__aeabi_dcmpgt>
    a594:	2800      	cmp	r0, #0
    a596:	d17b      	bne.n	a690 <Print::printFloat(double, unsigned char)+0x150>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    a598:	4b53      	ldr	r3, [pc, #332]	; (a6e8 <Print::printFloat(double, unsigned char)+0x1a8>)
    a59a:	4620      	mov	r0, r4
    a59c:	4651      	mov	r1, sl
    a59e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    a5a2:	f004 f8c1 	bl	e728 <__aeabi_dcmplt>
    a5a6:	2800      	cmp	r0, #0
    a5a8:	d172      	bne.n	a690 <Print::printFloat(double, unsigned char)+0x150>
	
	// Handle negative numbers
	if (number < 0.0) {
    a5aa:	4620      	mov	r0, r4
    a5ac:	4651      	mov	r1, sl
    a5ae:	2200      	movs	r2, #0
    a5b0:	2300      	movs	r3, #0
    a5b2:	f004 f8b9 	bl	e728 <__aeabi_dcmplt>
    a5b6:	4605      	mov	r5, r0
    a5b8:	2800      	cmp	r0, #0
    a5ba:	d175      	bne.n	a6a8 <Print::printFloat(double, unsigned char)+0x168>
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    a5bc:	2f00      	cmp	r7, #0
    a5be:	d07a      	beq.n	a6b6 <Print::printFloat(double, unsigned char)+0x176>
		rounding *= 0.1;
    a5c0:	f20f 1914 	addw	r9, pc, #276	; 0x114
    a5c4:	e9d9 8900 	ldrd	r8, r9, [r9]
	double rounding = 0.5;
    a5c8:	4948      	ldr	r1, [pc, #288]	; (a6ec <Print::printFloat(double, unsigned char)+0x1ac>)
	for (uint8_t i=0; i<digits; ++i) {
    a5ca:	f04f 0b00 	mov.w	fp, #0
	double rounding = 0.5;
    a5ce:	2000      	movs	r0, #0
		rounding *= 0.1;
    a5d0:	464b      	mov	r3, r9
	for (uint8_t i=0; i<digits; ++i) {
    a5d2:	f10b 0b01 	add.w	fp, fp, #1
		rounding *= 0.1;
    a5d6:	4642      	mov	r2, r8
    a5d8:	f00a fe7e 	bl	152d8 <__aeabi_dmul>
	for (uint8_t i=0; i<digits; ++i) {
    a5dc:	fa5f f38b 	uxtb.w	r3, fp
    a5e0:	42bb      	cmp	r3, r7
    a5e2:	d3f5      	bcc.n	a5d0 <Print::printFloat(double, unsigned char)+0x90>
	}
	number += rounding;
    a5e4:	4602      	mov	r2, r0
    a5e6:	460b      	mov	r3, r1
    a5e8:	4620      	mov	r0, r4
    a5ea:	4651      	mov	r1, sl
    a5ec:	f003 fe86 	bl	e2fc <__adddf3>
    a5f0:	4689      	mov	r9, r1
    a5f2:	4680      	mov	r8, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    a5f4:	f004 f8d6 	bl	e7a4 <__aeabi_d2uiz>
    a5f8:	2f0f      	cmp	r7, #15
    a5fa:	bf28      	it	cs
    a5fc:	270f      	movcs	r7, #15
    a5fe:	4682      	mov	sl, r0
	double remainder = number - (double)int_part;
    a600:	9701      	str	r7, [sp, #4]
    a602:	f003 ffb7 	bl	e574 <__aeabi_ui2d>
    a606:	4602      	mov	r2, r0
    a608:	460b      	mov	r3, r1
    a60a:	4640      	mov	r0, r8
    a60c:	4649      	mov	r1, r9
    a60e:	f003 fe73 	bl	e2f8 <__aeabi_dsub>
    a612:	462b      	mov	r3, r5
    a614:	4680      	mov	r8, r0
    a616:	4689      	mov	r9, r1
    a618:	220a      	movs	r2, #10
    a61a:	4651      	mov	r1, sl
    a61c:	4630      	mov	r0, r6
    a61e:	f7ff ff21 	bl	a464 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    a622:	232e      	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    a624:	464d      	mov	r5, r9
		buf[0] = '.';
    a626:	f88d 3008 	strb.w	r3, [sp, #8]
    a62a:	f10d 0209 	add.w	r2, sp, #9

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    a62e:	1e7b      	subs	r3, r7, #1
			remainder *= 10.0;
    a630:	f8df 90bc 	ldr.w	r9, [pc, #188]	; a6f0 <Print::printFloat(double, unsigned char)+0x1b0>
	double remainder = number - (double)int_part;
    a634:	4644      	mov	r4, r8
	if (base == 0) {
    a636:	4683      	mov	fp, r0
		while (digits-- > 0) {
    a638:	fa52 fa83 	uxtab	sl, r2, r3
    a63c:	af02      	add	r7, sp, #8
			remainder *= 10.0;
    a63e:	f04f 0800 	mov.w	r8, #0
    a642:	4642      	mov	r2, r8
    a644:	464b      	mov	r3, r9
    a646:	4620      	mov	r0, r4
    a648:	4629      	mov	r1, r5
    a64a:	f00a fe45 	bl	152d8 <__aeabi_dmul>
    a64e:	460d      	mov	r5, r1
    a650:	4604      	mov	r4, r0
			n = (uint8_t)(remainder);
    a652:	f004 f8a7 	bl	e7a4 <__aeabi_d2uiz>
    a656:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    a658:	f100 0330 	add.w	r3, r0, #48	; 0x30
    a65c:	f807 3f01 	strb.w	r3, [r7, #1]!
			remainder -= n; 
    a660:	f003 ff98 	bl	e594 <__aeabi_i2d>
    a664:	4602      	mov	r2, r0
    a666:	460b      	mov	r3, r1
    a668:	4620      	mov	r0, r4
    a66a:	4629      	mov	r1, r5
    a66c:	f003 fe44 	bl	e2f8 <__aeabi_dsub>
		while (digits-- > 0) {
    a670:	45ba      	cmp	sl, r7
			remainder -= n; 
    a672:	4604      	mov	r4, r0
    a674:	460d      	mov	r5, r1
		while (digits-- > 0) {
    a676:	d1e4      	bne.n	a642 <Print::printFloat(double, unsigned char)+0x102>
			buf[count++] = '0' + n;
    a678:	9a01      	ldr	r2, [sp, #4]
		}
		count += write(buf, count);
    a67a:	6833      	ldr	r3, [r6, #0]
			buf[count++] = '0' + n;
    a67c:	3201      	adds	r2, #1
		count += write(buf, count);
    a67e:	685b      	ldr	r3, [r3, #4]
    a680:	b2d2      	uxtb	r2, r2
    a682:	a902      	add	r1, sp, #8
    a684:	4630      	mov	r0, r6
    a686:	4798      	blx	r3
	}
	return count;
}
    a688:	4658      	mov	r0, fp
    a68a:	b007      	add	sp, #28
    a68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    a690:	6833      	ldr	r3, [r6, #0]
    a692:	4918      	ldr	r1, [pc, #96]	; (a6f4 <Print::printFloat(double, unsigned char)+0x1b4>)
    a694:	685b      	ldr	r3, [r3, #4]
    a696:	2203      	movs	r2, #3
    a698:	4630      	mov	r0, r6
    a69a:	b007      	add	sp, #28
    a69c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6a0:	4718      	bx	r3
    a6a2:	6833      	ldr	r3, [r6, #0]
    a6a4:	4914      	ldr	r1, [pc, #80]	; (a6f8 <Print::printFloat(double, unsigned char)+0x1b8>)
    a6a6:	e7f5      	b.n	a694 <Print::printFloat(double, unsigned char)+0x154>
		number = -number;
    a6a8:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
		sign = 1;
    a6ac:	2501      	movs	r5, #1
    a6ae:	e785      	b.n	a5bc <Print::printFloat(double, unsigned char)+0x7c>
    a6b0:	6833      	ldr	r3, [r6, #0]
    a6b2:	4912      	ldr	r1, [pc, #72]	; (a6fc <Print::printFloat(double, unsigned char)+0x1bc>)
    a6b4:	e7ee      	b.n	a694 <Print::printFloat(double, unsigned char)+0x154>
	number += rounding;
    a6b6:	4b0d      	ldr	r3, [pc, #52]	; (a6ec <Print::printFloat(double, unsigned char)+0x1ac>)
    a6b8:	2200      	movs	r2, #0
    a6ba:	4620      	mov	r0, r4
    a6bc:	4651      	mov	r1, sl
    a6be:	f003 fe1d 	bl	e2fc <__adddf3>
	unsigned long int_part = (unsigned long)number;
    a6c2:	f004 f86f 	bl	e7a4 <__aeabi_d2uiz>
    a6c6:	462b      	mov	r3, r5
    a6c8:	4601      	mov	r1, r0
    a6ca:	220a      	movs	r2, #10
    a6cc:	4630      	mov	r0, r6
}
    a6ce:	b007      	add	sp, #28
    a6d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6d4:	f7ff bec6 	b.w	a464 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    a6d8:	a0000000 	.word	0xa0000000
    a6dc:	3fb99999 	.word	0x3fb99999
    a6e0:	7fefffff 	.word	0x7fefffff
    a6e4:	41efffff 	.word	0x41efffff
    a6e8:	c1efffff 	.word	0xc1efffff
    a6ec:	3fe00000 	.word	0x3fe00000
    a6f0:	40240000 	.word	0x40240000
    a6f4:	00016ff4 	.word	0x00016ff4
    a6f8:	00016ff0 	.word	0x00016ff0
    a6fc:	00016fec 	.word	0x00016fec

0000a700 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    a700:	b570      	push	{r4, r5, r6, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a702:	4d0e      	ldr	r5, [pc, #56]	; (a73c <Stream::timedPeek()+0x3c>)
    a704:	b082      	sub	sp, #8
    a706:	682b      	ldr	r3, [r5, #0]
    a708:	9300      	str	r3, [sp, #0]
	return ret;
    a70a:	9e00      	ldr	r6, [sp, #0]
    a70c:	4604      	mov	r4, r0
    a70e:	e008      	b.n	a722 <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    a710:	f002 fd3e 	bl	d190 <yield>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a714:	682b      	ldr	r3, [r5, #0]
    a716:	9301      	str	r3, [sp, #4]
	return ret;
    a718:	9b01      	ldr	r3, [sp, #4]
  } while(millis() - startMillis < _timeout);
    a71a:	68a2      	ldr	r2, [r4, #8]
    a71c:	1b9b      	subs	r3, r3, r6
    a71e:	4293      	cmp	r3, r2
    a720:	d207      	bcs.n	a732 <Stream::timedPeek()+0x32>
    c = peek();
    a722:	6823      	ldr	r3, [r4, #0]
    a724:	4620      	mov	r0, r4
    a726:	699b      	ldr	r3, [r3, #24]
    a728:	4798      	blx	r3
    if (c >= 0) return c;
    a72a:	2800      	cmp	r0, #0
    a72c:	dbf0      	blt.n	a710 <Stream::timedPeek()+0x10>
  return -1;     // -1 indicates timeout
}
    a72e:	b002      	add	sp, #8
    a730:	bd70      	pop	{r4, r5, r6, pc}
  return -1;     // -1 indicates timeout
    a732:	f04f 30ff 	mov.w	r0, #4294967295
}
    a736:	b002      	add	sp, #8
    a738:	bd70      	pop	{r4, r5, r6, pc}
    a73a:	bf00      	nop
    a73c:	1fffba38 	.word	0x1fffba38

0000a740 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a742:	4604      	mov	r4, r0
    a744:	460d      	mov	r5, r1
int Stream::peekNextDigit()
    a746:	e006      	b.n	a756 <Stream::parseInt(char)+0x16>
    if (c == '-') return c;
    a748:	2b2d      	cmp	r3, #45	; 0x2d
    a74a:	d00f      	beq.n	a76c <Stream::parseInt(char)+0x2c>
    if (c >= '0' && c <= '9') return c;
    a74c:	2a09      	cmp	r2, #9
    a74e:	d90d      	bls.n	a76c <Stream::parseInt(char)+0x2c>
    read();  // discard non-numeric
    a750:	6823      	ldr	r3, [r4, #0]
    a752:	695b      	ldr	r3, [r3, #20]
    a754:	4798      	blx	r3
    c = timedPeek();
    a756:	4620      	mov	r0, r4
    a758:	f7ff ffd2 	bl	a700 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    a75c:	1e03      	subs	r3, r0, #0
    if (c >= '0' && c <= '9') return c;
    a75e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    a762:	4620      	mov	r0, r4
    if (c < 0) return c;  // timeout
    a764:	daf0      	bge.n	a748 <Stream::parseInt(char)+0x8>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    a766:	2700      	movs	r7, #0
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    a768:	4638      	mov	r0, r7
    a76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(c == skipChar)
    a76c:	2700      	movs	r7, #0
    a76e:	463e      	mov	r6, r7
    a770:	42ab      	cmp	r3, r5
    a772:	d00b      	beq.n	a78c <Stream::parseInt(char)+0x4c>
    else if(c == '-')
    a774:	2b2d      	cmp	r3, #45	; 0x2d
    a776:	d01c      	beq.n	a7b2 <Stream::parseInt(char)+0x72>
    else if(c >= '0' && c <= '9')        // is c a digit?
    a778:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    a77c:	2a09      	cmp	r2, #9
    a77e:	d805      	bhi.n	a78c <Stream::parseInt(char)+0x4c>
      value = value * 10 + c - '0';
    a780:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    a784:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    a788:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
    read();  // consume the character we got with peek
    a78c:	6823      	ldr	r3, [r4, #0]
    a78e:	4620      	mov	r0, r4
    a790:	695b      	ldr	r3, [r3, #20]
    a792:	4798      	blx	r3
    c = timedPeek();
    a794:	4620      	mov	r0, r4
    a796:	f7ff ffb3 	bl	a700 <Stream::timedPeek()>
  while( (c >= '0' && c <= '9') || c == skipChar );
    a79a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    a79e:	2a09      	cmp	r2, #9
    c = timedPeek();
    a7a0:	4603      	mov	r3, r0
  while( (c >= '0' && c <= '9') || c == skipChar );
    a7a2:	d9e5      	bls.n	a770 <Stream::parseInt(char)+0x30>
    a7a4:	42a8      	cmp	r0, r5
    a7a6:	d0f1      	beq.n	a78c <Stream::parseInt(char)+0x4c>
  if(isNegative)
    a7a8:	2e00      	cmp	r6, #0
    a7aa:	d0dd      	beq.n	a768 <Stream::parseInt(char)+0x28>
    value = -value;
    a7ac:	427f      	negs	r7, r7
}
    a7ae:	4638      	mov	r0, r7
    a7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      isNegative = true;
    a7b2:	2601      	movs	r6, #1
    a7b4:	e7ea      	b.n	a78c <Stream::parseInt(char)+0x4c>
    a7b6:	bf00      	nop

0000a7b8 <Stream::parseInt()>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    a7b8:	2101      	movs	r1, #1
    a7ba:	f7ff bfc1 	b.w	a740 <Stream::parseInt(char)>
    a7be:	bf00      	nop

0000a7c0 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    a7c0:	4b2a      	ldr	r3, [pc, #168]	; (a86c <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    a7c2:	4a2b      	ldr	r2, [pc, #172]	; (a870 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    a7c4:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a7c6:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    a7c8:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a7ca:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    a7cc:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a7ce:	4829      	ldr	r0, [pc, #164]	; (a874 <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    a7d0:	2b08      	cmp	r3, #8
    a7d2:	d034      	beq.n	a83e <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    a7d4:	2b0a      	cmp	r3, #10
    a7d6:	d020      	beq.n	a81a <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    a7d8:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    a7da:	4b27      	ldr	r3, [pc, #156]	; (a878 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    a7dc:	bf0c      	ite	eq
    a7de:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a7e0:	213d      	movne	r1, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a7e2:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a7e4:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a7e6:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a7e8:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a7ea:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    a7ec:	4b23      	ldr	r3, [pc, #140]	; (a87c <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a7ee:	4921      	ldr	r1, [pc, #132]	; (a874 <analog_init+0xb4>)
	if (analog_reference_internal) {
    a7f0:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a7f2:	4a21      	ldr	r2, [pc, #132]	; (a878 <analog_init+0xb8>)
	if (analog_reference_internal) {
    a7f4:	b1cb      	cbz	r3, a82a <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a7f6:	2301      	movs	r3, #1
    a7f8:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a7fa:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    a7fc:	4b20      	ldr	r3, [pc, #128]	; (a880 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    a7fe:	491d      	ldr	r1, [pc, #116]	; (a874 <analog_init+0xb4>)
	num = analog_num_average;
    a800:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    a802:	4a1d      	ldr	r2, [pc, #116]	; (a878 <analog_init+0xb8>)
	if (num <= 1) {
    a804:	2b01      	cmp	r3, #1
    a806:	d913      	bls.n	a830 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    a808:	2b04      	cmp	r3, #4
    a80a:	d81b      	bhi.n	a844 <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    a80c:	2384      	movs	r3, #132	; 0x84
    a80e:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    a810:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    a812:	4b1c      	ldr	r3, [pc, #112]	; (a884 <analog_init+0xc4>)
    a814:	2201      	movs	r2, #1
    a816:	701a      	strb	r2, [r3, #0]
}
    a818:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a81a:	4b17      	ldr	r3, [pc, #92]	; (a878 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a81c:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a81e:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a820:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a822:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a824:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a826:	60da      	str	r2, [r3, #12]
    a828:	e7e0      	b.n	a7ec <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    a82a:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    a82c:	6213      	str	r3, [r2, #32]
    a82e:	e7e5      	b.n	a7fc <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    a830:	2380      	movs	r3, #128	; 0x80
    a832:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    a834:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    a836:	4b13      	ldr	r3, [pc, #76]	; (a884 <analog_init+0xc4>)
    a838:	2201      	movs	r2, #1
    a83a:	701a      	strb	r2, [r3, #0]
}
    a83c:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a83e:	4b0e      	ldr	r3, [pc, #56]	; (a878 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a840:	2101      	movs	r1, #1
    a842:	e7ec      	b.n	a81e <analog_init+0x5e>
	} else if (num <= 8) {
    a844:	2b08      	cmp	r3, #8
    a846:	d806      	bhi.n	a856 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    a848:	2385      	movs	r3, #133	; 0x85
    a84a:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    a84c:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    a84e:	4b0d      	ldr	r3, [pc, #52]	; (a884 <analog_init+0xc4>)
    a850:	2201      	movs	r2, #1
    a852:	701a      	strb	r2, [r3, #0]
}
    a854:	4770      	bx	lr
	} else if (num <= 16) {
    a856:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    a858:	bf94      	ite	ls
    a85a:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    a85c:	2387      	movhi	r3, #135	; 0x87
    a85e:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    a860:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    a862:	4b08      	ldr	r3, [pc, #32]	; (a884 <analog_init+0xc4>)
    a864:	2201      	movs	r2, #1
    a866:	701a      	strb	r2, [r3, #0]
}
    a868:	4770      	bx	lr
    a86a:	bf00      	nop
    a86c:	40074000 	.word	0x40074000
    a870:	1fff88e0 	.word	0x1fff88e0
    a874:	4003b000 	.word	0x4003b000
    a878:	400bb000 	.word	0x400bb000
    a87c:	1fffba34 	.word	0x1fffba34
    a880:	1fff88e1 	.word	0x1fff88e1
    a884:	1fffba35 	.word	0x1fffba35

0000a888 <analogWriteDAC0>:
typedef int16_t __attribute__((__may_alias__)) aliased_int16_t;

void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    a888:	4a0b      	ldr	r2, [pc, #44]	; (a8b8 <analogWriteDAC0+0x30>)
	if (analog_reference_internal) {
    a88a:	490c      	ldr	r1, [pc, #48]	; (a8bc <analogWriteDAC0+0x34>)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    a88c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    a88e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    a892:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (analog_reference_internal) {
    a894:	780b      	ldrb	r3, [r1, #0]
    a896:	b14b      	cbz	r3, a8ac <analogWriteDAC0+0x24>
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    a898:	4b09      	ldr	r3, [pc, #36]	; (a8c0 <analogWriteDAC0+0x38>)
    a89a:	2280      	movs	r2, #128	; 0x80
    a89c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    a8a0:	4b07      	ldr	r3, [pc, #28]	; (a8c0 <analogWriteDAC0+0x38>)
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095
    a8a2:	f380 000c 	usat	r0, #12, r0
	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    a8a6:	b200      	sxth	r0, r0
    a8a8:	8018      	strh	r0, [r3, #0]
	if (val < 0) val = 0;
	else if (val > 4095) val = 4095;

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
#endif
}
    a8aa:	4770      	bx	lr
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    a8ac:	4b04      	ldr	r3, [pc, #16]	; (a8c0 <analogWriteDAC0+0x38>)
    a8ae:	22c0      	movs	r2, #192	; 0xc0
    a8b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    a8b4:	e7f4      	b.n	a8a0 <analogWriteDAC0+0x18>
    a8b6:	bf00      	nop
    a8b8:	40048000 	.word	0x40048000
    a8bc:	1fffba34 	.word	0x1fffba34
    a8c0:	400cc000 	.word	0x400cc000

0000a8c4 <eeprom_initialize>:
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    a8c4:	b510      	push	{r4, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    a8c6:	4b17      	ldr	r3, [pc, #92]	; (a924 <eeprom_initialize+0x60>)
    a8c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    a8ca:	b084      	sub	sp, #16
	uint16_t do_flash_cmd[] = {
    a8cc:	46ec      	mov	ip, sp
    a8ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    a8d2:	4b15      	ldr	r3, [pc, #84]	; (a928 <eeprom_initialize+0x64>)
    a8d4:	785a      	ldrb	r2, [r3, #1]
    a8d6:	0791      	lsls	r1, r2, #30
    a8d8:	d517      	bpl.n	a90a <eeprom_initialize+0x46>
		uint8_t stat = FTFL_FSTAT & 0x70;
    a8da:	781a      	ldrb	r2, [r3, #0]
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    a8dc:	4c12      	ldr	r4, [pc, #72]	; (a928 <eeprom_initialize+0x64>)
		if (stat) FTFL_FSTAT = stat;
    a8de:	f012 0270 	ands.w	r2, r2, #112	; 0x70
    a8e2:	bf18      	it	ne
    a8e4:	701a      	strbne	r2, [r3, #0]
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    a8e6:	2180      	movs	r1, #128	; 0x80
		FTFL_FCCOB3 = 0;
    a8e8:	2300      	movs	r3, #0
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    a8ea:	71e1      	strb	r1, [r4, #7]
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    a8ec:	2233      	movs	r2, #51	; 0x33
		FTFL_FCCOB3 = 0;
    a8ee:	7123      	strb	r3, [r4, #4]
		FTFL_FCCOB5 = EEPARTITION;
    a8f0:	2303      	movs	r3, #3
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    a8f2:	72e2      	strb	r2, [r4, #11]
		FTFL_FCCOB5 = EEPARTITION;
    a8f4:	72a3      	strb	r3, [r4, #10]
		__disable_irq();
    a8f6:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    a8f8:	f04c 0301 	orr.w	r3, ip, #1
    a8fc:	4620      	mov	r0, r4
    a8fe:	4798      	blx	r3
		__enable_irq();
    a900:	b662      	cpsie	i
		kinetis_hsrun_enable();
		status = FTFL_FSTAT;
    a902:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    a904:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    a908:	d109      	bne.n	a91e <eeprom_initialize+0x5a>
{
    a90a:	4b08      	ldr	r3, [pc, #32]	; (a92c <eeprom_initialize+0x68>)
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    a90c:	4906      	ldr	r1, [pc, #24]	; (a928 <eeprom_initialize+0x64>)
    a90e:	e001      	b.n	a914 <eeprom_initialize+0x50>
		if (++count > 200000) break;
    a910:	3b01      	subs	r3, #1
    a912:	d002      	beq.n	a91a <eeprom_initialize+0x56>
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    a914:	784a      	ldrb	r2, [r1, #1]
    a916:	07d2      	lsls	r2, r2, #31
    a918:	d5fa      	bpl.n	a910 <eeprom_initialize+0x4c>
	}
}
    a91a:	b004      	add	sp, #16
    a91c:	bd10      	pop	{r4, pc}
			FTFL_FSTAT = (status & 0x70);
    a91e:	7023      	strb	r3, [r4, #0]
}
    a920:	b004      	add	sp, #16
    a922:	bd10      	pop	{r4, pc}
    a924:	00016ff8 	.word	0x00016ff8
    a928:	40020000 	.word	0x40020000
    a92c:	00030d41 	.word	0x00030d41

0000a930 <eeprom_read_byte>:
#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    a930:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    a934:	d211      	bcs.n	a95a <eeprom_read_byte+0x2a>
{
    a936:	b510      	push	{r4, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    a938:	4b09      	ldr	r3, [pc, #36]	; (a960 <eeprom_read_byte+0x30>)
    a93a:	785b      	ldrb	r3, [r3, #1]
    a93c:	07db      	lsls	r3, r3, #31
    a93e:	4604      	mov	r4, r0
    a940:	d504      	bpl.n	a94c <eeprom_read_byte+0x1c>
	return FlexRAM[offset];
    a942:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    a946:	7820      	ldrb	r0, [r4, #0]
    a948:	b2c0      	uxtb	r0, r0
}
    a94a:	bd10      	pop	{r4, pc}
	return FlexRAM[offset];
    a94c:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    a950:	f7ff ffb8 	bl	a8c4 <eeprom_initialize>
	return FlexRAM[offset];
    a954:	7820      	ldrb	r0, [r4, #0]
    a956:	b2c0      	uxtb	r0, r0
}
    a958:	bd10      	pop	{r4, pc}
	if (offset >= EEPROM_SIZE) return 0;
    a95a:	2000      	movs	r0, #0
}
    a95c:	4770      	bx	lr
    a95e:	bf00      	nop
    a960:	40020000 	.word	0x40020000

0000a964 <eeprom_write_byte>:

void eeprom_write_byte(uint8_t *addr, uint8_t value)
{
	uint32_t offset = (uint32_t)addr;

	if (offset >= EEPROM_SIZE) return;
    a964:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    a968:	d21f      	bcs.n	a9aa <eeprom_write_byte+0x46>
{
    a96a:	b538      	push	{r3, r4, r5, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    a96c:	4b0f      	ldr	r3, [pc, #60]	; (a9ac <eeprom_write_byte+0x48>)
    a96e:	785b      	ldrb	r3, [r3, #1]
    a970:	07da      	lsls	r2, r3, #31
    a972:	4604      	mov	r4, r0
    a974:	460d      	mov	r5, r1
    a976:	d510      	bpl.n	a99a <eeprom_write_byte+0x36>
	if (FlexRAM[offset] != value) {
    a978:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    a97c:	7823      	ldrb	r3, [r4, #0]
    a97e:	42ab      	cmp	r3, r5
    a980:	d00a      	beq.n	a998 <eeprom_write_byte+0x34>
		kinetis_hsrun_disable();
		uint8_t stat = FTFL_FSTAT & 0x70;
    a982:	4a0a      	ldr	r2, [pc, #40]	; (a9ac <eeprom_write_byte+0x48>)
    a984:	7813      	ldrb	r3, [r2, #0]
		if (stat) FTFL_FSTAT = stat;
    a986:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    a98a:	bf18      	it	ne
    a98c:	7013      	strbne	r3, [r2, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    a98e:	4a07      	ldr	r2, [pc, #28]	; (a9ac <eeprom_write_byte+0x48>)
		FlexRAM[offset] = value;
    a990:	7025      	strb	r5, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    a992:	7853      	ldrb	r3, [r2, #1]
    a994:	07db      	lsls	r3, r3, #31
    a996:	d5fc      	bpl.n	a992 <eeprom_write_byte+0x2e>
		flexram_wait();
		kinetis_hsrun_enable();
	}
}
    a998:	bd38      	pop	{r3, r4, r5, pc}
	if (FlexRAM[offset] != value) {
    a99a:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    a99e:	f7ff ff91 	bl	a8c4 <eeprom_initialize>
	if (FlexRAM[offset] != value) {
    a9a2:	7823      	ldrb	r3, [r4, #0]
    a9a4:	42ab      	cmp	r3, r5
    a9a6:	d1ec      	bne.n	a982 <eeprom_write_byte+0x1e>
    a9a8:	e7f6      	b.n	a998 <eeprom_write_byte+0x34>
    a9aa:	4770      	bx	lr
    a9ac:	40020000 	.word	0x40020000

0000a9b0 <eeprom_write_block>:
void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint32_t offset = (uint32_t)addr;
	const uint8_t *src = (const uint8_t *)buf;

	if (offset >= EEPROM_SIZE) return;
    a9b0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    a9b4:	d276      	bcs.n	aaa4 <eeprom_write_block+0xf4>
{
    a9b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    a9b8:	4b3b      	ldr	r3, [pc, #236]	; (aaa8 <eeprom_write_block+0xf8>)
    a9ba:	785b      	ldrb	r3, [r3, #1]
    a9bc:	07db      	lsls	r3, r3, #31
    a9be:	460e      	mov	r6, r1
    a9c0:	4604      	mov	r4, r0
    a9c2:	4617      	mov	r7, r2
    a9c4:	460d      	mov	r5, r1
    a9c6:	d51f      	bpl.n	aa08 <eeprom_write_block+0x58>
	if (len >= EEPROM_SIZE) len = EEPROM_SIZE;
    a9c8:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
    a9cc:	4638      	mov	r0, r7
    a9ce:	bf28      	it	cs
    a9d0:	f44f 6000 	movcs.w	r0, #2048	; 0x800
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    a9d4:	1833      	adds	r3, r6, r0
    a9d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    a9da:	d212      	bcs.n	aa02 <eeprom_write_block+0x52>
	while (len > 0) {
    a9dc:	b187      	cbz	r7, aa00 <eeprom_write_block+0x50>
		} else {
			// write 8 bits
			uint8_t val8 = *src++;
			if (FlexRAM[offset] != val8) {
				kinetis_hsrun_disable();
				uint8_t stat = FTFL_FSTAT & 0x70;
    a9de:	4a32      	ldr	r2, [pc, #200]	; (aaa8 <eeprom_write_block+0xf8>)
		if (lsb == 0 && len >= 4) {
    a9e0:	f015 0303 	ands.w	r3, r5, #3
    a9e4:	d026      	beq.n	aa34 <eeprom_write_block+0x84>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    a9e6:	2b02      	cmp	r3, #2
    a9e8:	d011      	beq.n	aa0e <eeprom_write_block+0x5e>
			if (FlexRAM[offset] != val8) {
    a9ea:	f105 53a0 	add.w	r3, r5, #335544320	; 0x14000000
			uint8_t val8 = *src++;
    a9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
			if (FlexRAM[offset] != val8) {
    a9f2:	781e      	ldrb	r6, [r3, #0]
    a9f4:	428e      	cmp	r6, r1
    a9f6:	d137      	bne.n	aa68 <eeprom_write_block+0xb8>
				FlexRAM[offset] = val8;
				flexram_wait();
				kinetis_hsrun_enable();
			}
			offset++;
			len--;
    a9f8:	3801      	subs	r0, #1
			offset++;
    a9fa:	3501      	adds	r5, #1
	while (len > 0) {
    a9fc:	2800      	cmp	r0, #0
    a9fe:	d1ef      	bne.n	a9e0 <eeprom_write_block+0x30>
		}
	}
}
    aa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    aa02:	f5c6 6000 	rsb	r0, r6, #2048	; 0x800
	while (len > 0) {
    aa06:	e7ea      	b.n	a9de <eeprom_write_block+0x2e>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    aa08:	f7ff ff5c 	bl	a8c4 <eeprom_initialize>
    aa0c:	e7dc      	b.n	a9c8 <eeprom_write_block+0x18>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    aa0e:	2801      	cmp	r0, #1
    aa10:	d0eb      	beq.n	a9ea <eeprom_write_block+0x3a>
			val16 |= (*src++ << 8);
    aa12:	4621      	mov	r1, r4
			if (*(uint16_t *)(&FlexRAM[offset]) != val16) {
    aa14:	f105 56a0 	add.w	r6, r5, #335544320	; 0x14000000
    aa18:	7867      	ldrb	r7, [r4, #1]
    aa1a:	f811 3b02 	ldrb.w	r3, [r1], #2
    aa1e:	8834      	ldrh	r4, [r6, #0]
    aa20:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    aa24:	429c      	cmp	r4, r3
    aa26:	d129      	bne.n	aa7c <eeprom_write_block+0xcc>
			len -= 2;
    aa28:	3802      	subs	r0, #2
			offset += 2;
    aa2a:	3502      	adds	r5, #2
			val16 |= (*src++ << 8);
    aa2c:	460c      	mov	r4, r1
	while (len > 0) {
    aa2e:	2800      	cmp	r0, #0
    aa30:	d1d6      	bne.n	a9e0 <eeprom_write_block+0x30>
    aa32:	e7e5      	b.n	aa00 <eeprom_write_block+0x50>
		if (lsb == 0 && len >= 4) {
    aa34:	2803      	cmp	r0, #3
    aa36:	d9ea      	bls.n	aa0e <eeprom_write_block+0x5e>
			val32 |= (*src++ << 24);
    aa38:	4621      	mov	r1, r4
    aa3a:	f894 c001 	ldrb.w	ip, [r4, #1]
    aa3e:	f811 3b04 	ldrb.w	r3, [r1], #4
    aa42:	78a7      	ldrb	r7, [r4, #2]
    aa44:	78e6      	ldrb	r6, [r4, #3]
    aa46:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    aa4a:	f105 54a0 	add.w	r4, r5, #335544320	; 0x14000000
			val32 |= (*src++ << 24);
    aa4e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    aa52:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    aa56:	6826      	ldr	r6, [r4, #0]
    aa58:	429e      	cmp	r6, r3
    aa5a:	d119      	bne.n	aa90 <eeprom_write_block+0xe0>
			len -= 4;
    aa5c:	3804      	subs	r0, #4
			offset += 4;
    aa5e:	3504      	adds	r5, #4
			val32 |= (*src++ << 24);
    aa60:	460c      	mov	r4, r1
	while (len > 0) {
    aa62:	2800      	cmp	r0, #0
    aa64:	d1bc      	bne.n	a9e0 <eeprom_write_block+0x30>
    aa66:	e7cb      	b.n	aa00 <eeprom_write_block+0x50>
				uint8_t stat = FTFL_FSTAT & 0x70;
    aa68:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    aa6a:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    aa6e:	bf18      	it	ne
    aa70:	7016      	strbne	r6, [r2, #0]
				FlexRAM[offset] = val8;
    aa72:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    aa74:	7853      	ldrb	r3, [r2, #1]
    aa76:	07db      	lsls	r3, r3, #31
    aa78:	d5fc      	bpl.n	aa74 <eeprom_write_block+0xc4>
    aa7a:	e7bd      	b.n	a9f8 <eeprom_write_block+0x48>
				uint8_t stat = FTFL_FSTAT & 0x70;
    aa7c:	7814      	ldrb	r4, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    aa7e:	f014 0470 	ands.w	r4, r4, #112	; 0x70
    aa82:	bf18      	it	ne
    aa84:	7014      	strbne	r4, [r2, #0]
				*(uint16_t *)(&FlexRAM[offset]) = val16;
    aa86:	8033      	strh	r3, [r6, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    aa88:	7853      	ldrb	r3, [r2, #1]
    aa8a:	07dc      	lsls	r4, r3, #31
    aa8c:	d5fc      	bpl.n	aa88 <eeprom_write_block+0xd8>
    aa8e:	e7cb      	b.n	aa28 <eeprom_write_block+0x78>
				uint8_t stat = FTFL_FSTAT & 0x70;
    aa90:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    aa92:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    aa96:	bf18      	it	ne
    aa98:	7016      	strbne	r6, [r2, #0]
				*(uint32_t *)(&FlexRAM[offset]) = val32;
    aa9a:	6023      	str	r3, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    aa9c:	7853      	ldrb	r3, [r2, #1]
    aa9e:	07de      	lsls	r6, r3, #31
    aaa0:	d5fc      	bpl.n	aa9c <eeprom_write_block+0xec>
    aaa2:	e7db      	b.n	aa5c <eeprom_write_block+0xac>
    aaa4:	4770      	bx	lr
    aaa6:	bf00      	nop
    aaa8:	40020000 	.word	0x40020000

0000aaac <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    aaac:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    aaae:	f7fd fec9 	bl	8844 <setup>
	while (1) {
		loop();
    aab2:	f7fc ffc3 	bl	7a3c <loop>
		yield();
    aab6:	f002 fb6b 	bl	d190 <yield>
	while (1) {
    aaba:	e7fa      	b.n	aab2 <main+0x6>

0000aabc <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    aabc:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    aabe:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    aac2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    aac6:	d16f      	bne.n	aba8 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    aac8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    aaca:	d341      	bcc.n	ab50 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    aacc:	f851 3b04 	ldr.w	r3, [r1], #4
    aad0:	f840 3b04 	str.w	r3, [r0], #4
    aad4:	f851 3b04 	ldr.w	r3, [r1], #4
    aad8:	f840 3b04 	str.w	r3, [r0], #4
    aadc:	f851 3b04 	ldr.w	r3, [r1], #4
    aae0:	f840 3b04 	str.w	r3, [r0], #4
    aae4:	f851 3b04 	ldr.w	r3, [r1], #4
    aae8:	f840 3b04 	str.w	r3, [r0], #4
    aaec:	f851 3b04 	ldr.w	r3, [r1], #4
    aaf0:	f840 3b04 	str.w	r3, [r0], #4
    aaf4:	f851 3b04 	ldr.w	r3, [r1], #4
    aaf8:	f840 3b04 	str.w	r3, [r0], #4
    aafc:	f851 3b04 	ldr.w	r3, [r1], #4
    ab00:	f840 3b04 	str.w	r3, [r0], #4
    ab04:	f851 3b04 	ldr.w	r3, [r1], #4
    ab08:	f840 3b04 	str.w	r3, [r0], #4
    ab0c:	f851 3b04 	ldr.w	r3, [r1], #4
    ab10:	f840 3b04 	str.w	r3, [r0], #4
    ab14:	f851 3b04 	ldr.w	r3, [r1], #4
    ab18:	f840 3b04 	str.w	r3, [r0], #4
    ab1c:	f851 3b04 	ldr.w	r3, [r1], #4
    ab20:	f840 3b04 	str.w	r3, [r0], #4
    ab24:	f851 3b04 	ldr.w	r3, [r1], #4
    ab28:	f840 3b04 	str.w	r3, [r0], #4
    ab2c:	f851 3b04 	ldr.w	r3, [r1], #4
    ab30:	f840 3b04 	str.w	r3, [r0], #4
    ab34:	f851 3b04 	ldr.w	r3, [r1], #4
    ab38:	f840 3b04 	str.w	r3, [r0], #4
    ab3c:	f851 3b04 	ldr.w	r3, [r1], #4
    ab40:	f840 3b04 	str.w	r3, [r0], #4
    ab44:	f851 3b04 	ldr.w	r3, [r1], #4
    ab48:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    ab4c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    ab4e:	d2bd      	bcs.n	aacc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    ab50:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    ab52:	d311      	bcc.n	ab78 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    ab54:	f851 3b04 	ldr.w	r3, [r1], #4
    ab58:	f840 3b04 	str.w	r3, [r0], #4
    ab5c:	f851 3b04 	ldr.w	r3, [r1], #4
    ab60:	f840 3b04 	str.w	r3, [r0], #4
    ab64:	f851 3b04 	ldr.w	r3, [r1], #4
    ab68:	f840 3b04 	str.w	r3, [r0], #4
    ab6c:	f851 3b04 	ldr.w	r3, [r1], #4
    ab70:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    ab74:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    ab76:	d2ed      	bcs.n	ab54 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    ab78:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    ab7a:	d305      	bcc.n	ab88 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    ab7c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    ab80:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    ab84:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    ab86:	d2f9      	bcs.n	ab7c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    ab88:	3204      	adds	r2, #4
	beq	.Ldone
    ab8a:	d00a      	beq.n	aba2 <memcpy+0xe6>

	lsls	r2, r2, #31
    ab8c:	07d2      	lsls	r2, r2, #31
	itt ne
    ab8e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    ab90:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    ab94:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    ab98:	d303      	bcc.n	aba2 <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    ab9a:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    ab9c:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    ab9e:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    aba0:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    aba2:	bc01      	pop	{r0}
#endif
	bx	lr
    aba4:	4770      	bx	lr
    aba6:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    aba8:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    abaa:	d34a      	bcc.n	ac42 <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    abac:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    abb0:	d011      	beq.n	abd6 <memcpy+0x11a>

	rsb	r3, #4
    abb2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    abb6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    abb8:	07db      	lsls	r3, r3, #31
	itt ne
    abba:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    abbc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    abc0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    abc4:	d307      	bcc.n	abd6 <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    abc6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    abca:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    abce:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    abd2:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    abd6:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    abda:	f43f af75 	beq.w	aac8 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    abde:	b430      	push	{r4, r5}
	subs	r2, #4
    abe0:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    abe2:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    abe4:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    abe8:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    abec:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    abee:	d019      	beq.n	ac24 <memcpy+0x168>
	cmp	r3, #3
    abf0:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    abf2:	d00b      	beq.n	ac0c <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    abf4:	0a24      	lsrs	r4, r4, #8
    abf6:	f851 3b04 	ldr.w	r3, [r1], #4
    abfa:	061d      	lsls	r5, r3, #24
    abfc:	ea44 0405 	orr.w	r4, r4, r5
    ac00:	f840 4b04 	str.w	r4, [r0], #4
    ac04:	461c      	mov	r4, r3
    ac06:	3a04      	subs	r2, #4
    ac08:	d2f4      	bcs.n	abf4 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    ac0a:	e016      	b.n	ac3a <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    ac0c:	0e24      	lsrs	r4, r4, #24
    ac0e:	f851 3b04 	ldr.w	r3, [r1], #4
    ac12:	021d      	lsls	r5, r3, #8
    ac14:	ea44 0405 	orr.w	r4, r4, r5
    ac18:	f840 4b04 	str.w	r4, [r0], #4
    ac1c:	461c      	mov	r4, r3
    ac1e:	3a04      	subs	r2, #4
    ac20:	d2f4      	bcs.n	ac0c <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    ac22:	e00a      	b.n	ac3a <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    ac24:	0c24      	lsrs	r4, r4, #16
    ac26:	f851 3b04 	ldr.w	r3, [r1], #4
    ac2a:	041d      	lsls	r5, r3, #16
    ac2c:	ea44 0405 	orr.w	r4, r4, r5
    ac30:	f840 4b04 	str.w	r4, [r0], #4
    ac34:	461c      	mov	r4, r3
    ac36:	3a04      	subs	r2, #4
    ac38:	d2f4      	bcs.n	ac24 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    ac3a:	3204      	adds	r2, #4
	subs	r1, ip
    ac3c:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    ac40:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    ac42:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    ac44:	d3a0      	bcc.n	ab88 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    ac46:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    ac48:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    ac4c:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    ac50:	d2f9      	bcs.n	ac46 <memcpy+0x18a>

	ldrb	r3, [r1]
    ac52:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    ac54:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    ac56:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    ac58:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    ac5a:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    ac5c:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    ac5e:	bc01      	pop	{r0}
#endif
	bx	lr
    ac60:	4770      	bx	lr
    ac62:	bf00      	nop

0000ac64 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    ac64:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    ac66:	4c0f      	ldr	r4, [pc, #60]	; (aca4 <fault_isr+0x40>)
    ac68:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ac6a:	0358      	lsls	r0, r3, #13
    ac6c:	d40d      	bmi.n	ac8a <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    ac6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ac70:	0559      	lsls	r1, r3, #21
    ac72:	d40f      	bmi.n	ac94 <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    ac74:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ac76:	051a      	lsls	r2, r3, #20
    ac78:	d411      	bmi.n	ac9e <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    ac7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ac7c:	04db      	lsls	r3, r3, #19
    ac7e:	d5f3      	bpl.n	ac68 <fault_isr+0x4>
    ac80:	f001 fb38 	bl	c2f4 <uart2_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    ac84:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ac86:	0358      	lsls	r0, r3, #13
    ac88:	d5f1      	bpl.n	ac6e <fault_isr+0xa>
    ac8a:	f001 fcb3 	bl	c5f4 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    ac8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ac90:	0559      	lsls	r1, r3, #21
    ac92:	d5ef      	bpl.n	ac74 <fault_isr+0x10>
    ac94:	f000 f808 	bl	aca8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    ac98:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ac9a:	051a      	lsls	r2, r3, #20
    ac9c:	d5ed      	bpl.n	ac7a <fault_isr+0x16>
    ac9e:	f000 ff95 	bl	bbcc <uart1_status_isr>
    aca2:	e7ea      	b.n	ac7a <fault_isr+0x16>
    aca4:	40048000 	.word	0x40048000

0000aca8 <unused_isr>:
	}
}

void unused_isr(void)
{
    aca8:	b508      	push	{r3, lr}
	fault_isr();
    acaa:	f7ff ffdb 	bl	ac64 <fault_isr>
    acae:	bf00      	nop

0000acb0 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    acb0:	4b01      	ldr	r3, [pc, #4]	; (acb8 <startup_early_hook+0x8>)
    acb2:	2210      	movs	r2, #16
    acb4:	801a      	strh	r2, [r3, #0]
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
    acb6:	4770      	bx	lr
    acb8:	40052000 	.word	0x40052000

0000acbc <startup_late_hook>:
static void startup_default_late_hook(void) {}
    acbc:	4770      	bx	lr
    acbe:	bf00      	nop

0000acc0 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    acc0:	4a09      	ldr	r2, [pc, #36]	; (ace8 <_sbrk+0x28>)
{
    acc2:	b508      	push	{r3, lr}
    acc4:	4603      	mov	r3, r0
	prev = __brkval;
    acc6:	6810      	ldr	r0, [r2, #0]
	if (incr != 0) {
    acc8:	b133      	cbz	r3, acd8 <_sbrk+0x18>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    acca:	4669      	mov	r1, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    accc:	4403      	add	r3, r0
    acce:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    acd2:	428b      	cmp	r3, r1
    acd4:	d201      	bcs.n	acda <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    acd6:	6013      	str	r3, [r2, #0]
	}
	return prev;
}
    acd8:	bd08      	pop	{r3, pc}
			errno = ENOMEM;
    acda:	f005 f819 	bl	fd10 <__errno>
    acde:	230c      	movs	r3, #12
    ace0:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    ace2:	f04f 30ff 	mov.w	r0, #4294967295
}
    ace6:	bd08      	pop	{r3, pc}
    ace8:	1fff88e4 	.word	0x1fff88e4

0000acec <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    acec:	2000      	movs	r0, #0
    acee:	4770      	bx	lr

0000acf0 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    acf0:	f04f 30ff 	mov.w	r0, #4294967295
    acf4:	4770      	bx	lr
    acf6:	bf00      	nop

0000acf8 <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    acf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    acfc:	604b      	str	r3, [r1, #4]
	return 0;
}
    acfe:	2000      	movs	r0, #0
    ad00:	4770      	bx	lr
    ad02:	bf00      	nop

0000ad04 <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    ad04:	2001      	movs	r0, #1
    ad06:	4770      	bx	lr

0000ad08 <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    ad08:	f04f 30ff 	mov.w	r0, #4294967295
    ad0c:	4770      	bx	lr
    ad0e:	bf00      	nop

0000ad10 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    ad10:	e7fe      	b.n	ad10 <abort>
    ad12:	Address 0x0000ad12 is out of bounds.


0000ad14 <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    ad14:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    ad18:	b9cb      	cbnz	r3, ad4e <nvic_execution_priority+0x3a>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ad1a:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    ad1e:	b9a0      	cbnz	r0, ad4a <nvic_execution_priority+0x36>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    ad20:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    ad24:	b943      	cbnz	r3, ad38 <nvic_execution_priority+0x24>
	uint32_t priority=256;
    ad26:	f44f 7080 	mov.w	r0, #256	; 0x100
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    ad2a:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    ad2e:	b15b      	cbz	r3, ad48 <nvic_execution_priority+0x34>
    ad30:	4298      	cmp	r0, r3
    ad32:	bf28      	it	cs
    ad34:	4618      	movcs	r0, r3
	return priority;
    ad36:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    ad38:	2b0f      	cmp	r3, #15
    ad3a:	d9f6      	bls.n	ad2a <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    ad3c:	4a05      	ldr	r2, [pc, #20]	; (ad54 <nvic_execution_priority+0x40>)
    ad3e:	5cd0      	ldrb	r0, [r2, r3]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    ad40:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    ad44:	2b00      	cmp	r3, #0
    ad46:	d1f3      	bne.n	ad30 <nvic_execution_priority+0x1c>
}
    ad48:	4770      	bx	lr
	if (primask) return 0;
    ad4a:	4618      	mov	r0, r3
}
    ad4c:	4770      	bx	lr
	if (faultmask) return -1;
    ad4e:	f04f 30ff 	mov.w	r0, #4294967295
    ad52:	4770      	bx	lr
    ad54:	e000e3f0 	.word	0xe000e3f0

0000ad58 <operator new(unsigned int)>:

#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    ad58:	f004 b874 	b.w	ee44 <malloc>

0000ad5c <operator new[](unsigned int)>:
    ad5c:	f004 b872 	b.w	ee44 <malloc>

0000ad60 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    ad60:	f101 3cff 	add.w	ip, r1, #4294967295
{
    ad64:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    ad66:	4665      	mov	r5, ip
	int i=0, j;
    ad68:	2400      	movs	r4, #0
    ad6a:	e001      	b.n	ad70 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    ad6c:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    ad6e:	3401      	adds	r4, #1
		digit = val % radix;
    ad70:	fbb0 fef2 	udiv	lr, r0, r2
    ad74:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ad78:	2b09      	cmp	r3, #9
    ad7a:	f103 0630 	add.w	r6, r3, #48	; 0x30
    ad7e:	bf8a      	itet	hi
    ad80:	3337      	addhi	r3, #55	; 0x37
    ad82:	b2f3      	uxtbls	r3, r6
    ad84:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    ad86:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ad88:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    ad8c:	d2ee      	bcs.n	ad6c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    ad8e:	1c63      	adds	r3, r4, #1
    ad90:	2200      	movs	r2, #0
    ad92:	54ca      	strb	r2, [r1, r3]
    ad94:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    ad96:	b17c      	cbz	r4, adb8 <ultoa+0x58>
		t = buf[j];
    ad98:	4662      	mov	r2, ip
    ad9a:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    ad9e:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    ada2:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    ada6:	eba1 030c 	sub.w	r3, r1, ip
    adaa:	3202      	adds	r2, #2
    adac:	3b01      	subs	r3, #1
    adae:	1a52      	subs	r2, r2, r1
    adb0:	4423      	add	r3, r4
    adb2:	429a      	cmp	r2, r3
		buf[i] = t;
    adb4:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    adb6:	dbef      	blt.n	ad98 <ultoa+0x38>
	}
	return buf;
}
    adb8:	4608      	mov	r0, r1
    adba:	bd70      	pop	{r4, r5, r6, pc}

0000adbc <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    adbc:	4770      	bx	lr
    adbe:	bf00      	nop

0000adc0 <digitalWrite.part.0>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    adc0:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    adc2:	4b0f      	ldr	r3, [pc, #60]	; (ae00 <digitalWrite.part.0+0x40>)
    adc4:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    adc8:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    adcc:	b12c      	cbz	r4, adda <digitalWrite.part.0+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    adce:	2301      	movs	r3, #1
		if (val) {
    add0:	b191      	cbz	r1, adf8 <digitalWrite.part.0+0x38>
			*portSetRegister(pin) = 1;
    add2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    add6:	bc10      	pop	{r4}
    add8:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    adda:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    adde:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    ade0:	681a      	ldr	r2, [r3, #0]
		if (val) {
    ade2:	b921      	cbnz	r1, adee <digitalWrite.part.0+0x2e>
			*config &= ~(PORT_PCR_PE);
    ade4:	f022 0202 	bic.w	r2, r2, #2
}
    ade8:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    adea:	601a      	str	r2, [r3, #0]
}
    adec:	4770      	bx	lr
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    adee:	f042 0203 	orr.w	r2, r2, #3
}
    adf2:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    adf4:	601a      	str	r2, [r3, #0]
}
    adf6:	4770      	bx	lr
			*portClearRegister(pin) = 1;
    adf8:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    adfc:	bc10      	pop	{r4}
    adfe:	4770      	bx	lr
    ae00:	0001701c 	.word	0x0001701c

0000ae04 <attachInterrupt>:
	if (pin >= CORE_NUM_DIGITAL) return;
    ae04:	2821      	cmp	r0, #33	; 0x21
    ae06:	d835      	bhi.n	ae74 <attachInterrupt+0x70>
	switch (mode) {
    ae08:	2a04      	cmp	r2, #4
    ae0a:	d833      	bhi.n	ae74 <attachInterrupt+0x70>
{
    ae0c:	b430      	push	{r4, r5}
	mask = (mask << 16) | 0x01000000;
    ae0e:	4b2a      	ldr	r3, [pc, #168]	; (aeb8 <attachInterrupt+0xb4>)
	config = portConfigRegister(pin);
    ae10:	4d2a      	ldr	r5, [pc, #168]	; (aebc <attachInterrupt+0xb8>)
	mask = (mask << 16) | 0x01000000;
    ae12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	config = portConfigRegister(pin);
    ae16:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
	mask = (mask << 16) | 0x01000000;
    ae1a:	041b      	lsls	r3, r3, #16
	config = portConfigRegister(pin);
    ae1c:	6854      	ldr	r4, [r2, #4]
	if ((*config & 0x00000700) == 0) {
    ae1e:	6822      	ldr	r2, [r4, #0]
    ae20:	f412 62e0 	ands.w	r2, r2, #1792	; 0x700
    ae24:	d039      	beq.n	ae9a <attachInterrupt+0x96>
	_VectorsRam[irq + 16] = function;
    ae26:	4a26      	ldr	r2, [pc, #152]	; (aec0 <attachInterrupt+0xbc>)
    ae28:	4826      	ldr	r0, [pc, #152]	; (aec4 <attachInterrupt+0xc0>)
    ae2a:	f8c2 019c 	str.w	r0, [r2, #412]	; 0x19c
    ae2e:	4826      	ldr	r0, [pc, #152]	; (aec8 <attachInterrupt+0xc4>)
    ae30:	f8c2 01a0 	str.w	r0, [r2, #416]	; 0x1a0
    ae34:	4825      	ldr	r0, [pc, #148]	; (aecc <attachInterrupt+0xc8>)
    ae36:	f8c2 01a4 	str.w	r0, [r2, #420]	; 0x1a4
    ae3a:	4825      	ldr	r0, [pc, #148]	; (aed0 <attachInterrupt+0xcc>)
    ae3c:	f8c2 01a8 	str.w	r0, [r2, #424]	; 0x1a8
    ae40:	4824      	ldr	r0, [pc, #144]	; (aed4 <attachInterrupt+0xd0>)
    ae42:	f8c2 01ac 	str.w	r0, [r2, #428]	; 0x1ac
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    ae46:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
    ae4a:	f5a2 2092 	sub.w	r0, r2, #299008	; 0x49000
    ae4e:	287c      	cmp	r0, #124	; 0x7c
    ae50:	d811      	bhi.n	ae76 <attachInterrupt+0x72>
    ae52:	4821      	ldr	r0, [pc, #132]	; (aed8 <attachInterrupt+0xd4>)
	__disable_irq();
    ae54:	b672      	cpsid	i
	cfg = *config;
    ae56:	6822      	ldr	r2, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    ae58:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
	*config = cfg;
    ae5c:	6022      	str	r2, [r4, #0]
    ae5e:	4313      	orrs	r3, r2
	return (v % 128) / 4;
    ae60:	f3c4 0284 	ubfx	r2, r4, #2, #5
	cfg |= mask;
    ae64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	isr_table[pin_index] = function;	// set the function pointer
    ae68:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	*config = cfg;			// enable the new interrupt
    ae6c:	6023      	str	r3, [r4, #0]
	__enable_irq();
    ae6e:	b662      	cpsie	i
}
    ae70:	bc30      	pop	{r4, r5}
    ae72:	4770      	bx	lr
    ae74:	4770      	bx	lr
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    ae76:	f5a2 2094 	sub.w	r0, r2, #303104	; 0x4a000
    ae7a:	287c      	cmp	r0, #124	; 0x7c
    ae7c:	d915      	bls.n	aeaa <attachInterrupt+0xa6>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    ae7e:	f5a2 2096 	sub.w	r0, r2, #307200	; 0x4b000
    ae82:	287c      	cmp	r0, #124	; 0x7c
    ae84:	d913      	bls.n	aeae <attachInterrupt+0xaa>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    ae86:	f5a2 2098 	sub.w	r0, r2, #311296	; 0x4c000
    ae8a:	287c      	cmp	r0, #124	; 0x7c
    ae8c:	d911      	bls.n	aeb2 <attachInterrupt+0xae>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    ae8e:	f5a2 229a 	sub.w	r2, r2, #315392	; 0x4d000
    ae92:	2a7c      	cmp	r2, #124	; 0x7c
    ae94:	d8ec      	bhi.n	ae70 <attachInterrupt+0x6c>
    ae96:	4811      	ldr	r0, [pc, #68]	; (aedc <attachInterrupt+0xd8>)
    ae98:	e7dc      	b.n	ae54 <attachInterrupt+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    ae9a:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
    ae9e:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    aea2:	f44f 7280 	mov.w	r2, #256	; 0x100
    aea6:	6022      	str	r2, [r4, #0]
    aea8:	e7bd      	b.n	ae26 <attachInterrupt+0x22>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    aeaa:	480d      	ldr	r0, [pc, #52]	; (aee0 <attachInterrupt+0xdc>)
    aeac:	e7d2      	b.n	ae54 <attachInterrupt+0x50>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    aeae:	480d      	ldr	r0, [pc, #52]	; (aee4 <attachInterrupt+0xe0>)
    aeb0:	e7d0      	b.n	ae54 <attachInterrupt+0x50>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    aeb2:	480d      	ldr	r0, [pc, #52]	; (aee8 <attachInterrupt+0xe4>)
    aeb4:	e7ce      	b.n	ae54 <attachInterrupt+0x50>
    aeb6:	bf00      	nop
    aeb8:	00017008 	.word	0x00017008
    aebc:	0001701c 	.word	0x0001701c
    aec0:	1fff8200 	.word	0x1fff8200
    aec4:	1fff87f1 	.word	0x1fff87f1
    aec8:	1fff87bd 	.word	0x1fff87bd
    aecc:	1fff8789 	.word	0x1fff8789
    aed0:	1fff8755 	.word	0x1fff8755
    aed4:	1fff8721 	.word	0x1fff8721
    aed8:	1fff88ec 	.word	0x1fff88ec
    aedc:	1fff89c4 	.word	0x1fff89c4
    aee0:	1fff8924 	.word	0x1fff8924
    aee4:	1fff8974 	.word	0x1fff8974
    aee8:	1fff89a4 	.word	0x1fff89a4

0000aeec <rtc_set>:
	RTC_SR = 0;
    aeec:	4b03      	ldr	r3, [pc, #12]	; (aefc <rtc_set+0x10>)
    aeee:	2200      	movs	r2, #0
	RTC_SR = RTC_SR_TCE;
    aef0:	2110      	movs	r1, #16
	RTC_SR = 0;
    aef2:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    aef4:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    aef6:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    aef8:	6159      	str	r1, [r3, #20]
}
    aefa:	4770      	bx	lr
    aefc:	4003d000 	.word	0x4003d000

0000af00 <startup_middle_hook>:
static void startup_default_middle_hook(void) {}
    af00:	4770      	bx	lr
    af02:	bf00      	nop

0000af04 <_init_Teensyduino_internal_>:
{
    af04:	b5f0      	push	{r4, r5, r6, r7, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    af06:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    af0a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    af0e:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    af12:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    af16:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    af1a:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    af1e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_CNT = 0;
    af22:	4a1d      	ldr	r2, [pc, #116]	; (af98 <_init_Teensyduino_internal_+0x94>)
	FTM1_CNT = 0;
    af24:	481d      	ldr	r0, [pc, #116]	; (af9c <_init_Teensyduino_internal_+0x98>)
	FTM2_CNT = 0;
    af26:	491e      	ldr	r1, [pc, #120]	; (afa0 <_init_Teensyduino_internal_+0x9c>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    af28:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
    af2c:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    af30:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    af32:	2700      	movs	r7, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    af34:	f64b 76ff 	movw	r6, #49151	; 0xbfff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    af38:	2509      	movs	r5, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    af3a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    af3e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
{
    af42:	b083      	sub	sp, #12
	FTM0_CNT = 0;
    af44:	6057      	str	r7, [r2, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    af46:	6096      	str	r6, [r2, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    af48:	60d3      	str	r3, [r2, #12]
	FTM0_C1SC = 0x28;
    af4a:	6153      	str	r3, [r2, #20]
	FTM0_C2SC = 0x28;
    af4c:	61d3      	str	r3, [r2, #28]
	FTM0_C3SC = 0x28;
    af4e:	6253      	str	r3, [r2, #36]	; 0x24
	FTM0_C4SC = 0x28;
    af50:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    af52:	6353      	str	r3, [r2, #52]	; 0x34
	FTM0_C6SC = 0x28;
    af54:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    af56:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    af58:	6015      	str	r5, [r2, #0]
	FTM1_CNT = 0;
    af5a:	6047      	str	r7, [r0, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    af5c:	6086      	str	r6, [r0, #8]
	FTM1_C0SC = 0x28;
    af5e:	60c3      	str	r3, [r0, #12]
	FTM1_C1SC = 0x28;
    af60:	6143      	str	r3, [r0, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    af62:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    af64:	604f      	str	r7, [r1, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    af66:	608e      	str	r6, [r1, #8]
	FTM2_C0SC = 0x28;
    af68:	60cb      	str	r3, [r1, #12]
	FTM2_C1SC = 0x28;
    af6a:	614b      	str	r3, [r1, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    af6c:	600d      	str	r5, [r1, #0]
	analog_init();
    af6e:	f7ff fc27 	bl	a7c0 <analog_init>
	startup_middle_hook();
    af72:	f7ff ffc5 	bl	af00 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    af76:	4c0b      	ldr	r4, [pc, #44]	; (afa4 <_init_Teensyduino_internal_+0xa0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    af78:	6823      	ldr	r3, [r4, #0]
    af7a:	9300      	str	r3, [sp, #0]
	return ret;
    af7c:	9b00      	ldr	r3, [sp, #0]
    af7e:	2b13      	cmp	r3, #19
    af80:	d9fa      	bls.n	af78 <_init_Teensyduino_internal_+0x74>
	usb_init();
    af82:	f001 fef1 	bl	cd68 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    af86:	6823      	ldr	r3, [r4, #0]
    af88:	9301      	str	r3, [sp, #4]
	return ret;
    af8a:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    af8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    af90:	d3f9      	bcc.n	af86 <_init_Teensyduino_internal_+0x82>
}
    af92:	b003      	add	sp, #12
    af94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af96:	bf00      	nop
    af98:	40038000 	.word	0x40038000
    af9c:	40039000 	.word	0x40039000
    afa0:	400b8000 	.word	0x400b8000
    afa4:	1fffba38 	.word	0x1fffba38

0000afa8 <analogWrite>:
	if (pin == A14) {
    afa8:	2828      	cmp	r0, #40	; 0x28
		uint8_t res = analog_write_res;
    afaa:	4b7f      	ldr	r3, [pc, #508]	; (b1a8 <analogWrite+0x200>)
	if (pin == A14) {
    afac:	d036      	beq.n	b01c <analogWrite+0x74>
	if (val <= 0) {
    afae:	2900      	cmp	r1, #0
	max = 1 << analog_write_res;
    afb0:	781b      	ldrb	r3, [r3, #0]
	if (val <= 0) {
    afb2:	dd3f      	ble.n	b034 <analogWrite+0x8c>
	max = 1 << analog_write_res;
    afb4:	2201      	movs	r2, #1
    afb6:	fa02 fc03 	lsl.w	ip, r2, r3
	} else if (val >= max) {
    afba:	4561      	cmp	r1, ip
{
    afbc:	b510      	push	{r4, lr}
	} else if (val >= max) {
    afbe:	d254      	bcs.n	b06a <analogWrite+0xc2>
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    afc0:	1ec2      	subs	r2, r0, #3
    afc2:	2a01      	cmp	r2, #1
    afc4:	d970      	bls.n	b0a8 <analogWrite+0x100>
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    afc6:	2820      	cmp	r0, #32
    afc8:	d067      	beq.n	b09a <analogWrite+0xf2>
    afca:	2819      	cmp	r0, #25
    afcc:	d065      	beq.n	b09a <analogWrite+0xf2>
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
    afce:	4a77      	ldr	r2, [pc, #476]	; (b1ac <analogWrite+0x204>)
    afd0:	6892      	ldr	r2, [r2, #8]
    afd2:	fb02 1201 	mla	r2, r2, r1, r1
    afd6:	fa22 f303 	lsr.w	r3, r2, r3
	switch (pin) {
    afda:	1f42      	subs	r2, r0, #5
    afdc:	2a1b      	cmp	r2, #27
    afde:	d87d      	bhi.n	b0dc <analogWrite+0x134>
    afe0:	e8df f012 	tbh	[pc, r2, lsl #1]
    afe4:	00bf00c6 	.word	0x00bf00c6
    afe8:	007c007c 	.word	0x007c007c
    afec:	00b100b8 	.word	0x00b100b8
    aff0:	007c007c 	.word	0x007c007c
    aff4:	007c007c 	.word	0x007c007c
    aff8:	007c007c 	.word	0x007c007c
    affc:	007c007c 	.word	0x007c007c
    b000:	00aa007c 	.word	0x00aa007c
    b004:	009c00a3 	.word	0x009c00a3
    b008:	007c0095 	.word	0x007c0095
    b00c:	007c00cd 	.word	0x007c00cd
    b010:	007c007c 	.word	0x007c007c
    b014:	007c007c 	.word	0x007c007c
    b018:	00d4007c 	.word	0x00d4007c
		uint8_t res = analog_write_res;
    b01c:	7818      	ldrb	r0, [r3, #0]
		if (res < 12) {
    b01e:	280b      	cmp	r0, #11
			val <<= 12 - res;
    b020:	bf95      	itete	ls
    b022:	f1c0 000c 	rsbls	r0, r0, #12
			val >>= res - 12;
    b026:	380c      	subhi	r0, #12
			val <<= 12 - res;
    b028:	fa01 f000 	lslls.w	r0, r1, r0
			val >>= res - 12;
    b02c:	fa41 f000 	asrhi.w	r0, r1, r0
		analogWriteDAC0(val);
    b030:	f7ff bc2a 	b.w	a888 <analogWriteDAC0>
	if (pin >= CORE_NUM_DIGITAL) return;
    b034:	2821      	cmp	r0, #33	; 0x21
    b036:	d817      	bhi.n	b068 <analogWrite+0xc0>
	if (*portModeRegister(pin)) {
    b038:	4b5d      	ldr	r3, [pc, #372]	; (b1b0 <analogWrite+0x208>)
    b03a:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    b03e:	f892 1280 	ldrb.w	r1, [r2, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    b042:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    b046:	2900      	cmp	r1, #0
    b048:	d03c      	beq.n	b0c4 <analogWrite+0x11c>
			*portClearRegister(pin) = 1;
    b04a:	2101      	movs	r1, #1
		volatile uint32_t *config = portConfigRegister(pin);
    b04c:	685b      	ldr	r3, [r3, #4]
			*portClearRegister(pin) = 1;
    b04e:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		*portModeRegister(pin) = 1;
    b052:	2001      	movs	r0, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b054:	f44f 71a2 	mov.w	r1, #324	; 0x144
		*portModeRegister(pin) = 1;
    b058:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b05c:	6019      	str	r1, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    b05e:	681a      	ldr	r2, [r3, #0]
    b060:	f022 0220 	bic.w	r2, r2, #32
    b064:	601a      	str	r2, [r3, #0]
    b066:	4770      	bx	lr
    b068:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
    b06a:	2821      	cmp	r0, #33	; 0x21
    b06c:	d814      	bhi.n	b098 <analogWrite+0xf0>
	if (*portModeRegister(pin)) {
    b06e:	4b50      	ldr	r3, [pc, #320]	; (b1b0 <analogWrite+0x208>)
    b070:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
    b074:	f891 4280 	ldrb.w	r4, [r1, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    b078:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    b07c:	b344      	cbz	r4, b0d0 <analogWrite+0x128>
		volatile uint32_t *config = portConfigRegister(pin);
    b07e:	685b      	ldr	r3, [r3, #4]
			*portSetRegister(pin) = 1;
    b080:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b084:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    b088:	2001      	movs	r0, #1
    b08a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b08e:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    b090:	681a      	ldr	r2, [r3, #0]
    b092:	f022 0220 	bic.w	r2, r2, #32
    b096:	601a      	str	r2, [r3, #0]
}
    b098:	bd10      	pop	{r4, pc}
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
    b09a:	4a46      	ldr	r2, [pc, #280]	; (b1b4 <analogWrite+0x20c>)
    b09c:	6892      	ldr	r2, [r2, #8]
    b09e:	fb02 1201 	mla	r2, r2, r1, r1
    b0a2:	fa22 f303 	lsr.w	r3, r2, r3
    b0a6:	e798      	b.n	afda <analogWrite+0x32>
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    b0a8:	4c43      	ldr	r4, [pc, #268]	; (b1b8 <analogWrite+0x210>)
    b0aa:	68a2      	ldr	r2, [r4, #8]
	switch (pin) {
    b0ac:	2804      	cmp	r0, #4
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    b0ae:	fb02 1201 	mla	r2, r2, r1, r1
    b0b2:	fa22 f203 	lsr.w	r2, r2, r3
	switch (pin) {
    b0b6:	d170      	bne.n	b19a <analogWrite+0x1f2>
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    b0b8:	4b40      	ldr	r3, [pc, #256]	; (b1bc <analogWrite+0x214>)
		FTM1_C1V = cval;
    b0ba:	61a2      	str	r2, [r4, #24]
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    b0bc:	f44f 7151 	mov.w	r1, #836	; 0x344
    b0c0:	6359      	str	r1, [r3, #52]	; 0x34
}
    b0c2:	bd10      	pop	{r4, pc}
		volatile uint32_t *config = portConfigRegister(pin);
    b0c4:	685b      	ldr	r3, [r3, #4]
			*config &= ~(PORT_PCR_PE);
    b0c6:	6819      	ldr	r1, [r3, #0]
    b0c8:	f021 0102 	bic.w	r1, r1, #2
    b0cc:	6019      	str	r1, [r3, #0]
    b0ce:	e7c0      	b.n	b052 <analogWrite+0xaa>
		volatile uint32_t *config = portConfigRegister(pin);
    b0d0:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    b0d2:	681a      	ldr	r2, [r3, #0]
    b0d4:	f042 0203 	orr.w	r2, r2, #3
    b0d8:	601a      	str	r2, [r3, #0]
    b0da:	e7d3      	b.n	b084 <analogWrite+0xdc>
	if (pin >= CORE_NUM_DIGITAL) return;
    b0dc:	2821      	cmp	r0, #33	; 0x21
    b0de:	d8db      	bhi.n	b098 <analogWrite+0xf0>
    b0e0:	297f      	cmp	r1, #127	; 0x7f
    b0e2:	bfd4      	ite	le
    b0e4:	2100      	movle	r1, #0
    b0e6:	2101      	movgt	r1, #1
    b0e8:	f7ff fe6a 	bl	adc0 <digitalWrite.part.0>
	config = portConfigRegister(pin);
    b0ec:	4b30      	ldr	r3, [pc, #192]	; (b1b0 <analogWrite+0x208>)
    b0ee:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
		*portModeRegister(pin) = 1;
    b0f2:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
	config = portConfigRegister(pin);
    b0f6:	6853      	ldr	r3, [r2, #4]
		*portModeRegister(pin) = 1;
    b0f8:	2401      	movs	r4, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b0fa:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    b0fe:	f881 4280 	strb.w	r4, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b102:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    b104:	681a      	ldr	r2, [r3, #0]
    b106:	f022 0220 	bic.w	r2, r2, #32
    b10a:	601a      	str	r2, [r3, #0]
}
    b10c:	bd10      	pop	{r4, pc}
		FTM0_C1V = cval;
    b10e:	4827      	ldr	r0, [pc, #156]	; (b1ac <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b110:	4a2b      	ldr	r2, [pc, #172]	; (b1c0 <analogWrite+0x218>)
		FTM0_C1V = cval;
    b112:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b114:	f240 4144 	movw	r1, #1092	; 0x444
    b118:	6091      	str	r1, [r2, #8]
}
    b11a:	bd10      	pop	{r4, pc}
		FTM0_C0V = cval;
    b11c:	4823      	ldr	r0, [pc, #140]	; (b1ac <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b11e:	4a28      	ldr	r2, [pc, #160]	; (b1c0 <analogWrite+0x218>)
		FTM0_C0V = cval;
    b120:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b122:	f240 4144 	movw	r1, #1092	; 0x444
    b126:	6051      	str	r1, [r2, #4]
}
    b128:	bd10      	pop	{r4, pc}
		FTM0_C6V = cval;
    b12a:	4820      	ldr	r0, [pc, #128]	; (b1ac <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b12c:	4a25      	ldr	r2, [pc, #148]	; (b1c4 <analogWrite+0x21c>)
		FTM0_C6V = cval;
    b12e:	6403      	str	r3, [r0, #64]	; 0x40
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b130:	f240 4144 	movw	r1, #1092	; 0x444
    b134:	6191      	str	r1, [r2, #24]
}
    b136:	bd10      	pop	{r4, pc}
		FTM0_C5V = cval;
    b138:	481c      	ldr	r0, [pc, #112]	; (b1ac <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b13a:	4a22      	ldr	r2, [pc, #136]	; (b1c4 <analogWrite+0x21c>)
		FTM0_C5V = cval;
    b13c:	6383      	str	r3, [r0, #56]	; 0x38
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b13e:	f240 4144 	movw	r1, #1092	; 0x444
    b142:	6151      	str	r1, [r2, #20]
}
    b144:	bd10      	pop	{r4, pc}
		FTM0_C3V = cval;
    b146:	4819      	ldr	r0, [pc, #100]	; (b1ac <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b148:	4a1d      	ldr	r2, [pc, #116]	; (b1c0 <analogWrite+0x218>)
		FTM0_C3V = cval;
    b14a:	6283      	str	r3, [r0, #40]	; 0x28
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b14c:	f240 4144 	movw	r1, #1092	; 0x444
    b150:	6111      	str	r1, [r2, #16]
}
    b152:	bd10      	pop	{r4, pc}
		FTM0_C2V = cval;
    b154:	4815      	ldr	r0, [pc, #84]	; (b1ac <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b156:	4a1a      	ldr	r2, [pc, #104]	; (b1c0 <analogWrite+0x218>)
		FTM0_C2V = cval;
    b158:	6203      	str	r3, [r0, #32]
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b15a:	f240 4144 	movw	r1, #1092	; 0x444
    b15e:	60d1      	str	r1, [r2, #12]
}
    b160:	bd10      	pop	{r4, pc}
		FTM0_C4V = cval;
    b162:	4812      	ldr	r0, [pc, #72]	; (b1ac <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b164:	4a17      	ldr	r2, [pc, #92]	; (b1c4 <analogWrite+0x21c>)
		FTM0_C4V = cval;
    b166:	6303      	str	r3, [r0, #48]	; 0x30
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b168:	f240 4144 	movw	r1, #1092	; 0x444
    b16c:	6111      	str	r1, [r2, #16]
}
    b16e:	bd10      	pop	{r4, pc}
		FTM0_C7V = cval;
    b170:	480e      	ldr	r0, [pc, #56]	; (b1ac <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b172:	4a14      	ldr	r2, [pc, #80]	; (b1c4 <analogWrite+0x21c>)
		FTM0_C7V = cval;
    b174:	6483      	str	r3, [r0, #72]	; 0x48
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    b176:	f240 4144 	movw	r1, #1092	; 0x444
    b17a:	61d1      	str	r1, [r2, #28]
}
    b17c:	bd10      	pop	{r4, pc}
		FTM2_C1V = cval;
    b17e:	480d      	ldr	r0, [pc, #52]	; (b1b4 <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    b180:	4a11      	ldr	r2, [pc, #68]	; (b1c8 <analogWrite+0x220>)
		FTM2_C1V = cval;
    b182:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    b184:	f44f 7151 	mov.w	r1, #836	; 0x344
    b188:	64d1      	str	r1, [r2, #76]	; 0x4c
}
    b18a:	bd10      	pop	{r4, pc}
		FTM2_C0V = cval;
    b18c:	4809      	ldr	r0, [pc, #36]	; (b1b4 <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    b18e:	4a0e      	ldr	r2, [pc, #56]	; (b1c8 <analogWrite+0x220>)
		FTM2_C0V = cval;
    b190:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    b192:	f44f 7151 	mov.w	r1, #836	; 0x344
    b196:	6491      	str	r1, [r2, #72]	; 0x48
}
    b198:	bd10      	pop	{r4, pc}
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    b19a:	4b08      	ldr	r3, [pc, #32]	; (b1bc <analogWrite+0x214>)
		FTM1_C0V = cval;
    b19c:	6122      	str	r2, [r4, #16]
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    b19e:	f44f 7151 	mov.w	r1, #836	; 0x344
    b1a2:	6319      	str	r1, [r3, #48]	; 0x30
}
    b1a4:	bd10      	pop	{r4, pc}
    b1a6:	bf00      	nop
    b1a8:	1fff88e8 	.word	0x1fff88e8
    b1ac:	40038000 	.word	0x40038000
    b1b0:	0001701c 	.word	0x0001701c
    b1b4:	400b8000 	.word	0x400b8000
    b1b8:	40039000 	.word	0x40039000
    b1bc:	40049000 	.word	0x40049000
    b1c0:	4004b000 	.word	0x4004b000
    b1c4:	4004c000 	.word	0x4004c000
    b1c8:	4004a000 	.word	0x4004a000

0000b1cc <analogWriteFrequency>:
{
    b1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b1d0:	460e      	mov	r6, r1
    b1d2:	4680      	mov	r8, r0
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
    b1d4:	492c      	ldr	r1, [pc, #176]	; (b288 <analogWriteFrequency+0xbc>)
    b1d6:	4630      	mov	r0, r6
    b1d8:	f003 fdb0 	bl	ed3c <__aeabi_fcmplt>
		ftmClockSource = 1; 	// Use default F_TIMER clock source
    b1dc:	4b2b      	ldr	r3, [pc, #172]	; (b28c <analogWriteFrequency+0xc0>)
    b1de:	2800      	cmp	r0, #0
    b1e0:	f647 2712 	movw	r7, #31250	; 0x7a12
    b1e4:	bf12      	itee	ne
    b1e6:	f04f 0a02 	movne.w	sl, #2
    b1ea:	f04f 0a01 	moveq.w	sl, #1
    b1ee:	461f      	moveq	r7, r3
	for (prescale = 0; prescale < 7; prescale++) {
    b1f0:	2400      	movs	r4, #0
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
    b1f2:	f04f 595e 	mov.w	r9, #931135488	; 0x37800000
    b1f6:	fa27 f004 	lsr.w	r0, r7, r4
    b1fa:	f003 fba9 	bl	e950 <__aeabi_ui2f>
    b1fe:	4649      	mov	r1, r9
    b200:	4605      	mov	r5, r0
    b202:	f003 fbfd 	bl	ea00 <__aeabi_fmul>
    b206:	4601      	mov	r1, r0
		if (frequency >= minfreq) break;
    b208:	4630      	mov	r0, r6
    b20a:	f003 fdab 	bl	ed64 <__aeabi_fcmpge>
    b20e:	b930      	cbnz	r0, b21e <analogWriteFrequency+0x52>
	for (prescale = 0; prescale < 7; prescale++) {
    b210:	3401      	adds	r4, #1
    b212:	2c07      	cmp	r4, #7
    b214:	d1ef      	bne.n	b1f6 <analogWriteFrequency+0x2a>
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
    b216:	09f8      	lsrs	r0, r7, #7
    b218:	f003 fb9a 	bl	e950 <__aeabi_ui2f>
    b21c:	4605      	mov	r5, r0
    b21e:	4631      	mov	r1, r6
    b220:	4628      	mov	r0, r5
    b222:	f003 fca1 	bl	eb68 <__aeabi_fdiv>
    b226:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    b22a:	f003 fadf 	bl	e7ec <__aeabi_fsub>
    b22e:	f003 fde9 	bl	ee04 <__aeabi_f2uiz>
    b232:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b236:	4298      	cmp	r0, r3
    b238:	bf28      	it	cs
    b23a:	4618      	movcs	r0, r3
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    b23c:	f1a8 0303 	sub.w	r3, r8, #3
    b240:	2b01      	cmp	r3, #1
    b242:	d911      	bls.n	b268 <analogWriteFrequency+0x9c>
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
    b244:	f1a8 0805 	sub.w	r8, r8, #5
    b248:	fa5f f888 	uxtb.w	r8, r8
    b24c:	f1b8 0f1b 	cmp.w	r8, #27
    b250:	d808      	bhi.n	b264 <analogWriteFrequency+0x98>
    b252:	4a0f      	ldr	r2, [pc, #60]	; (b290 <analogWriteFrequency+0xc4>)
    b254:	2301      	movs	r3, #1
    b256:	fa03 f308 	lsl.w	r3, r3, r8
    b25a:	401a      	ands	r2, r3
    b25c:	d110      	bne.n	b280 <analogWriteFrequency+0xb4>
    b25e:	f013 6f01 	tst.w	r3, #135266304	; 0x8100000
    b262:	d10b      	bne.n	b27c <analogWriteFrequency+0xb0>
}
    b264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM1_SC = 0;
    b268:	4b0a      	ldr	r3, [pc, #40]	; (b294 <analogWriteFrequency+0xc8>)
    b26a:	2200      	movs	r2, #0
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    b26c:	ea44 04ca 	orr.w	r4, r4, sl, lsl #3
		FTM2_SC = 0;
    b270:	601a      	str	r2, [r3, #0]
		FTM2_CNT = 0;
    b272:	605a      	str	r2, [r3, #4]
		FTM2_MOD = mod;
    b274:	6098      	str	r0, [r3, #8]
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    b276:	601c      	str	r4, [r3, #0]
}
    b278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM2_SC = 0;
    b27c:	4b06      	ldr	r3, [pc, #24]	; (b298 <analogWriteFrequency+0xcc>)
    b27e:	e7f5      	b.n	b26c <analogWriteFrequency+0xa0>
		FTM0_SC = 0;
    b280:	4b06      	ldr	r3, [pc, #24]	; (b29c <analogWriteFrequency+0xd0>)
    b282:	2200      	movs	r2, #0
    b284:	e7f2      	b.n	b26c <analogWriteFrequency+0xa0>
    b286:	bf00      	nop
    b288:	40b71b00 	.word	0x40b71b00
    b28c:	02dc6c00 	.word	0x02dc6c00
    b290:	00078033 	.word	0x00078033
    b294:	40039000 	.word	0x40039000
    b298:	400b8000 	.word	0x400b8000
    b29c:	40038000 	.word	0x40038000

0000b2a0 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    b2a0:	2821      	cmp	r0, #33	; 0x21
    b2a2:	d816      	bhi.n	b2d2 <digitalWrite+0x32>
{
    b2a4:	b410      	push	{r4}
	if (*portModeRegister(pin)) {
    b2a6:	4b10      	ldr	r3, [pc, #64]	; (b2e8 <digitalWrite+0x48>)
    b2a8:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    b2ac:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    b2b0:	b12c      	cbz	r4, b2be <digitalWrite+0x1e>
			*portSetRegister(pin) = 1;
    b2b2:	2301      	movs	r3, #1
		if (val) {
    b2b4:	b971      	cbnz	r1, b2d4 <digitalWrite+0x34>
			*portClearRegister(pin) = 1;
    b2b6:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    b2ba:	bc10      	pop	{r4}
    b2bc:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    b2be:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    b2c2:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    b2c4:	681a      	ldr	r2, [r3, #0]
		if (val) {
    b2c6:	b149      	cbz	r1, b2dc <digitalWrite+0x3c>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    b2c8:	f042 0203 	orr.w	r2, r2, #3
}
    b2cc:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    b2ce:	601a      	str	r2, [r3, #0]
}
    b2d0:	4770      	bx	lr
    b2d2:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    b2d4:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    b2d8:	bc10      	pop	{r4}
    b2da:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    b2dc:	f022 0202 	bic.w	r2, r2, #2
}
    b2e0:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    b2e2:	601a      	str	r2, [r3, #0]
}
    b2e4:	4770      	bx	lr
    b2e6:	bf00      	nop
    b2e8:	0001701c 	.word	0x0001701c

0000b2ec <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
    b2ec:	2821      	cmp	r0, #33	; 0x21
    b2ee:	d806      	bhi.n	b2fe <digitalRead+0x12>
	return *portInputRegister(pin);
    b2f0:	4b04      	ldr	r3, [pc, #16]	; (b304 <digitalRead+0x18>)
    b2f2:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    b2f6:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    b2fa:	b2c0      	uxtb	r0, r0
    b2fc:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    b2fe:	2000      	movs	r0, #0
}
    b300:	4770      	bx	lr
    b302:	bf00      	nop
    b304:	0001701c 	.word	0x0001701c

0000b308 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    b308:	2821      	cmp	r0, #33	; 0x21
    b30a:	d820      	bhi.n	b34e <pinMode+0x46>
	config = portConfigRegister(pin);
    b30c:	4a1b      	ldr	r2, [pc, #108]	; (b37c <pinMode+0x74>)
    b30e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b312:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    b314:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b316:	d00f      	beq.n	b338 <pinMode+0x30>
    b318:	2904      	cmp	r1, #4
    b31a:	d01d      	beq.n	b358 <pinMode+0x50>
		*portModeRegister(pin) = 0;
    b31c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    b320:	2200      	movs	r2, #0
    b322:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
		if (mode == INPUT) {
    b326:	b199      	cbz	r1, b350 <pinMode+0x48>
		} else if (mode == INPUT_PULLUP) {
    b328:	2902      	cmp	r1, #2
    b32a:	d022      	beq.n	b372 <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    b32c:	2903      	cmp	r1, #3
    b32e:	d10d      	bne.n	b34c <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    b330:	f44f 7281 	mov.w	r2, #258	; 0x102
    b334:	601a      	str	r2, [r3, #0]
    b336:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    b338:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b33c:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    b340:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b344:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    b346:	681a      	ldr	r2, [r3, #0]
    b348:	f022 0220 	bic.w	r2, r2, #32
    b34c:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    b34e:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    b350:	f44f 7280 	mov.w	r2, #256	; 0x100
    b354:	601a      	str	r2, [r3, #0]
    b356:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    b358:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b35c:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    b360:	2001      	movs	r0, #1
    b362:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b366:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    b368:	681a      	ldr	r2, [r3, #0]
    b36a:	f042 0220 	orr.w	r2, r2, #32
    b36e:	601a      	str	r2, [r3, #0]
    b370:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    b372:	f240 1203 	movw	r2, #259	; 0x103
    b376:	601a      	str	r2, [r3, #0]
    b378:	4770      	bx	lr
    b37a:	bf00      	nop
    b37c:	0001701c 	.word	0x0001701c

0000b380 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    b380:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    b382:	490d      	ldr	r1, [pc, #52]	; (b3b8 <micros+0x38>)
	current = SYST_CVR;
    b384:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b388:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    b38a:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b38c:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    b390:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b392:	0152      	lsls	r2, r2, #5
    b394:	d502      	bpl.n	b39c <micros+0x1c>
    b396:	2b32      	cmp	r3, #50	; 0x32
    b398:	bf88      	it	hi
    b39a:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    b39c:	4a07      	ldr	r2, [pc, #28]	; (b3bc <micros+0x3c>)
	current = ((F_CPU / 1000) - 1) - current;
    b39e:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
	return count * 1000 + current / (F_CPU / 1000000);
    b3a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	current = ((F_CPU / 1000) - 1) - current;
    b3a6:	33ff      	adds	r3, #255	; 0xff
	return count * 1000 + current / (F_CPU / 1000000);
    b3a8:	fba2 2303 	umull	r2, r3, r2, r3
    b3ac:	fb01 f000 	mul.w	r0, r1, r0
}
    b3b0:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    b3b4:	4770      	bx	lr
    b3b6:	bf00      	nop
    b3b8:	1fffba38 	.word	0x1fffba38
    b3bc:	aaaaaaab 	.word	0xaaaaaaab

0000b3c0 <delay>:

void delay(uint32_t ms)
{
    b3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b3c4:	4604      	mov	r4, r0
	__disable_irq();
    b3c6:	b672      	cpsid	i
	count = systick_millis_count;
    b3c8:	4f20      	ldr	r7, [pc, #128]	; (b44c <delay+0x8c>)
	current = SYST_CVR;
    b3ca:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b3ce:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    b3d0:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b3d2:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    b3d6:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b3d8:	0152      	lsls	r2, r2, #5
    b3da:	d502      	bpl.n	b3e2 <delay+0x22>
    b3dc:	2b32      	cmp	r3, #50	; 0x32
    b3de:	bf88      	it	hi
    b3e0:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    b3e2:	b90c      	cbnz	r4, b3e8 <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    b3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    b3e8:	f8df 9064 	ldr.w	r9, [pc, #100]	; b450 <delay+0x90>
	return count * 1000 + current / (F_CPU / 1000000);
    b3ec:	f8df 8064 	ldr.w	r8, [pc, #100]	; b454 <delay+0x94>
	current = ((F_CPU / 1000) - 1) - current;
    b3f0:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    b3f4:	fba8 2303 	umull	r2, r3, r8, r3
    b3f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b3fc:	fb02 f505 	mul.w	r5, r2, r5
    b400:	eb05 1593 	add.w	r5, r5, r3, lsr #6
	current = SYST_CVR;
    b404:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    b408:	b672      	cpsid	i
	current = SYST_CVR;
    b40a:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    b40c:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b40e:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    b412:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    b414:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    b418:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b41c:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    b420:	ebc5 1393 	rsb	r3, r5, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    b424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b428:	d002      	beq.n	b430 <delay+0x70>
    b42a:	2932      	cmp	r1, #50	; 0x32
    b42c:	bf88      	it	hi
    b42e:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    b430:	fb00 3302 	mla	r3, r0, r2, r3
    b434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    b438:	d304      	bcc.n	b444 <delay+0x84>
				if (ms == 0) return;
    b43a:	3c01      	subs	r4, #1
    b43c:	d0d2      	beq.n	b3e4 <delay+0x24>
				start += 1000;
    b43e:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    b442:	e7e1      	b.n	b408 <delay+0x48>
			yield();
    b444:	f001 fea4 	bl	d190 <yield>
			while ((micros() - start) >= 1000) {
    b448:	e7de      	b.n	b408 <delay+0x48>
    b44a:	bf00      	nop
    b44c:	1fffba38 	.word	0x1fffba38
    b450:	000176ff 	.word	0x000176ff
    b454:	aaaaaaab 	.word	0xaaaaaaab

0000b458 <serial2_begin>:
#define GPIO_BITBAND_PTR(reg, bit) ((uint32_t *)GPIO_BITBAND_ADDR((reg), (bit)))
#define C3_TXDIR_BIT 5

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    b458:	4a2a      	ldr	r2, [pc, #168]	; (b504 <serial2_begin+0xac>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    b45a:	492b      	ldr	r1, [pc, #172]	; (b508 <serial2_begin+0xb0>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    b45c:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    b45e:	b470      	push	{r4, r5, r6}
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    b460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	rx_buffer_head = 0;
    b464:	4d29      	ldr	r5, [pc, #164]	; (b50c <serial2_begin+0xb4>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    b466:	6353      	str	r3, [r2, #52]	; 0x34
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
    b468:	4e29      	ldr	r6, [pc, #164]	; (b510 <serial2_begin+0xb8>)
	tx_buffer_head = 0;
    b46a:	4c2a      	ldr	r4, [pc, #168]	; (b514 <serial2_begin+0xbc>)
	switch (rx_pin_num) {
    b46c:	7832      	ldrb	r2, [r6, #0]
	rx_buffer_head = 0;
    b46e:	2300      	movs	r3, #0
    b470:	702b      	strb	r3, [r5, #0]
	rx_buffer_tail = 0;
    b472:	700b      	strb	r3, [r1, #0]
	tx_buffer_tail = 0;
    b474:	4928      	ldr	r1, [pc, #160]	; (b518 <serial2_begin+0xc0>)
	tx_buffer_head = 0;
    b476:	7023      	strb	r3, [r4, #0]
	tx_buffer_tail = 0;
    b478:	700b      	strb	r3, [r1, #0]
	transmitting = 0;
    b47a:	4928      	ldr	r1, [pc, #160]	; (b51c <serial2_begin+0xc4>)
	switch (rx_pin_num) {
    b47c:	2a09      	cmp	r2, #9
	transmitting = 0;
    b47e:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    b480:	d033      	beq.n	b4ea <serial2_begin+0x92>
    b482:	2a1a      	cmp	r2, #26
    b484:	d103      	bne.n	b48e <serial2_begin+0x36>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    b486:	4b26      	ldr	r3, [pc, #152]	; (b520 <serial2_begin+0xc8>)
    b488:	f240 3213 	movw	r2, #787	; 0x313
    b48c:	605a      	str	r2, [r3, #4]
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    b48e:	4b25      	ldr	r3, [pc, #148]	; (b524 <serial2_begin+0xcc>)
    b490:	781b      	ldrb	r3, [r3, #0]
    b492:	2b0a      	cmp	r3, #10
    b494:	d031      	beq.n	b4fa <serial2_begin+0xa2>
    b496:	2b1f      	cmp	r3, #31
    b498:	d103      	bne.n	b4a2 <serial2_begin+0x4a>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    b49a:	4b21      	ldr	r3, [pc, #132]	; (b520 <serial2_begin+0xc8>)
    b49c:	f44f 7251 	mov.w	r2, #836	; 0x344
    b4a0:	601a      	str	r2, [r3, #0]
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	if (divisor < 32) divisor = 32;
    b4a2:	2820      	cmp	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    b4a4:	4b20      	ldr	r3, [pc, #128]	; (b528 <serial2_begin+0xd0>)
	UART1_BDH = (divisor >> 8) & 0x1F;
	UART1_BDL = divisor & 0xFF;
	UART1_C1 = 0;
#endif
	UART1_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    b4a6:	4c21      	ldr	r4, [pc, #132]	; (b52c <serial2_begin+0xd4>)
    b4a8:	bf38      	it	cc
    b4aa:	2020      	movcc	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    b4ac:	f3c0 3c44 	ubfx	ip, r0, #13, #5
    b4b0:	f883 c000 	strb.w	ip, [r3]
	UART1_BDL = (divisor >> 5) & 0xFF;
    b4b4:	f3c0 1c47 	ubfx	ip, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    b4b8:	f000 001f 	and.w	r0, r0, #31
	UART1_BDL = (divisor >> 5) & 0xFF;
    b4bc:	f883 c001 	strb.w	ip, [r3, #1]
	UART1_C1 = UART_C1_ILT;
    b4c0:	2204      	movs	r2, #4
	UART1_C4 = divisor & 0x1F;
    b4c2:	7298      	strb	r0, [r3, #10]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    b4c4:	2002      	movs	r0, #2
	UART1_C1 = UART_C1_ILT;
    b4c6:	709a      	strb	r2, [r3, #2]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    b4c8:	74d8      	strb	r0, [r3, #19]
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    b4ca:	2088      	movs	r0, #136	; 0x88
	UART1_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    b4cc:	755a      	strb	r2, [r3, #21]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    b4ce:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    b4d2:	7418      	strb	r0, [r3, #16]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    b4d4:	2240      	movs	r2, #64	; 0x40
	UART1_C2 = C2_TX_INACTIVE;
    b4d6:	203c      	movs	r0, #60	; 0x3c
    b4d8:	70d8      	strb	r0, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    b4da:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    b4de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
    b4e2:	bc70      	pop	{r4, r5, r6}
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    b4e4:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
}
    b4e8:	4770      	bx	lr
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    b4ea:	4b11      	ldr	r3, [pc, #68]	; (b530 <serial2_begin+0xd8>)
    b4ec:	f240 3213 	movw	r2, #787	; 0x313
    b4f0:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num) {
    b4f2:	4b0c      	ldr	r3, [pc, #48]	; (b524 <serial2_begin+0xcc>)
    b4f4:	781b      	ldrb	r3, [r3, #0]
    b4f6:	2b0a      	cmp	r3, #10
    b4f8:	d1cd      	bne.n	b496 <serial2_begin+0x3e>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    b4fa:	4b0d      	ldr	r3, [pc, #52]	; (b530 <serial2_begin+0xd8>)
    b4fc:	f44f 7251 	mov.w	r2, #836	; 0x344
    b500:	611a      	str	r2, [r3, #16]
    b502:	e7ce      	b.n	b4a2 <serial2_begin+0x4a>
    b504:	40048000 	.word	0x40048000
    b508:	1fffba88 	.word	0x1fffba88
    b50c:	1fffba80 	.word	0x1fffba80
    b510:	1fff89d8 	.word	0x1fff89d8
    b514:	1fffbabc 	.word	0x1fffbabc
    b518:	1fffbac4 	.word	0x1fffbac4
    b51c:	1fffba90 	.word	0x1fffba90
    b520:	4004d000 	.word	0x4004d000
    b524:	1fff89e0 	.word	0x1fff89e0
    b528:	4006b000 	.word	0x4006b000
    b52c:	e000e400 	.word	0xe000e400
    b530:	4004b000 	.word	0x4004b000

0000b534 <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    b534:	4b21      	ldr	r3, [pc, #132]	; (b5bc <serial2_format+0x88>)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
    b536:	4921      	ldr	r1, [pc, #132]	; (b5bc <serial2_format+0x88>)
	c = UART1_C1;
    b538:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    b53a:	f000 0203 	and.w	r2, r0, #3
    b53e:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    b542:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    b544:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b546:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    b54a:	bf48      	it	mi
    b54c:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b550:	2a04      	cmp	r2, #4
	UART1_C1 = c;
    b552:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b554:	d103      	bne.n	b55e <serial2_format+0x2a>
    b556:	798b      	ldrb	r3, [r1, #6]
    b558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b55c:	718b      	strb	r3, [r1, #6]
	c = UART1_S2 & ~0x10;
    b55e:	4b17      	ldr	r3, [pc, #92]	; (b5bc <serial2_format+0x88>)
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
    b560:	4a16      	ldr	r2, [pc, #88]	; (b5bc <serial2_format+0x88>)
	c = UART1_S2 & ~0x10;
    b562:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    b564:	06c1      	lsls	r1, r0, #27
	c = UART1_S2 & ~0x10;
    b566:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    b56a:	bf48      	it	mi
    b56c:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_S2 = c;
    b570:	7153      	strb	r3, [r2, #5]
	c = UART1_C3 & ~0x10;
    b572:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    b574:	0682      	lsls	r2, r0, #26
	c = UART1_C3 & ~0x10;
    b576:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART1_C3 = c;
    b57a:	4a10      	ldr	r2, [pc, #64]	; (b5bc <serial2_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    b57c:	bf48      	it	mi
    b57e:	f043 0310 	orrmi.w	r3, r3, #16
		UART1_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
		UART1_BDL = bdl;		// Says BDH not acted on until BDL is written
	}
#endif
	// process request for half duplex.
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    b582:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART1_C3 = c;
    b586:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    b588:	d010      	beq.n	b5ac <serial2_format+0x78>
		c = UART1_C1;
    b58a:	7893      	ldrb	r3, [r2, #2]
		#if defined(KINETISL)
		//CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
		half_duplex_mode = 1;
		#else
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b58c:	490c      	ldr	r1, [pc, #48]	; (b5c0 <serial2_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    b58e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART1_C1 = c;
    b592:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b594:	7809      	ldrb	r1, [r1, #0]
    b596:	4b0b      	ldr	r3, [pc, #44]	; (b5c4 <serial2_format+0x90>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    b598:	4a0b      	ldr	r2, [pc, #44]	; (b5c8 <serial2_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b59a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    b59e:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b5a2:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    b5a4:	4909      	ldr	r1, [pc, #36]	; (b5cc <serial2_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    b5a6:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    b5a8:	6011      	str	r1, [r2, #0]
    b5aa:	4770      	bx	lr

	} else {
		#if defined(KINETISL)
		half_duplex_mode = 0;
		#else
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    b5ac:	4b06      	ldr	r3, [pc, #24]	; (b5c8 <serial2_format+0x94>)
    b5ae:	4a07      	ldr	r2, [pc, #28]	; (b5cc <serial2_format+0x98>)
    b5b0:	6819      	ldr	r1, [r3, #0]
    b5b2:	4291      	cmp	r1, r2
    b5b4:	bf08      	it	eq
    b5b6:	6018      	streq	r0, [r3, #0]
		#endif
	}
}
    b5b8:	4770      	bx	lr
    b5ba:	bf00      	nop
    b5bc:	4006b000 	.word	0x4006b000
    b5c0:	1fff89e0 	.word	0x1fff89e0
    b5c4:	0001701c 	.word	0x0001701c
    b5c8:	1fffba8c 	.word	0x1fffba8c
    b5cc:	42d600d4 	.word	0x42d600d4

0000b5d0 <serial2_end>:

void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    b5d0:	4b29      	ldr	r3, [pc, #164]	; (b678 <serial2_end+0xa8>)
    b5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b5d4:	051b      	lsls	r3, r3, #20
    b5d6:	d54d      	bpl.n	b674 <serial2_end+0xa4>
{
    b5d8:	b510      	push	{r4, lr}
	while (transmitting) yield();  // wait for buffered data to send
    b5da:	4c28      	ldr	r4, [pc, #160]	; (b67c <serial2_end+0xac>)
    b5dc:	7823      	ldrb	r3, [r4, #0]
    b5de:	b123      	cbz	r3, b5ea <serial2_end+0x1a>
    b5e0:	f001 fdd6 	bl	d190 <yield>
    b5e4:	7823      	ldrb	r3, [r4, #0]
    b5e6:	2b00      	cmp	r3, #0
    b5e8:	d1fa      	bne.n	b5e0 <serial2_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    b5ea:	4a25      	ldr	r2, [pc, #148]	; (b680 <serial2_end+0xb0>)
#if defined(KINETISK)
	switch (rx_pin_num) {
    b5ec:	4b25      	ldr	r3, [pc, #148]	; (b684 <serial2_end+0xb4>)
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    b5ee:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b5f2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	UART1_C2 = 0;
    b5f6:	2100      	movs	r1, #0
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    b5f8:	f8c0 4184 	str.w	r4, [r0, #388]	; 0x184
	UART1_C2 = 0;
    b5fc:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    b5fe:	781b      	ldrb	r3, [r3, #0]
    b600:	2b09      	cmp	r3, #9
    b602:	d02c      	beq.n	b65e <serial2_end+0x8e>
    b604:	2b1a      	cmp	r3, #26
    b606:	d01b      	beq.n	b640 <serial2_end+0x70>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
    b608:	4b1f      	ldr	r3, [pc, #124]	; (b688 <serial2_end+0xb8>)
    b60a:	781b      	ldrb	r3, [r3, #0]
    b60c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b610:	2b0a      	cmp	r3, #10
    b612:	d01f      	beq.n	b654 <serial2_end+0x84>
    b614:	2b1f      	cmp	r3, #31
    b616:	d00e      	beq.n	b636 <serial2_end+0x66>
#endif
	UART1_S1;
	UART1_D; // clear leftover error status
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    b618:	4b1c      	ldr	r3, [pc, #112]	; (b68c <serial2_end+0xbc>)
	UART1_S1;
    b61a:	4a19      	ldr	r2, [pc, #100]	; (b680 <serial2_end+0xb0>)
	rx_buffer_head = 0;
    b61c:	4c1c      	ldr	r4, [pc, #112]	; (b690 <serial2_end+0xc0>)
	rx_buffer_tail = 0;
    b61e:	481d      	ldr	r0, [pc, #116]	; (b694 <serial2_end+0xc4>)
	if (rts_pin) rts_deassert();
    b620:	6819      	ldr	r1, [r3, #0]
	UART1_S1;
    b622:	f892 c004 	ldrb.w	ip, [r2, #4]
	UART1_D; // clear leftover error status
    b626:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    b628:	2300      	movs	r3, #0
    b62a:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    b62c:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    b62e:	b109      	cbz	r1, b634 <serial2_end+0x64>
    b630:	2301      	movs	r3, #1
    b632:	700b      	strb	r3, [r1, #0]
}
    b634:	bd10      	pop	{r4, pc}
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
    b636:	4b18      	ldr	r3, [pc, #96]	; (b698 <serial2_end+0xc8>)
    b638:	f240 1203 	movw	r2, #259	; 0x103
    b63c:	601a      	str	r2, [r3, #0]
    b63e:	e7eb      	b.n	b618 <serial2_end+0x48>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
    b640:	4b15      	ldr	r3, [pc, #84]	; (b698 <serial2_end+0xc8>)
    b642:	f240 1203 	movw	r2, #259	; 0x103
    b646:	605a      	str	r2, [r3, #4]
	switch (tx_pin_num & 127) {
    b648:	4b0f      	ldr	r3, [pc, #60]	; (b688 <serial2_end+0xb8>)
    b64a:	781b      	ldrb	r3, [r3, #0]
    b64c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b650:	2b0a      	cmp	r3, #10
    b652:	d1df      	bne.n	b614 <serial2_end+0x44>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    b654:	4b11      	ldr	r3, [pc, #68]	; (b69c <serial2_end+0xcc>)
    b656:	f240 1203 	movw	r2, #259	; 0x103
    b65a:	611a      	str	r2, [r3, #16]
    b65c:	e7dc      	b.n	b618 <serial2_end+0x48>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    b65e:	4b0f      	ldr	r3, [pc, #60]	; (b69c <serial2_end+0xcc>)
    b660:	f240 1203 	movw	r2, #259	; 0x103
    b664:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num & 127) {
    b666:	4b08      	ldr	r3, [pc, #32]	; (b688 <serial2_end+0xb8>)
    b668:	781b      	ldrb	r3, [r3, #0]
    b66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b66e:	2b0a      	cmp	r3, #10
    b670:	d1d0      	bne.n	b614 <serial2_end+0x44>
    b672:	e7ef      	b.n	b654 <serial2_end+0x84>
    b674:	4770      	bx	lr
    b676:	bf00      	nop
    b678:	40048000 	.word	0x40048000
    b67c:	1fffba90 	.word	0x1fffba90
    b680:	4006b000 	.word	0x4006b000
    b684:	1fff89d8 	.word	0x1fff89d8
    b688:	1fff89e0 	.word	0x1fff89e0
    b68c:	1fffba3c 	.word	0x1fffba3c
    b690:	1fffba80 	.word	0x1fffba80
    b694:	1fffba88 	.word	0x1fffba88
    b698:	4004d000 	.word	0x4004d000
    b69c:	4004b000 	.word	0x4004b000

0000b6a0 <serial2_set_transmit_pin>:

void serial2_set_transmit_pin(uint8_t pin)
{
	while (transmitting) ;
    b6a0:	4a0a      	ldr	r2, [pc, #40]	; (b6cc <serial2_set_transmit_pin+0x2c>)
{
    b6a2:	b538      	push	{r3, r4, r5, lr}
    b6a4:	4605      	mov	r5, r0
	while (transmitting) ;
    b6a6:	7813      	ldrb	r3, [r2, #0]
    b6a8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    b6ac:	2b00      	cmp	r3, #0
    b6ae:	d1fa      	bne.n	b6a6 <serial2_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    b6b0:	2101      	movs	r1, #1
    b6b2:	4628      	mov	r0, r5
    b6b4:	f7ff fe28 	bl	b308 <pinMode>
	digitalWrite(pin, LOW);
    b6b8:	4621      	mov	r1, r4
    b6ba:	4628      	mov	r0, r5
    b6bc:	f7ff fdf0 	bl	b2a0 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    b6c0:	4a03      	ldr	r2, [pc, #12]	; (b6d0 <serial2_set_transmit_pin+0x30>)
    b6c2:	4b04      	ldr	r3, [pc, #16]	; (b6d4 <serial2_set_transmit_pin+0x34>)
    b6c4:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    b6c8:	601a      	str	r2, [r3, #0]
	#if defined(KINETISL)
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}
    b6ca:	bd38      	pop	{r3, r4, r5, pc}
    b6cc:	1fffba90 	.word	0x1fffba90
    b6d0:	0001701c 	.word	0x0001701c
    b6d4:	1fffba8c 	.word	0x1fffba8c

0000b6d8 <serial2_set_tx>:
void serial2_set_tx(uint8_t pin, uint8_t opendrain)
{
	#if defined(KINETISK)
	uint32_t cfg;

	if (opendrain) pin |= 128;
    b6d8:	b109      	cbz	r1, b6de <serial2_set_tx+0x6>
    b6da:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    b6de:	4a19      	ldr	r2, [pc, #100]	; (b744 <serial2_set_tx+0x6c>)
    b6e0:	7813      	ldrb	r3, [r2, #0]
    b6e2:	4283      	cmp	r3, r0
    b6e4:	d017      	beq.n	b716 <serial2_set_tx+0x3e>
{
    b6e6:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    b6e8:	4c17      	ldr	r4, [pc, #92]	; (b748 <serial2_set_tx+0x70>)
    b6ea:	6b64      	ldr	r4, [r4, #52]	; 0x34
    b6ec:	0524      	lsls	r4, r4, #20
    b6ee:	d50f      	bpl.n	b710 <serial2_set_tx+0x38>
		switch (tx_pin_num & 127) {
    b6f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b6f4:	2b0a      	cmp	r3, #10
    b6f6:	d021      	beq.n	b73c <serial2_set_tx+0x64>
    b6f8:	2b1f      	cmp	r3, #31
    b6fa:	d014      	beq.n	b726 <serial2_set_tx+0x4e>
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    b6fc:	2900      	cmp	r1, #0
    b6fe:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    b702:	bf14      	ite	ne
    b704:	2160      	movne	r1, #96	; 0x60
    b706:	2144      	moveq	r1, #68	; 0x44
		}
		switch (pin & 127) {
    b708:	2b0a      	cmp	r3, #10
    b70a:	d010      	beq.n	b72e <serial2_set_tx+0x56>
    b70c:	2b1f      	cmp	r3, #31
    b70e:	d003      	beq.n	b718 <serial2_set_tx+0x40>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	tx_pin_num = pin;
    b710:	7010      	strb	r0, [r2, #0]
	#endif
}
    b712:	bc10      	pop	{r4}
    b714:	4770      	bx	lr
    b716:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
    b718:	4b0c      	ldr	r3, [pc, #48]	; (b74c <serial2_set_tx+0x74>)
    b71a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    b71e:	6019      	str	r1, [r3, #0]
	tx_pin_num = pin;
    b720:	7010      	strb	r0, [r2, #0]
}
    b722:	bc10      	pop	{r4}
    b724:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
    b726:	4b09      	ldr	r3, [pc, #36]	; (b74c <serial2_set_tx+0x74>)
    b728:	2400      	movs	r4, #0
    b72a:	601c      	str	r4, [r3, #0]
    b72c:	e7e6      	b.n	b6fc <serial2_set_tx+0x24>
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
    b72e:	4b08      	ldr	r3, [pc, #32]	; (b750 <serial2_set_tx+0x78>)
    b730:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    b734:	6119      	str	r1, [r3, #16]
	tx_pin_num = pin;
    b736:	7010      	strb	r0, [r2, #0]
}
    b738:	bc10      	pop	{r4}
    b73a:	4770      	bx	lr
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
    b73c:	4b04      	ldr	r3, [pc, #16]	; (b750 <serial2_set_tx+0x78>)
    b73e:	2400      	movs	r4, #0
    b740:	611c      	str	r4, [r3, #16]
    b742:	e7db      	b.n	b6fc <serial2_set_tx+0x24>
    b744:	1fff89e0 	.word	0x1fff89e0
    b748:	40048000 	.word	0x40048000
    b74c:	4004d000 	.word	0x4004d000
    b750:	4004b000 	.word	0x4004b000

0000b754 <serial2_set_rx>:

void serial2_set_rx(uint8_t pin)
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
    b754:	4b12      	ldr	r3, [pc, #72]	; (b7a0 <serial2_set_rx+0x4c>)
    b756:	781a      	ldrb	r2, [r3, #0]
    b758:	4282      	cmp	r2, r0
    b75a:	d00c      	beq.n	b776 <serial2_set_rx+0x22>
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    b75c:	4911      	ldr	r1, [pc, #68]	; (b7a4 <serial2_set_rx+0x50>)
    b75e:	6b49      	ldr	r1, [r1, #52]	; 0x34
    b760:	0509      	lsls	r1, r1, #20
    b762:	d507      	bpl.n	b774 <serial2_set_rx+0x20>
		switch (rx_pin_num) {
    b764:	2a09      	cmp	r2, #9
    b766:	d016      	beq.n	b796 <serial2_set_rx+0x42>
    b768:	2a1a      	cmp	r2, #26
    b76a:	d00a      	beq.n	b782 <serial2_set_rx+0x2e>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
			#endif
		}
		switch (pin) {
    b76c:	2809      	cmp	r0, #9
    b76e:	d00d      	beq.n	b78c <serial2_set_rx+0x38>
    b770:	281a      	cmp	r0, #26
    b772:	d001      	beq.n	b778 <serial2_set_rx+0x24>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	rx_pin_num = pin;
    b774:	7018      	strb	r0, [r3, #0]
	#endif
}
    b776:	4770      	bx	lr
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    b778:	4a0b      	ldr	r2, [pc, #44]	; (b7a8 <serial2_set_rx+0x54>)
    b77a:	f240 3113 	movw	r1, #787	; 0x313
    b77e:	6051      	str	r1, [r2, #4]
    b780:	e7f8      	b.n	b774 <serial2_set_rx+0x20>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    b782:	4a09      	ldr	r2, [pc, #36]	; (b7a8 <serial2_set_rx+0x54>)
    b784:	2100      	movs	r1, #0
		switch (pin) {
    b786:	2809      	cmp	r0, #9
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    b788:	6051      	str	r1, [r2, #4]
		switch (pin) {
    b78a:	d1f1      	bne.n	b770 <serial2_set_rx+0x1c>
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    b78c:	4a07      	ldr	r2, [pc, #28]	; (b7ac <serial2_set_rx+0x58>)
    b78e:	f240 3113 	movw	r1, #787	; 0x313
    b792:	60d1      	str	r1, [r2, #12]
    b794:	e7ee      	b.n	b774 <serial2_set_rx+0x20>
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
    b796:	4a05      	ldr	r2, [pc, #20]	; (b7ac <serial2_set_rx+0x58>)
    b798:	2100      	movs	r1, #0
    b79a:	60d1      	str	r1, [r2, #12]
    b79c:	e7e6      	b.n	b76c <serial2_set_rx+0x18>
    b79e:	bf00      	nop
    b7a0:	1fff89d8 	.word	0x1fff89d8
    b7a4:	40048000 	.word	0x40048000
    b7a8:	4004d000 	.word	0x4004d000
    b7ac:	4004b000 	.word	0x4004b000

0000b7b0 <serial2_set_rts>:

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    b7b0:	4b0d      	ldr	r3, [pc, #52]	; (b7e8 <serial2_set_rts+0x38>)
    b7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b7b4:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    b7b8:	d013      	beq.n	b7e2 <serial2_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    b7ba:	2821      	cmp	r0, #33	; 0x21
    b7bc:	d903      	bls.n	b7c6 <serial2_set_rts+0x16>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    b7be:	4b0b      	ldr	r3, [pc, #44]	; (b7ec <serial2_set_rts+0x3c>)
    b7c0:	2000      	movs	r0, #0
    b7c2:	6018      	str	r0, [r3, #0]
		return 0;
    b7c4:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    b7c6:	4b0a      	ldr	r3, [pc, #40]	; (b7f0 <serial2_set_rts+0x40>)
{
    b7c8:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    b7ca:	4c08      	ldr	r4, [pc, #32]	; (b7ec <serial2_set_rts+0x3c>)
    b7cc:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    b7d0:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    b7d2:	2101      	movs	r1, #1
    b7d4:	f7ff fd98 	bl	b308 <pinMode>
		rts_assert();
    b7d8:	6823      	ldr	r3, [r4, #0]
    b7da:	2200      	movs	r2, #0
    b7dc:	701a      	strb	r2, [r3, #0]
		UART1_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    b7de:	2001      	movs	r0, #1
}
    b7e0:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    b7e2:	4618      	mov	r0, r3
}
    b7e4:	4770      	bx	lr
    b7e6:	bf00      	nop
    b7e8:	40048000 	.word	0x40048000
    b7ec:	1fffba3c 	.word	0x1fffba3c
    b7f0:	0001701c 	.word	0x0001701c

0000b7f4 <serial2_set_cts>:

int serial2_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    b7f4:	4b0c      	ldr	r3, [pc, #48]	; (b828 <serial2_set_cts+0x34>)
    b7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b7f8:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    b7fc:	d012      	beq.n	b824 <serial2_set_cts+0x30>
	if (pin == 23) {
    b7fe:	2817      	cmp	r0, #23
    b800:	d109      	bne.n	b816 <serial2_set_cts+0x22>
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    b802:	4b0a      	ldr	r3, [pc, #40]	; (b82c <serial2_set_cts+0x38>)
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_TXCTSE;
    b804:	4a0a      	ldr	r2, [pc, #40]	; (b830 <serial2_set_cts+0x3c>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    b806:	f240 3102 	movw	r1, #770	; 0x302
    b80a:	6099      	str	r1, [r3, #8]
	UART1_MODEM |= UART_MODEM_TXCTSE;
    b80c:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    b80e:	2001      	movs	r0, #1
	UART1_MODEM |= UART_MODEM_TXCTSE;
    b810:	4303      	orrs	r3, r0
    b812:	7353      	strb	r3, [r2, #13]
	return 1;
    b814:	4770      	bx	lr
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    b816:	4a06      	ldr	r2, [pc, #24]	; (b830 <serial2_set_cts+0x3c>)
    b818:	7b53      	ldrb	r3, [r2, #13]
    b81a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    b81e:	2000      	movs	r0, #0
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    b820:	7353      	strb	r3, [r2, #13]
		return 0;
    b822:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    b824:	4618      	mov	r0, r3
#else
	return 0;
#endif
}
    b826:	4770      	bx	lr
    b828:	40048000 	.word	0x40048000
    b82c:	4004b000 	.word	0x4004b000
    b830:	4006b000 	.word	0x4006b000

0000b834 <serial2_putchar>:

void serial2_putchar(uint32_t c)
{
    b834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    b838:	4b33      	ldr	r3, [pc, #204]	; (b908 <serial2_putchar+0xd4>)
    b83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b83c:	051a      	lsls	r2, r3, #20
    b83e:	d53a      	bpl.n	b8b6 <serial2_putchar+0x82>
	if (transmit_pin) transmit_assert();
    b840:	4b32      	ldr	r3, [pc, #200]	; (b90c <serial2_putchar+0xd8>)
    b842:	681b      	ldr	r3, [r3, #0]
    b844:	4606      	mov	r6, r0
    b846:	b10b      	cbz	r3, b84c <serial2_putchar+0x18>
    b848:	2201      	movs	r2, #1
    b84a:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART1_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    b84c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b910 <serial2_putchar+0xdc>
	if (++head >= tx_buffer_total_size_) head = 0;
    b850:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b914 <serial2_putchar+0xe0>
	head = tx_buffer_head;
    b854:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    b858:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    b85c:	4d2e      	ldr	r5, [pc, #184]	; (b918 <serial2_putchar+0xe4>)
	if (++head >= tx_buffer_total_size_) head = 0;
    b85e:	3401      	adds	r4, #1
    b860:	42a3      	cmp	r3, r4
	while (tx_buffer_tail == head) {
    b862:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    b864:	d929      	bls.n	b8ba <serial2_putchar+0x86>
	while (tx_buffer_tail == head) {
    b866:	429c      	cmp	r4, r3
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
	}
	transmitting = 1;
	tx_buffer_head = head;
    b868:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    b86c:	d114      	bne.n	b898 <serial2_putchar+0x64>
			if ((UART1_S1 & UART_S1_TDRE)) {
    b86e:	4f2b      	ldr	r7, [pc, #172]	; (b91c <serial2_putchar+0xe8>)
					n = tx_buffer[tail];
    b870:	f8df b0ac 	ldr.w	fp, [pc, #172]	; b920 <serial2_putchar+0xec>
    b874:	e005      	b.n	b882 <serial2_putchar+0x4e>
			if ((UART1_S1 & UART_S1_TDRE)) {
    b876:	793b      	ldrb	r3, [r7, #4]
    b878:	061b      	lsls	r3, r3, #24
    b87a:	d423      	bmi.n	b8c4 <serial2_putchar+0x90>
	while (tx_buffer_tail == head) {
    b87c:	782b      	ldrb	r3, [r5, #0]
    b87e:	42a3      	cmp	r3, r4
    b880:	d10a      	bne.n	b898 <serial2_putchar+0x64>
		int priority = nvic_execution_priority();
    b882:	f7ff fa47 	bl	ad14 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    b886:	2840      	cmp	r0, #64	; 0x40
    b888:	ddf5      	ble.n	b876 <serial2_putchar+0x42>
		} else if (priority >= 256) {
    b88a:	28ff      	cmp	r0, #255	; 0xff
    b88c:	ddf6      	ble.n	b87c <serial2_putchar+0x48>
			yield(); // wait
    b88e:	f001 fc7f 	bl	d190 <yield>
	while (tx_buffer_tail == head) {
    b892:	782b      	ldrb	r3, [r5, #0]
    b894:	42a3      	cmp	r3, r4
    b896:	d0f4      	beq.n	b882 <serial2_putchar+0x4e>
	if (head < SERIAL2_TX_BUFFER_SIZE) {
    b898:	2c27      	cmp	r4, #39	; 0x27
    b89a:	d929      	bls.n	b8f0 <serial2_putchar+0xbc>
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
    b89c:	4b21      	ldr	r3, [pc, #132]	; (b924 <serial2_putchar+0xf0>)
    b89e:	3c28      	subs	r4, #40	; 0x28
    b8a0:	681b      	ldr	r3, [r3, #0]
    b8a2:	b2f6      	uxtb	r6, r6
    b8a4:	551e      	strb	r6, [r3, r4]
	transmitting = 1;
    b8a6:	4a20      	ldr	r2, [pc, #128]	; (b928 <serial2_putchar+0xf4>)
	UART1_C2 = C2_TX_ACTIVE;
    b8a8:	4b1c      	ldr	r3, [pc, #112]	; (b91c <serial2_putchar+0xe8>)
	transmitting = 1;
    b8aa:	2101      	movs	r1, #1
    b8ac:	7011      	strb	r1, [r2, #0]
	UART1_C2 = C2_TX_ACTIVE;
    b8ae:	22bc      	movs	r2, #188	; 0xbc
	tx_buffer_head = head;
    b8b0:	f889 a000 	strb.w	sl, [r9]
	UART1_C2 = C2_TX_ACTIVE;
    b8b4:	70da      	strb	r2, [r3, #3]
}
    b8b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    b8ba:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    b8be:	b9a3      	cbnz	r3, b8ea <serial2_putchar+0xb6>
	if (++head >= tx_buffer_total_size_) head = 0;
    b8c0:	4654      	mov	r4, sl
    b8c2:	e7d4      	b.n	b86e <serial2_putchar+0x3a>
				uint32_t tail = tx_buffer_tail;
    b8c4:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b8c6:	f8d8 1000 	ldr.w	r1, [r8]
    b8ca:	1c5a      	adds	r2, r3, #1
    b8cc:	4291      	cmp	r1, r2
				uint32_t tail = tx_buffer_tail;
    b8ce:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b8d0:	d908      	bls.n	b8e4 <serial2_putchar+0xb0>
				if (tail < SERIAL2_TX_BUFFER_SIZE) {
    b8d2:	2a27      	cmp	r2, #39	; 0x27
    b8d4:	d810      	bhi.n	b8f8 <serial2_putchar+0xc4>
				tx_buffer_tail = tail;
    b8d6:	b2d1      	uxtb	r1, r2
					n = tx_buffer[tail];
    b8d8:	f81b 3002 	ldrb.w	r3, [fp, r2]
    b8dc:	b2db      	uxtb	r3, r3
				UART1_D = n;
    b8de:	71fb      	strb	r3, [r7, #7]
				tx_buffer_tail = tail;
    b8e0:	7029      	strb	r1, [r5, #0]
    b8e2:	e7cb      	b.n	b87c <serial2_putchar+0x48>
    b8e4:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b8e6:	460a      	mov	r2, r1
    b8e8:	e7f6      	b.n	b8d8 <serial2_putchar+0xa4>
	while (tx_buffer_tail == head) {
    b8ea:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    b8ee:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    b8f0:	4b0b      	ldr	r3, [pc, #44]	; (b920 <serial2_putchar+0xec>)
    b8f2:	b2f6      	uxtb	r6, r6
    b8f4:	551e      	strb	r6, [r3, r4]
    b8f6:	e7d6      	b.n	b8a6 <serial2_putchar+0x72>
				tx_buffer_tail = tail;
    b8f8:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    b8fa:	4a0a      	ldr	r2, [pc, #40]	; (b924 <serial2_putchar+0xf0>)
    b8fc:	3b27      	subs	r3, #39	; 0x27
    b8fe:	6812      	ldr	r2, [r2, #0]
    b900:	5cd3      	ldrb	r3, [r2, r3]
    b902:	b2db      	uxtb	r3, r3
    b904:	e7eb      	b.n	b8de <serial2_putchar+0xaa>
    b906:	bf00      	nop
    b908:	40048000 	.word	0x40048000
    b90c:	1fffba8c 	.word	0x1fffba8c
    b910:	1fffbabc 	.word	0x1fffbabc
    b914:	1fff89dc 	.word	0x1fff89dc
    b918:	1fffbac4 	.word	0x1fffbac4
    b91c:	4006b000 	.word	0x4006b000
    b920:	1fffba94 	.word	0x1fffba94
    b924:	1fffbac0 	.word	0x1fffbac0
    b928:	1fffba90 	.word	0x1fffba90

0000b92c <serial2_write>:

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    b92c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    b930:	4b39      	ldr	r3, [pc, #228]	; (ba18 <serial2_write+0xec>)
    b932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b934:	051a      	lsls	r2, r3, #20
    b936:	d53c      	bpl.n	b9b2 <serial2_write+0x86>
	if (transmit_pin) transmit_assert();
    b938:	4b38      	ldr	r3, [pc, #224]	; (ba1c <serial2_write+0xf0>)
    b93a:	681b      	ldr	r3, [r3, #0]
    b93c:	b10b      	cbz	r3, b942 <serial2_write+0x16>
    b93e:	2201      	movs	r2, #1
    b940:	701a      	strb	r2, [r3, #0]
	const uint8_t *end = p + count;
    b942:	1847      	adds	r7, r0, r1
	while (p < end) {
    b944:	42b8      	cmp	r0, r7
    b946:	d231      	bcs.n	b9ac <serial2_write+0x80>
    b948:	4e35      	ldr	r6, [pc, #212]	; (ba20 <serial2_write+0xf4>)
    b94a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; ba24 <serial2_write+0xf8>
    b94e:	4c36      	ldr	r4, [pc, #216]	; (ba28 <serial2_write+0xfc>)
		head = tx_buffer_head;
		if (++head >= tx_buffer_total_size_) head = 0;
		if (tx_buffer_tail == head) {
			UART1_C2 = C2_TX_ACTIVE;
    b950:	f8df 90d8 	ldr.w	r9, [pc, #216]	; ba2c <serial2_write+0x100>
    b954:	f100 0a01 	add.w	sl, r0, #1
    b958:	e013      	b.n	b982 <serial2_write+0x56>
		if (tx_buffer_tail == head) {
    b95a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    b95e:	b353      	cbz	r3, b9b6 <serial2_write+0x8a>
    b960:	f04f 0b00 	mov.w	fp, #0
    b964:	465d      	mov	r5, fp
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		if (head < SERIAL2_TX_BUFFER_SIZE) {
			tx_buffer[head] = *p++;
    b966:	4a32      	ldr	r2, [pc, #200]	; (ba30 <serial2_write+0x104>)
    b968:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b96c:	5553      	strb	r3, [r2, r5]
    b96e:	4652      	mov	r2, sl
		} else {
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
		}
		transmitting = 1;
    b970:	4930      	ldr	r1, [pc, #192]	; (ba34 <serial2_write+0x108>)
    b972:	2301      	movs	r3, #1
	while (p < end) {
    b974:	42ba      	cmp	r2, r7
		transmitting = 1;
    b976:	700b      	strb	r3, [r1, #0]
	while (p < end) {
    b978:	f10a 0a01 	add.w	sl, sl, #1
		tx_buffer_head = head;
    b97c:	f886 b000 	strb.w	fp, [r6]
	while (p < end) {
    b980:	d214      	bcs.n	b9ac <serial2_write+0x80>
		head = tx_buffer_head;
    b982:	7835      	ldrb	r5, [r6, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    b984:	f8d8 3000 	ldr.w	r3, [r8]
    b988:	3501      	adds	r5, #1
    b98a:	42ab      	cmp	r3, r5
		if (tx_buffer_tail == head) {
    b98c:	7823      	ldrb	r3, [r4, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    b98e:	d9e4      	bls.n	b95a <serial2_write+0x2e>
		if (tx_buffer_tail == head) {
    b990:	42ab      	cmp	r3, r5
		tx_buffer_head = head;
    b992:	fa5f fb85 	uxtb.w	fp, r5
		if (tx_buffer_tail == head) {
    b996:	d00f      	beq.n	b9b8 <serial2_write+0x8c>
		if (head < SERIAL2_TX_BUFFER_SIZE) {
    b998:	2d27      	cmp	r5, #39	; 0x27
    b99a:	d9e4      	bls.n	b966 <serial2_write+0x3a>
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
    b99c:	4b26      	ldr	r3, [pc, #152]	; (ba38 <serial2_write+0x10c>)
    b99e:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    b9a2:	681b      	ldr	r3, [r3, #0]
    b9a4:	3d28      	subs	r5, #40	; 0x28
    b9a6:	555a      	strb	r2, [r3, r5]
    b9a8:	4652      	mov	r2, sl
    b9aa:	e7e1      	b.n	b970 <serial2_write+0x44>
	}
	UART1_C2 = C2_TX_ACTIVE;
    b9ac:	4b1f      	ldr	r3, [pc, #124]	; (ba2c <serial2_write+0x100>)
    b9ae:	22bc      	movs	r2, #188	; 0xbc
    b9b0:	70da      	strb	r2, [r3, #3]
}
    b9b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tx_buffer_tail == head) {
    b9b6:	465d      	mov	r5, fp
			UART1_C2 = C2_TX_ACTIVE;
    b9b8:	f06f 0343 	mvn.w	r3, #67	; 0x43
    b9bc:	f889 3003 	strb.w	r3, [r9, #3]
    b9c0:	e006      	b.n	b9d0 <serial2_write+0xa4>
					if ((UART1_S1 & UART_S1_TDRE)) {
    b9c2:	f899 3004 	ldrb.w	r3, [r9, #4]
    b9c6:	061b      	lsls	r3, r3, #24
    b9c8:	d40b      	bmi.n	b9e2 <serial2_write+0xb6>
			} while (tx_buffer_tail == head);
    b9ca:	7823      	ldrb	r3, [r4, #0]
    b9cc:	42ab      	cmp	r3, r5
    b9ce:	d1e3      	bne.n	b998 <serial2_write+0x6c>
				int priority = nvic_execution_priority();
    b9d0:	f7ff f9a0 	bl	ad14 <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    b9d4:	2840      	cmp	r0, #64	; 0x40
    b9d6:	ddf4      	ble.n	b9c2 <serial2_write+0x96>
				} else if (priority >= 256) {
    b9d8:	28ff      	cmp	r0, #255	; 0xff
    b9da:	ddf6      	ble.n	b9ca <serial2_write+0x9e>
					yield();
    b9dc:	f001 fbd8 	bl	d190 <yield>
    b9e0:	e7f3      	b.n	b9ca <serial2_write+0x9e>
						uint32_t tail = tx_buffer_tail;
    b9e2:	7823      	ldrb	r3, [r4, #0]
						if (++tail >= tx_buffer_total_size_) tail = 0;
    b9e4:	f8d8 1000 	ldr.w	r1, [r8]
    b9e8:	1c5a      	adds	r2, r3, #1
    b9ea:	4291      	cmp	r1, r2
						uint32_t tail = tx_buffer_tail;
    b9ec:	b2db      	uxtb	r3, r3
						if (++tail >= tx_buffer_total_size_) tail = 0;
    b9ee:	d903      	bls.n	b9f8 <serial2_write+0xcc>
						if (tail < SERIAL2_TX_BUFFER_SIZE) {
    b9f0:	2a27      	cmp	r2, #39	; 0x27
    b9f2:	d80a      	bhi.n	ba0a <serial2_write+0xde>
						tx_buffer_tail = tail;
    b9f4:	b2d1      	uxtb	r1, r2
    b9f6:	e001      	b.n	b9fc <serial2_write+0xd0>
    b9f8:	2100      	movs	r1, #0
						if (++tail >= tx_buffer_total_size_) tail = 0;
    b9fa:	460a      	mov	r2, r1
							n = tx_buffer[tail];
    b9fc:	4b0c      	ldr	r3, [pc, #48]	; (ba30 <serial2_write+0x104>)
    b9fe:	5c9b      	ldrb	r3, [r3, r2]
    ba00:	b2db      	uxtb	r3, r3
						UART1_D = n;
    ba02:	f889 3007 	strb.w	r3, [r9, #7]
						tx_buffer_tail = tail;
    ba06:	7021      	strb	r1, [r4, #0]
    ba08:	e7df      	b.n	b9ca <serial2_write+0x9e>
    ba0a:	b2d1      	uxtb	r1, r2
							n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    ba0c:	4a0a      	ldr	r2, [pc, #40]	; (ba38 <serial2_write+0x10c>)
    ba0e:	3b27      	subs	r3, #39	; 0x27
    ba10:	6812      	ldr	r2, [r2, #0]
    ba12:	5cd3      	ldrb	r3, [r2, r3]
    ba14:	b2db      	uxtb	r3, r3
    ba16:	e7f4      	b.n	ba02 <serial2_write+0xd6>
    ba18:	40048000 	.word	0x40048000
    ba1c:	1fffba8c 	.word	0x1fffba8c
    ba20:	1fffbabc 	.word	0x1fffbabc
    ba24:	1fff89dc 	.word	0x1fff89dc
    ba28:	1fffbac4 	.word	0x1fffbac4
    ba2c:	4006b000 	.word	0x4006b000
    ba30:	1fffba94 	.word	0x1fffba94
    ba34:	1fffba90 	.word	0x1fffba90
    ba38:	1fffbac0 	.word	0x1fffbac0

0000ba3c <serial2_flush>:
	while (count-- > 0) serial2_putchar(*p++);
}
#endif

void serial2_flush(void)
{
    ba3c:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    ba3e:	4c04      	ldr	r4, [pc, #16]	; (ba50 <serial2_flush+0x14>)
    ba40:	7823      	ldrb	r3, [r4, #0]
    ba42:	b123      	cbz	r3, ba4e <serial2_flush+0x12>
    ba44:	f001 fba4 	bl	d190 <yield>
    ba48:	7823      	ldrb	r3, [r4, #0]
    ba4a:	2b00      	cmp	r3, #0
    ba4c:	d1fa      	bne.n	ba44 <serial2_flush+0x8>
}
    ba4e:	bd10      	pop	{r4, pc}
    ba50:	1fffba90 	.word	0x1fffba90

0000ba54 <serial2_write_buffer_free>:

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    ba54:	4a08      	ldr	r2, [pc, #32]	; (ba78 <serial2_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    ba56:	4b09      	ldr	r3, [pc, #36]	; (ba7c <serial2_write_buffer_free+0x28>)
	head = tx_buffer_head;
    ba58:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    ba5a:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ba5c:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    ba5e:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    ba60:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ba62:	d202      	bcs.n	ba6a <serial2_write_buffer_free+0x16>
	return tail - head - 1;
    ba64:	3b01      	subs	r3, #1
    ba66:	1a18      	subs	r0, r3, r0
}
    ba68:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ba6a:	4a05      	ldr	r2, [pc, #20]	; (ba80 <serial2_write_buffer_free+0x2c>)
    ba6c:	6812      	ldr	r2, [r2, #0]
    ba6e:	3a01      	subs	r2, #1
    ba70:	4413      	add	r3, r2
    ba72:	1a18      	subs	r0, r3, r0
    ba74:	4770      	bx	lr
    ba76:	bf00      	nop
    ba78:	1fffbabc 	.word	0x1fffbabc
    ba7c:	1fffbac4 	.word	0x1fffbac4
    ba80:	1fff89dc 	.word	0x1fff89dc

0000ba84 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ba84:	4a06      	ldr	r2, [pc, #24]	; (baa0 <serial2_available+0x1c>)
	tail = rx_buffer_tail;
    ba86:	4b07      	ldr	r3, [pc, #28]	; (baa4 <serial2_available+0x20>)
	head = rx_buffer_head;
    ba88:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    ba8a:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    ba8c:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    ba8e:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    ba90:	bf3c      	itt	cc
    ba92:	4a05      	ldrcc	r2, [pc, #20]	; (baa8 <serial2_available+0x24>)
    ba94:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    ba96:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    ba98:	bf38      	it	cc
    ba9a:	189b      	addcc	r3, r3, r2
    ba9c:	1a18      	subs	r0, r3, r0
}
    ba9e:	4770      	bx	lr
    baa0:	1fffba80 	.word	0x1fffba80
    baa4:	1fffba88 	.word	0x1fffba88
    baa8:	1fff89d4 	.word	0x1fff89d4

0000baac <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    baac:	4b1b      	ldr	r3, [pc, #108]	; (bb1c <serial2_getchar+0x70>)
	tail = rx_buffer_tail;
    baae:	491c      	ldr	r1, [pc, #112]	; (bb20 <serial2_getchar+0x74>)
	head = rx_buffer_head;
    bab0:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    bab2:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    bab4:	429a      	cmp	r2, r3
    bab6:	d02e      	beq.n	bb16 <serial2_getchar+0x6a>
{
    bab8:	b510      	push	{r4, lr}
    baba:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    babe:	4a19      	ldr	r2, [pc, #100]	; (bb24 <serial2_getchar+0x78>)
    bac0:	b2d8      	uxtb	r0, r3
    bac2:	6812      	ldr	r2, [r2, #0]
    bac4:	1c43      	adds	r3, r0, #1
    bac6:	429a      	cmp	r2, r3
    bac8:	d919      	bls.n	bafe <serial2_getchar+0x52>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    baca:	2b3f      	cmp	r3, #63	; 0x3f
    bacc:	d81b      	bhi.n	bb06 <serial2_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    bace:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    bad2:	4815      	ldr	r0, [pc, #84]	; (bb28 <serial2_getchar+0x7c>)
    bad4:	5cc0      	ldrb	r0, [r0, r3]
    bad6:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    bad8:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    badc:	4913      	ldr	r1, [pc, #76]	; (bb2c <serial2_getchar+0x80>)
    bade:	6809      	ldr	r1, [r1, #0]
    bae0:	b161      	cbz	r1, bafc <serial2_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    bae2:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    bae4:	bf3c      	itt	cc
    bae6:	4472      	addcc	r2, lr
    bae8:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    baea:	4a11      	ldr	r2, [pc, #68]	; (bb30 <serial2_getchar+0x84>)
    baec:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    baee:	bf28      	it	cs
    baf0:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    baf4:	429a      	cmp	r2, r3
    baf6:	d301      	bcc.n	bafc <serial2_getchar+0x50>
    baf8:	2300      	movs	r3, #0
    bafa:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    bafc:	bd10      	pop	{r4, pc}
    bafe:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    bb02:	4663      	mov	r3, ip
    bb04:	e7e5      	b.n	bad2 <serial2_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    bb06:	4c0b      	ldr	r4, [pc, #44]	; (bb34 <serial2_getchar+0x88>)
    bb08:	383f      	subs	r0, #63	; 0x3f
    bb0a:	6824      	ldr	r4, [r4, #0]
    bb0c:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    bb0e:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    bb12:	b2c0      	uxtb	r0, r0
    bb14:	e7e0      	b.n	bad8 <serial2_getchar+0x2c>
	if (head == tail) return -1;
    bb16:	f04f 30ff 	mov.w	r0, #4294967295
}
    bb1a:	4770      	bx	lr
    bb1c:	1fffba80 	.word	0x1fffba80
    bb20:	1fffba88 	.word	0x1fffba88
    bb24:	1fff89d4 	.word	0x1fff89d4
    bb28:	1fffba40 	.word	0x1fffba40
    bb2c:	1fffba3c 	.word	0x1fffba3c
    bb30:	1fff89d0 	.word	0x1fff89d0
    bb34:	1fffba84 	.word	0x1fffba84

0000bb38 <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    bb38:	4a0d      	ldr	r2, [pc, #52]	; (bb70 <serial2_peek+0x38>)
	tail = rx_buffer_tail;
    bb3a:	4b0e      	ldr	r3, [pc, #56]	; (bb74 <serial2_peek+0x3c>)
	head = rx_buffer_head;
    bb3c:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    bb3e:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    bb40:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    bb42:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    bb44:	d011      	beq.n	bb6a <serial2_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    bb46:	490c      	ldr	r1, [pc, #48]	; (bb78 <serial2_peek+0x40>)
    bb48:	6809      	ldr	r1, [r1, #0]
    bb4a:	1c53      	adds	r3, r2, #1
    bb4c:	4299      	cmp	r1, r3
    bb4e:	d907      	bls.n	bb60 <serial2_peek+0x28>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    bb50:	2b3f      	cmp	r3, #63	; 0x3f
    bb52:	d906      	bls.n	bb62 <serial2_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    bb54:	4b09      	ldr	r3, [pc, #36]	; (bb7c <serial2_peek+0x44>)
    bb56:	3a3f      	subs	r2, #63	; 0x3f
    bb58:	681b      	ldr	r3, [r3, #0]
    bb5a:	5c98      	ldrb	r0, [r3, r2]
    bb5c:	b2c0      	uxtb	r0, r0
    bb5e:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    bb60:	2300      	movs	r3, #0
		return rx_buffer[tail];
    bb62:	4a07      	ldr	r2, [pc, #28]	; (bb80 <serial2_peek+0x48>)
    bb64:	5cd0      	ldrb	r0, [r2, r3]
    bb66:	b2c0      	uxtb	r0, r0
    bb68:	4770      	bx	lr
	if (head == tail) return -1;
    bb6a:	f04f 30ff 	mov.w	r0, #4294967295
}
    bb6e:	4770      	bx	lr
    bb70:	1fffba80 	.word	0x1fffba80
    bb74:	1fffba88 	.word	0x1fffba88
    bb78:	1fff89d4 	.word	0x1fff89d4
    bb7c:	1fffba84 	.word	0x1fffba84
    bb80:	1fffba40 	.word	0x1fffba40

0000bb84 <serial2_clear>:

void serial2_clear(void)
{
#ifdef HAS_KINETISK_UART1_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    bb84:	4b0c      	ldr	r3, [pc, #48]	; (bbb8 <serial2_clear+0x34>)
    bb86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bb88:	051b      	lsls	r3, r3, #20
    bb8a:	d514      	bpl.n	bbb6 <serial2_clear+0x32>
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    bb8c:	4b0b      	ldr	r3, [pc, #44]	; (bbbc <serial2_clear+0x38>)
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    bb8e:	480c      	ldr	r0, [pc, #48]	; (bbc0 <serial2_clear+0x3c>)
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    bb90:	78da      	ldrb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    bb92:	2140      	movs	r1, #64	; 0x40
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    bb94:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    bb98:	70da      	strb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    bb9a:	7459      	strb	r1, [r3, #17]
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    bb9c:	78da      	ldrb	r2, [r3, #3]
	rx_buffer_head = rx_buffer_tail;
    bb9e:	4909      	ldr	r1, [pc, #36]	; (bbc4 <serial2_clear+0x40>)
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    bba0:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    bba4:	70da      	strb	r2, [r3, #3]
	if (rts_pin) rts_assert();
    bba6:	4a08      	ldr	r2, [pc, #32]	; (bbc8 <serial2_clear+0x44>)
	rx_buffer_head = rx_buffer_tail;
    bba8:	7803      	ldrb	r3, [r0, #0]
	if (rts_pin) rts_assert();
    bbaa:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    bbac:	b2db      	uxtb	r3, r3
    bbae:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    bbb0:	b10a      	cbz	r2, bbb6 <serial2_clear+0x32>
    bbb2:	2300      	movs	r3, #0
    bbb4:	7013      	strb	r3, [r2, #0]
}
    bbb6:	4770      	bx	lr
    bbb8:	40048000 	.word	0x40048000
    bbbc:	4006b000 	.word	0x4006b000
    bbc0:	1fffba88 	.word	0x1fffba88
    bbc4:	1fffba80 	.word	0x1fffba80
    bbc8:	1fffba3c 	.word	0x1fffba3c

0000bbcc <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    bbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    bbd0:	4c50      	ldr	r4, [pc, #320]	; (bd14 <uart1_status_isr+0x148>)
    bbd2:	7923      	ldrb	r3, [r4, #4]
    bbd4:	f013 0f30 	tst.w	r3, #48	; 0x30
    bbd8:	d047      	beq.n	bc6a <uart1_status_isr+0x9e>
		__disable_irq();
    bbda:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    bbdc:	7da3      	ldrb	r3, [r4, #22]
		if (avail == 0) {
    bbde:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    bbe2:	2b00      	cmp	r3, #0
    bbe4:	d058      	beq.n	bc98 <uart1_status_isr+0xcc>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    bbe6:	b662      	cpsie	i
			head = rx_buffer_head;
    bbe8:	f8df 812c 	ldr.w	r8, [pc, #300]	; bd18 <uart1_status_isr+0x14c>
			tail = rx_buffer_tail;
    bbec:	484b      	ldr	r0, [pc, #300]	; (bd1c <uart1_status_isr+0x150>)
			head = rx_buffer_head;
    bbee:	f898 3000 	ldrb.w	r3, [r8]
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    bbf2:	4a4b      	ldr	r2, [pc, #300]	; (bd20 <uart1_status_isr+0x154>)
			tail = rx_buffer_tail;
    bbf4:	7805      	ldrb	r5, [r0, #0]
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    bbf6:	6816      	ldr	r6, [r2, #0]
				if (newhead != tail) {
					head = newhead;
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
						rx_buffer[head] = n;
    bbf8:	4f4a      	ldr	r7, [pc, #296]	; (bd24 <uart1_status_isr+0x158>)
			head = rx_buffer_head;
    bbfa:	fa5f fc83 	uxtb.w	ip, r3
					} else {
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    bbfe:	4b4a      	ldr	r3, [pc, #296]	; (bd28 <uart1_status_isr+0x15c>)
			tail = rx_buffer_tail;
    bc00:	b2ed      	uxtb	r5, r5
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    bc02:	f8d3 e000 	ldr.w	lr, [r3]
    bc06:	e008      	b.n	bc1a <uart1_status_isr+0x4e>
				if (newhead != tail) {
    bc08:	b11d      	cbz	r5, bc12 <uart1_status_isr+0x46>
    bc0a:	f04f 0c00 	mov.w	ip, #0
						rx_buffer[head] = n;
    bc0e:	f807 300c 	strb.w	r3, [r7, ip]
					}
				}
			} while (--avail > 0);
    bc12:	1e4a      	subs	r2, r1, #1
    bc14:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    bc18:	d012      	beq.n	bc40 <uart1_status_isr+0x74>
					n = UART1_D;
    bc1a:	79e3      	ldrb	r3, [r4, #7]
				newhead = head + 1;
    bc1c:	f10c 0201 	add.w	r2, ip, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    bc20:	4296      	cmp	r6, r2
					n = UART1_D;
    bc22:	b2db      	uxtb	r3, r3
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    bc24:	d9f0      	bls.n	bc08 <uart1_status_isr+0x3c>
				if (newhead != tail) {
    bc26:	4295      	cmp	r5, r2
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    bc28:	f1ac 003f 	sub.w	r0, ip, #63	; 0x3f
				if (newhead != tail) {
    bc2c:	d0f1      	beq.n	bc12 <uart1_status_isr+0x46>
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
    bc2e:	2a3f      	cmp	r2, #63	; 0x3f
    bc30:	d96d      	bls.n	bd0e <uart1_status_isr+0x142>
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    bc32:	4694      	mov	ip, r2
			} while (--avail > 0);
    bc34:	1e4a      	subs	r2, r1, #1
    bc36:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    bc3a:	f80e 3000 	strb.w	r3, [lr, r0]
			} while (--avail > 0);
    bc3e:	d1ec      	bne.n	bc1a <uart1_status_isr+0x4e>
			rx_buffer_head = head;
    bc40:	fa5f f38c 	uxtb.w	r3, ip
    bc44:	f888 3000 	strb.w	r3, [r8]
			if (rts_pin) {
    bc48:	4b38      	ldr	r3, [pc, #224]	; (bd2c <uart1_status_isr+0x160>)
    bc4a:	6819      	ldr	r1, [r3, #0]
    bc4c:	b169      	cbz	r1, bc6a <uart1_status_isr+0x9e>
				int avail;
				if (head >= tail) avail = head - tail;
    bc4e:	45ac      	cmp	ip, r5
				else avail = rx_buffer_total_size_ + head - tail;
    bc50:	bf3c      	itt	cc
    bc52:	1b72      	subcc	r2, r6, r5
    bc54:	eb02 030c 	addcc.w	r3, r2, ip
				if (avail >= rts_high_watermark_) rts_deassert();
    bc58:	4a35      	ldr	r2, [pc, #212]	; (bd30 <uart1_status_isr+0x164>)
    bc5a:	6812      	ldr	r2, [r2, #0]
				if (head >= tail) avail = head - tail;
    bc5c:	bf28      	it	cs
    bc5e:	ebac 0305 	subcs.w	r3, ip, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    bc62:	429a      	cmp	r2, r3
    bc64:	bf9c      	itt	ls
    bc66:	2301      	movls	r3, #1
    bc68:	700b      	strbls	r3, [r1, #0]
			}
		}
	}
	c = UART1_C2;
    bc6a:	482a      	ldr	r0, [pc, #168]	; (bd14 <uart1_status_isr+0x148>)
    bc6c:	78c3      	ldrb	r3, [r0, #3]
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    bc6e:	061e      	lsls	r6, r3, #24
	c = UART1_C2;
    bc70:	b2dd      	uxtb	r5, r3
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    bc72:	d416      	bmi.n	bca2 <uart1_status_isr+0xd6>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    bc74:	066a      	lsls	r2, r5, #25
    bc76:	d50d      	bpl.n	bc94 <uart1_status_isr+0xc8>
    bc78:	4b26      	ldr	r3, [pc, #152]	; (bd14 <uart1_status_isr+0x148>)
    bc7a:	791b      	ldrb	r3, [r3, #4]
    bc7c:	065b      	lsls	r3, r3, #25
    bc7e:	d509      	bpl.n	bc94 <uart1_status_isr+0xc8>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    bc80:	4b2c      	ldr	r3, [pc, #176]	; (bd34 <uart1_status_isr+0x168>)
		transmitting = 0;
    bc82:	492d      	ldr	r1, [pc, #180]	; (bd38 <uart1_status_isr+0x16c>)
		if (transmit_pin) transmit_deassert();
    bc84:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    bc86:	2200      	movs	r2, #0
    bc88:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    bc8a:	b103      	cbz	r3, bc8e <uart1_status_isr+0xc2>
    bc8c:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART1_C3 = reg;
			__enable_irq();
		}
		#endif		
		UART1_C2 = C2_TX_INACTIVE;
    bc8e:	4b21      	ldr	r3, [pc, #132]	; (bd14 <uart1_status_isr+0x148>)
    bc90:	223c      	movs	r2, #60	; 0x3c
    bc92:	70da      	strb	r2, [r3, #3]
	}
}
    bc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    bc98:	2340      	movs	r3, #64	; 0x40
			c = UART1_D;
    bc9a:	79e2      	ldrb	r2, [r4, #7]
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    bc9c:	7463      	strb	r3, [r4, #17]
			__enable_irq();
    bc9e:	b662      	cpsie	i
    bca0:	e7e3      	b.n	bc6a <uart1_status_isr+0x9e>
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    bca2:	7903      	ldrb	r3, [r0, #4]
    bca4:	061c      	lsls	r4, r3, #24
    bca6:	d5e5      	bpl.n	bc74 <uart1_status_isr+0xa8>
		head = tx_buffer_head;
    bca8:	4b24      	ldr	r3, [pc, #144]	; (bd3c <uart1_status_isr+0x170>)
			if (++tail >= tx_buffer_total_size_) tail = 0;
    bcaa:	4a25      	ldr	r2, [pc, #148]	; (bd40 <uart1_status_isr+0x174>)
		tail = tx_buffer_tail;
    bcac:	f8df e094 	ldr.w	lr, [pc, #148]	; bd44 <uart1_status_isr+0x178>
		head = tx_buffer_head;
    bcb0:	781c      	ldrb	r4, [r3, #0]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    bcb2:	6816      	ldr	r6, [r2, #0]
		tail = tx_buffer_tail;
    bcb4:	f89e 3000 	ldrb.w	r3, [lr]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    bcb8:	4a23      	ldr	r2, [pc, #140]	; (bd48 <uart1_status_isr+0x17c>)
				n = tx_buffer[tail];
    bcba:	4f24      	ldr	r7, [pc, #144]	; (bd4c <uart1_status_isr+0x180>)
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    bcbc:	f8d2 c000 	ldr.w	ip, [r2]
		head = tx_buffer_head;
    bcc0:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    bcc2:	b2db      	uxtb	r3, r3
    bcc4:	e007      	b.n	bcd6 <uart1_status_isr+0x10a>
			avail = UART1_S1;
    bcc6:	7903      	ldrb	r3, [r0, #4]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    bcc8:	2300      	movs	r3, #0
				n = tx_buffer[tail];
    bcca:	5cfa      	ldrb	r2, [r7, r3]
    bccc:	b2d2      	uxtb	r2, r2
			UART1_D = n;
    bcce:	71c2      	strb	r2, [r0, #7]
		} while (UART1_TCFIFO < 8);
    bcd0:	7d02      	ldrb	r2, [r0, #20]
    bcd2:	2a07      	cmp	r2, #7
    bcd4:	d811      	bhi.n	bcfa <uart1_status_isr+0x12e>
			if (tail == head) break;
    bcd6:	42a3      	cmp	r3, r4
			if (++tail >= tx_buffer_total_size_) tail = 0;
    bcd8:	f103 0101 	add.w	r1, r3, #1
			if (tail == head) break;
    bcdc:	d00e      	beq.n	bcfc <uart1_status_isr+0x130>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    bcde:	428e      	cmp	r6, r1
    bce0:	d9f1      	bls.n	bcc6 <uart1_status_isr+0xfa>
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    bce2:	2927      	cmp	r1, #39	; 0x27
			avail = UART1_S1;
    bce4:	7902      	ldrb	r2, [r0, #4]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    bce6:	f1a3 0327 	sub.w	r3, r3, #39	; 0x27
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    bcea:	d801      	bhi.n	bcf0 <uart1_status_isr+0x124>
    bcec:	460b      	mov	r3, r1
    bcee:	e7ec      	b.n	bcca <uart1_status_isr+0xfe>
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    bcf0:	f81c 2003 	ldrb.w	r2, [ip, r3]
    bcf4:	460b      	mov	r3, r1
    bcf6:	b2d2      	uxtb	r2, r2
    bcf8:	e7e9      	b.n	bcce <uart1_status_isr+0x102>
		tx_buffer_tail = tail;
    bcfa:	b2dc      	uxtb	r4, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    bcfc:	4b05      	ldr	r3, [pc, #20]	; (bd14 <uart1_status_isr+0x148>)
		tx_buffer_tail = tail;
    bcfe:	f88e 4000 	strb.w	r4, [lr]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    bd02:	791a      	ldrb	r2, [r3, #4]
    bd04:	0611      	lsls	r1, r2, #24
    bd06:	bf44      	itt	mi
    bd08:	227c      	movmi	r2, #124	; 0x7c
    bd0a:	70da      	strbmi	r2, [r3, #3]
    bd0c:	e7b2      	b.n	bc74 <uart1_status_isr+0xa8>
    bd0e:	4694      	mov	ip, r2
    bd10:	e77d      	b.n	bc0e <uart1_status_isr+0x42>
    bd12:	bf00      	nop
    bd14:	4006b000 	.word	0x4006b000
    bd18:	1fffba80 	.word	0x1fffba80
    bd1c:	1fffba88 	.word	0x1fffba88
    bd20:	1fff89d4 	.word	0x1fff89d4
    bd24:	1fffba40 	.word	0x1fffba40
    bd28:	1fffba84 	.word	0x1fffba84
    bd2c:	1fffba3c 	.word	0x1fffba3c
    bd30:	1fff89cc 	.word	0x1fff89cc
    bd34:	1fffba8c 	.word	0x1fffba8c
    bd38:	1fffba90 	.word	0x1fffba90
    bd3c:	1fffbabc 	.word	0x1fffbabc
    bd40:	1fff89dc 	.word	0x1fff89dc
    bd44:	1fffbac4 	.word	0x1fffbac4
    bd48:	1fffbac0 	.word	0x1fffbac0
    bd4c:	1fffba94 	.word	0x1fffba94

0000bd50 <serial2_add_memory_for_read>:

void serial2_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    bd50:	4b09      	ldr	r3, [pc, #36]	; (bd78 <serial2_add_memory_for_read+0x28>)
{
    bd52:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    bd54:	6018      	str	r0, [r3, #0]
	if (buffer) {
    bd56:	b160      	cbz	r0, bd72 <serial2_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE + length;
    bd58:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    bd5c:	4b07      	ldr	r3, [pc, #28]	; (bd7c <serial2_add_memory_for_read+0x2c>)
    bd5e:	4808      	ldr	r0, [pc, #32]	; (bd80 <serial2_add_memory_for_read+0x30>)
    bd60:	f101 021a 	add.w	r2, r1, #26
    bd64:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    bd66:	4b07      	ldr	r3, [pc, #28]	; (bd84 <serial2_add_memory_for_read+0x34>)
    bd68:	6004      	str	r4, [r0, #0]
    bd6a:	3128      	adds	r1, #40	; 0x28
}
    bd6c:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    bd6e:	6019      	str	r1, [r3, #0]
}
    bd70:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
    bd72:	2440      	movs	r4, #64	; 0x40
    bd74:	e7f2      	b.n	bd5c <serial2_add_memory_for_read+0xc>
    bd76:	bf00      	nop
    bd78:	1fffba84 	.word	0x1fffba84
    bd7c:	1fff89d0 	.word	0x1fff89d0
    bd80:	1fff89d4 	.word	0x1fff89d4
    bd84:	1fff89cc 	.word	0x1fff89cc

0000bd88 <serial2_add_memory_for_write>:

void serial2_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    bd88:	4b05      	ldr	r3, [pc, #20]	; (bda0 <serial2_add_memory_for_write+0x18>)
    bd8a:	6018      	str	r0, [r3, #0]
	if (buffer) {
    bd8c:	b118      	cbz	r0, bd96 <serial2_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE + length;
    bd8e:	4b05      	ldr	r3, [pc, #20]	; (bda4 <serial2_add_memory_for_write+0x1c>)
    bd90:	3128      	adds	r1, #40	; 0x28
    bd92:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
	} 
}
    bd94:	4770      	bx	lr
    bd96:	4b03      	ldr	r3, [pc, #12]	; (bda4 <serial2_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
    bd98:	2128      	movs	r1, #40	; 0x28
    bd9a:	6019      	str	r1, [r3, #0]
}
    bd9c:	4770      	bx	lr
    bd9e:	bf00      	nop
    bda0:	1fffbac0 	.word	0x1fffbac0
    bda4:	1fff89dc 	.word	0x1fff89dc

0000bda8 <serial3_putchar.part.0>:
#else
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
    bda8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
    bdac:	4b31      	ldr	r3, [pc, #196]	; (be74 <serial3_putchar.part.0+0xcc>)
    bdae:	681b      	ldr	r3, [r3, #0]
void serial3_putchar(uint32_t c)
    bdb0:	4607      	mov	r7, r0
	if (transmit_pin) transmit_assert();
    bdb2:	b10b      	cbz	r3, bdb8 <serial3_putchar.part.0+0x10>
    bdb4:	2201      	movs	r2, #1
    bdb6:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART2_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    bdb8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; be78 <serial3_putchar.part.0+0xd0>
	if (++head >= tx_buffer_total_size_) head = 0;
    bdbc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; be7c <serial3_putchar.part.0+0xd4>
	head = tx_buffer_head;
    bdc0:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    bdc4:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    bdc8:	4d2d      	ldr	r5, [pc, #180]	; (be80 <serial3_putchar.part.0+0xd8>)
	if (++head >= tx_buffer_total_size_) head = 0;
    bdca:	3401      	adds	r4, #1
    bdcc:	429c      	cmp	r4, r3
	while (tx_buffer_tail == head) {
    bdce:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    bdd0:	d32a      	bcc.n	be28 <serial3_putchar.part.0+0x80>
	while (tx_buffer_tail == head) {
    bdd2:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    bdd6:	2b00      	cmp	r3, #0
    bdd8:	d13e      	bne.n	be58 <serial3_putchar.part.0+0xb0>
	if (++head >= tx_buffer_total_size_) head = 0;
    bdda:	4654      	mov	r4, sl
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
    bddc:	4e29      	ldr	r6, [pc, #164]	; (be84 <serial3_putchar.part.0+0xdc>)
				uint32_t tail = tx_buffer_tail;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
					n = tx_buffer[tail];
    bdde:	f8df b0a8 	ldr.w	fp, [pc, #168]	; be88 <serial3_putchar.part.0+0xe0>
    bde2:	e005      	b.n	bdf0 <serial3_putchar.part.0+0x48>
			if ((UART2_S1 & UART_S1_TDRE)) {
    bde4:	7933      	ldrb	r3, [r6, #4]
    bde6:	061b      	lsls	r3, r3, #24
    bde8:	d423      	bmi.n	be32 <serial3_putchar.part.0+0x8a>
	while (tx_buffer_tail == head) {
    bdea:	782b      	ldrb	r3, [r5, #0]
    bdec:	42a3      	cmp	r3, r4
    bdee:	d10a      	bne.n	be06 <serial3_putchar.part.0+0x5e>
		int priority = nvic_execution_priority();
    bdf0:	f7fe ff90 	bl	ad14 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    bdf4:	2840      	cmp	r0, #64	; 0x40
    bdf6:	ddf5      	ble.n	bde4 <serial3_putchar.part.0+0x3c>
				}
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    bdf8:	28ff      	cmp	r0, #255	; 0xff
    bdfa:	ddf6      	ble.n	bdea <serial3_putchar.part.0+0x42>
			yield(); // wait
    bdfc:	f001 f9c8 	bl	d190 <yield>
	while (tx_buffer_tail == head) {
    be00:	782b      	ldrb	r3, [r5, #0]
    be02:	42a3      	cmp	r3, r4
    be04:	d0f4      	beq.n	bdf0 <serial3_putchar.part.0+0x48>
		}
	}
	if (head < SERIAL3_TX_BUFFER_SIZE) {
    be06:	2c27      	cmp	r4, #39	; 0x27
    be08:	d929      	bls.n	be5e <serial3_putchar.part.0+0xb6>
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL3_TX_BUFFER_SIZE] = c;
    be0a:	4b20      	ldr	r3, [pc, #128]	; (be8c <serial3_putchar.part.0+0xe4>)
    be0c:	3c28      	subs	r4, #40	; 0x28
    be0e:	681b      	ldr	r3, [r3, #0]
    be10:	b2ff      	uxtb	r7, r7
    be12:	551f      	strb	r7, [r3, r4]
	}
	transmitting = 1;
    be14:	4a1e      	ldr	r2, [pc, #120]	; (be90 <serial3_putchar.part.0+0xe8>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    be16:	4b1b      	ldr	r3, [pc, #108]	; (be84 <serial3_putchar.part.0+0xdc>)
	transmitting = 1;
    be18:	2101      	movs	r1, #1
    be1a:	7011      	strb	r1, [r2, #0]
	UART2_C2 = C2_TX_ACTIVE;
    be1c:	22ac      	movs	r2, #172	; 0xac
	tx_buffer_head = head;
    be1e:	f889 a000 	strb.w	sl, [r9]
	UART2_C2 = C2_TX_ACTIVE;
    be22:	70da      	strb	r2, [r3, #3]
}
    be24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    be28:	429c      	cmp	r4, r3
	tx_buffer_head = head;
    be2a:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    be2e:	d0d5      	beq.n	bddc <serial3_putchar.part.0+0x34>
    be30:	e7e9      	b.n	be06 <serial3_putchar.part.0+0x5e>
				uint32_t tail = tx_buffer_tail;
    be32:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    be34:	f8d8 1000 	ldr.w	r1, [r8]
    be38:	1c5a      	adds	r2, r3, #1
    be3a:	428a      	cmp	r2, r1
				uint32_t tail = tx_buffer_tail;
    be3c:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    be3e:	d203      	bcs.n	be48 <serial3_putchar.part.0+0xa0>
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
    be40:	2a27      	cmp	r2, #39	; 0x27
    be42:	d810      	bhi.n	be66 <serial3_putchar.part.0+0xbe>
				tx_buffer_tail = tail;
    be44:	b2d1      	uxtb	r1, r2
    be46:	e001      	b.n	be4c <serial3_putchar.part.0+0xa4>
    be48:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    be4a:	460a      	mov	r2, r1
					n = tx_buffer[tail];
    be4c:	f81b 3002 	ldrb.w	r3, [fp, r2]
    be50:	b2db      	uxtb	r3, r3
				UART2_D = n;
    be52:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    be54:	7029      	strb	r1, [r5, #0]
    be56:	e7c8      	b.n	bdea <serial3_putchar.part.0+0x42>
	while (tx_buffer_tail == head) {
    be58:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    be5c:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    be5e:	4b0a      	ldr	r3, [pc, #40]	; (be88 <serial3_putchar.part.0+0xe0>)
    be60:	b2ff      	uxtb	r7, r7
    be62:	551f      	strb	r7, [r3, r4]
    be64:	e7d6      	b.n	be14 <serial3_putchar.part.0+0x6c>
				tx_buffer_tail = tail;
    be66:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    be68:	4a08      	ldr	r2, [pc, #32]	; (be8c <serial3_putchar.part.0+0xe4>)
    be6a:	3b27      	subs	r3, #39	; 0x27
    be6c:	6812      	ldr	r2, [r2, #0]
    be6e:	5cd3      	ldrb	r3, [r2, r3]
    be70:	b2db      	uxtb	r3, r3
    be72:	e7ee      	b.n	be52 <serial3_putchar.part.0+0xaa>
    be74:	1fffbb18 	.word	0x1fffbb18
    be78:	1fffbb48 	.word	0x1fffbb48
    be7c:	1fff89f0 	.word	0x1fff89f0
    be80:	1fffbb50 	.word	0x1fffbb50
    be84:	4006c000 	.word	0x4006c000
    be88:	1fffbb20 	.word	0x1fffbb20
    be8c:	1fffbb4c 	.word	0x1fffbb4c
    be90:	1fffbb1c 	.word	0x1fffbb1c

0000be94 <serial3_begin>:
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    be94:	4a1d      	ldr	r2, [pc, #116]	; (bf0c <serial3_begin+0x78>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    be96:	491e      	ldr	r1, [pc, #120]	; (bf10 <serial3_begin+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    be98:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    be9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    be9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	transmitting = 0;
    bea2:	4d1c      	ldr	r5, [pc, #112]	; (bf14 <serial3_begin+0x80>)
	rx_buffer_head = 0;
    bea4:	f8df 8070 	ldr.w	r8, [pc, #112]	; bf18 <serial3_begin+0x84>
	rx_buffer_tail = 0;
    bea8:	f8df 9070 	ldr.w	r9, [pc, #112]	; bf1c <serial3_begin+0x88>
	tx_buffer_head = 0;
    beac:	4f1c      	ldr	r7, [pc, #112]	; (bf20 <serial3_begin+0x8c>)
	tx_buffer_tail = 0;
    beae:	4e1d      	ldr	r6, [pc, #116]	; (bf24 <serial3_begin+0x90>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    beb0:	6353      	str	r3, [r2, #52]	; 0x34
	rx_buffer_head = 0;
    beb2:	2300      	movs	r3, #0
    beb4:	f888 3000 	strb.w	r3, [r8]
	rx_buffer_tail = 0;
    beb8:	2820      	cmp	r0, #32
    beba:	f889 3000 	strb.w	r3, [r9]
	tx_buffer_head = 0;
    bebe:	703b      	strb	r3, [r7, #0]
	tx_buffer_tail = 0;
    bec0:	7033      	strb	r3, [r6, #0]
	transmitting = 0;
    bec2:	702b      	strb	r3, [r5, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    bec4:	f240 3513 	movw	r5, #787	; 0x313
    bec8:	608d      	str	r5, [r1, #8]
	UART2_BDH = (divisor >> 13) & 0x1F;
    beca:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    bece:	bf38      	it	cc
    bed0:	2020      	movcc	r0, #32
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    bed2:	f44f 7551 	mov.w	r5, #836	; 0x344
    bed6:	60cd      	str	r5, [r1, #12]
	UART2_BDH = (divisor >> 13) & 0x1F;
    bed8:	f3c0 3144 	ubfx	r1, r0, #13, #5
    bedc:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    bede:	f3c0 1e47 	ubfx	lr, r0, #5, #8
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    bee2:	4c11      	ldr	r4, [pc, #68]	; (bf28 <serial3_begin+0x94>)
	UART2_BDL = (divisor >> 5) & 0xFF;
    bee4:	f882 e001 	strb.w	lr, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    bee8:	f000 001f 	and.w	r0, r0, #31
	UART2_C2 = C2_TX_INACTIVE;
    beec:	212c      	movs	r1, #44	; 0x2c
	UART2_C4 = divisor & 0x1F;
    beee:	7290      	strb	r0, [r2, #10]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    bef0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	UART2_C1 = 0;
    bef4:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    bef6:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    bef8:	70d1      	strb	r1, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    befa:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    befc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    bf00:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    bf04:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
}
    bf08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bf0c:	40048000 	.word	0x40048000
    bf10:	4004c000 	.word	0x4004c000
    bf14:	1fffbb1c 	.word	0x1fffbb1c
    bf18:	1fffbb0c 	.word	0x1fffbb0c
    bf1c:	1fffbb14 	.word	0x1fffbb14
    bf20:	1fffbb48 	.word	0x1fffbb48
    bf24:	1fffbb50 	.word	0x1fffbb50
    bf28:	e000e400 	.word	0xe000e400

0000bf2c <serial3_format>:
	c = UART2_C1;
    bf2c:	4b21      	ldr	r3, [pc, #132]	; (bfb4 <serial3_format+0x88>)
	UART2_C1 = c;
    bf2e:	4921      	ldr	r1, [pc, #132]	; (bfb4 <serial3_format+0x88>)
	c = UART2_C1;
    bf30:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    bf32:	f000 0203 	and.w	r2, r0, #3
    bf36:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    bf3a:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    bf3c:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    bf3e:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    bf42:	bf48      	it	mi
    bf44:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    bf48:	2a04      	cmp	r2, #4
	UART2_C1 = c;
    bf4a:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    bf4c:	d103      	bne.n	bf56 <serial3_format+0x2a>
    bf4e:	798b      	ldrb	r3, [r1, #6]
    bf50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bf54:	718b      	strb	r3, [r1, #6]
	c = UART2_S2 & ~0x10;
    bf56:	4b17      	ldr	r3, [pc, #92]	; (bfb4 <serial3_format+0x88>)
	UART2_S2 = c;
    bf58:	4a16      	ldr	r2, [pc, #88]	; (bfb4 <serial3_format+0x88>)
	c = UART2_S2 & ~0x10;
    bf5a:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    bf5c:	06c1      	lsls	r1, r0, #27
	c = UART2_S2 & ~0x10;
    bf5e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    bf62:	bf48      	it	mi
    bf64:	f043 0310 	orrmi.w	r3, r3, #16
	UART2_S2 = c;
    bf68:	7153      	strb	r3, [r2, #5]
	c = UART2_C3 & ~0x10;
    bf6a:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    bf6c:	0682      	lsls	r2, r0, #26
	c = UART2_C3 & ~0x10;
    bf6e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART2_C3 = c;
    bf72:	4a10      	ldr	r2, [pc, #64]	; (bfb4 <serial3_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    bf74:	bf48      	it	mi
    bf76:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    bf7a:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART2_C3 = c;
    bf7e:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    bf80:	d010      	beq.n	bfa4 <serial3_format+0x78>
		c = UART2_C1;
    bf82:	7893      	ldrb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    bf84:	490c      	ldr	r1, [pc, #48]	; (bfb8 <serial3_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    bf86:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART2_C1 = c;
    bf8a:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    bf8c:	7809      	ldrb	r1, [r1, #0]
    bf8e:	4b0b      	ldr	r3, [pc, #44]	; (bfbc <serial3_format+0x90>)
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    bf90:	4a0b      	ldr	r2, [pc, #44]	; (bfc0 <serial3_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    bf92:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    bf96:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    bf9a:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    bf9c:	4909      	ldr	r1, [pc, #36]	; (bfc4 <serial3_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    bf9e:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    bfa0:	6011      	str	r1, [r2, #0]
    bfa2:	4770      	bx	lr
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    bfa4:	4b06      	ldr	r3, [pc, #24]	; (bfc0 <serial3_format+0x94>)
    bfa6:	4a07      	ldr	r2, [pc, #28]	; (bfc4 <serial3_format+0x98>)
    bfa8:	6819      	ldr	r1, [r3, #0]
    bfaa:	4291      	cmp	r1, r2
    bfac:	bf08      	it	eq
    bfae:	6018      	streq	r0, [r3, #0]
}
    bfb0:	4770      	bx	lr
    bfb2:	bf00      	nop
    bfb4:	4006c000 	.word	0x4006c000
    bfb8:	1fff89f4 	.word	0x1fff89f4
    bfbc:	0001701c 	.word	0x0001701c
    bfc0:	1fffbb18 	.word	0x1fffbb18
    bfc4:	42d800d4 	.word	0x42d800d4

0000bfc8 <serial3_end>:
{
    bfc8:	b538      	push	{r3, r4, r5, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    bfca:	4b13      	ldr	r3, [pc, #76]	; (c018 <serial3_end+0x50>)
    bfcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bfce:	04db      	lsls	r3, r3, #19
    bfd0:	d520      	bpl.n	c014 <serial3_end+0x4c>
	while (transmitting) yield();  // wait for buffered data to send
    bfd2:	4c12      	ldr	r4, [pc, #72]	; (c01c <serial3_end+0x54>)
    bfd4:	7823      	ldrb	r3, [r4, #0]
    bfd6:	b123      	cbz	r3, bfe2 <serial3_end+0x1a>
    bfd8:	f001 f8da 	bl	d190 <yield>
    bfdc:	7823      	ldrb	r3, [r4, #0]
    bfde:	2b00      	cmp	r3, #0
    bfe0:	d1fa      	bne.n	bfd8 <serial3_end+0x10>
	UART2_C2 = 0;
    bfe2:	4a0f      	ldr	r2, [pc, #60]	; (c020 <serial3_end+0x58>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    bfe4:	490f      	ldr	r1, [pc, #60]	; (c024 <serial3_end+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    bfe6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	UART2_C2 = 0;
    bfea:	2300      	movs	r3, #0
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    bfec:	f240 1003 	movw	r0, #259	; 0x103
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    bff0:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    bff4:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
	UART2_C2 = 0;
    bff8:	70d3      	strb	r3, [r2, #3]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    bffa:	6088      	str	r0, [r1, #8]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    bffc:	60c8      	str	r0, [r1, #12]
	if (rts_pin) rts_deassert();
    bffe:	490a      	ldr	r1, [pc, #40]	; (c028 <serial3_end+0x60>)
	rx_buffer_head = 0;
    c000:	4c0a      	ldr	r4, [pc, #40]	; (c02c <serial3_end+0x64>)
	rx_buffer_tail = 0;
    c002:	480b      	ldr	r0, [pc, #44]	; (c030 <serial3_end+0x68>)
	if (rts_pin) rts_deassert();
    c004:	6809      	ldr	r1, [r1, #0]
	UART2_S1;
    c006:	7915      	ldrb	r5, [r2, #4]
	UART2_D; // clear leftover error status
    c008:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    c00a:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    c00c:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    c00e:	b109      	cbz	r1, c014 <serial3_end+0x4c>
    c010:	2301      	movs	r3, #1
    c012:	700b      	strb	r3, [r1, #0]
}
    c014:	bd38      	pop	{r3, r4, r5, pc}
    c016:	bf00      	nop
    c018:	40048000 	.word	0x40048000
    c01c:	1fffbb1c 	.word	0x1fffbb1c
    c020:	4006c000 	.word	0x4006c000
    c024:	4004c000 	.word	0x4004c000
    c028:	1fffbac8 	.word	0x1fffbac8
    c02c:	1fffbb0c 	.word	0x1fffbb0c
    c030:	1fffbb14 	.word	0x1fffbb14

0000c034 <serial3_set_transmit_pin>:
	while (transmitting) ;
    c034:	4a0a      	ldr	r2, [pc, #40]	; (c060 <serial3_set_transmit_pin+0x2c>)
{
    c036:	b538      	push	{r3, r4, r5, lr}
    c038:	4605      	mov	r5, r0
	while (transmitting) ;
    c03a:	7813      	ldrb	r3, [r2, #0]
    c03c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    c040:	2b00      	cmp	r3, #0
    c042:	d1fa      	bne.n	c03a <serial3_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    c044:	2101      	movs	r1, #1
    c046:	4628      	mov	r0, r5
    c048:	f7ff f95e 	bl	b308 <pinMode>
	digitalWrite(pin, LOW);
    c04c:	4621      	mov	r1, r4
    c04e:	4628      	mov	r0, r5
    c050:	f7ff f926 	bl	b2a0 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    c054:	4a03      	ldr	r2, [pc, #12]	; (c064 <serial3_set_transmit_pin+0x30>)
    c056:	4b04      	ldr	r3, [pc, #16]	; (c068 <serial3_set_transmit_pin+0x34>)
    c058:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    c05c:	601a      	str	r2, [r3, #0]
}
    c05e:	bd38      	pop	{r3, r4, r5, pc}
    c060:	1fffbb1c 	.word	0x1fffbb1c
    c064:	0001701c 	.word	0x0001701c
    c068:	1fffbb18 	.word	0x1fffbb18

0000c06c <serial3_set_tx>:
	if (opendrain) pin |= 128;
    c06c:	b109      	cbz	r1, c072 <serial3_set_tx+0x6>
    c06e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    c072:	4a11      	ldr	r2, [pc, #68]	; (c0b8 <serial3_set_tx+0x4c>)
    c074:	7813      	ldrb	r3, [r2, #0]
    c076:	4283      	cmp	r3, r0
    c078:	d016      	beq.n	c0a8 <serial3_set_tx+0x3c>
{
    c07a:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART2)) {
    c07c:	4c0f      	ldr	r4, [pc, #60]	; (c0bc <serial3_set_tx+0x50>)
    c07e:	6b64      	ldr	r4, [r4, #52]	; 0x34
    c080:	04e4      	lsls	r4, r4, #19
    c082:	d50e      	bpl.n	c0a2 <serial3_set_tx+0x36>
		switch (tx_pin_num & 127) {
    c084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c088:	2b08      	cmp	r3, #8
    c08a:	d102      	bne.n	c092 <serial3_set_tx+0x26>
			case 8:  CORE_PIN8_CONFIG = 0; break; // PTD3
    c08c:	4b0c      	ldr	r3, [pc, #48]	; (c0c0 <serial3_set_tx+0x54>)
    c08e:	2400      	movs	r4, #0
    c090:	60dc      	str	r4, [r3, #12]
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    c092:	2900      	cmp	r1, #0
		switch (pin & 127) {
    c094:	f000 037f 	and.w	r3, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    c098:	bf14      	ite	ne
    c09a:	2160      	movne	r1, #96	; 0x60
    c09c:	2144      	moveq	r1, #68	; 0x44
		switch (pin & 127) {
    c09e:	2b08      	cmp	r3, #8
    c0a0:	d003      	beq.n	c0aa <serial3_set_tx+0x3e>
	tx_pin_num = pin;
    c0a2:	7010      	strb	r0, [r2, #0]
}
    c0a4:	bc10      	pop	{r4}
    c0a6:	4770      	bx	lr
    c0a8:	4770      	bx	lr
			case 8:  CORE_PIN8_CONFIG = cfg | PORT_PCR_MUX(3); break;
    c0aa:	4b05      	ldr	r3, [pc, #20]	; (c0c0 <serial3_set_tx+0x54>)
    c0ac:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    c0b0:	60d9      	str	r1, [r3, #12]
	tx_pin_num = pin;
    c0b2:	7010      	strb	r0, [r2, #0]
}
    c0b4:	bc10      	pop	{r4}
    c0b6:	4770      	bx	lr
    c0b8:	1fff89f4 	.word	0x1fff89f4
    c0bc:	40048000 	.word	0x40048000
    c0c0:	4004c000 	.word	0x4004c000

0000c0c4 <serial3_set_rx>:
}
    c0c4:	4770      	bx	lr
    c0c6:	bf00      	nop

0000c0c8 <serial3_set_rts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    c0c8:	4b0d      	ldr	r3, [pc, #52]	; (c100 <serial3_set_rts+0x38>)
    c0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c0cc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    c0d0:	d013      	beq.n	c0fa <serial3_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    c0d2:	2821      	cmp	r0, #33	; 0x21
    c0d4:	d903      	bls.n	c0de <serial3_set_rts+0x16>
		rts_pin = NULL;
    c0d6:	4b0b      	ldr	r3, [pc, #44]	; (c104 <serial3_set_rts+0x3c>)
    c0d8:	2000      	movs	r0, #0
    c0da:	6018      	str	r0, [r3, #0]
		return 0;
    c0dc:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    c0de:	4b0a      	ldr	r3, [pc, #40]	; (c108 <serial3_set_rts+0x40>)
{
    c0e0:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    c0e2:	4c08      	ldr	r4, [pc, #32]	; (c104 <serial3_set_rts+0x3c>)
    c0e4:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    c0e8:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    c0ea:	2101      	movs	r1, #1
    c0ec:	f7ff f90c 	bl	b308 <pinMode>
		rts_assert();
    c0f0:	6823      	ldr	r3, [r4, #0]
    c0f2:	2200      	movs	r2, #0
    c0f4:	701a      	strb	r2, [r3, #0]
	return 1;
    c0f6:	2001      	movs	r0, #1
}
    c0f8:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    c0fa:	4618      	mov	r0, r3
}
    c0fc:	4770      	bx	lr
    c0fe:	bf00      	nop
    c100:	40048000 	.word	0x40048000
    c104:	1fffbac8 	.word	0x1fffbac8
    c108:	0001701c 	.word	0x0001701c

0000c10c <serial3_set_cts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    c10c:	4b0c      	ldr	r3, [pc, #48]	; (c140 <serial3_set_cts+0x34>)
    c10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c110:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    c114:	d012      	beq.n	c13c <serial3_set_cts+0x30>
	if (pin == 14) {
    c116:	280e      	cmp	r0, #14
    c118:	d109      	bne.n	c12e <serial3_set_cts+0x22>
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    c11a:	4b0a      	ldr	r3, [pc, #40]	; (c144 <serial3_set_cts+0x38>)
	UART2_MODEM |= UART_MODEM_TXCTSE;
    c11c:	4a0a      	ldr	r2, [pc, #40]	; (c148 <serial3_set_cts+0x3c>)
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    c11e:	f240 3102 	movw	r1, #770	; 0x302
    c122:	6059      	str	r1, [r3, #4]
	UART2_MODEM |= UART_MODEM_TXCTSE;
    c124:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    c126:	2001      	movs	r0, #1
	UART2_MODEM |= UART_MODEM_TXCTSE;
    c128:	4303      	orrs	r3, r0
    c12a:	7353      	strb	r3, [r2, #13]
	return 1;
    c12c:	4770      	bx	lr
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    c12e:	4a06      	ldr	r2, [pc, #24]	; (c148 <serial3_set_cts+0x3c>)
    c130:	7b53      	ldrb	r3, [r2, #13]
    c132:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    c136:	2000      	movs	r0, #0
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    c138:	7353      	strb	r3, [r2, #13]
		return 0;
    c13a:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    c13c:	4618      	mov	r0, r3
}
    c13e:	4770      	bx	lr
    c140:	40048000 	.word	0x40048000
    c144:	4004c000 	.word	0x4004c000
    c148:	4006c000 	.word	0x4006c000

0000c14c <serial3_putchar>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    c14c:	4b03      	ldr	r3, [pc, #12]	; (c15c <serial3_putchar+0x10>)
    c14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c150:	04db      	lsls	r3, r3, #19
    c152:	d501      	bpl.n	c158 <serial3_putchar+0xc>
    c154:	f7ff be28 	b.w	bda8 <serial3_putchar.part.0>
}
    c158:	4770      	bx	lr
    c15a:	bf00      	nop
    c15c:	40048000 	.word	0x40048000

0000c160 <serial3_write>:

void serial3_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    c160:	b179      	cbz	r1, c182 <serial3_write+0x22>
{
    c162:	b570      	push	{r4, r5, r6, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    c164:	4e07      	ldr	r6, [pc, #28]	; (c184 <serial3_write+0x24>)
    c166:	4604      	mov	r4, r0
    c168:	1845      	adds	r5, r0, r1
    c16a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    c16c:	04db      	lsls	r3, r3, #19
	while (count-- > 0) serial3_putchar(*p++);
    c16e:	f104 0401 	add.w	r4, r4, #1
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    c172:	d503      	bpl.n	c17c <serial3_write+0x1c>
    c174:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    c178:	f7ff fe16 	bl	bda8 <serial3_putchar.part.0>
	while (count-- > 0) serial3_putchar(*p++);
    c17c:	42ac      	cmp	r4, r5
    c17e:	d1f4      	bne.n	c16a <serial3_write+0xa>
}
    c180:	bd70      	pop	{r4, r5, r6, pc}
    c182:	4770      	bx	lr
    c184:	40048000 	.word	0x40048000

0000c188 <serial3_flush>:

void serial3_flush(void)
{
    c188:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    c18a:	4c04      	ldr	r4, [pc, #16]	; (c19c <serial3_flush+0x14>)
    c18c:	7823      	ldrb	r3, [r4, #0]
    c18e:	b123      	cbz	r3, c19a <serial3_flush+0x12>
    c190:	f000 fffe 	bl	d190 <yield>
    c194:	7823      	ldrb	r3, [r4, #0]
    c196:	2b00      	cmp	r3, #0
    c198:	d1fa      	bne.n	c190 <serial3_flush+0x8>
}
    c19a:	bd10      	pop	{r4, pc}
    c19c:	1fffbb1c 	.word	0x1fffbb1c

0000c1a0 <serial3_write_buffer_free>:

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    c1a0:	4a08      	ldr	r2, [pc, #32]	; (c1c4 <serial3_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    c1a2:	4b09      	ldr	r3, [pc, #36]	; (c1c8 <serial3_write_buffer_free+0x28>)
	head = tx_buffer_head;
    c1a4:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    c1a6:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    c1a8:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    c1aa:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    c1ac:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    c1ae:	d202      	bcs.n	c1b6 <serial3_write_buffer_free+0x16>
	return tail - head - 1;
    c1b0:	3b01      	subs	r3, #1
    c1b2:	1a18      	subs	r0, r3, r0
}
    c1b4:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    c1b6:	4a05      	ldr	r2, [pc, #20]	; (c1cc <serial3_write_buffer_free+0x2c>)
    c1b8:	6812      	ldr	r2, [r2, #0]
    c1ba:	3a01      	subs	r2, #1
    c1bc:	4413      	add	r3, r2
    c1be:	1a18      	subs	r0, r3, r0
    c1c0:	4770      	bx	lr
    c1c2:	bf00      	nop
    c1c4:	1fffbb48 	.word	0x1fffbb48
    c1c8:	1fffbb50 	.word	0x1fffbb50
    c1cc:	1fff89f0 	.word	0x1fff89f0

0000c1d0 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    c1d0:	4a06      	ldr	r2, [pc, #24]	; (c1ec <serial3_available+0x1c>)
	tail = rx_buffer_tail;
    c1d2:	4b07      	ldr	r3, [pc, #28]	; (c1f0 <serial3_available+0x20>)
	head = rx_buffer_head;
    c1d4:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    c1d6:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    c1d8:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    c1da:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    c1dc:	bf3c      	itt	cc
    c1de:	4a05      	ldrcc	r2, [pc, #20]	; (c1f4 <serial3_available+0x24>)
    c1e0:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    c1e2:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    c1e4:	bf38      	it	cc
    c1e6:	189b      	addcc	r3, r3, r2
    c1e8:	1a18      	subs	r0, r3, r0
}
    c1ea:	4770      	bx	lr
    c1ec:	1fffbb0c 	.word	0x1fffbb0c
    c1f0:	1fffbb14 	.word	0x1fffbb14
    c1f4:	1fff89ec 	.word	0x1fff89ec

0000c1f8 <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    c1f8:	4b1b      	ldr	r3, [pc, #108]	; (c268 <serial3_getchar+0x70>)
	tail = rx_buffer_tail;
    c1fa:	491c      	ldr	r1, [pc, #112]	; (c26c <serial3_getchar+0x74>)
	head = rx_buffer_head;
    c1fc:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    c1fe:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    c200:	429a      	cmp	r2, r3
    c202:	d02e      	beq.n	c262 <serial3_getchar+0x6a>
{
    c204:	b510      	push	{r4, lr}
    c206:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c20a:	4a19      	ldr	r2, [pc, #100]	; (c270 <serial3_getchar+0x78>)
    c20c:	b2d8      	uxtb	r0, r3
    c20e:	6812      	ldr	r2, [r2, #0]
    c210:	1c43      	adds	r3, r0, #1
    c212:	429a      	cmp	r2, r3
    c214:	d919      	bls.n	c24a <serial3_getchar+0x52>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    c216:	2b3f      	cmp	r3, #63	; 0x3f
    c218:	d81b      	bhi.n	c252 <serial3_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    c21a:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    c21e:	4815      	ldr	r0, [pc, #84]	; (c274 <serial3_getchar+0x7c>)
    c220:	5cc0      	ldrb	r0, [r0, r3]
    c222:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    c224:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    c228:	4913      	ldr	r1, [pc, #76]	; (c278 <serial3_getchar+0x80>)
    c22a:	6809      	ldr	r1, [r1, #0]
    c22c:	b161      	cbz	r1, c248 <serial3_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    c22e:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    c230:	bf3c      	itt	cc
    c232:	4472      	addcc	r2, lr
    c234:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    c236:	4a11      	ldr	r2, [pc, #68]	; (c27c <serial3_getchar+0x84>)
    c238:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    c23a:	bf28      	it	cs
    c23c:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    c240:	429a      	cmp	r2, r3
    c242:	d301      	bcc.n	c248 <serial3_getchar+0x50>
    c244:	2300      	movs	r3, #0
    c246:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    c248:	bd10      	pop	{r4, pc}
    c24a:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c24e:	4663      	mov	r3, ip
    c250:	e7e5      	b.n	c21e <serial3_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    c252:	4c0b      	ldr	r4, [pc, #44]	; (c280 <serial3_getchar+0x88>)
    c254:	383f      	subs	r0, #63	; 0x3f
    c256:	6824      	ldr	r4, [r4, #0]
    c258:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    c25a:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    c25e:	b2c0      	uxtb	r0, r0
    c260:	e7e0      	b.n	c224 <serial3_getchar+0x2c>
	if (head == tail) return -1;
    c262:	f04f 30ff 	mov.w	r0, #4294967295
}
    c266:	4770      	bx	lr
    c268:	1fffbb0c 	.word	0x1fffbb0c
    c26c:	1fffbb14 	.word	0x1fffbb14
    c270:	1fff89ec 	.word	0x1fff89ec
    c274:	1fffbacc 	.word	0x1fffbacc
    c278:	1fffbac8 	.word	0x1fffbac8
    c27c:	1fff89e8 	.word	0x1fff89e8
    c280:	1fffbb10 	.word	0x1fffbb10

0000c284 <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    c284:	4a0d      	ldr	r2, [pc, #52]	; (c2bc <serial3_peek+0x38>)
	tail = rx_buffer_tail;
    c286:	4b0e      	ldr	r3, [pc, #56]	; (c2c0 <serial3_peek+0x3c>)
	head = rx_buffer_head;
    c288:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    c28a:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    c28c:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    c28e:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    c290:	d011      	beq.n	c2b6 <serial3_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c292:	490c      	ldr	r1, [pc, #48]	; (c2c4 <serial3_peek+0x40>)
    c294:	6809      	ldr	r1, [r1, #0]
    c296:	1c53      	adds	r3, r2, #1
    c298:	4299      	cmp	r1, r3
    c29a:	d907      	bls.n	c2ac <serial3_peek+0x28>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    c29c:	2b3f      	cmp	r3, #63	; 0x3f
    c29e:	d906      	bls.n	c2ae <serial3_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    c2a0:	4b09      	ldr	r3, [pc, #36]	; (c2c8 <serial3_peek+0x44>)
    c2a2:	3a3f      	subs	r2, #63	; 0x3f
    c2a4:	681b      	ldr	r3, [r3, #0]
    c2a6:	5c98      	ldrb	r0, [r3, r2]
    c2a8:	b2c0      	uxtb	r0, r0
    c2aa:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c2ac:	2300      	movs	r3, #0
		return rx_buffer[tail];
    c2ae:	4a07      	ldr	r2, [pc, #28]	; (c2cc <serial3_peek+0x48>)
    c2b0:	5cd0      	ldrb	r0, [r2, r3]
    c2b2:	b2c0      	uxtb	r0, r0
    c2b4:	4770      	bx	lr
	if (head == tail) return -1;
    c2b6:	f04f 30ff 	mov.w	r0, #4294967295
}
    c2ba:	4770      	bx	lr
    c2bc:	1fffbb0c 	.word	0x1fffbb0c
    c2c0:	1fffbb14 	.word	0x1fffbb14
    c2c4:	1fff89ec 	.word	0x1fff89ec
    c2c8:	1fffbb10 	.word	0x1fffbb10
    c2cc:	1fffbacc 	.word	0x1fffbacc

0000c2d0 <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    c2d0:	4b05      	ldr	r3, [pc, #20]	; (c2e8 <serial3_clear+0x18>)
	if (rts_pin) rts_assert();
    c2d2:	4a06      	ldr	r2, [pc, #24]	; (c2ec <serial3_clear+0x1c>)
	rx_buffer_head = rx_buffer_tail;
    c2d4:	781b      	ldrb	r3, [r3, #0]
    c2d6:	4906      	ldr	r1, [pc, #24]	; (c2f0 <serial3_clear+0x20>)
	if (rts_pin) rts_assert();
    c2d8:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    c2da:	b2db      	uxtb	r3, r3
    c2dc:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    c2de:	b10a      	cbz	r2, c2e4 <serial3_clear+0x14>
    c2e0:	2300      	movs	r3, #0
    c2e2:	7013      	strb	r3, [r2, #0]
}
    c2e4:	4770      	bx	lr
    c2e6:	bf00      	nop
    c2e8:	1fffbb14 	.word	0x1fffbb14
    c2ec:	1fffbac8 	.word	0x1fffbac8
    c2f0:	1fffbb0c 	.word	0x1fffbb0c

0000c2f4 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    c2f4:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    c2f6:	4b3a      	ldr	r3, [pc, #232]	; (c3e0 <uart2_status_isr+0xec>)
    c2f8:	791a      	ldrb	r2, [r3, #4]
    c2fa:	0695      	lsls	r5, r2, #26
    c2fc:	d524      	bpl.n	c348 <uart2_status_isr+0x54>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    c2fe:	4d39      	ldr	r5, [pc, #228]	; (c3e4 <uart2_status_isr+0xf0>)
		if (head >= rx_buffer_total_size_) head = 0;
    c300:	4939      	ldr	r1, [pc, #228]	; (c3e8 <uart2_status_isr+0xf4>)
			n = UART2_D;
    c302:	79db      	ldrb	r3, [r3, #7]
		head = rx_buffer_head + 1;
    c304:	782a      	ldrb	r2, [r5, #0]
		if (head >= rx_buffer_total_size_) head = 0;
    c306:	680c      	ldr	r4, [r1, #0]
			n = UART2_D;
    c308:	b2d8      	uxtb	r0, r3
		head = rx_buffer_head + 1;
    c30a:	1c53      	adds	r3, r2, #1
		if (head >= rx_buffer_total_size_) head = 0;
    c30c:	429c      	cmp	r4, r3
		head = rx_buffer_head + 1;
    c30e:	b2d2      	uxtb	r2, r2
		if (head >= rx_buffer_total_size_) head = 0;
    c310:	d831      	bhi.n	c376 <uart2_status_isr+0x82>
		if (head != rx_buffer_tail) {
    c312:	4b36      	ldr	r3, [pc, #216]	; (c3ec <uart2_status_isr+0xf8>)
    c314:	781a      	ldrb	r2, [r3, #0]
    c316:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    c31a:	b122      	cbz	r2, c326 <uart2_status_isr+0x32>
    c31c:	2200      	movs	r2, #0
    c31e:	4613      	mov	r3, r2
			if (head < SERIAL3_RX_BUFFER_SIZE) {
				rx_buffer[head] = n;
    c320:	4933      	ldr	r1, [pc, #204]	; (c3f0 <uart2_status_isr+0xfc>)
    c322:	54c8      	strb	r0, [r1, r3]
			} else {
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
			}

			rx_buffer_head = head;
    c324:	702a      	strb	r2, [r5, #0]
		}
		if (rts_pin) {
    c326:	4933      	ldr	r1, [pc, #204]	; (c3f4 <uart2_status_isr+0x100>)
    c328:	6809      	ldr	r1, [r1, #0]
    c32a:	b169      	cbz	r1, c348 <uart2_status_isr+0x54>
			int avail;
			tail = tx_buffer_tail;
    c32c:	4a32      	ldr	r2, [pc, #200]	; (c3f8 <uart2_status_isr+0x104>)
    c32e:	7810      	ldrb	r0, [r2, #0]
			if (head >= tail) avail = head - tail;
    c330:	4298      	cmp	r0, r3
			tail = tx_buffer_tail;
    c332:	b2c2      	uxtb	r2, r0
			else avail = rx_buffer_total_size_ + head - tail;
    c334:	bf8a      	itet	hi
    c336:	1aa2      	subhi	r2, r4, r2
			if (head >= tail) avail = head - tail;
    c338:	1a9b      	subls	r3, r3, r2
			else avail = rx_buffer_total_size_ + head - tail;
    c33a:	189b      	addhi	r3, r3, r2
			if (avail >= rts_high_watermark_) rts_deassert();
    c33c:	4a2f      	ldr	r2, [pc, #188]	; (c3fc <uart2_status_isr+0x108>)
    c33e:	6812      	ldr	r2, [r2, #0]
    c340:	429a      	cmp	r2, r3
    c342:	bf9c      	itt	ls
    c344:	2301      	movls	r3, #1
    c346:	700b      	strbls	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    c348:	4a25      	ldr	r2, [pc, #148]	; (c3e0 <uart2_status_isr+0xec>)
    c34a:	78d3      	ldrb	r3, [r2, #3]
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    c34c:	061c      	lsls	r4, r3, #24
	c = UART2_C2;
    c34e:	b2d9      	uxtb	r1, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    c350:	d41e      	bmi.n	c390 <uart2_status_isr+0x9c>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    c352:	064a      	lsls	r2, r1, #25
    c354:	d50d      	bpl.n	c372 <uart2_status_isr+0x7e>
    c356:	4b22      	ldr	r3, [pc, #136]	; (c3e0 <uart2_status_isr+0xec>)
    c358:	791b      	ldrb	r3, [r3, #4]
    c35a:	065b      	lsls	r3, r3, #25
    c35c:	d509      	bpl.n	c372 <uart2_status_isr+0x7e>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    c35e:	4b28      	ldr	r3, [pc, #160]	; (c400 <uart2_status_isr+0x10c>)
		transmitting = 0;
    c360:	4928      	ldr	r1, [pc, #160]	; (c404 <uart2_status_isr+0x110>)
		if (transmit_pin) transmit_deassert();
    c362:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    c364:	2200      	movs	r2, #0
    c366:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    c368:	b103      	cbz	r3, c36c <uart2_status_isr+0x78>
    c36a:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART2_C3 = reg;
			__enable_irq();
		}
		#endif
		UART2_C2 = C2_TX_INACTIVE;
    c36c:	4b1c      	ldr	r3, [pc, #112]	; (c3e0 <uart2_status_isr+0xec>)
    c36e:	222c      	movs	r2, #44	; 0x2c
    c370:	70da      	strb	r2, [r3, #3]
	}
}
    c372:	bc30      	pop	{r4, r5}
    c374:	4770      	bx	lr
		if (head != rx_buffer_tail) {
    c376:	491d      	ldr	r1, [pc, #116]	; (c3ec <uart2_status_isr+0xf8>)
    c378:	7809      	ldrb	r1, [r1, #0]
    c37a:	4299      	cmp	r1, r3
    c37c:	d0d3      	beq.n	c326 <uart2_status_isr+0x32>
			if (head < SERIAL3_RX_BUFFER_SIZE) {
    c37e:	2b3f      	cmp	r3, #63	; 0x3f
    c380:	d92c      	bls.n	c3dc <uart2_status_isr+0xe8>
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
    c382:	4921      	ldr	r1, [pc, #132]	; (c408 <uart2_status_isr+0x114>)
    c384:	3a3f      	subs	r2, #63	; 0x3f
    c386:	6809      	ldr	r1, [r1, #0]
    c388:	5488      	strb	r0, [r1, r2]
			rx_buffer_head = head;
    c38a:	b2da      	uxtb	r2, r3
    c38c:	702a      	strb	r2, [r5, #0]
    c38e:	e7ca      	b.n	c326 <uart2_status_isr+0x32>
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    c390:	7913      	ldrb	r3, [r2, #4]
    c392:	0618      	lsls	r0, r3, #24
    c394:	d5dd      	bpl.n	c352 <uart2_status_isr+0x5e>
		head = tx_buffer_head;
    c396:	4b1d      	ldr	r3, [pc, #116]	; (c40c <uart2_status_isr+0x118>)
		tail = tx_buffer_tail;
    c398:	4817      	ldr	r0, [pc, #92]	; (c3f8 <uart2_status_isr+0x104>)
		head = tx_buffer_head;
    c39a:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    c39c:	7803      	ldrb	r3, [r0, #0]
		if (head == tail) {
    c39e:	429d      	cmp	r5, r3
		tail = tx_buffer_tail;
    c3a0:	b2dc      	uxtb	r4, r3
		if (head == tail) {
    c3a2:	d008      	beq.n	c3b6 <uart2_status_isr+0xc2>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    c3a4:	4a1a      	ldr	r2, [pc, #104]	; (c410 <uart2_status_isr+0x11c>)
    c3a6:	6812      	ldr	r2, [r2, #0]
    c3a8:	1c63      	adds	r3, r4, #1
    c3aa:	429a      	cmp	r2, r3
    c3ac:	d906      	bls.n	c3bc <uart2_status_isr+0xc8>
			if (tail < SERIAL3_TX_BUFFER_SIZE) {
    c3ae:	2b27      	cmp	r3, #39	; 0x27
    c3b0:	d80d      	bhi.n	c3ce <uart2_status_isr+0xda>
			tx_buffer_tail = tail;
    c3b2:	b2da      	uxtb	r2, r3
    c3b4:	e004      	b.n	c3c0 <uart2_status_isr+0xcc>
			UART2_C2 = C2_TX_COMPLETING;
    c3b6:	236c      	movs	r3, #108	; 0x6c
    c3b8:	70d3      	strb	r3, [r2, #3]
    c3ba:	e7ca      	b.n	c352 <uart2_status_isr+0x5e>
    c3bc:	2200      	movs	r2, #0
			if (++tail >= tx_buffer_total_size_) tail = 0;
    c3be:	4613      	mov	r3, r2
				n = tx_buffer[tail];
    c3c0:	4c14      	ldr	r4, [pc, #80]	; (c414 <uart2_status_isr+0x120>)
    c3c2:	5ce3      	ldrb	r3, [r4, r3]
    c3c4:	b2db      	uxtb	r3, r3
			UART2_D = n;
    c3c6:	4c06      	ldr	r4, [pc, #24]	; (c3e0 <uart2_status_isr+0xec>)
    c3c8:	71e3      	strb	r3, [r4, #7]
			tx_buffer_tail = tail;
    c3ca:	7002      	strb	r2, [r0, #0]
    c3cc:	e7c1      	b.n	c352 <uart2_status_isr+0x5e>
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    c3ce:	4a12      	ldr	r2, [pc, #72]	; (c418 <uart2_status_isr+0x124>)
    c3d0:	3c27      	subs	r4, #39	; 0x27
    c3d2:	6815      	ldr	r5, [r2, #0]
			tx_buffer_tail = tail;
    c3d4:	b2da      	uxtb	r2, r3
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    c3d6:	5d2b      	ldrb	r3, [r5, r4]
    c3d8:	b2db      	uxtb	r3, r3
    c3da:	e7f4      	b.n	c3c6 <uart2_status_isr+0xd2>
			rx_buffer_head = head;
    c3dc:	b2da      	uxtb	r2, r3
    c3de:	e79f      	b.n	c320 <uart2_status_isr+0x2c>
    c3e0:	4006c000 	.word	0x4006c000
    c3e4:	1fffbb0c 	.word	0x1fffbb0c
    c3e8:	1fff89ec 	.word	0x1fff89ec
    c3ec:	1fffbb14 	.word	0x1fffbb14
    c3f0:	1fffbacc 	.word	0x1fffbacc
    c3f4:	1fffbac8 	.word	0x1fffbac8
    c3f8:	1fffbb50 	.word	0x1fffbb50
    c3fc:	1fff89e4 	.word	0x1fff89e4
    c400:	1fffbb18 	.word	0x1fffbb18
    c404:	1fffbb1c 	.word	0x1fffbb1c
    c408:	1fffbb10 	.word	0x1fffbb10
    c40c:	1fffbb48 	.word	0x1fffbb48
    c410:	1fff89f0 	.word	0x1fff89f0
    c414:	1fffbb20 	.word	0x1fffbb20
    c418:	1fffbb4c 	.word	0x1fffbb4c

0000c41c <serial3_add_memory_for_read>:

void serial3_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    c41c:	4b09      	ldr	r3, [pc, #36]	; (c444 <serial3_add_memory_for_read+0x28>)
{
    c41e:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    c420:	6018      	str	r0, [r3, #0]
	if (buffer) {
    c422:	b160      	cbz	r0, c43e <serial3_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE + length;
    c424:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    c428:	4b07      	ldr	r3, [pc, #28]	; (c448 <serial3_add_memory_for_read+0x2c>)
    c42a:	4808      	ldr	r0, [pc, #32]	; (c44c <serial3_add_memory_for_read+0x30>)
    c42c:	f101 021a 	add.w	r2, r1, #26
    c430:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    c432:	4b07      	ldr	r3, [pc, #28]	; (c450 <serial3_add_memory_for_read+0x34>)
    c434:	6004      	str	r4, [r0, #0]
    c436:	3128      	adds	r1, #40	; 0x28
}
    c438:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    c43a:	6019      	str	r1, [r3, #0]
}
    c43c:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
    c43e:	2440      	movs	r4, #64	; 0x40
    c440:	e7f2      	b.n	c428 <serial3_add_memory_for_read+0xc>
    c442:	bf00      	nop
    c444:	1fffbb10 	.word	0x1fffbb10
    c448:	1fff89e8 	.word	0x1fff89e8
    c44c:	1fff89ec 	.word	0x1fff89ec
    c450:	1fff89e4 	.word	0x1fff89e4

0000c454 <serial3_add_memory_for_write>:

void serial3_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    c454:	4b05      	ldr	r3, [pc, #20]	; (c46c <serial3_add_memory_for_write+0x18>)
    c456:	6018      	str	r0, [r3, #0]
	if (buffer) {
    c458:	b118      	cbz	r0, c462 <serial3_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE + length;
    c45a:	4b05      	ldr	r3, [pc, #20]	; (c470 <serial3_add_memory_for_write+0x1c>)
    c45c:	3128      	adds	r1, #40	; 0x28
    c45e:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
	} 
}
    c460:	4770      	bx	lr
    c462:	4b03      	ldr	r3, [pc, #12]	; (c470 <serial3_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
    c464:	2128      	movs	r1, #40	; 0x28
    c466:	6019      	str	r1, [r3, #0]
}
    c468:	4770      	bx	lr
    c46a:	bf00      	nop
    c46c:	1fffbb4c 	.word	0x1fffbb4c
    c470:	1fff89f0 	.word	0x1fff89f0

0000c474 <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    c474:	4770      	bx	lr
    c476:	bf00      	nop

0000c478 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    c478:	4770      	bx	lr
    c47a:	bf00      	nop

0000c47c <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    c47c:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    c47e:	2b03      	cmp	r3, #3
    c480:	d817      	bhi.n	c4b2 <usb_rx+0x36>
	__disable_irq();
    c482:	b672      	cpsid	i
	ret = rx_first[endpoint];
    c484:	490c      	ldr	r1, [pc, #48]	; (c4b8 <usb_rx+0x3c>)
    c486:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    c48a:	b180      	cbz	r0, c4ae <usb_rx+0x32>
{
    c48c:	b410      	push	{r4}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    c48e:	4c0b      	ldr	r4, [pc, #44]	; (c4bc <usb_rx+0x40>)
    c490:	f8b0 c000 	ldrh.w	ip, [r0]
    c494:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    c498:	eba2 020c 	sub.w	r2, r2, ip
		rx_first[endpoint] = ret->next;
    c49c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    c4a0:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    c4a4:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    c4a8:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    c4aa:	bc10      	pop	{r4}
    c4ac:	4770      	bx	lr
	__enable_irq();
    c4ae:	b662      	cpsie	i
}
    c4b0:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    c4b2:	2000      	movs	r0, #0
    c4b4:	4770      	bx	lr
    c4b6:	bf00      	nop
    c4b8:	1fffbbe4 	.word	0x1fffbbe4
    c4bc:	1fffbc34 	.word	0x1fffbc34

0000c4c0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    c4c0:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    c4c2:	2803      	cmp	r0, #3
    c4c4:	d80b      	bhi.n	c4de <usb_tx_packet_count+0x1e>
	__disable_irq();
    c4c6:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    c4c8:	4b07      	ldr	r3, [pc, #28]	; (c4e8 <usb_tx_packet_count+0x28>)
    c4ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    c4ce:	b143      	cbz	r3, c4e2 <usb_tx_packet_count+0x22>
	uint32_t count=0;
    c4d0:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    c4d2:	685b      	ldr	r3, [r3, #4]
    c4d4:	3001      	adds	r0, #1
    c4d6:	2b00      	cmp	r3, #0
    c4d8:	d1fb      	bne.n	c4d2 <usb_tx_packet_count+0x12>
	__enable_irq();
    c4da:	b662      	cpsie	i
	return count;
    c4dc:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    c4de:	2000      	movs	r0, #0
}
    c4e0:	4770      	bx	lr
	uint32_t count=0;
    c4e2:	4618      	mov	r0, r3
    c4e4:	e7f9      	b.n	c4da <usb_tx_packet_count+0x1a>
    c4e6:	bf00      	nop
    c4e8:	1fffbc0c 	.word	0x1fffbc0c

0000c4ec <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    c4ec:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    c4ee:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    c4f0:	4a19      	ldr	r2, [pc, #100]	; (c558 <usb_rx_memory+0x6c>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    c4f2:	4c1a      	ldr	r4, [pc, #104]	; (c55c <usb_rx_memory+0x70>)
	__disable_irq();
    c4f4:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    c4f6:	f812 1b01 	ldrb.w	r1, [r2], #1
    c4fa:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    c4fc:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    c500:	d505      	bpl.n	c50e <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    c502:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    c506:	b161      	cbz	r1, c522 <usb_rx_memory+0x36>
			if (table[index(i, RX, ODD)].desc == 0) {
    c508:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    c50c:	b1b9      	cbz	r1, c53e <usb_rx_memory+0x52>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    c50e:	3304      	adds	r3, #4
    c510:	2b14      	cmp	r3, #20
    c512:	d1f0      	bne.n	c4f6 <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    c514:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    c516:	4b12      	ldr	r3, [pc, #72]	; (c560 <usb_rx_memory+0x74>)
    c518:	2200      	movs	r2, #0
    c51a:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    c51c:	bc10      	pop	{r4}
	usb_free(packet);
    c51e:	f000 bc9b 	b.w	ce58 <usb_free>
				usb_rx_memory_needed--;
    c522:	490f      	ldr	r1, [pc, #60]	; (c560 <usb_rx_memory+0x74>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    c524:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    c528:	3008      	adds	r0, #8
    c52a:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    c52c:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c52e:	480d      	ldr	r0, [pc, #52]	; (c564 <usb_rx_memory+0x78>)
    c530:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    c534:	3a01      	subs	r2, #1
    c536:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    c538:	b662      	cpsie	i
}
    c53a:	bc10      	pop	{r4}
    c53c:	4770      	bx	lr
				usb_rx_memory_needed--;
    c53e:	4a08      	ldr	r2, [pc, #32]	; (c560 <usb_rx_memory+0x74>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c540:	4909      	ldr	r1, [pc, #36]	; (c568 <usb_rx_memory+0x7c>)
				table[index(i, RX, ODD)].addr = packet->buf;
    c542:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    c546:	3008      	adds	r0, #8
    c548:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    c54a:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c54c:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    c550:	3b01      	subs	r3, #1
    c552:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    c554:	b662      	cpsie	i
				return;
    c556:	e7f0      	b.n	c53a <usb_rx_memory+0x4e>
    c558:	000171a8 	.word	0x000171a8
    c55c:	1fff8000 	.word	0x1fff8000
    c560:	1fffbc3c 	.word	0x1fffbc3c
    c564:	00400088 	.word	0x00400088
    c568:	004000c8 	.word	0x004000c8

0000c56c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    c56c:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    c56e:	2a03      	cmp	r2, #3
    c570:	d80e      	bhi.n	c590 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    c572:	4b1c      	ldr	r3, [pc, #112]	; (c5e4 <usb_tx+0x78>)
    c574:	0140      	lsls	r0, r0, #5
    c576:	f040 0010 	orr.w	r0, r0, #16
{
    c57a:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    c57c:	4403      	add	r3, r0
	__disable_irq();
    c57e:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    c580:	4c19      	ldr	r4, [pc, #100]	; (c5e8 <usb_tx+0x7c>)
    c582:	5ca0      	ldrb	r0, [r4, r2]
    c584:	2803      	cmp	r0, #3
    c586:	d81c      	bhi.n	c5c2 <usb_tx+0x56>
    c588:	e8df f000 	tbb	[pc, r0]
    c58c:	18031513 	.word	0x18031513
    c590:	4770      	bx	lr
    c592:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    c594:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    c596:	f013 0f08 	tst.w	r3, #8
    c59a:	8808      	ldrh	r0, [r1, #0]
    c59c:	bf14      	ite	ne
    c59e:	22c8      	movne	r2, #200	; 0xc8
    c5a0:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    c5a2:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    c5a4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    c5a8:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    c5aa:	601a      	str	r2, [r3, #0]
	__enable_irq();
    c5ac:	b662      	cpsie	i
}
    c5ae:	bc10      	pop	{r4}
    c5b0:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    c5b2:	2003      	movs	r0, #3
    c5b4:	e7ee      	b.n	c594 <usb_tx+0x28>
		b++;
    c5b6:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    c5b8:	2002      	movs	r0, #2
		break;
    c5ba:	e7eb      	b.n	c594 <usb_tx+0x28>
		b++;
    c5bc:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    c5be:	2004      	movs	r0, #4
		break;
    c5c0:	e7e8      	b.n	c594 <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    c5c2:	4b0a      	ldr	r3, [pc, #40]	; (c5ec <usb_tx+0x80>)
    c5c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c5c8:	b138      	cbz	r0, c5da <usb_tx+0x6e>
			tx_last[endpoint]->next = packet;
    c5ca:	4b09      	ldr	r3, [pc, #36]	; (c5f0 <usb_tx+0x84>)
    c5cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c5d0:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    c5d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    c5d6:	b662      	cpsie	i
		return;
    c5d8:	e7e9      	b.n	c5ae <usb_tx+0x42>
			tx_first[endpoint] = packet;
    c5da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c5de:	4b04      	ldr	r3, [pc, #16]	; (c5f0 <usb_tx+0x84>)
    c5e0:	e7f7      	b.n	c5d2 <usb_tx+0x66>
    c5e2:	bf00      	nop
    c5e4:	1fff8000 	.word	0x1fff8000
    c5e8:	1fffbc2c 	.word	0x1fffbc2c
    c5ec:	1fffbc0c 	.word	0x1fffbc0c
    c5f0:	1fffbc1c 	.word	0x1fffbc1c

0000c5f4 <usb_isr>:
}



void usb_isr(void)
{
    c5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    c5f8:	f8df a2cc 	ldr.w	sl, [pc, #716]	; c8c8 <usb_isr+0x2d4>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    c5fc:	f8df b2cc 	ldr.w	fp, [pc, #716]	; c8cc <usb_isr+0x2d8>
{
    c600:	b085      	sub	sp, #20
    c602:	e03d      	b.n	c680 <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    c604:	4db2      	ldr	r5, [pc, #712]	; (c8d0 <usb_isr+0x2dc>)
    c606:	089e      	lsrs	r6, r3, #2
    c608:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    c60c:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    c60e:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    c610:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    c614:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    c616:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    c61a:	f040 80b8 	bne.w	c78e <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    c61e:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    c622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    c626:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    c628:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    c62c:	f000 80a7 	beq.w	c77e <usb_isr+0x18a>
					packet->index = 0;
    c630:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    c634:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    c638:	4ba6      	ldr	r3, [pc, #664]	; (c8d4 <usb_isr+0x2e0>)
    c63a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    c63e:	2a00      	cmp	r2, #0
    c640:	f000 8201 	beq.w	ca46 <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    c644:	4ba4      	ldr	r3, [pc, #656]	; (c8d8 <usb_isr+0x2e4>)
    c646:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    c64a:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    c64c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    c650:	4ba2      	ldr	r3, [pc, #648]	; (c8dc <usb_isr+0x2e8>)
    c652:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    c656:	4494      	add	ip, r2
    c658:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    c65c:	f000 fbdc 	bl	ce18 <usb_malloc>
					if (packet) {
    c660:	2800      	cmp	r0, #0
    c662:	f000 81e9 	beq.w	ca38 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    c666:	f017 0f08 	tst.w	r7, #8
    c66a:	4b9d      	ldr	r3, [pc, #628]	; (c8e0 <usb_isr+0x2ec>)
						b->addr = packet->buf;
    c66c:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    c670:	bf18      	it	ne
    c672:	465b      	movne	r3, fp
						b->addr = packet->buf;
    c674:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    c676:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    c67a:	2308      	movs	r3, #8
    c67c:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    c680:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    c684:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    c686:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    c688:	d51b      	bpl.n	c6c2 <usb_isr+0xce>
		if (usb_configuration) {
    c68a:	4b96      	ldr	r3, [pc, #600]	; (c8e4 <usb_isr+0x2f0>)
    c68c:	781b      	ldrb	r3, [r3, #0]
    c68e:	b1ab      	cbz	r3, c6bc <usb_isr+0xc8>
			t = usb_reboot_timer;
    c690:	4995      	ldr	r1, [pc, #596]	; (c8e8 <usb_isr+0x2f4>)
    c692:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    c694:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    c698:	b12a      	cbz	r2, c6a6 <usb_isr+0xb2>
				usb_reboot_timer = --t;
    c69a:	3b01      	subs	r3, #1
    c69c:	b2db      	uxtb	r3, r3
    c69e:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    c6a0:	2b00      	cmp	r3, #0
    c6a2:	f000 8346 	beq.w	cd32 <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    c6a6:	4991      	ldr	r1, [pc, #580]	; (c8ec <usb_isr+0x2f8>)
    c6a8:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    c6aa:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    c6ae:	b12a      	cbz	r2, c6bc <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    c6b0:	3b01      	subs	r3, #1
    c6b2:	b2db      	uxtb	r3, r3
    c6b4:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    c6b6:	2b00      	cmp	r3, #0
    c6b8:	f000 81eb 	beq.w	ca92 <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    c6bc:	2304      	movs	r3, #4
    c6be:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    c6c2:	f014 0208 	ands.w	r2, r4, #8
    c6c6:	f000 81cc 	beq.w	ca62 <usb_isr+0x46e>
		stat = USB0_STAT;
    c6ca:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    c6ce:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    c6d0:	0912      	lsrs	r2, r2, #4
    c6d2:	d197      	bne.n	c604 <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    c6d4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; c8d0 <usb_isr+0x2dc>
    c6d8:	089b      	lsrs	r3, r3, #2
    c6da:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    c6de:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    c6e2:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    c6e4:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    c6e8:	2809      	cmp	r0, #9
    c6ea:	d07c      	beq.n	c7e6 <usb_isr+0x1f2>
    c6ec:	d80f      	bhi.n	c70e <usb_isr+0x11a>
    c6ee:	3801      	subs	r0, #1
    c6f0:	2801      	cmp	r0, #1
    c6f2:	d808      	bhi.n	c706 <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    c6f4:	4a7e      	ldr	r2, [pc, #504]	; (c8f0 <usb_isr+0x2fc>)
    c6f6:	8815      	ldrh	r5, [r2, #0]
    c6f8:	f242 0021 	movw	r0, #8225	; 0x2021
    c6fc:	4285      	cmp	r5, r0
    c6fe:	f000 81fb 	beq.w	caf8 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    c702:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    c706:	2301      	movs	r3, #1
    c708:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    c70c:	e7b5      	b.n	c67a <usb_isr+0x86>
	switch (pid) {
    c70e:	280d      	cmp	r0, #13
    c710:	d1f9      	bne.n	c706 <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    c712:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    c716:	4d77      	ldr	r5, [pc, #476]	; (c8f4 <usb_isr+0x300>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    c718:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    c71c:	4e74      	ldr	r6, [pc, #464]	; (c8f0 <usb_isr+0x2fc>)
		ep0_tx_data_toggle = 1;
    c71e:	4c76      	ldr	r4, [pc, #472]	; (c8f8 <usb_isr+0x304>)
		table[index(0, TX, EVEN)].desc = 0;
    c720:	f8c9 2010 	str.w	r2, [r9, #16]
    c724:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    c726:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    c72a:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    c72e:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    c730:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    c732:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    c736:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    c73a:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    c73c:	f200 80ff 	bhi.w	c93e <usb_isr+0x34a>
    c740:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    c744:	f080 82cb 	bcs.w	ccde <usb_isr+0x6ea>
    c748:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    c74c:	f000 8226 	beq.w	cb9c <usb_isr+0x5a8>
    c750:	f240 80de 	bls.w	c910 <usb_isr+0x31c>
    c754:	f240 3202 	movw	r2, #770	; 0x302
    c758:	4293      	cmp	r3, r2
    c75a:	d17b      	bne.n	c854 <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    c75c:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    c760:	2f04      	cmp	r7, #4
    c762:	f200 8108 	bhi.w	c976 <usb_isr+0x382>
    c766:	0c02      	lsrs	r2, r0, #16
    c768:	f040 8105 	bne.w	c976 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    c76c:	4963      	ldr	r1, [pc, #396]	; (c8fc <usb_isr+0x308>)
    c76e:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    c772:	f043 0302 	orr.w	r3, r3, #2
    c776:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    c77a:	4613      	mov	r3, r2
		break;
    c77c:	e070      	b.n	c860 <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    c77e:	f017 0f08 	tst.w	r7, #8
    c782:	4b57      	ldr	r3, [pc, #348]	; (c8e0 <usb_isr+0x2ec>)
    c784:	bf18      	it	ne
    c786:	465b      	movne	r3, fp
    c788:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    c78c:	e775      	b.n	c67a <usb_isr+0x86>
				usb_free(packet);
    c78e:	f000 fb63 	bl	ce58 <usb_free>
				packet = tx_first[endpoint];
    c792:	495b      	ldr	r1, [pc, #364]	; (c900 <usb_isr+0x30c>)
					switch (tx_state[endpoint]) {
    c794:	4a5b      	ldr	r2, [pc, #364]	; (c904 <usb_isr+0x310>)
				packet = tx_first[endpoint];
    c796:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    c79a:	2b00      	cmp	r3, #0
    c79c:	f000 8157 	beq.w	ca4e <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    c7a0:	6858      	ldr	r0, [r3, #4]
    c7a2:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    c7a6:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    c7a8:	f103 0008 	add.w	r0, r3, #8
    c7ac:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    c7ae:	2903      	cmp	r1, #3
    c7b0:	d805      	bhi.n	c7be <usb_isr+0x1ca>
    c7b2:	e8df f001 	tbb	[pc, r1]
    c7b6:	0f12      	.short	0x0f12
    c7b8:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    c7ba:	2104      	movs	r1, #4
    c7bc:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    c7be:	881a      	ldrh	r2, [r3, #0]
    c7c0:	f017 0f08 	tst.w	r7, #8
    c7c4:	bf14      	ite	ne
    c7c6:	23c8      	movne	r3, #200	; 0xc8
    c7c8:	2388      	moveq	r3, #136	; 0x88
    c7ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    c7ce:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    c7d2:	e752      	b.n	c67a <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    c7d4:	2102      	movs	r1, #2
    c7d6:	5511      	strb	r1, [r2, r4]
						break;
    c7d8:	e7f1      	b.n	c7be <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    c7da:	2103      	movs	r1, #3
    c7dc:	5511      	strb	r1, [r2, r4]
						break;
    c7de:	e7ee      	b.n	c7be <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    c7e0:	2105      	movs	r1, #5
    c7e2:	5511      	strb	r1, [r2, r4]
						break;
    c7e4:	e7eb      	b.n	c7be <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    c7e6:	4d43      	ldr	r5, [pc, #268]	; (c8f4 <usb_isr+0x300>)
    c7e8:	682a      	ldr	r2, [r5, #0]
		if (data) {
    c7ea:	b33a      	cbz	r2, c83c <usb_isr+0x248>
			size = ep0_tx_len;
    c7ec:	4946      	ldr	r1, [pc, #280]	; (c908 <usb_isr+0x314>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c7ee:	4c42      	ldr	r4, [pc, #264]	; (c8f8 <usb_isr+0x304>)
			size = ep0_tx_len;
    c7f0:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c7f2:	4846      	ldr	r0, [pc, #280]	; (c90c <usb_isr+0x318>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c7f4:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c7f8:	7806      	ldrb	r6, [r0, #0]
    c7fa:	2f40      	cmp	r7, #64	; 0x40
    c7fc:	463b      	mov	r3, r7
    c7fe:	bf28      	it	cs
    c800:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c802:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    c806:	f08e 0e01 	eor.w	lr, lr, #1
    c80a:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c80e:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    c812:	f086 0601 	eor.w	r6, r6, #1
    c816:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c818:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    c81c:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c81e:	bf14      	ite	ne
    c820:	20c8      	movne	r0, #200	; 0xc8
    c822:	2088      	moveq	r0, #136	; 0x88
    c824:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    c828:	441a      	add	r2, r3
			ep0_tx_len -= size;
    c82a:	1afb      	subs	r3, r7, r3
    c82c:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c82e:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    c832:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    c834:	2b00      	cmp	r3, #0
    c836:	f000 8136 	beq.w	caa6 <usb_isr+0x4b2>
    c83a:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    c83c:	4b2c      	ldr	r3, [pc, #176]	; (c8f0 <usb_isr+0x2fc>)
    c83e:	881a      	ldrh	r2, [r3, #0]
    c840:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    c844:	f47f af5f 	bne.w	c706 <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    c848:	789a      	ldrb	r2, [r3, #2]
    c84a:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    c84e:	2200      	movs	r2, #0
    c850:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    c852:	e758      	b.n	c706 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    c854:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    c858:	f040 808d 	bne.w	c976 <usb_isr+0x382>
	uint32_t datalen = 0;
    c85c:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    c85e:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    c860:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c864:	4829      	ldr	r0, [pc, #164]	; (c90c <usb_isr+0x318>)
    c866:	4594      	cmp	ip, r2
    c868:	bf28      	it	cs
    c86a:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    c86c:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c86e:	7802      	ldrb	r2, [r0, #0]
    c870:	2f40      	cmp	r7, #64	; 0x40
    c872:	bf28      	it	cs
    c874:	2740      	movcs	r7, #64	; 0x40
    c876:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c87a:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c87c:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c880:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c884:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c888:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    c88c:	2600      	movs	r6, #0
	data += size;
    c88e:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    c890:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    c892:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    c896:	f082 0601 	eor.w	r6, r2, #1
    c89a:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    c89c:	f040 8111 	bne.w	cac2 <usb_isr+0x4ce>
    c8a0:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    c8a4:	f04f 0501 	mov.w	r5, #1
    c8a8:	d909      	bls.n	c8be <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c8aa:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    c8ae:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c8b0:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    c8b4:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c8b6:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c8b8:	2388      	movs	r3, #136	; 0x88
    c8ba:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    c8be:	2301      	movs	r3, #1
    c8c0:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    c8c4:	e71f      	b.n	c706 <usb_isr+0x112>
    c8c6:	bf00      	nop
    c8c8:	40072000 	.word	0x40072000
    c8cc:	004000c8 	.word	0x004000c8
    c8d0:	1fff8000 	.word	0x1fff8000
    c8d4:	1fffbbe4 	.word	0x1fffbbe4
    c8d8:	1fffbbf4 	.word	0x1fffbbf4
    c8dc:	1fffbc34 	.word	0x1fffbc34
    c8e0:	00400088 	.word	0x00400088
    c8e4:	1fffbc30 	.word	0x1fffbc30
    c8e8:	1fffbc31 	.word	0x1fffbc31
    c8ec:	1fffbc5c 	.word	0x1fffbc5c
    c8f0:	1fffbc04 	.word	0x1fffbc04
    c8f4:	1fffbbd8 	.word	0x1fffbbd8
    c8f8:	1fffbbd5 	.word	0x1fffbbd5
    c8fc:	400720c0 	.word	0x400720c0
    c900:	1fffbc0c 	.word	0x1fffbc0c
    c904:	1fffbc2c 	.word	0x1fffbc2c
    c908:	1fffbbd6 	.word	0x1fffbbd6
    c90c:	1fffbbd4 	.word	0x1fffbbd4
	switch (setup.wRequestAndType) {
    c910:	2b80      	cmp	r3, #128	; 0x80
    c912:	f000 818b 	beq.w	cc2c <usb_isr+0x638>
    c916:	2b82      	cmp	r3, #130	; 0x82
    c918:	d12d      	bne.n	c976 <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    c91a:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    c91e:	2f04      	cmp	r7, #4
    c920:	d829      	bhi.n	c976 <usb_isr+0x382>
		reply_buffer[0] = 0;
    c922:	4aa7      	ldr	r2, [pc, #668]	; (cbc0 <usb_isr+0x5cc>)
    c924:	2300      	movs	r3, #0
    c926:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    c928:	4ba6      	ldr	r3, [pc, #664]	; (cbc4 <usb_isr+0x5d0>)
    c92a:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    c92e:	079f      	lsls	r7, r3, #30
    c930:	f140 81fc 	bpl.w	cd2c <usb_isr+0x738>
    c934:	2301      	movs	r3, #1
    c936:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    c938:	4ba1      	ldr	r3, [pc, #644]	; (cbc0 <usb_isr+0x5cc>)
		datalen = 2;
    c93a:	2202      	movs	r2, #2
    c93c:	e790      	b.n	c860 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    c93e:	f242 0c21 	movw	ip, #8225	; 0x2021
    c942:	4563      	cmp	r3, ip
    c944:	d0bb      	beq.n	c8be <usb_isr+0x2ca>
    c946:	d91d      	bls.n	c984 <usb_isr+0x390>
    c948:	f242 2221 	movw	r2, #8737	; 0x2221
    c94c:	4293      	cmp	r3, r2
    c94e:	d10d      	bne.n	c96c <usb_isr+0x378>
		switch (setup.wIndex) {
    c950:	b2bf      	uxth	r7, r7
    c952:	2f00      	cmp	r7, #0
    c954:	d182      	bne.n	c85c <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c956:	4b9c      	ldr	r3, [pc, #624]	; (cbc8 <usb_isr+0x5d4>)
    c958:	681a      	ldr	r2, [r3, #0]
    c95a:	4b9c      	ldr	r3, [pc, #624]	; (cbcc <usb_isr+0x5d8>)
    c95c:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    c95e:	4b9c      	ldr	r3, [pc, #624]	; (cbd0 <usb_isr+0x5dc>)
    c960:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    c964:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    c966:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    c968:	4613      	mov	r3, r2
			break;
    c96a:	e779      	b.n	c860 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    c96c:	f242 3221 	movw	r2, #8993	; 0x2321
    c970:	4293      	cmp	r3, r2
    c972:	f43f af73 	beq.w	c85c <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c976:	230f      	movs	r3, #15
    c978:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    c97c:	2301      	movs	r3, #1
    c97e:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    c982:	e6c0      	b.n	c706 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    c984:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    c988:	f000 814a 	beq.w	cc20 <usb_isr+0x62c>
    c98c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    c990:	d1f1      	bne.n	c976 <usb_isr+0x382>
		usb_configuration = setup.wValue;
    c992:	4b90      	ldr	r3, [pc, #576]	; (cbd4 <usb_isr+0x5e0>)
    c994:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    c998:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    c99a:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    c99c:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    c9a0:	061a      	lsls	r2, r3, #24
    c9a2:	d406      	bmi.n	c9b2 <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    c9a4:	3501      	adds	r5, #1
    c9a6:	2d14      	cmp	r5, #20
    c9a8:	d00c      	beq.n	c9c4 <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    c9aa:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    c9ae:	061a      	lsls	r2, r3, #24
    c9b0:	d5f8      	bpl.n	c9a4 <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    c9b2:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    c9b6:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    c9b8:	6858      	ldr	r0, [r3, #4]
    c9ba:	3808      	subs	r0, #8
    c9bc:	f000 fa4c 	bl	ce58 <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    c9c0:	2d14      	cmp	r5, #20
    c9c2:	d1f2      	bne.n	c9aa <usb_isr+0x3b6>
    c9c4:	4a84      	ldr	r2, [pc, #528]	; (cbd8 <usb_isr+0x5e4>)
    c9c6:	4b85      	ldr	r3, [pc, #532]	; (cbdc <usb_isr+0x5e8>)
    c9c8:	9202      	str	r2, [sp, #8]
    c9ca:	4a85      	ldr	r2, [pc, #532]	; (cbe0 <usb_isr+0x5ec>)
    c9cc:	9201      	str	r2, [sp, #4]
    c9ce:	4e85      	ldr	r6, [pc, #532]	; (cbe4 <usb_isr+0x5f0>)
    c9d0:	4a85      	ldr	r2, [pc, #532]	; (cbe8 <usb_isr+0x5f4>)
    c9d2:	f8df 8218 	ldr.w	r8, [pc, #536]	; cbec <usb_isr+0x5f8>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    c9d6:	9403      	str	r4, [sp, #12]
    c9d8:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    c9da:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    c9dc:	461c      	mov	r4, r3
			p = rx_first[i];
    c9de:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    c9e2:	b12f      	cbz	r7, c9f0 <usb_isr+0x3fc>
				n = p->next;
    c9e4:	4638      	mov	r0, r7
    c9e6:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    c9e8:	f000 fa36 	bl	ce58 <usb_free>
			while (p) {
    c9ec:	2f00      	cmp	r7, #0
    c9ee:	d1f9      	bne.n	c9e4 <usb_isr+0x3f0>
			rx_last[i] = NULL;
    c9f0:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    c9f2:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    c9f6:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    c9fa:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    c9fe:	9300      	str	r3, [sp, #0]
			while (p) {
    ca00:	b12f      	cbz	r7, ca0e <usb_isr+0x41a>
				n = p->next;
    ca02:	4638      	mov	r0, r7
    ca04:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    ca06:	f000 fa27 	bl	ce58 <usb_free>
			while (p) {
    ca0a:	2f00      	cmp	r7, #0
    ca0c:	d1f9      	bne.n	ca02 <usb_isr+0x40e>
			tx_last[i] = NULL;
    ca0e:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    ca10:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    ca14:	f843 5b04 	str.w	r5, [r3], #4
    ca18:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    ca1a:	9b01      	ldr	r3, [sp, #4]
    ca1c:	f823 5b02 	strh.w	r5, [r3], #2
    ca20:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    ca22:	7823      	ldrb	r3, [r4, #0]
    ca24:	3b02      	subs	r3, #2
    ca26:	2b03      	cmp	r3, #3
    ca28:	f200 8109 	bhi.w	cc3e <usb_isr+0x64a>
    ca2c:	e8df f013 	tbh	[pc, r3, lsl #1]
    ca30:	0104013f 	.word	0x0104013f
    ca34:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    ca38:	4a6d      	ldr	r2, [pc, #436]	; (cbf0 <usb_isr+0x5fc>)
						b->desc = 0;
    ca3a:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    ca3e:	7813      	ldrb	r3, [r2, #0]
    ca40:	3301      	adds	r3, #1
    ca42:	7013      	strb	r3, [r2, #0]
    ca44:	e619      	b.n	c67a <usb_isr+0x86>
						rx_first[endpoint] = packet;
    ca46:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    ca4a:	4b67      	ldr	r3, [pc, #412]	; (cbe8 <usb_isr+0x5f4>)
    ca4c:	e5fe      	b.n	c64c <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    ca4e:	5d11      	ldrb	r1, [r2, r4]
    ca50:	2902      	cmp	r1, #2
    ca52:	d026      	beq.n	caa2 <usb_isr+0x4ae>
    ca54:	f67f ae11 	bls.w	c67a <usb_isr+0x86>
    ca58:	2903      	cmp	r1, #3
    ca5a:	d11d      	bne.n	ca98 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    ca5c:	2301      	movs	r3, #1
    ca5e:	5513      	strb	r3, [r2, r4]
						break;
    ca60:	e60b      	b.n	c67a <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    ca62:	07e0      	lsls	r0, r4, #31
    ca64:	d46e      	bmi.n	cb44 <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    ca66:	0621      	lsls	r1, r4, #24
    ca68:	d421      	bmi.n	caae <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    ca6a:	07a2      	lsls	r2, r4, #30
    ca6c:	d508      	bpl.n	ca80 <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    ca6e:	4b61      	ldr	r3, [pc, #388]	; (cbf4 <usb_isr+0x600>)
    ca70:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    ca74:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    ca76:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    ca78:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    ca7c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    ca80:	06e3      	lsls	r3, r4, #27
    ca82:	d503      	bpl.n	ca8c <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    ca84:	4b5b      	ldr	r3, [pc, #364]	; (cbf4 <usb_isr+0x600>)
    ca86:	2210      	movs	r2, #16
    ca88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    ca8c:	b005      	add	sp, #20
    ca8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    ca92:	f000 fb59 	bl	d148 <usb_serial_flush_callback>
    ca96:	e611      	b.n	c6bc <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    ca98:	f017 0f08 	tst.w	r7, #8
    ca9c:	bf14      	ite	ne
    ca9e:	2303      	movne	r3, #3
    caa0:	2302      	moveq	r3, #2
    caa2:	5513      	strb	r3, [r2, r4]
						break;
    caa4:	e5e9      	b.n	c67a <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    caa6:	2f3f      	cmp	r7, #63	; 0x3f
    caa8:	bf98      	it	ls
    caaa:	2200      	movls	r2, #0
    caac:	e6c5      	b.n	c83a <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    caae:	4b51      	ldr	r3, [pc, #324]	; (cbf4 <usb_isr+0x600>)
		USB0_ISTAT = USB_ISTAT_STALL;
    cab0:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    cab2:	210d      	movs	r1, #13
    cab4:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    cab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    cabc:	07a2      	lsls	r2, r4, #30
    cabe:	d5df      	bpl.n	ca80 <usb_isr+0x48c>
    cac0:	e7d5      	b.n	ca6e <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    cac2:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    cac6:	7002      	strb	r2, [r0, #0]
    cac8:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    caca:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    cace:	463a      	mov	r2, r7
    cad0:	bf28      	it	cs
    cad2:	2240      	movcs	r2, #64	; 0x40
    cad4:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cad6:	0410      	lsls	r0, r2, #16
	data += size;
    cad8:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cada:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    cade:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    cae0:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cae2:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    cae6:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    cae8:	d055      	beq.n	cb96 <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    caea:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    caec:	4b42      	ldr	r3, [pc, #264]	; (cbf8 <usb_isr+0x604>)
    caee:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    caf0:	2301      	movs	r3, #1
    caf2:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    caf6:	e606      	b.n	c706 <usb_isr+0x112>
			switch (setup.wIndex) {
    caf8:	8892      	ldrh	r2, [r2, #4]
    cafa:	b95a      	cbnz	r2, cb14 <usb_isr+0x520>
    cafc:	4a3f      	ldr	r2, [pc, #252]	; (cbfc <usb_isr+0x608>)
    cafe:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    cb00:	f814 1b01 	ldrb.w	r1, [r4], #1
    cb04:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    cb08:	42ac      	cmp	r4, r5
    cb0a:	d1f9      	bne.n	cb00 <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    cb0c:	4a3c      	ldr	r2, [pc, #240]	; (cc00 <usb_isr+0x60c>)
    cb0e:	6812      	ldr	r2, [r2, #0]
    cb10:	2a86      	cmp	r2, #134	; 0x86
    cb12:	d03c      	beq.n	cb8e <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cb14:	4c3b      	ldr	r4, [pc, #236]	; (cc04 <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    cb16:	483c      	ldr	r0, [pc, #240]	; (cc08 <usb_isr+0x614>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cb18:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    cb1a:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cb1c:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    cb1e:	f085 0501 	eor.w	r5, r5, #1
    cb22:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    cb24:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    cb28:	f082 0201 	eor.w	r2, r2, #1
    cb2c:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    cb2e:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    cb32:	f04f 0000 	mov.w	r0, #0
    cb36:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cb38:	bf14      	ite	ne
    cb3a:	22c8      	movne	r2, #200	; 0xc8
    cb3c:	2288      	moveq	r2, #136	; 0x88
    cb3e:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    cb42:	e5de      	b.n	c702 <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    cb44:	4b2b      	ldr	r3, [pc, #172]	; (cbf4 <usb_isr+0x600>)
		ep0_tx_bdt_bank = 0;
    cb46:	4830      	ldr	r0, [pc, #192]	; (cc08 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    cb48:	4930      	ldr	r1, [pc, #192]	; (cc0c <usb_isr+0x618>)
    cb4a:	4c31      	ldr	r4, [pc, #196]	; (cc10 <usb_isr+0x61c>)
		USB0_CTL = USB_CTL_ODDRST;
    cb4c:	2502      	movs	r5, #2
    cb4e:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    cb52:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    cb54:	482f      	ldr	r0, [pc, #188]	; (cc14 <usb_isr+0x620>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    cb56:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    cb58:	4d2f      	ldr	r5, [pc, #188]	; (cc18 <usb_isr+0x624>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    cb5a:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    cb5c:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    cb5e:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    cb60:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    cb62:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    cb64:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    cb66:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    cb68:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    cb6c:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    cb6e:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    cb70:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    cb74:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    cb78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    cb7c:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    cb80:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    cb84:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    cb88:	b005      	add	sp, #20
    cb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    cb8e:	4a23      	ldr	r2, [pc, #140]	; (cc1c <usb_isr+0x628>)
    cb90:	200f      	movs	r0, #15
    cb92:	7010      	strb	r0, [r2, #0]
    cb94:	e7be      	b.n	cb14 <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    cb96:	2f3f      	cmp	r7, #63	; 0x3f
    cb98:	d8a7      	bhi.n	caea <usb_isr+0x4f6>
    cb9a:	e690      	b.n	c8be <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    cb9c:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    cba0:	2f04      	cmp	r7, #4
    cba2:	f63f aee8 	bhi.w	c976 <usb_isr+0x382>
    cba6:	0c00      	lsrs	r0, r0, #16
    cba8:	f47f aee5 	bne.w	c976 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    cbac:	4a05      	ldr	r2, [pc, #20]	; (cbc4 <usb_isr+0x5d0>)
    cbae:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    cbb2:	f023 0302 	bic.w	r3, r3, #2
    cbb6:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    cbba:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    cbbc:	4613      	mov	r3, r2
		break;
    cbbe:	e64f      	b.n	c860 <usb_isr+0x26c>
    cbc0:	1fffbbdc 	.word	0x1fffbbdc
    cbc4:	400720c0 	.word	0x400720c0
    cbc8:	1fffba38 	.word	0x1fffba38
    cbcc:	1fffbc58 	.word	0x1fffbc58
    cbd0:	1fffbc54 	.word	0x1fffbc54
    cbd4:	1fffbc30 	.word	0x1fffbc30
    cbd8:	1fffbc1c 	.word	0x1fffbc1c
    cbdc:	1fffbc2c 	.word	0x1fffbc2c
    cbe0:	1fffbc34 	.word	0x1fffbc34
    cbe4:	1fffbbe4 	.word	0x1fffbbe4
    cbe8:	1fffbbf4 	.word	0x1fffbbf4
    cbec:	1fffbc0c 	.word	0x1fffbc0c
    cbf0:	1fffbc3c 	.word	0x1fffbc3c
    cbf4:	40072000 	.word	0x40072000
    cbf8:	1fffbbd6 	.word	0x1fffbbd6
    cbfc:	1fffbc4b 	.word	0x1fffbc4b
    cc00:	1fffbc4c 	.word	0x1fffbc4c
    cc04:	1fffbbd5 	.word	0x1fffbbd5
    cc08:	1fffbbd4 	.word	0x1fffbbd4
    cc0c:	1fff8000 	.word	0x1fff8000
    cc10:	00400088 	.word	0x00400088
    cc14:	1fffbb54 	.word	0x1fffbb54
    cc18:	1fffbb94 	.word	0x1fffbb94
    cc1c:	1fffbc31 	.word	0x1fffbc31
		reply_buffer[0] = usb_configuration;
    cc20:	4b48      	ldr	r3, [pc, #288]	; (cd44 <usb_isr+0x750>)
    cc22:	4949      	ldr	r1, [pc, #292]	; (cd48 <usb_isr+0x754>)
    cc24:	781b      	ldrb	r3, [r3, #0]
    cc26:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    cc28:	460b      	mov	r3, r1
		break;
    cc2a:	e619      	b.n	c860 <usb_isr+0x26c>
		reply_buffer[0] = 0;
    cc2c:	4a46      	ldr	r2, [pc, #280]	; (cd48 <usb_isr+0x754>)
    cc2e:	2300      	movs	r3, #0
    cc30:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    cc32:	4b45      	ldr	r3, [pc, #276]	; (cd48 <usb_isr+0x754>)
		datalen = 2;
    cc34:	2202      	movs	r2, #2
		break;
    cc36:	e613      	b.n	c860 <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    cc38:	f04f 0301 	mov.w	r3, #1
    cc3c:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    cc3e:	4b43      	ldr	r3, [pc, #268]	; (cd4c <usb_isr+0x758>)
    cc40:	42b3      	cmp	r3, r6
    cc42:	f104 0401 	add.w	r4, r4, #1
    cc46:	f47f aeca 	bne.w	c9de <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    cc4a:	4e41      	ldr	r6, [pc, #260]	; (cd50 <usb_isr+0x75c>)
    cc4c:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    cc4e:	f8df 8104 	ldr.w	r8, [pc, #260]	; cd54 <usb_isr+0x760>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    cc52:	4f41      	ldr	r7, [pc, #260]	; (cd58 <usb_isr+0x764>)
		usb_rx_memory_needed = 0;
    cc54:	2300      	movs	r3, #0
    cc56:	7033      	strb	r3, [r6, #0]
    cc58:	2504      	movs	r5, #4
			epconf = *cfg++;
    cc5a:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    cc5e:	4a3f      	ldr	r2, [pc, #252]	; (cd5c <usb_isr+0x768>)
    cc60:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    cc62:	071b      	lsls	r3, r3, #28
    cc64:	d425      	bmi.n	ccb2 <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    cc66:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    cc6a:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    cc6e:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    cc70:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    cc72:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    cc74:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    cc78:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    cc7c:	d1ed      	bne.n	cc5a <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    cc7e:	4f38      	ldr	r7, [pc, #224]	; (cd60 <usb_isr+0x76c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cc80:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    cc82:	783a      	ldrb	r2, [r7, #0]
    cc84:	f042 0002 	orr.w	r0, r2, #2
    cc88:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    cc8c:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    cc90:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cc94:	2d00      	cmp	r5, #0
    cc96:	d14d      	bne.n	cd34 <usb_isr+0x740>
    cc98:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    cc9a:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    cc9e:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    cca0:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cca2:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    cca6:	2301      	movs	r3, #1
    cca8:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    ccac:	e52b      	b.n	c706 <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    ccae:	7025      	strb	r5, [r4, #0]
				break;
    ccb0:	e7c5      	b.n	cc3e <usb_isr+0x64a>
				p = usb_malloc();
    ccb2:	f000 f8b1 	bl	ce18 <usb_malloc>
				if (p) {
    ccb6:	2800      	cmp	r0, #0
    ccb8:	d032      	beq.n	cd20 <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    ccba:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    ccbe:	3008      	adds	r0, #8
    ccc0:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ccc2:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    ccc6:	f000 f8a7 	bl	ce18 <usb_malloc>
				if (p) {
    ccca:	b308      	cbz	r0, cd10 <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    cccc:	f045 0301 	orr.w	r3, r5, #1
    ccd0:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    ccd4:	3008      	adds	r0, #8
    ccd6:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ccd8:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    ccdc:	e7c3      	b.n	cc66 <usb_isr+0x672>
			if (list->addr == NULL) break;
    ccde:	4a21      	ldr	r2, [pc, #132]	; (cd64 <usb_isr+0x770>)
    cce0:	6853      	ldr	r3, [r2, #4]
    cce2:	2b00      	cmp	r3, #0
    cce4:	f43f ae47 	beq.w	c976 <usb_isr+0x382>
    cce8:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ccea:	b2bf      	uxth	r7, r7
    ccec:	e004      	b.n	ccf8 <usb_isr+0x704>
			if (list->addr == NULL) break;
    ccee:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    ccf0:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    ccf2:	2b00      	cmp	r3, #0
    ccf4:	f43f ae3f 	beq.w	c976 <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ccf8:	8811      	ldrh	r1, [r2, #0]
    ccfa:	4281      	cmp	r1, r0
    ccfc:	d1f7      	bne.n	ccee <usb_isr+0x6fa>
    ccfe:	8851      	ldrh	r1, [r2, #2]
    cd00:	42b9      	cmp	r1, r7
    cd02:	d1f4      	bne.n	ccee <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    cd04:	0a00      	lsrs	r0, r0, #8
    cd06:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    cd08:	bf0c      	ite	eq
    cd0a:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    cd0c:	8912      	ldrhne	r2, [r2, #8]
    cd0e:	e5a7      	b.n	c860 <usb_isr+0x26c>
					usb_rx_memory_needed++;
    cd10:	7833      	ldrb	r3, [r6, #0]
    cd12:	3301      	adds	r3, #1
    cd14:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    cd16:	f045 0301 	orr.w	r3, r5, #1
    cd1a:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    cd1e:	e7a2      	b.n	cc66 <usb_isr+0x672>
					usb_rx_memory_needed++;
    cd20:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    cd22:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    cd26:	3301      	adds	r3, #1
    cd28:	7033      	strb	r3, [r6, #0]
    cd2a:	e7cc      	b.n	ccc6 <usb_isr+0x6d2>
		data = reply_buffer;
    cd2c:	4b06      	ldr	r3, [pc, #24]	; (cd48 <usb_isr+0x754>)
		datalen = 2;
    cd2e:	2202      	movs	r2, #2
    cd30:	e596      	b.n	c860 <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    cd32:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    cd34:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cd36:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    cd38:	f082 0601 	eor.w	r6, r2, #1
    cd3c:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cd3e:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    cd42:	e5bc      	b.n	c8be <usb_isr+0x2ca>
    cd44:	1fffbc30 	.word	0x1fffbc30
    cd48:	1fffbbdc 	.word	0x1fffbbdc
    cd4c:	1fffbbf4 	.word	0x1fffbbf4
    cd50:	1fffbc3c 	.word	0x1fffbc3c
    cd54:	000171a8 	.word	0x000171a8
    cd58:	00400088 	.word	0x00400088
    cd5c:	400720c0 	.word	0x400720c0
    cd60:	1fffbbd4 	.word	0x1fffbbd4
    cd64:	00017154 	.word	0x00017154

0000cd68 <usb_init>:



void usb_init(void)
{
    cd68:	b570      	push	{r4, r5, r6, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    cd6a:	f000 fab3 	bl	d2d4 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    cd6e:	2300      	movs	r3, #0
    cd70:	4a1a      	ldr	r2, [pc, #104]	; (cddc <usb_init+0x74>)
		table[i].desc = 0;
    cd72:	4619      	mov	r1, r3
    cd74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    cd78:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    cd7c:	3301      	adds	r3, #1
    cd7e:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    cd80:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    cd82:	d1f7      	bne.n	cd74 <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    cd84:	4c16      	ldr	r4, [pc, #88]	; (cde0 <usb_init+0x78>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    cd86:	4b17      	ldr	r3, [pc, #92]	; (cde4 <usb_init+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    cd88:	6b60      	ldr	r0, [r4, #52]	; 0x34

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    cd8a:	4d17      	ldr	r5, [pc, #92]	; (cde8 <usb_init+0x80>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    cd8c:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    cd90:	6360      	str	r0, [r4, #52]	; 0x34
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    cd92:	f3c2 2407 	ubfx	r4, r2, #8, #8
    cd96:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_USBCTRL = 0;
    cd9a:	4c14      	ldr	r4, [pc, #80]	; (cdec <usb_init+0x84>)
	USB0_ISTAT = 0xFF;
    cd9c:	20ff      	movs	r0, #255	; 0xff
	USB0_CTL = USB_CTL_USBENSOFEN;
    cd9e:	f04f 0c01 	mov.w	ip, #1
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    cda2:	f3c2 4607 	ubfx	r6, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    cda6:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    cda8:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    cdac:	f04f 2ee0 	mov.w	lr, #3758153728	; 0xe000e000
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    cdb0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_ISTAT = 0xFF;
    cdb4:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
	USB0_ERRSTAT = 0xFF;
    cdb8:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    cdbc:	7418      	strb	r0, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    cdbe:	f883 c094 	strb.w	ip, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    cdc2:	7021      	strb	r1, [r4, #0]
	USB0_INTEN = USB_INTEN_USBRSTEN;
    cdc4:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    cdc8:	2370      	movs	r3, #112	; 0x70
    cdca:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    cdce:	f44f 7200 	mov.w	r2, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    cdd2:	2310      	movs	r3, #16
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    cdd4:	f8ce 2108 	str.w	r2, [lr, #264]	; 0x108
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    cdd8:	7223      	strb	r3, [r4, #8]
}
    cdda:	bd70      	pop	{r4, r5, r6, pc}
    cddc:	1fff8000 	.word	0x1fff8000
    cde0:	40048000 	.word	0x40048000
    cde4:	40072000 	.word	0x40072000
    cde8:	e000e400 	.word	0xe000e400
    cdec:	40072100 	.word	0x40072100

0000cdf0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    cdf0:	f000 b8ac 	b.w	cf4c <usb_serial_flush_input>

0000cdf4 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    cdf4:	f000 b87c 	b.w	cef0 <usb_serial_peekchar>

0000cdf8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    cdf8:	f000 b856 	b.w	cea8 <usb_serial_getchar>

0000cdfc <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    cdfc:	f000 b890 	b.w	cf20 <usb_serial_available>

0000ce00 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    ce00:	f000 b976 	b.w	d0f0 <usb_serial_flush_output>

0000ce04 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    ce04:	f000 b950 	b.w	d0a8 <usb_serial_write_buffer_free>

0000ce08 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ce08:	4608      	mov	r0, r1
    ce0a:	4611      	mov	r1, r2
    ce0c:	f000 b8ba 	b.w	cf84 <usb_serial_write>

0000ce10 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ce10:	4608      	mov	r0, r1
    ce12:	f000 b93b 	b.w	d08c <usb_serial_putchar>
    ce16:	bf00      	nop

0000ce18 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    ce18:	b672      	cpsid	i
	avail = usb_buffer_available;
    ce1a:	490d      	ldr	r1, [pc, #52]	; (ce50 <usb_malloc+0x38>)
    ce1c:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    ce1e:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    ce22:	280b      	cmp	r0, #11
    ce24:	dc10      	bgt.n	ce48 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    ce26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    ce2a:	40c2      	lsrs	r2, r0
    ce2c:	ea23 0302 	bic.w	r3, r3, r2
    ce30:	600b      	str	r3, [r1, #0]
	__enable_irq();
    ce32:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    ce34:	4a07      	ldr	r2, [pc, #28]	; (ce54 <usb_malloc+0x3c>)
    ce36:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    ce3a:	00c1      	lsls	r1, r0, #3
    ce3c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    ce40:	2300      	movs	r3, #0
    ce42:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    ce44:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    ce46:	4770      	bx	lr
		__enable_irq();
    ce48:	b662      	cpsie	i
		return NULL;
    ce4a:	2000      	movs	r0, #0
    ce4c:	4770      	bx	lr
    ce4e:	bf00      	nop
    ce50:	1fff8a08 	.word	0x1fff8a08
    ce54:	1fff83bc 	.word	0x1fff83bc

0000ce58 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    ce58:	4b0e      	ldr	r3, [pc, #56]	; (ce94 <usb_free+0x3c>)
    ce5a:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    ce5c:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    ce60:	d210      	bcs.n	ce84 <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    ce62:	4a0d      	ldr	r2, [pc, #52]	; (ce98 <usb_free+0x40>)
    ce64:	7812      	ldrb	r2, [r2, #0]
    ce66:	b972      	cbnz	r2, ce86 <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    ce68:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    ce6a:	4a0c      	ldr	r2, [pc, #48]	; (ce9c <usb_free+0x44>)
	usb_buffer_available |= mask;
    ce6c:	490c      	ldr	r1, [pc, #48]	; (cea0 <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    ce6e:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    ce72:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    ce74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    ce78:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    ce7a:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    ce7e:	4303      	orrs	r3, r0
    ce80:	600b      	str	r3, [r1, #0]
	__enable_irq();
    ce82:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    ce84:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    ce86:	4a07      	ldr	r2, [pc, #28]	; (cea4 <usb_free+0x4c>)
    ce88:	7812      	ldrb	r2, [r2, #0]
    ce8a:	2a00      	cmp	r2, #0
    ce8c:	d0ec      	beq.n	ce68 <usb_free+0x10>
		usb_rx_memory(p);
    ce8e:	f7ff bb2d 	b.w	c4ec <usb_rx_memory>
    ce92:	bf00      	nop
    ce94:	1fff83bc 	.word	0x1fff83bc
    ce98:	1fffbc3c 	.word	0x1fffbc3c
    ce9c:	38e38e39 	.word	0x38e38e39
    cea0:	1fff8a08 	.word	0x1fff8a08
    cea4:	1fffbc30 	.word	0x1fffbc30

0000cea8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    cea8:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    ceaa:	4c0f      	ldr	r4, [pc, #60]	; (cee8 <usb_serial_getchar+0x40>)
    ceac:	6820      	ldr	r0, [r4, #0]
    ceae:	b178      	cbz	r0, ced0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    ceb0:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    ceb2:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    ceb4:	18c1      	adds	r1, r0, r3
    ceb6:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    ceb8:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    ceba:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    cebc:	d902      	bls.n	cec4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    cebe:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    cec0:	4628      	mov	r0, r5
    cec2:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    cec4:	f7ff ffc8 	bl	ce58 <usb_free>
		rx_packet = NULL;
    cec8:	2300      	movs	r3, #0
    ceca:	6023      	str	r3, [r4, #0]
}
    cecc:	4628      	mov	r0, r5
    cece:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    ced0:	4b06      	ldr	r3, [pc, #24]	; (ceec <usb_serial_getchar+0x44>)
    ced2:	781b      	ldrb	r3, [r3, #0]
    ced4:	b12b      	cbz	r3, cee2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    ced6:	2003      	movs	r0, #3
    ced8:	f7ff fad0 	bl	c47c <usb_rx>
    cedc:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    cede:	2800      	cmp	r0, #0
    cee0:	d1e6      	bne.n	ceb0 <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    cee2:	f04f 35ff 	mov.w	r5, #4294967295
    cee6:	e7eb      	b.n	cec0 <usb_serial_getchar+0x18>
    cee8:	1fffbc40 	.word	0x1fffbc40
    ceec:	1fffbc30 	.word	0x1fffbc30

0000cef0 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    cef0:	b510      	push	{r4, lr}
	if (!rx_packet) {
    cef2:	4c09      	ldr	r4, [pc, #36]	; (cf18 <usb_serial_peekchar+0x28>)
    cef4:	6820      	ldr	r0, [r4, #0]
    cef6:	b118      	cbz	r0, cf00 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    cef8:	8843      	ldrh	r3, [r0, #2]
    cefa:	4418      	add	r0, r3
    cefc:	7a00      	ldrb	r0, [r0, #8]
}
    cefe:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    cf00:	4b06      	ldr	r3, [pc, #24]	; (cf1c <usb_serial_peekchar+0x2c>)
    cf02:	781b      	ldrb	r3, [r3, #0]
    cf04:	b12b      	cbz	r3, cf12 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    cf06:	2003      	movs	r0, #3
    cf08:	f7ff fab8 	bl	c47c <usb_rx>
    cf0c:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    cf0e:	2800      	cmp	r0, #0
    cf10:	d1f2      	bne.n	cef8 <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    cf12:	f04f 30ff 	mov.w	r0, #4294967295
}
    cf16:	bd10      	pop	{r4, pc}
    cf18:	1fffbc40 	.word	0x1fffbc40
    cf1c:	1fffbc30 	.word	0x1fffbc30

0000cf20 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    cf20:	4b08      	ldr	r3, [pc, #32]	; (cf44 <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    cf22:	4a09      	ldr	r2, [pc, #36]	; (cf48 <usb_serial_available+0x28>)
    cf24:	681b      	ldr	r3, [r3, #0]
{
    cf26:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    cf28:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    cf2a:	b11b      	cbz	r3, cf34 <usb_serial_available+0x14>
    cf2c:	881a      	ldrh	r2, [r3, #0]
    cf2e:	885b      	ldrh	r3, [r3, #2]
    cf30:	1ad3      	subs	r3, r2, r3
    cf32:	441c      	add	r4, r3
	if (count == 0) yield();
    cf34:	b10c      	cbz	r4, cf3a <usb_serial_available+0x1a>
	return count;
}
    cf36:	4620      	mov	r0, r4
    cf38:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    cf3a:	f000 f929 	bl	d190 <yield>
}
    cf3e:	4620      	mov	r0, r4
    cf40:	bd10      	pop	{r4, pc}
    cf42:	bf00      	nop
    cf44:	1fffbc40 	.word	0x1fffbc40
    cf48:	1fffbc34 	.word	0x1fffbc34

0000cf4c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    cf4c:	4b0b      	ldr	r3, [pc, #44]	; (cf7c <usb_serial_flush_input+0x30>)
    cf4e:	781b      	ldrb	r3, [r3, #0]
    cf50:	b19b      	cbz	r3, cf7a <usb_serial_flush_input+0x2e>
{
    cf52:	b510      	push	{r4, lr}
	if (rx_packet) {
    cf54:	4c0a      	ldr	r4, [pc, #40]	; (cf80 <usb_serial_flush_input+0x34>)
    cf56:	6820      	ldr	r0, [r4, #0]
    cf58:	b148      	cbz	r0, cf6e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    cf5a:	f7ff ff7d 	bl	ce58 <usb_free>
		rx_packet = NULL;
    cf5e:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    cf60:	2003      	movs	r0, #3
		rx_packet = NULL;
    cf62:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    cf64:	f7ff fa8a 	bl	c47c <usb_rx>
		if (!rx) break;
    cf68:	b130      	cbz	r0, cf78 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    cf6a:	f7ff ff75 	bl	ce58 <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    cf6e:	2003      	movs	r0, #3
    cf70:	f7ff fa84 	bl	c47c <usb_rx>
		if (!rx) break;
    cf74:	2800      	cmp	r0, #0
    cf76:	d1f8      	bne.n	cf6a <usb_serial_flush_input+0x1e>
	}
}
    cf78:	bd10      	pop	{r4, pc}
    cf7a:	4770      	bx	lr
    cf7c:	1fffbc30 	.word	0x1fffbc30
    cf80:	1fffbc40 	.word	0x1fffbc40

0000cf84 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    cf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    cf88:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d078 <usb_serial_write+0xf4>
{
    cf8c:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    cf8e:	2201      	movs	r2, #1
    cf90:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    cf94:	9101      	str	r1, [sp, #4]
    cf96:	b379      	cbz	r1, cff8 <usb_serial_write+0x74>
    cf98:	4f38      	ldr	r7, [pc, #224]	; (d07c <usb_serial_write+0xf8>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    cf9a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; d080 <usb_serial_write+0xfc>
	while (size > 0) {
    cf9e:	9d01      	ldr	r5, [sp, #4]
    cfa0:	4e38      	ldr	r6, [pc, #224]	; (d084 <usb_serial_write+0x100>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    cfa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; d088 <usb_serial_write+0x104>
    cfa6:	4683      	mov	fp, r0
		if (!tx_packet) {
    cfa8:	6839      	ldr	r1, [r7, #0]
    cfaa:	b3a1      	cbz	r1, d016 <usb_serial_write+0x92>
		len = CDC_TX_SIZE - tx_packet->index;
    cfac:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    cfb0:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    cfb4:	45ac      	cmp	ip, r5
    cfb6:	bf28      	it	cs
    cfb8:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    cfba:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    cfbe:	2200      	movs	r2, #0
		tx_packet->index += len;
    cfc0:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    cfc2:	7032      	strb	r2, [r6, #0]
		size -= len;
    cfc4:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    cfc8:	804c      	strh	r4, [r1, #2]
		dest = tx_packet->buf + tx_packet->index;
    cfca:	f101 0208 	add.w	r2, r1, #8
		while (len-- > 0) *dest++ = *src++;
    cfce:	f1bc 0f00 	cmp.w	ip, #0
    cfd2:	d00a      	beq.n	cfea <usb_serial_write+0x66>
    cfd4:	f10e 3eff 	add.w	lr, lr, #4294967295
    cfd8:	4472      	add	r2, lr
    cfda:	44dc      	add	ip, fp
    cfdc:	f81b 4b01 	ldrb.w	r4, [fp], #1
    cfe0:	f802 4f01 	strb.w	r4, [r2, #1]!
    cfe4:	45dc      	cmp	ip, fp
    cfe6:	d1f9      	bne.n	cfdc <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    cfe8:	884c      	ldrh	r4, [r1, #2]
    cfea:	2c3f      	cmp	r4, #63	; 0x3f
    cfec:	d80b      	bhi.n	d006 <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    cfee:	2205      	movs	r2, #5
    cff0:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    cff4:	2d00      	cmp	r5, #0
    cff6:	d1d7      	bne.n	cfa8 <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    cff8:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    cffa:	2300      	movs	r3, #0
    cffc:	f889 3000 	strb.w	r3, [r9]
}
    d000:	b003      	add	sp, #12
    d002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    d006:	2240      	movs	r2, #64	; 0x40
    d008:	800a      	strh	r2, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    d00a:	2004      	movs	r0, #4
    d00c:	f7ff faae 	bl	c56c <usb_tx>
			tx_packet = NULL;
    d010:	2200      	movs	r2, #0
    d012:	603a      	str	r2, [r7, #0]
    d014:	e7eb      	b.n	cfee <usb_serial_write+0x6a>
				if (!usb_configuration) {
    d016:	f898 2000 	ldrb.w	r2, [r8]
    d01a:	b32a      	cbz	r2, d068 <usb_serial_write+0xe4>
    d01c:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
    d020:	e008      	b.n	d034 <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    d022:	3c01      	subs	r4, #1
    d024:	d019      	beq.n	d05a <usb_serial_write+0xd6>
    d026:	7832      	ldrb	r2, [r6, #0]
    d028:	b9ba      	cbnz	r2, d05a <usb_serial_write+0xd6>
				yield();
    d02a:	f000 f8b1 	bl	d190 <yield>
				if (!usb_configuration) {
    d02e:	f898 2000 	ldrb.w	r2, [r8]
    d032:	b1ca      	cbz	r2, d068 <usb_serial_write+0xe4>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    d034:	2004      	movs	r0, #4
    d036:	f7ff fa43 	bl	c4c0 <usb_tx_packet_count>
    d03a:	2807      	cmp	r0, #7
    d03c:	d8f1      	bhi.n	d022 <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    d03e:	f04f 0301 	mov.w	r3, #1
    d042:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    d046:	f7ff fee7 	bl	ce18 <usb_malloc>
    d04a:	4601      	mov	r1, r0
    d04c:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    d04e:	2800      	cmp	r0, #0
    d050:	d1ac      	bne.n	cfac <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    d052:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    d054:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    d058:	d1e5      	bne.n	d026 <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    d05a:	2301      	movs	r3, #1
					return -1;
    d05c:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    d060:	7033      	strb	r3, [r6, #0]
}
    d062:	b003      	add	sp, #12
    d064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    d068:	2300      	movs	r3, #0
					return -1;
    d06a:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    d06e:	f889 3000 	strb.w	r3, [r9]
}
    d072:	b003      	add	sp, #12
    d074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d078:	1fffbc45 	.word	0x1fffbc45
    d07c:	1fffbc48 	.word	0x1fffbc48
    d080:	1fffbc30 	.word	0x1fffbc30
    d084:	1fffbc44 	.word	0x1fffbc44
    d088:	1fffbc5c 	.word	0x1fffbc5c

0000d08c <usb_serial_putchar>:
{
    d08c:	b500      	push	{lr}
    d08e:	b083      	sub	sp, #12
    d090:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    d092:	2101      	movs	r1, #1
    d094:	f10d 0007 	add.w	r0, sp, #7
{
    d098:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    d09c:	f7ff ff72 	bl	cf84 <usb_serial_write>
}
    d0a0:	b003      	add	sp, #12
    d0a2:	f85d fb04 	ldr.w	pc, [sp], #4
    d0a6:	bf00      	nop

0000d0a8 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    d0a8:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    d0aa:	4d0e      	ldr	r5, [pc, #56]	; (d0e4 <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    d0ac:	4c0e      	ldr	r4, [pc, #56]	; (d0e8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    d0ae:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    d0b0:	2301      	movs	r3, #1
    d0b2:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    d0b4:	b128      	cbz	r0, d0c2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    d0b6:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    d0b8:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    d0ba:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    d0be:	7023      	strb	r3, [r4, #0]
	return len;
}
    d0c0:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    d0c2:	4b0a      	ldr	r3, [pc, #40]	; (d0ec <usb_serial_write_buffer_free+0x44>)
    d0c4:	781b      	ldrb	r3, [r3, #0]
    d0c6:	b913      	cbnz	r3, d0ce <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    d0c8:	2000      	movs	r0, #0
    d0ca:	7020      	strb	r0, [r4, #0]
}
    d0cc:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    d0ce:	2004      	movs	r0, #4
    d0d0:	f7ff f9f6 	bl	c4c0 <usb_tx_packet_count>
		if (!usb_configuration ||
    d0d4:	2807      	cmp	r0, #7
    d0d6:	d8f7      	bhi.n	d0c8 <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    d0d8:	f7ff fe9e 	bl	ce18 <usb_malloc>
    d0dc:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    d0de:	2800      	cmp	r0, #0
    d0e0:	d1e9      	bne.n	d0b6 <usb_serial_write_buffer_free+0xe>
    d0e2:	e7f1      	b.n	d0c8 <usb_serial_write_buffer_free+0x20>
    d0e4:	1fffbc48 	.word	0x1fffbc48
    d0e8:	1fffbc45 	.word	0x1fffbc45
    d0ec:	1fffbc30 	.word	0x1fffbc30

0000d0f0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    d0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    d0f2:	4b11      	ldr	r3, [pc, #68]	; (d138 <usb_serial_flush_output+0x48>)
    d0f4:	781b      	ldrb	r3, [r3, #0]
    d0f6:	b18b      	cbz	r3, d11c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    d0f8:	4e10      	ldr	r6, [pc, #64]	; (d13c <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    d0fa:	4d11      	ldr	r5, [pc, #68]	; (d140 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    d0fc:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    d0fe:	2701      	movs	r7, #1
    d100:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    d102:	b164      	cbz	r4, d11e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    d104:	4b0f      	ldr	r3, [pc, #60]	; (d144 <usb_serial_flush_output+0x54>)
    d106:	2700      	movs	r7, #0
    d108:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    d10a:	8863      	ldrh	r3, [r4, #2]
    d10c:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    d10e:	4621      	mov	r1, r4
    d110:	2004      	movs	r0, #4
    d112:	f7ff fa2b 	bl	c56c <usb_tx>
		tx_packet = NULL;
    d116:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    d118:	2300      	movs	r3, #0
    d11a:	702b      	strb	r3, [r5, #0]
}
    d11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    d11e:	f7ff fe7b 	bl	ce18 <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    d122:	4b08      	ldr	r3, [pc, #32]	; (d144 <usb_serial_flush_output+0x54>)
		if (tx) {
    d124:	4601      	mov	r1, r0
    d126:	b120      	cbz	r0, d132 <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    d128:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    d12a:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    d12c:	f7ff fa1e 	bl	c56c <usb_tx>
    d130:	e7f2      	b.n	d118 <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    d132:	701f      	strb	r7, [r3, #0]
    d134:	e7f0      	b.n	d118 <usb_serial_flush_output+0x28>
    d136:	bf00      	nop
    d138:	1fffbc30 	.word	0x1fffbc30
    d13c:	1fffbc48 	.word	0x1fffbc48
    d140:	1fffbc45 	.word	0x1fffbc45
    d144:	1fffbc5c 	.word	0x1fffbc5c

0000d148 <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    d148:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    d14a:	4b0e      	ldr	r3, [pc, #56]	; (d184 <usb_serial_flush_callback+0x3c>)
    d14c:	781b      	ldrb	r3, [r3, #0]
    d14e:	b953      	cbnz	r3, d166 <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    d150:	4c0d      	ldr	r4, [pc, #52]	; (d188 <usb_serial_flush_callback+0x40>)
    d152:	6821      	ldr	r1, [r4, #0]
    d154:	b141      	cbz	r1, d168 <usb_serial_flush_callback+0x20>
    d156:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    d15a:	884b      	ldrh	r3, [r1, #2]
    d15c:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    d15e:	2004      	movs	r0, #4
    d160:	f7ff fa04 	bl	c56c <usb_tx>
		tx_packet = NULL;
    d164:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    d166:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    d168:	f7ff fe56 	bl	ce18 <usb_malloc>
		if (tx) {
    d16c:	4601      	mov	r1, r0
    d16e:	b120      	cbz	r0, d17a <usb_serial_flush_callback+0x32>
}
    d170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    d174:	2004      	movs	r0, #4
    d176:	f7ff b9f9 	b.w	c56c <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    d17a:	4b04      	ldr	r3, [pc, #16]	; (d18c <usb_serial_flush_callback+0x44>)
    d17c:	2201      	movs	r2, #1
    d17e:	701a      	strb	r2, [r3, #0]
}
    d180:	bd38      	pop	{r3, r4, r5, pc}
    d182:	bf00      	nop
    d184:	1fffbc45 	.word	0x1fffbc45
    d188:	1fffbc48 	.word	0x1fffbc48
    d18c:	1fffbc5c 	.word	0x1fffbc5c

0000d190 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    d190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    d194:	4e32      	ldr	r6, [pc, #200]	; (d260 <yield+0xd0>)
    d196:	7833      	ldrb	r3, [r6, #0]
    d198:	b163      	cbz	r3, d1b4 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    d19a:	4f32      	ldr	r7, [pc, #200]	; (d264 <yield+0xd4>)
    d19c:	783a      	ldrb	r2, [r7, #0]
    d19e:	b94a      	cbnz	r2, d1b4 <yield+0x24>
	running = 1;
    d1a0:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    d1a2:	07d9      	lsls	r1, r3, #31
	running = 1;
    d1a4:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    d1a6:	d443      	bmi.n	d230 <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    d1a8:	079a      	lsls	r2, r3, #30
    d1aa:	d426      	bmi.n	d1fa <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    d1ac:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    d1ae:	075b      	lsls	r3, r3, #29
	running = 0;
    d1b0:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    d1b2:	d401      	bmi.n	d1b8 <yield+0x28>
	
};
    d1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    d1b8:	4b2b      	ldr	r3, [pc, #172]	; (d268 <yield+0xd8>)
    d1ba:	681a      	ldr	r2, [r3, #0]
    d1bc:	2a00      	cmp	r2, #0
    d1be:	d0f9      	beq.n	d1b4 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    d1c0:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    d1c4:	2a00      	cmp	r2, #0
    d1c6:	d1f5      	bne.n	d1b4 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d1c8:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    d1cc:	b672      	cpsid	i
		EventResponder *first = firstYield;
    d1ce:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    d1d0:	2800      	cmp	r0, #0
    d1d2:	d03a      	beq.n	d24a <yield+0xba>
		if (runningFromYield) {
    d1d4:	4c25      	ldr	r4, [pc, #148]	; (d26c <yield+0xdc>)
    d1d6:	7821      	ldrb	r1, [r4, #0]
    d1d8:	2900      	cmp	r1, #0
    d1da:	d136      	bne.n	d24a <yield+0xba>
		firstYield = first->_next;
    d1dc:	6942      	ldr	r2, [r0, #20]
    d1de:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    d1e0:	2301      	movs	r3, #1
    d1e2:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    d1e4:	2a00      	cmp	r2, #0
    d1e6:	d037      	beq.n	d258 <yield+0xc8>
			firstYield->_prev = nullptr;
    d1e8:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    d1ea:	b905      	cbnz	r5, d1ee <yield+0x5e>
    d1ec:	b662      	cpsie	i
		first->_triggered = false;
    d1ee:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    d1f0:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    d1f2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    d1f4:	4798      	blx	r3
		runningFromYield = false;
    d1f6:	7025      	strb	r5, [r4, #0]
    d1f8:	e7dc      	b.n	d1b4 <yield+0x24>
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    d1fa:	f8df 8074 	ldr.w	r8, [pc, #116]	; d270 <yield+0xe0>
    d1fe:	f898 2000 	ldrb.w	r2, [r8]
    d202:	2a00      	cmp	r2, #0
    d204:	d0d2      	beq.n	d1ac <yield+0x1c>
    d206:	2500      	movs	r5, #0
    d208:	f8df 9068 	ldr.w	r9, [pc, #104]	; d274 <yield+0xe4>
    d20c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    d20e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		if (available()) (*_serialEvent)();
    d212:	6823      	ldr	r3, [r4, #0]
    d214:	4620      	mov	r0, r4
    d216:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    d218:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    d21a:	4798      	blx	r3
    d21c:	b108      	cbz	r0, d222 <yield+0x92>
    d21e:	6923      	ldr	r3, [r4, #16]
    d220:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    d222:	f898 2000 	ldrb.w	r2, [r8]
    d226:	b2eb      	uxtb	r3, r5
    d228:	429a      	cmp	r2, r3
    d22a:	d8f0      	bhi.n	d20e <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    d22c:	7833      	ldrb	r3, [r6, #0]
    d22e:	e7bd      	b.n	d1ac <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    d230:	f7ff fe76 	bl	cf20 <usb_serial_available>
		if (Serial.available()) serialEvent();
    d234:	b968      	cbnz	r0, d252 <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    d236:	4b10      	ldr	r3, [pc, #64]	; (d278 <yield+0xe8>)
    d238:	781b      	ldrb	r3, [r3, #0]
    d23a:	b90b      	cbnz	r3, d240 <yield+0xb0>
    d23c:	7833      	ldrb	r3, [r6, #0]
    d23e:	e7b3      	b.n	d1a8 <yield+0x18>
    d240:	7833      	ldrb	r3, [r6, #0]
    d242:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    d246:	7033      	strb	r3, [r6, #0]
    d248:	e7ae      	b.n	d1a8 <yield+0x18>
		if (doit) __enable_irq();
    d24a:	2d00      	cmp	r5, #0
    d24c:	d1b2      	bne.n	d1b4 <yield+0x24>
    d24e:	b662      	cpsie	i
    d250:	e7b0      	b.n	d1b4 <yield+0x24>
		if (Serial.available()) serialEvent();
    d252:	f000 f83d 	bl	d2d0 <serialEvent()>
    d256:	e7ee      	b.n	d236 <yield+0xa6>
			lastYield = nullptr;
    d258:	4b08      	ldr	r3, [pc, #32]	; (d27c <yield+0xec>)
    d25a:	601a      	str	r2, [r3, #0]
    d25c:	e7c5      	b.n	d1ea <yield+0x5a>
    d25e:	bf00      	nop
    d260:	1fff8a0c 	.word	0x1fff8a0c
    d264:	1fffbc5d 	.word	0x1fffbc5d
    d268:	1fffba20 	.word	0x1fffba20
    d26c:	1fffba2c 	.word	0x1fffba2c
    d270:	1fffbc6c 	.word	0x1fffbc6c
    d274:	1fffbc60 	.word	0x1fffbc60
    d278:	00016f18 	.word	0x00016f18
    d27c:	1fffba30 	.word	0x1fffba30

0000d280 <HardwareSerial::addToSerialEventsList()>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
    d280:	b470      	push	{r4, r5, r6}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    d282:	4e10      	ldr	r6, [pc, #64]	; (d2c4 <HardwareSerial::addToSerialEventsList()+0x44>)
    d284:	4d10      	ldr	r5, [pc, #64]	; (d2c8 <HardwareSerial::addToSerialEventsList()+0x48>)
    d286:	7834      	ldrb	r4, [r6, #0]
    d288:	b1d4      	cbz	r4, d2c0 <HardwareSerial::addToSerialEventsList()+0x40>
    d28a:	1e62      	subs	r2, r4, #1
    d28c:	b2d2      	uxtb	r2, r2
    d28e:	1d29      	adds	r1, r5, #4
    d290:	462b      	mov	r3, r5
    d292:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    d296:	e001      	b.n	d29c <HardwareSerial::addToSerialEventsList()+0x1c>
    d298:	428b      	cmp	r3, r1
    d29a:	d005      	beq.n	d2a8 <HardwareSerial::addToSerialEventsList()+0x28>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    d29c:	f853 2b04 	ldr.w	r2, [r3], #4
    d2a0:	4282      	cmp	r2, r0
    d2a2:	d1f9      	bne.n	d298 <HardwareSerial::addToSerialEventsList()+0x18>
	}

	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
    d2a4:	bc70      	pop	{r4, r5, r6}
    d2a6:	4770      	bx	lr
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    d2a8:	1c63      	adds	r3, r4, #1
    d2aa:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    d2ac:	4a07      	ldr	r2, [pc, #28]	; (d2cc <HardwareSerial::addToSerialEventsList()+0x4c>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    d2ae:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    d2b0:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    d2b2:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    d2b6:	f043 0302 	orr.w	r3, r3, #2
    d2ba:	7013      	strb	r3, [r2, #0]
}
    d2bc:	bc70      	pop	{r4, r5, r6}
    d2be:	4770      	bx	lr
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    d2c0:	2301      	movs	r3, #1
    d2c2:	e7f3      	b.n	d2ac <HardwareSerial::addToSerialEventsList()+0x2c>
    d2c4:	1fffbc6c 	.word	0x1fffbc6c
    d2c8:	1fffbc60 	.word	0x1fffbc60
    d2cc:	1fff8a0c 	.word	0x1fff8a0c

0000d2d0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    d2d0:	4770      	bx	lr
    d2d2:	bf00      	nop

0000d2d4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    d2d4:	b510      	push	{r4, lr}
    d2d6:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    d2d8:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    d2da:	4a17      	ldr	r2, [pc, #92]	; (d338 <usb_init_serialnumber+0x64>)
    d2dc:	2470      	movs	r4, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    d2de:	2041      	movs	r0, #65	; 0x41
	FTFL_FCCOB1 = 15;
    d2e0:	210f      	movs	r1, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    d2e2:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    d2e4:	7014      	strb	r4, [r2, #0]
	FTFL_FCCOB0 = 0x41;
    d2e6:	71d0      	strb	r0, [r2, #7]
	FTFL_FCCOB1 = 15;
    d2e8:	7191      	strb	r1, [r2, #6]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    d2ea:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    d2ec:	7813      	ldrb	r3, [r2, #0]
    d2ee:	061b      	lsls	r3, r3, #24
    d2f0:	d5fc      	bpl.n	d2ec <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOB7;
    d2f2:	6890      	ldr	r0, [r2, #8]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    d2f4:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    d2f6:	4b11      	ldr	r3, [pc, #68]	; (d33c <usb_init_serialnumber+0x68>)
    d2f8:	4c11      	ldr	r4, [pc, #68]	; (d340 <usb_init_serialnumber+0x6c>)
    d2fa:	4298      	cmp	r0, r3
    d2fc:	bf38      	it	cc
    d2fe:	eb00 0080 	addcc.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    d302:	a901      	add	r1, sp, #4
	if (num < 10000000) num = num * 10;
    d304:	bf38      	it	cc
    d306:	0040      	lslcc	r0, r0, #1
	ultoa(num, buf, 10);
    d308:	220a      	movs	r2, #10
    d30a:	f7fd fd29 	bl	ad60 <ultoa>
	for (i=0; i<10; i++) {
    d30e:	a901      	add	r1, sp, #4
    d310:	4620      	mov	r0, r4
    d312:	2300      	movs	r3, #0
		char c = buf[i];
    d314:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    d318:	3301      	adds	r3, #1
		if (!c) break;
    d31a:	b13a      	cbz	r2, d32c <usb_init_serialnumber+0x58>
	for (i=0; i<10; i++) {
    d31c:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    d31e:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    d322:	d1f7      	bne.n	d314 <usb_init_serialnumber+0x40>
    d324:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    d326:	7023      	strb	r3, [r4, #0]
}
    d328:	b004      	add	sp, #16
    d32a:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    d32c:	005b      	lsls	r3, r3, #1
    d32e:	b2db      	uxtb	r3, r3
    d330:	7023      	strb	r3, [r4, #0]
}
    d332:	b004      	add	sp, #16
    d334:	bd10      	pop	{r4, pc}
    d336:	bf00      	nop
    d338:	40020000 	.word	0x40020000
    d33c:	00989680 	.word	0x00989680
    d340:	1fff8a9c 	.word	0x1fff8a9c

0000d344 <expf>:
    d344:	b538      	push	{r3, r4, r5, lr}
    d346:	4604      	mov	r4, r0
    d348:	f000 f926 	bl	d598 <__ieee754_expf>
    d34c:	4605      	mov	r5, r0
    d34e:	4620      	mov	r0, r4
    d350:	f000 f89e 	bl	d490 <finitef>
    d354:	b148      	cbz	r0, d36a <expf+0x26>
    d356:	490d      	ldr	r1, [pc, #52]	; (d38c <expf+0x48>)
    d358:	4620      	mov	r0, r4
    d35a:	f001 fd0d 	bl	ed78 <__aeabi_fcmpgt>
    d35e:	b930      	cbnz	r0, d36e <expf+0x2a>
    d360:	490b      	ldr	r1, [pc, #44]	; (d390 <expf+0x4c>)
    d362:	4620      	mov	r0, r4
    d364:	f001 fcea 	bl	ed3c <__aeabi_fcmplt>
    d368:	b948      	cbnz	r0, d37e <expf+0x3a>
    d36a:	4628      	mov	r0, r5
    d36c:	bd38      	pop	{r3, r4, r5, pc}
    d36e:	f002 fccf 	bl	fd10 <__errno>
    d372:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
    d376:	2322      	movs	r3, #34	; 0x22
    d378:	6003      	str	r3, [r0, #0]
    d37a:	4628      	mov	r0, r5
    d37c:	bd38      	pop	{r3, r4, r5, pc}
    d37e:	f002 fcc7 	bl	fd10 <__errno>
    d382:	2322      	movs	r3, #34	; 0x22
    d384:	2500      	movs	r5, #0
    d386:	6003      	str	r3, [r0, #0]
    d388:	e7ef      	b.n	d36a <expf+0x26>
    d38a:	bf00      	nop
    d38c:	42b17217 	.word	0x42b17217
    d390:	c2cff1b5 	.word	0xc2cff1b5

0000d394 <logf>:
    d394:	b538      	push	{r3, r4, r5, lr}
    d396:	4604      	mov	r4, r0
    d398:	f000 fa20 	bl	d7dc <__ieee754_logf>
    d39c:	4621      	mov	r1, r4
    d39e:	4605      	mov	r5, r0
    d3a0:	4620      	mov	r0, r4
    d3a2:	f001 fcf3 	bl	ed8c <__aeabi_fcmpun>
    d3a6:	b970      	cbnz	r0, d3c6 <logf+0x32>
    d3a8:	2100      	movs	r1, #0
    d3aa:	4620      	mov	r0, r4
    d3ac:	f001 fce4 	bl	ed78 <__aeabi_fcmpgt>
    d3b0:	b948      	cbnz	r0, d3c6 <logf+0x32>
    d3b2:	2100      	movs	r1, #0
    d3b4:	4620      	mov	r0, r4
    d3b6:	f001 fcb7 	bl	ed28 <__aeabi_fcmpeq>
    d3ba:	b130      	cbz	r0, d3ca <logf+0x36>
    d3bc:	f002 fca8 	bl	fd10 <__errno>
    d3c0:	4d07      	ldr	r5, [pc, #28]	; (d3e0 <logf+0x4c>)
    d3c2:	2322      	movs	r3, #34	; 0x22
    d3c4:	6003      	str	r3, [r0, #0]
    d3c6:	4628      	mov	r0, r5
    d3c8:	bd38      	pop	{r3, r4, r5, pc}
    d3ca:	f002 fca1 	bl	fd10 <__errno>
    d3ce:	4603      	mov	r3, r0
    d3d0:	2221      	movs	r2, #33	; 0x21
    d3d2:	601a      	str	r2, [r3, #0]
    d3d4:	4803      	ldr	r0, [pc, #12]	; (d3e4 <logf+0x50>)
    d3d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d3da:	f000 b861 	b.w	d4a0 <nanf>
    d3de:	bf00      	nop
    d3e0:	ff800000 	.word	0xff800000
    d3e4:	00015cd4 	.word	0x00015cd4

0000d3e8 <powf>:
    d3e8:	b570      	push	{r4, r5, r6, lr}
    d3ea:	460c      	mov	r4, r1
    d3ec:	4606      	mov	r6, r0
    d3ee:	f000 fb33 	bl	da58 <__ieee754_powf>
    d3f2:	4621      	mov	r1, r4
    d3f4:	4605      	mov	r5, r0
    d3f6:	4620      	mov	r0, r4
    d3f8:	f001 fcc8 	bl	ed8c <__aeabi_fcmpun>
    d3fc:	b958      	cbnz	r0, d416 <powf+0x2e>
    d3fe:	2100      	movs	r1, #0
    d400:	4630      	mov	r0, r6
    d402:	f001 fc91 	bl	ed28 <__aeabi_fcmpeq>
    d406:	b1a0      	cbz	r0, d432 <powf+0x4a>
    d408:	2100      	movs	r1, #0
    d40a:	4620      	mov	r0, r4
    d40c:	f001 fc8c 	bl	ed28 <__aeabi_fcmpeq>
    d410:	b118      	cbz	r0, d41a <powf+0x32>
    d412:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
    d416:	4628      	mov	r0, r5
    d418:	bd70      	pop	{r4, r5, r6, pc}
    d41a:	4620      	mov	r0, r4
    d41c:	f000 f838 	bl	d490 <finitef>
    d420:	2800      	cmp	r0, #0
    d422:	d0f8      	beq.n	d416 <powf+0x2e>
    d424:	2100      	movs	r1, #0
    d426:	4620      	mov	r0, r4
    d428:	f001 fc88 	bl	ed3c <__aeabi_fcmplt>
    d42c:	2800      	cmp	r0, #0
    d42e:	d0f2      	beq.n	d416 <powf+0x2e>
    d430:	e023      	b.n	d47a <powf+0x92>
    d432:	4628      	mov	r0, r5
    d434:	f000 f82c 	bl	d490 <finitef>
    d438:	b180      	cbz	r0, d45c <powf+0x74>
    d43a:	2100      	movs	r1, #0
    d43c:	4628      	mov	r0, r5
    d43e:	f001 fc73 	bl	ed28 <__aeabi_fcmpeq>
    d442:	2800      	cmp	r0, #0
    d444:	d0e7      	beq.n	d416 <powf+0x2e>
    d446:	4630      	mov	r0, r6
    d448:	f000 f822 	bl	d490 <finitef>
    d44c:	2800      	cmp	r0, #0
    d44e:	d0e2      	beq.n	d416 <powf+0x2e>
    d450:	4620      	mov	r0, r4
    d452:	f000 f81d 	bl	d490 <finitef>
    d456:	2800      	cmp	r0, #0
    d458:	d0dd      	beq.n	d416 <powf+0x2e>
    d45a:	e00e      	b.n	d47a <powf+0x92>
    d45c:	4630      	mov	r0, r6
    d45e:	f000 f817 	bl	d490 <finitef>
    d462:	2800      	cmp	r0, #0
    d464:	d0e9      	beq.n	d43a <powf+0x52>
    d466:	4620      	mov	r0, r4
    d468:	f000 f812 	bl	d490 <finitef>
    d46c:	2800      	cmp	r0, #0
    d46e:	d0e4      	beq.n	d43a <powf+0x52>
    d470:	4629      	mov	r1, r5
    d472:	4628      	mov	r0, r5
    d474:	f001 fc8a 	bl	ed8c <__aeabi_fcmpun>
    d478:	b920      	cbnz	r0, d484 <powf+0x9c>
    d47a:	f002 fc49 	bl	fd10 <__errno>
    d47e:	2322      	movs	r3, #34	; 0x22
    d480:	6003      	str	r3, [r0, #0]
    d482:	e7c8      	b.n	d416 <powf+0x2e>
    d484:	f002 fc44 	bl	fd10 <__errno>
    d488:	2321      	movs	r3, #33	; 0x21
    d48a:	6003      	str	r3, [r0, #0]
    d48c:	e7c3      	b.n	d416 <powf+0x2e>
    d48e:	bf00      	nop

0000d490 <finitef>:
    d490:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    d494:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    d498:	bfac      	ite	ge
    d49a:	2000      	movge	r0, #0
    d49c:	2001      	movlt	r0, #1
    d49e:	4770      	bx	lr

0000d4a0 <nanf>:
    d4a0:	4800      	ldr	r0, [pc, #0]	; (d4a4 <nanf+0x4>)
    d4a2:	4770      	bx	lr
    d4a4:	7fc00000 	.word	0x7fc00000

0000d4a8 <__ieee754_sqrtf>:
    d4a8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
    d4ac:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    d4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4b4:	4604      	mov	r4, r0
    d4b6:	d254      	bcs.n	d562 <__ieee754_sqrtf+0xba>
    d4b8:	2a00      	cmp	r2, #0
    d4ba:	d050      	beq.n	d55e <__ieee754_sqrtf+0xb6>
    d4bc:	2800      	cmp	r0, #0
    d4be:	4603      	mov	r3, r0
    d4c0:	db57      	blt.n	d572 <__ieee754_sqrtf+0xca>
    d4c2:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
    d4c6:	ea4f 50e0 	mov.w	r0, r0, asr #23
    d4ca:	d109      	bne.n	d4e0 <__ieee754_sqrtf+0x38>
    d4cc:	f414 0200 	ands.w	r2, r4, #8388608	; 0x800000
    d4d0:	d15b      	bne.n	d58a <__ieee754_sqrtf+0xe2>
    d4d2:	005b      	lsls	r3, r3, #1
    d4d4:	021c      	lsls	r4, r3, #8
    d4d6:	4611      	mov	r1, r2
    d4d8:	f102 0201 	add.w	r2, r2, #1
    d4dc:	d5f9      	bpl.n	d4d2 <__ieee754_sqrtf+0x2a>
    d4de:	1a40      	subs	r0, r0, r1
    d4e0:	f3c3 0216 	ubfx	r2, r3, #0, #23
    d4e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
    d4e8:	07c3      	lsls	r3, r0, #31
    d4ea:	f1a0 057f 	sub.w	r5, r0, #127	; 0x7f
    d4ee:	bf58      	it	pl
    d4f0:	0052      	lslpl	r2, r2, #1
    d4f2:	2400      	movs	r4, #0
    d4f4:	106d      	asrs	r5, r5, #1
    d4f6:	0052      	lsls	r2, r2, #1
    d4f8:	f04f 0e19 	mov.w	lr, #25
    d4fc:	4621      	mov	r1, r4
    d4fe:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
    d502:	eb01 030c 	add.w	r3, r1, ip
    d506:	4293      	cmp	r3, r2
    d508:	bfdd      	ittte	le
    d50a:	eb03 010c 	addle.w	r1, r3, ip
    d50e:	4464      	addle	r4, ip
    d510:	1ad3      	suble	r3, r2, r3
    d512:	4613      	movgt	r3, r2
    d514:	f1be 0e01 	subs.w	lr, lr, #1
    d518:	ea4f 0243 	mov.w	r2, r3, lsl #1
    d51c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    d520:	d1ef      	bne.n	d502 <__ieee754_sqrtf+0x5a>
    d522:	b1bb      	cbz	r3, d554 <__ieee754_sqrtf+0xac>
    d524:	4e1a      	ldr	r6, [pc, #104]	; (d590 <__ieee754_sqrtf+0xe8>)
    d526:	4f1b      	ldr	r7, [pc, #108]	; (d594 <__ieee754_sqrtf+0xec>)
    d528:	6830      	ldr	r0, [r6, #0]
    d52a:	6839      	ldr	r1, [r7, #0]
    d52c:	f8d6 8000 	ldr.w	r8, [r6]
    d530:	f001 f95c 	bl	e7ec <__aeabi_fsub>
    d534:	4601      	mov	r1, r0
    d536:	4640      	mov	r0, r8
    d538:	f001 fc0a 	bl	ed50 <__aeabi_fcmple>
    d53c:	b150      	cbz	r0, d554 <__ieee754_sqrtf+0xac>
    d53e:	6830      	ldr	r0, [r6, #0]
    d540:	6839      	ldr	r1, [r7, #0]
    d542:	6836      	ldr	r6, [r6, #0]
    d544:	f001 f954 	bl	e7f0 <__addsf3>
    d548:	4601      	mov	r1, r0
    d54a:	4630      	mov	r0, r6
    d54c:	f001 fbf6 	bl	ed3c <__aeabi_fcmplt>
    d550:	b1b8      	cbz	r0, d582 <__ieee754_sqrtf+0xda>
    d552:	3402      	adds	r4, #2
    d554:	1060      	asrs	r0, r4, #1
    d556:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
    d55a:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
    d55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d562:	4601      	mov	r1, r0
    d564:	f001 fa4c 	bl	ea00 <__aeabi_fmul>
    d568:	4621      	mov	r1, r4
    d56a:	f001 f941 	bl	e7f0 <__addsf3>
    d56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d572:	4601      	mov	r1, r0
    d574:	f001 f93a 	bl	e7ec <__aeabi_fsub>
    d578:	4601      	mov	r1, r0
    d57a:	f001 faf5 	bl	eb68 <__aeabi_fdiv>
    d57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d582:	3401      	adds	r4, #1
    d584:	f024 0401 	bic.w	r4, r4, #1
    d588:	e7e4      	b.n	d554 <__ieee754_sqrtf+0xac>
    d58a:	f04f 31ff 	mov.w	r1, #4294967295
    d58e:	e7a6      	b.n	d4de <__ieee754_sqrtf+0x36>
    d590:	1fff8ab4 	.word	0x1fff8ab4
    d594:	1fff8ab8 	.word	0x1fff8ab8

0000d598 <__ieee754_expf>:
    d598:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
    d59c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    d5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d5a4:	4604      	mov	r4, r0
    d5a6:	d86c      	bhi.n	d682 <__ieee754_expf+0xea>
    d5a8:	ea4f 75d0 	mov.w	r5, r0, lsr #31
    d5ac:	f000 80c6 	beq.w	d73c <__ieee754_expf+0x1a4>
    d5b0:	497a      	ldr	r1, [pc, #488]	; (d79c <__ieee754_expf+0x204>)
    d5b2:	4288      	cmp	r0, r1
    d5b4:	f300 80b4 	bgt.w	d720 <__ieee754_expf+0x188>
    d5b8:	2800      	cmp	r0, #0
    d5ba:	f2c0 80b6 	blt.w	d72a <__ieee754_expf+0x192>
    d5be:	4b78      	ldr	r3, [pc, #480]	; (d7a0 <__ieee754_expf+0x208>)
    d5c0:	429a      	cmp	r2, r3
    d5c2:	d963      	bls.n	d68c <__ieee754_expf+0xf4>
    d5c4:	4b77      	ldr	r3, [pc, #476]	; (d7a4 <__ieee754_expf+0x20c>)
    d5c6:	429a      	cmp	r2, r3
    d5c8:	f200 80c5 	bhi.w	d756 <__ieee754_expf+0x1be>
    d5cc:	4b76      	ldr	r3, [pc, #472]	; (d7a8 <__ieee754_expf+0x210>)
    d5ce:	4620      	mov	r0, r4
    d5d0:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    d5d4:	f001 f90a 	bl	e7ec <__aeabi_fsub>
    d5d8:	4b74      	ldr	r3, [pc, #464]	; (d7ac <__ieee754_expf+0x214>)
    d5da:	f1c5 0601 	rsb	r6, r5, #1
    d5de:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
    d5e2:	4680      	mov	r8, r0
    d5e4:	1b76      	subs	r6, r6, r5
    d5e6:	4649      	mov	r1, r9
    d5e8:	4640      	mov	r0, r8
    d5ea:	f001 f8ff 	bl	e7ec <__aeabi_fsub>
    d5ee:	4601      	mov	r1, r0
    d5f0:	4605      	mov	r5, r0
    d5f2:	f001 fa05 	bl	ea00 <__aeabi_fmul>
    d5f6:	496e      	ldr	r1, [pc, #440]	; (d7b0 <__ieee754_expf+0x218>)
    d5f8:	4604      	mov	r4, r0
    d5fa:	f001 fa01 	bl	ea00 <__aeabi_fmul>
    d5fe:	496d      	ldr	r1, [pc, #436]	; (d7b4 <__ieee754_expf+0x21c>)
    d600:	f001 f8f4 	bl	e7ec <__aeabi_fsub>
    d604:	4621      	mov	r1, r4
    d606:	f001 f9fb 	bl	ea00 <__aeabi_fmul>
    d60a:	496b      	ldr	r1, [pc, #428]	; (d7b8 <__ieee754_expf+0x220>)
    d60c:	f001 f8f0 	bl	e7f0 <__addsf3>
    d610:	4621      	mov	r1, r4
    d612:	f001 f9f5 	bl	ea00 <__aeabi_fmul>
    d616:	4969      	ldr	r1, [pc, #420]	; (d7bc <__ieee754_expf+0x224>)
    d618:	f001 f8e8 	bl	e7ec <__aeabi_fsub>
    d61c:	4621      	mov	r1, r4
    d61e:	f001 f9ef 	bl	ea00 <__aeabi_fmul>
    d622:	4967      	ldr	r1, [pc, #412]	; (d7c0 <__ieee754_expf+0x228>)
    d624:	f001 f8e4 	bl	e7f0 <__addsf3>
    d628:	4621      	mov	r1, r4
    d62a:	f001 f9e9 	bl	ea00 <__aeabi_fmul>
    d62e:	4601      	mov	r1, r0
    d630:	4628      	mov	r0, r5
    d632:	f001 f8db 	bl	e7ec <__aeabi_fsub>
    d636:	462c      	mov	r4, r5
    d638:	4607      	mov	r7, r0
    d63a:	4682      	mov	sl, r0
    d63c:	2e00      	cmp	r6, #0
    d63e:	d057      	beq.n	d6f0 <__ieee754_expf+0x158>
    d640:	4639      	mov	r1, r7
    d642:	4628      	mov	r0, r5
    d644:	f001 f9dc 	bl	ea00 <__aeabi_fmul>
    d648:	4639      	mov	r1, r7
    d64a:	4604      	mov	r4, r0
    d64c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d650:	f001 f8cc 	bl	e7ec <__aeabi_fsub>
    d654:	4601      	mov	r1, r0
    d656:	4620      	mov	r0, r4
    d658:	f001 fa86 	bl	eb68 <__aeabi_fdiv>
    d65c:	4601      	mov	r1, r0
    d65e:	4648      	mov	r0, r9
    d660:	f001 f8c4 	bl	e7ec <__aeabi_fsub>
    d664:	4641      	mov	r1, r8
    d666:	f001 f8c1 	bl	e7ec <__aeabi_fsub>
    d66a:	4601      	mov	r1, r0
    d66c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    d670:	f001 f8bc 	bl	e7ec <__aeabi_fsub>
    d674:	f116 0f7d 	cmn.w	r6, #125	; 0x7d
    d678:	db64      	blt.n	d744 <__ieee754_expf+0x1ac>
    d67a:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    d67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d682:	4601      	mov	r1, r0
    d684:	f001 f8b4 	bl	e7f0 <__addsf3>
    d688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d68c:	f1b2 5f50 	cmp.w	r2, #872415232	; 0x34000000
    d690:	d209      	bcs.n	d6a6 <__ieee754_expf+0x10e>
    d692:	494c      	ldr	r1, [pc, #304]	; (d7c4 <__ieee754_expf+0x22c>)
    d694:	4620      	mov	r0, r4
    d696:	f001 f8ab 	bl	e7f0 <__addsf3>
    d69a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    d69e:	f001 fb6b 	bl	ed78 <__aeabi_fcmpgt>
    d6a2:	2800      	cmp	r0, #0
    d6a4:	d174      	bne.n	d790 <__ieee754_expf+0x1f8>
    d6a6:	4621      	mov	r1, r4
    d6a8:	4620      	mov	r0, r4
    d6aa:	f001 f9a9 	bl	ea00 <__aeabi_fmul>
    d6ae:	4940      	ldr	r1, [pc, #256]	; (d7b0 <__ieee754_expf+0x218>)
    d6b0:	4605      	mov	r5, r0
    d6b2:	f001 f9a5 	bl	ea00 <__aeabi_fmul>
    d6b6:	493f      	ldr	r1, [pc, #252]	; (d7b4 <__ieee754_expf+0x21c>)
    d6b8:	f001 f898 	bl	e7ec <__aeabi_fsub>
    d6bc:	4629      	mov	r1, r5
    d6be:	f001 f99f 	bl	ea00 <__aeabi_fmul>
    d6c2:	493d      	ldr	r1, [pc, #244]	; (d7b8 <__ieee754_expf+0x220>)
    d6c4:	f001 f894 	bl	e7f0 <__addsf3>
    d6c8:	4629      	mov	r1, r5
    d6ca:	f001 f999 	bl	ea00 <__aeabi_fmul>
    d6ce:	493b      	ldr	r1, [pc, #236]	; (d7bc <__ieee754_expf+0x224>)
    d6d0:	f001 f88c 	bl	e7ec <__aeabi_fsub>
    d6d4:	4629      	mov	r1, r5
    d6d6:	f001 f993 	bl	ea00 <__aeabi_fmul>
    d6da:	4939      	ldr	r1, [pc, #228]	; (d7c0 <__ieee754_expf+0x228>)
    d6dc:	f001 f888 	bl	e7f0 <__addsf3>
    d6e0:	4629      	mov	r1, r5
    d6e2:	f001 f98d 	bl	ea00 <__aeabi_fmul>
    d6e6:	4601      	mov	r1, r0
    d6e8:	4620      	mov	r0, r4
    d6ea:	f001 f87f 	bl	e7ec <__aeabi_fsub>
    d6ee:	4682      	mov	sl, r0
    d6f0:	4651      	mov	r1, sl
    d6f2:	4620      	mov	r0, r4
    d6f4:	f001 f984 	bl	ea00 <__aeabi_fmul>
    d6f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d6fc:	4605      	mov	r5, r0
    d6fe:	4650      	mov	r0, sl
    d700:	f001 f874 	bl	e7ec <__aeabi_fsub>
    d704:	4601      	mov	r1, r0
    d706:	4628      	mov	r0, r5
    d708:	f001 fa2e 	bl	eb68 <__aeabi_fdiv>
    d70c:	4621      	mov	r1, r4
    d70e:	f001 f86d 	bl	e7ec <__aeabi_fsub>
    d712:	4601      	mov	r1, r0
    d714:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    d718:	f001 f868 	bl	e7ec <__aeabi_fsub>
    d71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d720:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d724:	2000      	movs	r0, #0
    d726:	f000 bddf 	b.w	e2e8 <__math_oflowf>
    d72a:	4b27      	ldr	r3, [pc, #156]	; (d7c8 <__ieee754_expf+0x230>)
    d72c:	429a      	cmp	r2, r3
    d72e:	f67f af46 	bls.w	d5be <__ieee754_expf+0x26>
    d732:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d736:	2000      	movs	r0, #0
    d738:	f000 bdd2 	b.w	e2e0 <__math_uflowf>
    d73c:	2d00      	cmp	r5, #0
    d73e:	d0a3      	beq.n	d688 <__ieee754_expf+0xf0>
    d740:	2000      	movs	r0, #0
    d742:	e7a1      	b.n	d688 <__ieee754_expf+0xf0>
    d744:	3664      	adds	r6, #100	; 0x64
    d746:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
    d74a:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    d74e:	f001 f957 	bl	ea00 <__aeabi_fmul>
    d752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d756:	491d      	ldr	r1, [pc, #116]	; (d7cc <__ieee754_expf+0x234>)
    d758:	4620      	mov	r0, r4
    d75a:	f001 f951 	bl	ea00 <__aeabi_fmul>
    d75e:	4b1c      	ldr	r3, [pc, #112]	; (d7d0 <__ieee754_expf+0x238>)
    d760:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    d764:	f001 f844 	bl	e7f0 <__addsf3>
    d768:	f001 fb26 	bl	edb8 <__aeabi_f2iz>
    d76c:	4606      	mov	r6, r0
    d76e:	f001 f8f3 	bl	e958 <__aeabi_i2f>
    d772:	4918      	ldr	r1, [pc, #96]	; (d7d4 <__ieee754_expf+0x23c>)
    d774:	4605      	mov	r5, r0
    d776:	f001 f943 	bl	ea00 <__aeabi_fmul>
    d77a:	4601      	mov	r1, r0
    d77c:	4620      	mov	r0, r4
    d77e:	f001 f835 	bl	e7ec <__aeabi_fsub>
    d782:	4915      	ldr	r1, [pc, #84]	; (d7d8 <__ieee754_expf+0x240>)
    d784:	4680      	mov	r8, r0
    d786:	4628      	mov	r0, r5
    d788:	f001 f93a 	bl	ea00 <__aeabi_fmul>
    d78c:	4681      	mov	r9, r0
    d78e:	e72a      	b.n	d5e6 <__ieee754_expf+0x4e>
    d790:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    d794:	4620      	mov	r0, r4
    d796:	f001 f82b 	bl	e7f0 <__addsf3>
    d79a:	e775      	b.n	d688 <__ieee754_expf+0xf0>
    d79c:	42b17217 	.word	0x42b17217
    d7a0:	3eb17218 	.word	0x3eb17218
    d7a4:	3f851591 	.word	0x3f851591
    d7a8:	000171b4 	.word	0x000171b4
    d7ac:	000171bc 	.word	0x000171bc
    d7b0:	3331bb4c 	.word	0x3331bb4c
    d7b4:	35ddea0e 	.word	0x35ddea0e
    d7b8:	388ab355 	.word	0x388ab355
    d7bc:	3b360b61 	.word	0x3b360b61
    d7c0:	3e2aaaab 	.word	0x3e2aaaab
    d7c4:	7149f2ca 	.word	0x7149f2ca
    d7c8:	42cff1b5 	.word	0x42cff1b5
    d7cc:	3fb8aa3b 	.word	0x3fb8aa3b
    d7d0:	000171ac 	.word	0x000171ac
    d7d4:	3f317180 	.word	0x3f317180
    d7d8:	3717f7d1 	.word	0x3717f7d1

0000d7dc <__ieee754_logf>:
    d7dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    d7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d7e4:	d02b      	beq.n	d83e <__ieee754_logf+0x62>
    d7e6:	2800      	cmp	r0, #0
    d7e8:	4601      	mov	r1, r0
    d7ea:	4603      	mov	r3, r0
    d7ec:	db40      	blt.n	d870 <__ieee754_logf+0x94>
    d7ee:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    d7f2:	da39      	bge.n	d868 <__ieee754_logf+0x8c>
    d7f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    d7f8:	db41      	blt.n	d87e <__ieee754_logf+0xa2>
    d7fa:	2100      	movs	r1, #0
    d7fc:	4a89      	ldr	r2, [pc, #548]	; (da24 <__ieee754_logf+0x248>)
    d7fe:	f3c3 0516 	ubfx	r5, r3, #0, #23
    d802:	442a      	add	r2, r5
    d804:	15dc      	asrs	r4, r3, #23
    d806:	f402 0000 	and.w	r0, r2, #8388608	; 0x800000
    d80a:	3c7f      	subs	r4, #127	; 0x7f
    d80c:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
    d810:	440c      	add	r4, r1
    d812:	4328      	orrs	r0, r5
    d814:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    d818:	eb04 54d2 	add.w	r4, r4, r2, lsr #23
    d81c:	f000 ffe6 	bl	e7ec <__aeabi_fsub>
    d820:	4b81      	ldr	r3, [pc, #516]	; (da28 <__ieee754_logf+0x24c>)
    d822:	f105 020f 	add.w	r2, r5, #15
    d826:	4013      	ands	r3, r2
    d828:	4606      	mov	r6, r0
    d82a:	bb83      	cbnz	r3, d88e <__ieee754_logf+0xb2>
    d82c:	2100      	movs	r1, #0
    d82e:	f001 fa7b 	bl	ed28 <__aeabi_fcmpeq>
    d832:	2800      	cmp	r0, #0
    d834:	f000 80a2 	beq.w	d97c <__ieee754_logf+0x1a0>
    d838:	b944      	cbnz	r4, d84c <__ieee754_logf+0x70>
    d83a:	2000      	movs	r0, #0
    d83c:	e004      	b.n	d848 <__ieee754_logf+0x6c>
    d83e:	2100      	movs	r1, #0
    d840:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
    d844:	f001 f990 	bl	eb68 <__aeabi_fdiv>
    d848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d84c:	4620      	mov	r0, r4
    d84e:	f001 f883 	bl	e958 <__aeabi_i2f>
    d852:	4976      	ldr	r1, [pc, #472]	; (da2c <__ieee754_logf+0x250>)
    d854:	4605      	mov	r5, r0
    d856:	f001 f8d3 	bl	ea00 <__aeabi_fmul>
    d85a:	4975      	ldr	r1, [pc, #468]	; (da30 <__ieee754_logf+0x254>)
    d85c:	4604      	mov	r4, r0
    d85e:	4628      	mov	r0, r5
    d860:	f001 f8ce 	bl	ea00 <__aeabi_fmul>
    d864:	4601      	mov	r1, r0
    d866:	4620      	mov	r0, r4
    d868:	f000 ffc2 	bl	e7f0 <__addsf3>
    d86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d870:	f000 ffbc 	bl	e7ec <__aeabi_fsub>
    d874:	2100      	movs	r1, #0
    d876:	f001 f977 	bl	eb68 <__aeabi_fdiv>
    d87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d87e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
    d882:	f001 f8bd 	bl	ea00 <__aeabi_fmul>
    d886:	f06f 0118 	mvn.w	r1, #24
    d88a:	4603      	mov	r3, r0
    d88c:	e7b6      	b.n	d7fc <__ieee754_logf+0x20>
    d88e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d892:	f000 ffad 	bl	e7f0 <__addsf3>
    d896:	4601      	mov	r1, r0
    d898:	4630      	mov	r0, r6
    d89a:	f001 f965 	bl	eb68 <__aeabi_fdiv>
    d89e:	4680      	mov	r8, r0
    d8a0:	4620      	mov	r0, r4
    d8a2:	f001 f859 	bl	e958 <__aeabi_i2f>
    d8a6:	4641      	mov	r1, r8
    d8a8:	4681      	mov	r9, r0
    d8aa:	4640      	mov	r0, r8
    d8ac:	f001 f8a8 	bl	ea00 <__aeabi_fmul>
    d8b0:	4601      	mov	r1, r0
    d8b2:	4682      	mov	sl, r0
    d8b4:	f001 f8a4 	bl	ea00 <__aeabi_fmul>
    d8b8:	495e      	ldr	r1, [pc, #376]	; (da34 <__ieee754_logf+0x258>)
    d8ba:	4607      	mov	r7, r0
    d8bc:	f001 f8a0 	bl	ea00 <__aeabi_fmul>
    d8c0:	495d      	ldr	r1, [pc, #372]	; (da38 <__ieee754_logf+0x25c>)
    d8c2:	f000 ff95 	bl	e7f0 <__addsf3>
    d8c6:	4639      	mov	r1, r7
    d8c8:	f001 f89a 	bl	ea00 <__aeabi_fmul>
    d8cc:	495b      	ldr	r1, [pc, #364]	; (da3c <__ieee754_logf+0x260>)
    d8ce:	f000 ff8f 	bl	e7f0 <__addsf3>
    d8d2:	4639      	mov	r1, r7
    d8d4:	f001 f894 	bl	ea00 <__aeabi_fmul>
    d8d8:	4959      	ldr	r1, [pc, #356]	; (da40 <__ieee754_logf+0x264>)
    d8da:	f000 ff89 	bl	e7f0 <__addsf3>
    d8de:	4651      	mov	r1, sl
    d8e0:	f001 f88e 	bl	ea00 <__aeabi_fmul>
    d8e4:	4957      	ldr	r1, [pc, #348]	; (da44 <__ieee754_logf+0x268>)
    d8e6:	4682      	mov	sl, r0
    d8e8:	4638      	mov	r0, r7
    d8ea:	f001 f889 	bl	ea00 <__aeabi_fmul>
    d8ee:	4956      	ldr	r1, [pc, #344]	; (da48 <__ieee754_logf+0x26c>)
    d8f0:	f000 ff7e 	bl	e7f0 <__addsf3>
    d8f4:	4639      	mov	r1, r7
    d8f6:	f001 f883 	bl	ea00 <__aeabi_fmul>
    d8fa:	4954      	ldr	r1, [pc, #336]	; (da4c <__ieee754_logf+0x270>)
    d8fc:	f000 ff78 	bl	e7f0 <__addsf3>
    d900:	4639      	mov	r1, r7
    d902:	f001 f87d 	bl	ea00 <__aeabi_fmul>
    d906:	4601      	mov	r1, r0
    d908:	4650      	mov	r0, sl
    d90a:	f000 ff71 	bl	e7f0 <__addsf3>
    d90e:	4b50      	ldr	r3, [pc, #320]	; (da50 <__ieee754_logf+0x274>)
    d910:	442b      	add	r3, r5
    d912:	f5c5 1557 	rsb	r5, r5, #3522560	; 0x35c000
    d916:	f505 7522 	add.w	r5, r5, #648	; 0x288
    d91a:	431d      	orrs	r5, r3
    d91c:	2d00      	cmp	r5, #0
    d91e:	4607      	mov	r7, r0
    d920:	dd4d      	ble.n	d9be <__ieee754_logf+0x1e2>
    d922:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    d926:	4630      	mov	r0, r6
    d928:	f001 f86a 	bl	ea00 <__aeabi_fmul>
    d92c:	4631      	mov	r1, r6
    d92e:	f001 f867 	bl	ea00 <__aeabi_fmul>
    d932:	4605      	mov	r5, r0
    d934:	2c00      	cmp	r4, #0
    d936:	d04f      	beq.n	d9d8 <__ieee754_logf+0x1fc>
    d938:	493c      	ldr	r1, [pc, #240]	; (da2c <__ieee754_logf+0x250>)
    d93a:	4648      	mov	r0, r9
    d93c:	f001 f860 	bl	ea00 <__aeabi_fmul>
    d940:	4629      	mov	r1, r5
    d942:	4604      	mov	r4, r0
    d944:	4638      	mov	r0, r7
    d946:	f000 ff53 	bl	e7f0 <__addsf3>
    d94a:	4641      	mov	r1, r8
    d94c:	f001 f858 	bl	ea00 <__aeabi_fmul>
    d950:	4937      	ldr	r1, [pc, #220]	; (da30 <__ieee754_logf+0x254>)
    d952:	4607      	mov	r7, r0
    d954:	4648      	mov	r0, r9
    d956:	f001 f853 	bl	ea00 <__aeabi_fmul>
    d95a:	4601      	mov	r1, r0
    d95c:	4638      	mov	r0, r7
    d95e:	f000 ff47 	bl	e7f0 <__addsf3>
    d962:	4601      	mov	r1, r0
    d964:	4628      	mov	r0, r5
    d966:	f000 ff41 	bl	e7ec <__aeabi_fsub>
    d96a:	4631      	mov	r1, r6
    d96c:	f000 ff3e 	bl	e7ec <__aeabi_fsub>
    d970:	4601      	mov	r1, r0
    d972:	4620      	mov	r0, r4
    d974:	f000 ff3a 	bl	e7ec <__aeabi_fsub>
    d978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d97c:	4935      	ldr	r1, [pc, #212]	; (da54 <__ieee754_logf+0x278>)
    d97e:	4630      	mov	r0, r6
    d980:	f001 f83e 	bl	ea00 <__aeabi_fmul>
    d984:	4601      	mov	r1, r0
    d986:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
    d98a:	f000 ff2f 	bl	e7ec <__aeabi_fsub>
    d98e:	4631      	mov	r1, r6
    d990:	4605      	mov	r5, r0
    d992:	4630      	mov	r0, r6
    d994:	f001 f834 	bl	ea00 <__aeabi_fmul>
    d998:	4601      	mov	r1, r0
    d99a:	4628      	mov	r0, r5
    d99c:	f001 f830 	bl	ea00 <__aeabi_fmul>
    d9a0:	4605      	mov	r5, r0
    d9a2:	b34c      	cbz	r4, d9f8 <__ieee754_logf+0x21c>
    d9a4:	4620      	mov	r0, r4
    d9a6:	f000 ffd7 	bl	e958 <__aeabi_i2f>
    d9aa:	4920      	ldr	r1, [pc, #128]	; (da2c <__ieee754_logf+0x250>)
    d9ac:	4607      	mov	r7, r0
    d9ae:	f001 f827 	bl	ea00 <__aeabi_fmul>
    d9b2:	491f      	ldr	r1, [pc, #124]	; (da30 <__ieee754_logf+0x254>)
    d9b4:	4604      	mov	r4, r0
    d9b6:	4638      	mov	r0, r7
    d9b8:	f001 f822 	bl	ea00 <__aeabi_fmul>
    d9bc:	e7d1      	b.n	d962 <__ieee754_logf+0x186>
    d9be:	bb04      	cbnz	r4, da02 <__ieee754_logf+0x226>
    d9c0:	4601      	mov	r1, r0
    d9c2:	4630      	mov	r0, r6
    d9c4:	f000 ff12 	bl	e7ec <__aeabi_fsub>
    d9c8:	4641      	mov	r1, r8
    d9ca:	f001 f819 	bl	ea00 <__aeabi_fmul>
    d9ce:	4601      	mov	r1, r0
    d9d0:	4630      	mov	r0, r6
    d9d2:	f000 ff0b 	bl	e7ec <__aeabi_fsub>
    d9d6:	e737      	b.n	d848 <__ieee754_logf+0x6c>
    d9d8:	4601      	mov	r1, r0
    d9da:	4638      	mov	r0, r7
    d9dc:	f000 ff08 	bl	e7f0 <__addsf3>
    d9e0:	4641      	mov	r1, r8
    d9e2:	f001 f80d 	bl	ea00 <__aeabi_fmul>
    d9e6:	4601      	mov	r1, r0
    d9e8:	4628      	mov	r0, r5
    d9ea:	f000 feff 	bl	e7ec <__aeabi_fsub>
    d9ee:	4601      	mov	r1, r0
    d9f0:	4630      	mov	r0, r6
    d9f2:	f000 fefb 	bl	e7ec <__aeabi_fsub>
    d9f6:	e727      	b.n	d848 <__ieee754_logf+0x6c>
    d9f8:	4601      	mov	r1, r0
    d9fa:	4630      	mov	r0, r6
    d9fc:	f000 fef6 	bl	e7ec <__aeabi_fsub>
    da00:	e722      	b.n	d848 <__ieee754_logf+0x6c>
    da02:	490a      	ldr	r1, [pc, #40]	; (da2c <__ieee754_logf+0x250>)
    da04:	4648      	mov	r0, r9
    da06:	f000 fffb 	bl	ea00 <__aeabi_fmul>
    da0a:	4639      	mov	r1, r7
    da0c:	4604      	mov	r4, r0
    da0e:	4630      	mov	r0, r6
    da10:	f000 feec 	bl	e7ec <__aeabi_fsub>
    da14:	4641      	mov	r1, r8
    da16:	f000 fff3 	bl	ea00 <__aeabi_fmul>
    da1a:	4905      	ldr	r1, [pc, #20]	; (da30 <__ieee754_logf+0x254>)
    da1c:	4605      	mov	r5, r0
    da1e:	4648      	mov	r0, r9
    da20:	e7ca      	b.n	d9b8 <__ieee754_logf+0x1dc>
    da22:	bf00      	nop
    da24:	004afb20 	.word	0x004afb20
    da28:	007ffff0 	.word	0x007ffff0
    da2c:	3f317180 	.word	0x3f317180
    da30:	3717f7d1 	.word	0x3717f7d1
    da34:	3e178897 	.word	0x3e178897
    da38:	3e3a3325 	.word	0x3e3a3325
    da3c:	3e924925 	.word	0x3e924925
    da40:	3f2aaaab 	.word	0x3f2aaaab
    da44:	3e1cd04f 	.word	0x3e1cd04f
    da48:	3e638e29 	.word	0x3e638e29
    da4c:	3ecccccd 	.word	0x3ecccccd
    da50:	ffcf5c30 	.word	0xffcf5c30
    da54:	3eaaaaab 	.word	0x3eaaaaab

0000da58 <__ieee754_powf>:
    da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da5c:	f031 4900 	bics.w	r9, r1, #2147483648	; 0x80000000
    da60:	b087      	sub	sp, #28
    da62:	460c      	mov	r4, r1
    da64:	4607      	mov	r7, r0
    da66:	4680      	mov	r8, r0
    da68:	d10e      	bne.n	da88 <__ieee754_powf+0x30>
    da6a:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
    da6e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    da72:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
    da76:	f240 814d 	bls.w	dd14 <__ieee754_powf+0x2bc>
    da7a:	4621      	mov	r1, r4
    da7c:	4638      	mov	r0, r7
    da7e:	f000 feb7 	bl	e7f0 <__addsf3>
    da82:	b007      	add	sp, #28
    da84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da88:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
    da8c:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
    da90:	dcf3      	bgt.n	da7a <__ieee754_powf+0x22>
    da92:	f1b9 4fff 	cmp.w	r9, #2139095040	; 0x7f800000
    da96:	460d      	mov	r5, r1
    da98:	f300 8131 	bgt.w	dcfe <__ieee754_powf+0x2a6>
    da9c:	2800      	cmp	r0, #0
    da9e:	f2c0 813e 	blt.w	dd1e <__ieee754_powf+0x2c6>
    daa2:	2600      	movs	r6, #0
    daa4:	f1b9 4fff 	cmp.w	r9, #2139095040	; 0x7f800000
    daa8:	f000 8153 	beq.w	dd52 <__ieee754_powf+0x2fa>
    daac:	f1b9 5f7e 	cmp.w	r9, #1065353216	; 0x3f800000
    dab0:	f000 8157 	beq.w	dd62 <__ieee754_powf+0x30a>
    dab4:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    dab8:	f000 8146 	beq.w	dd48 <__ieee754_powf+0x2f0>
    dabc:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
    dac0:	4638      	mov	r0, r7
    dac2:	f040 8152 	bne.w	dd6a <__ieee754_powf+0x312>
    dac6:	f1b8 0f00 	cmp.w	r8, #0
    daca:	f280 819b 	bge.w	de04 <__ieee754_powf+0x3ac>
    dace:	f000 fb8d 	bl	e1ec <fabsf>
    dad2:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
    dad6:	f000 815c 	beq.w	dd92 <__ieee754_powf+0x33a>
    dada:	f1ba 0f00 	cmp.w	sl, #0
    dade:	f000 8154 	beq.w	dd8a <__ieee754_powf+0x332>
    dae2:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
    dae6:	f000 8149 	beq.w	dd7c <__ieee754_powf+0x324>
    daea:	ea4f 73d8 	mov.w	r3, r8, lsr #31
    daee:	3b01      	subs	r3, #1
    daf0:	9300      	str	r3, [sp, #0]
    daf2:	4333      	orrs	r3, r6
    daf4:	f000 818b 	beq.w	de0e <__ieee754_powf+0x3b6>
    daf8:	f1b9 4f9a 	cmp.w	r9, #1291845632	; 0x4d000000
    dafc:	f340 818f 	ble.w	de1e <__ieee754_powf+0x3c6>
    db00:	4bb1      	ldr	r3, [pc, #708]	; (ddc8 <__ieee754_powf+0x370>)
    db02:	459a      	cmp	sl, r3
    db04:	f340 82d1 	ble.w	e0aa <__ieee754_powf+0x652>
    db08:	4bb0      	ldr	r3, [pc, #704]	; (ddcc <__ieee754_powf+0x374>)
    db0a:	459a      	cmp	sl, r3
    db0c:	f300 82d9 	bgt.w	e0c2 <__ieee754_powf+0x66a>
    db10:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    db14:	f000 fe6a 	bl	e7ec <__aeabi_fsub>
    db18:	49ad      	ldr	r1, [pc, #692]	; (ddd0 <__ieee754_powf+0x378>)
    db1a:	4607      	mov	r7, r0
    db1c:	f000 ff70 	bl	ea00 <__aeabi_fmul>
    db20:	49ac      	ldr	r1, [pc, #688]	; (ddd4 <__ieee754_powf+0x37c>)
    db22:	4681      	mov	r9, r0
    db24:	4638      	mov	r0, r7
    db26:	f000 ff6b 	bl	ea00 <__aeabi_fmul>
    db2a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    db2e:	4680      	mov	r8, r0
    db30:	4638      	mov	r0, r7
    db32:	f000 ff65 	bl	ea00 <__aeabi_fmul>
    db36:	4601      	mov	r1, r0
    db38:	48a7      	ldr	r0, [pc, #668]	; (ddd8 <__ieee754_powf+0x380>)
    db3a:	f000 fe57 	bl	e7ec <__aeabi_fsub>
    db3e:	4639      	mov	r1, r7
    db40:	f000 ff5e 	bl	ea00 <__aeabi_fmul>
    db44:	4601      	mov	r1, r0
    db46:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
    db4a:	f000 fe4f 	bl	e7ec <__aeabi_fsub>
    db4e:	4639      	mov	r1, r7
    db50:	4682      	mov	sl, r0
    db52:	4638      	mov	r0, r7
    db54:	f000 ff54 	bl	ea00 <__aeabi_fmul>
    db58:	4601      	mov	r1, r0
    db5a:	4650      	mov	r0, sl
    db5c:	f000 ff50 	bl	ea00 <__aeabi_fmul>
    db60:	499e      	ldr	r1, [pc, #632]	; (dddc <__ieee754_powf+0x384>)
    db62:	f000 ff4d 	bl	ea00 <__aeabi_fmul>
    db66:	4601      	mov	r1, r0
    db68:	4640      	mov	r0, r8
    db6a:	f000 fe3f 	bl	e7ec <__aeabi_fsub>
    db6e:	4601      	mov	r1, r0
    db70:	4680      	mov	r8, r0
    db72:	4648      	mov	r0, r9
    db74:	f000 fe3c 	bl	e7f0 <__addsf3>
    db78:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
    db7c:	f027 070f 	bic.w	r7, r7, #15
    db80:	4649      	mov	r1, r9
    db82:	4638      	mov	r0, r7
    db84:	f000 fe32 	bl	e7ec <__aeabi_fsub>
    db88:	4601      	mov	r1, r0
    db8a:	4640      	mov	r0, r8
    db8c:	f000 fe2e 	bl	e7ec <__aeabi_fsub>
    db90:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
    db94:	9b00      	ldr	r3, [sp, #0]
    db96:	3e01      	subs	r6, #1
    db98:	f025 050f 	bic.w	r5, r5, #15
    db9c:	431e      	orrs	r6, r3
    db9e:	4629      	mov	r1, r5
    dba0:	4681      	mov	r9, r0
    dba2:	4620      	mov	r0, r4
    dba4:	bf0c      	ite	eq
    dba6:	4e8e      	ldreq	r6, [pc, #568]	; (dde0 <__ieee754_powf+0x388>)
    dba8:	f04f 567e 	movne.w	r6, #1065353216	; 0x3f800000
    dbac:	f000 fe1e 	bl	e7ec <__aeabi_fsub>
    dbb0:	4639      	mov	r1, r7
    dbb2:	f000 ff25 	bl	ea00 <__aeabi_fmul>
    dbb6:	4621      	mov	r1, r4
    dbb8:	4680      	mov	r8, r0
    dbba:	4648      	mov	r0, r9
    dbbc:	f000 ff20 	bl	ea00 <__aeabi_fmul>
    dbc0:	4601      	mov	r1, r0
    dbc2:	4640      	mov	r0, r8
    dbc4:	f000 fe14 	bl	e7f0 <__addsf3>
    dbc8:	4629      	mov	r1, r5
    dbca:	4680      	mov	r8, r0
    dbcc:	4638      	mov	r0, r7
    dbce:	f000 ff17 	bl	ea00 <__aeabi_fmul>
    dbd2:	4601      	mov	r1, r0
    dbd4:	4607      	mov	r7, r0
    dbd6:	4640      	mov	r0, r8
    dbd8:	f000 fe0a 	bl	e7f0 <__addsf3>
    dbdc:	2800      	cmp	r0, #0
    dbde:	4605      	mov	r5, r0
    dbe0:	4604      	mov	r4, r0
    dbe2:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    dbe6:	f340 8233 	ble.w	e050 <__ieee754_powf+0x5f8>
    dbea:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    dbee:	f300 82b8 	bgt.w	e162 <__ieee754_powf+0x70a>
    dbf2:	f000 8297 	beq.w	e124 <__ieee754_powf+0x6cc>
    dbf6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
    dbfa:	f300 82de 	bgt.w	e1ba <__ieee754_powf+0x762>
    dbfe:	f04f 0900 	mov.w	r9, #0
    dc02:	464d      	mov	r5, r9
    dc04:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
    dc08:	f024 040f 	bic.w	r4, r4, #15
    dc0c:	4975      	ldr	r1, [pc, #468]	; (dde4 <__ieee754_powf+0x38c>)
    dc0e:	4620      	mov	r0, r4
    dc10:	f000 fef6 	bl	ea00 <__aeabi_fmul>
    dc14:	4639      	mov	r1, r7
    dc16:	4682      	mov	sl, r0
    dc18:	4620      	mov	r0, r4
    dc1a:	f000 fde7 	bl	e7ec <__aeabi_fsub>
    dc1e:	4601      	mov	r1, r0
    dc20:	4640      	mov	r0, r8
    dc22:	f000 fde3 	bl	e7ec <__aeabi_fsub>
    dc26:	4970      	ldr	r1, [pc, #448]	; (dde8 <__ieee754_powf+0x390>)
    dc28:	f000 feea 	bl	ea00 <__aeabi_fmul>
    dc2c:	496f      	ldr	r1, [pc, #444]	; (ddec <__ieee754_powf+0x394>)
    dc2e:	4607      	mov	r7, r0
    dc30:	4620      	mov	r0, r4
    dc32:	f000 fee5 	bl	ea00 <__aeabi_fmul>
    dc36:	4601      	mov	r1, r0
    dc38:	4638      	mov	r0, r7
    dc3a:	f000 fdd9 	bl	e7f0 <__addsf3>
    dc3e:	4604      	mov	r4, r0
    dc40:	4601      	mov	r1, r0
    dc42:	4650      	mov	r0, sl
    dc44:	f000 fdd4 	bl	e7f0 <__addsf3>
    dc48:	4651      	mov	r1, sl
    dc4a:	4607      	mov	r7, r0
    dc4c:	f000 fdce 	bl	e7ec <__aeabi_fsub>
    dc50:	4601      	mov	r1, r0
    dc52:	4620      	mov	r0, r4
    dc54:	f000 fdca 	bl	e7ec <__aeabi_fsub>
    dc58:	4639      	mov	r1, r7
    dc5a:	4680      	mov	r8, r0
    dc5c:	4638      	mov	r0, r7
    dc5e:	f000 fecf 	bl	ea00 <__aeabi_fmul>
    dc62:	4963      	ldr	r1, [pc, #396]	; (ddf0 <__ieee754_powf+0x398>)
    dc64:	4604      	mov	r4, r0
    dc66:	f000 fecb 	bl	ea00 <__aeabi_fmul>
    dc6a:	4962      	ldr	r1, [pc, #392]	; (ddf4 <__ieee754_powf+0x39c>)
    dc6c:	f000 fdbe 	bl	e7ec <__aeabi_fsub>
    dc70:	4621      	mov	r1, r4
    dc72:	f000 fec5 	bl	ea00 <__aeabi_fmul>
    dc76:	4960      	ldr	r1, [pc, #384]	; (ddf8 <__ieee754_powf+0x3a0>)
    dc78:	f000 fdba 	bl	e7f0 <__addsf3>
    dc7c:	4621      	mov	r1, r4
    dc7e:	f000 febf 	bl	ea00 <__aeabi_fmul>
    dc82:	495e      	ldr	r1, [pc, #376]	; (ddfc <__ieee754_powf+0x3a4>)
    dc84:	f000 fdb2 	bl	e7ec <__aeabi_fsub>
    dc88:	4621      	mov	r1, r4
    dc8a:	f000 feb9 	bl	ea00 <__aeabi_fmul>
    dc8e:	495c      	ldr	r1, [pc, #368]	; (de00 <__ieee754_powf+0x3a8>)
    dc90:	f000 fdae 	bl	e7f0 <__addsf3>
    dc94:	4621      	mov	r1, r4
    dc96:	f000 feb3 	bl	ea00 <__aeabi_fmul>
    dc9a:	4601      	mov	r1, r0
    dc9c:	4638      	mov	r0, r7
    dc9e:	f000 fda5 	bl	e7ec <__aeabi_fsub>
    dca2:	4604      	mov	r4, r0
    dca4:	4601      	mov	r1, r0
    dca6:	4638      	mov	r0, r7
    dca8:	f000 feaa 	bl	ea00 <__aeabi_fmul>
    dcac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    dcb0:	4682      	mov	sl, r0
    dcb2:	4620      	mov	r0, r4
    dcb4:	f000 fd9a 	bl	e7ec <__aeabi_fsub>
    dcb8:	4601      	mov	r1, r0
    dcba:	4650      	mov	r0, sl
    dcbc:	f000 ff54 	bl	eb68 <__aeabi_fdiv>
    dcc0:	4641      	mov	r1, r8
    dcc2:	4604      	mov	r4, r0
    dcc4:	4638      	mov	r0, r7
    dcc6:	f000 fe9b 	bl	ea00 <__aeabi_fmul>
    dcca:	4641      	mov	r1, r8
    dccc:	f000 fd90 	bl	e7f0 <__addsf3>
    dcd0:	4601      	mov	r1, r0
    dcd2:	4620      	mov	r0, r4
    dcd4:	f000 fd8a 	bl	e7ec <__aeabi_fsub>
    dcd8:	4639      	mov	r1, r7
    dcda:	f000 fd87 	bl	e7ec <__aeabi_fsub>
    dcde:	4601      	mov	r1, r0
    dce0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    dce4:	f000 fd82 	bl	e7ec <__aeabi_fsub>
    dce8:	4603      	mov	r3, r0
    dcea:	444b      	add	r3, r9
    dcec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    dcf0:	f2c0 81e3 	blt.w	e0ba <__ieee754_powf+0x662>
    dcf4:	4618      	mov	r0, r3
    dcf6:	4631      	mov	r1, r6
    dcf8:	f000 fe82 	bl	ea00 <__aeabi_fmul>
    dcfc:	e6c1      	b.n	da82 <__ieee754_powf+0x2a>
    dcfe:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
    dd02:	f47f aeba 	bne.w	da7a <__ieee754_powf+0x22>
    dd06:	f481 0580 	eor.w	r5, r1, #4194304	; 0x400000
    dd0a:	006d      	lsls	r5, r5, #1
    dd0c:	f515 0f00 	cmn.w	r5, #8388608	; 0x800000
    dd10:	f63f aeb3 	bhi.w	da7a <__ieee754_powf+0x22>
    dd14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    dd18:	b007      	add	sp, #28
    dd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd1e:	f1b9 4f97 	cmp.w	r9, #1266679808	; 0x4b800000
    dd22:	da0f      	bge.n	dd44 <__ieee754_powf+0x2ec>
    dd24:	f1b9 5f7e 	cmp.w	r9, #1065353216	; 0x3f800000
    dd28:	db0a      	blt.n	dd40 <__ieee754_powf+0x2e8>
    dd2a:	ea4f 53e9 	mov.w	r3, r9, asr #23
    dd2e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    dd32:	fa49 f203 	asr.w	r2, r9, r3
    dd36:	fa02 f303 	lsl.w	r3, r2, r3
    dd3a:	454b      	cmp	r3, r9
    dd3c:	f000 8183 	beq.w	e046 <__ieee754_powf+0x5ee>
    dd40:	2600      	movs	r6, #0
    dd42:	e6b3      	b.n	daac <__ieee754_powf+0x54>
    dd44:	2602      	movs	r6, #2
    dd46:	e6ad      	b.n	daa4 <__ieee754_powf+0x4c>
    dd48:	4639      	mov	r1, r7
    dd4a:	4638      	mov	r0, r7
    dd4c:	f000 fe58 	bl	ea00 <__aeabi_fmul>
    dd50:	e697      	b.n	da82 <__ieee754_powf+0x2a>
    dd52:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
    dd56:	d0dd      	beq.n	dd14 <__ieee754_powf+0x2bc>
    dd58:	dd2a      	ble.n	ddb0 <__ieee754_powf+0x358>
    dd5a:	2d00      	cmp	r5, #0
    dd5c:	db26      	blt.n	ddac <__ieee754_powf+0x354>
    dd5e:	4620      	mov	r0, r4
    dd60:	e68f      	b.n	da82 <__ieee754_powf+0x2a>
    dd62:	2d00      	cmp	r5, #0
    dd64:	db29      	blt.n	ddba <__ieee754_powf+0x362>
    dd66:	4638      	mov	r0, r7
    dd68:	e68b      	b.n	da82 <__ieee754_powf+0x2a>
    dd6a:	f000 fa3f 	bl	e1ec <fabsf>
    dd6e:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
    dd72:	d003      	beq.n	dd7c <__ieee754_powf+0x324>
    dd74:	f1ba 0f00 	cmp.w	sl, #0
    dd78:	f47f aeb3 	bne.w	dae2 <__ieee754_powf+0x8a>
    dd7c:	2d00      	cmp	r5, #0
    dd7e:	da04      	bge.n	dd8a <__ieee754_powf+0x332>
    dd80:	4601      	mov	r1, r0
    dd82:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    dd86:	f000 feef 	bl	eb68 <__aeabi_fdiv>
    dd8a:	f1b8 0f00 	cmp.w	r8, #0
    dd8e:	f6bf ae78 	bge.w	da82 <__ieee754_powf+0x2a>
    dd92:	f1aa 5a7e 	sub.w	sl, sl, #1065353216	; 0x3f800000
    dd96:	ea5a 0a06 	orrs.w	sl, sl, r6
    dd9a:	f040 814e 	bne.w	e03a <__ieee754_powf+0x5e2>
    dd9e:	4601      	mov	r1, r0
    dda0:	f000 fd24 	bl	e7ec <__aeabi_fsub>
    dda4:	4601      	mov	r1, r0
    dda6:	f000 fedf 	bl	eb68 <__aeabi_fdiv>
    ddaa:	e66a      	b.n	da82 <__ieee754_powf+0x2a>
    ddac:	2000      	movs	r0, #0
    ddae:	e668      	b.n	da82 <__ieee754_powf+0x2a>
    ddb0:	2d00      	cmp	r5, #0
    ddb2:	dafb      	bge.n	ddac <__ieee754_powf+0x354>
    ddb4:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
    ddb8:	e663      	b.n	da82 <__ieee754_powf+0x2a>
    ddba:	4639      	mov	r1, r7
    ddbc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    ddc0:	f000 fed2 	bl	eb68 <__aeabi_fdiv>
    ddc4:	e65d      	b.n	da82 <__ieee754_powf+0x2a>
    ddc6:	bf00      	nop
    ddc8:	3f7ffff3 	.word	0x3f7ffff3
    ddcc:	3f800007 	.word	0x3f800007
    ddd0:	3fb8aa00 	.word	0x3fb8aa00
    ddd4:	36eca570 	.word	0x36eca570
    ddd8:	3eaaaaab 	.word	0x3eaaaaab
    dddc:	3fb8aa3b 	.word	0x3fb8aa3b
    dde0:	bf800000 	.word	0xbf800000
    dde4:	3f317200 	.word	0x3f317200
    dde8:	3f317218 	.word	0x3f317218
    ddec:	35bfbe8c 	.word	0x35bfbe8c
    ddf0:	3331bb4c 	.word	0x3331bb4c
    ddf4:	35ddea0e 	.word	0x35ddea0e
    ddf8:	388ab355 	.word	0x388ab355
    ddfc:	3b360b61 	.word	0x3b360b61
    de00:	3e2aaaab 	.word	0x3e2aaaab
    de04:	b007      	add	sp, #28
    de06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de0a:	f7ff bb4d 	b.w	d4a8 <__ieee754_sqrtf>
    de0e:	4639      	mov	r1, r7
    de10:	4638      	mov	r0, r7
    de12:	f000 fceb 	bl	e7ec <__aeabi_fsub>
    de16:	4601      	mov	r1, r0
    de18:	f000 fea6 	bl	eb68 <__aeabi_fdiv>
    de1c:	e631      	b.n	da82 <__ieee754_powf+0x2a>
    de1e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
    de22:	f040 8140 	bne.w	e0a6 <__ieee754_powf+0x64e>
    de26:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
    de2a:	f000 fde9 	bl	ea00 <__aeabi_fmul>
    de2e:	f06f 0217 	mvn.w	r2, #23
    de32:	4682      	mov	sl, r0
    de34:	ea4f 53ea 	mov.w	r3, sl, asr #23
    de38:	3b7f      	subs	r3, #127	; 0x7f
    de3a:	189a      	adds	r2, r3, r2
    de3c:	4ba9      	ldr	r3, [pc, #676]	; (e0e4 <__ieee754_powf+0x68c>)
    de3e:	9201      	str	r2, [sp, #4]
    de40:	f3ca 0a16 	ubfx	sl, sl, #0, #23
    de44:	459a      	cmp	sl, r3
    de46:	f04a 587e 	orr.w	r8, sl, #1065353216	; 0x3f800000
    de4a:	dd07      	ble.n	de5c <__ieee754_powf+0x404>
    de4c:	4ba6      	ldr	r3, [pc, #664]	; (e0e8 <__ieee754_powf+0x690>)
    de4e:	459a      	cmp	sl, r3
    de50:	f340 813f 	ble.w	e0d2 <__ieee754_powf+0x67a>
    de54:	3201      	adds	r2, #1
    de56:	9201      	str	r2, [sp, #4]
    de58:	f5a8 0800 	sub.w	r8, r8, #8388608	; 0x800000
    de5c:	2300      	movs	r3, #0
    de5e:	461a      	mov	r2, r3
    de60:	9305      	str	r3, [sp, #20]
    de62:	9204      	str	r2, [sp, #16]
    de64:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    de68:	2700      	movs	r7, #0
    de6a:	4619      	mov	r1, r3
    de6c:	4640      	mov	r0, r8
    de6e:	9302      	str	r3, [sp, #8]
    de70:	f000 fcbc 	bl	e7ec <__aeabi_fsub>
    de74:	9b02      	ldr	r3, [sp, #8]
    de76:	9303      	str	r3, [sp, #12]
    de78:	4619      	mov	r1, r3
    de7a:	4682      	mov	sl, r0
    de7c:	4640      	mov	r0, r8
    de7e:	f000 fcb7 	bl	e7f0 <__addsf3>
    de82:	4601      	mov	r1, r0
    de84:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    de88:	f000 fe6e 	bl	eb68 <__aeabi_fdiv>
    de8c:	4601      	mov	r1, r0
    de8e:	9002      	str	r0, [sp, #8]
    de90:	4650      	mov	r0, sl
    de92:	f000 fdb5 	bl	ea00 <__aeabi_fmul>
    de96:	ea4f 0268 	mov.w	r2, r8, asr #1
    de9a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    de9e:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    dea2:	f420 6b7f 	bic.w	fp, r0, #4080	; 0xff0
    dea6:	4417      	add	r7, r2
    dea8:	f02b 0b0f 	bic.w	fp, fp, #15
    deac:	46c1      	mov	r9, r8
    deae:	4639      	mov	r1, r7
    deb0:	4680      	mov	r8, r0
    deb2:	4658      	mov	r0, fp
    deb4:	f000 fda4 	bl	ea00 <__aeabi_fmul>
    deb8:	4601      	mov	r1, r0
    deba:	4650      	mov	r0, sl
    debc:	f000 fc96 	bl	e7ec <__aeabi_fsub>
    dec0:	9b03      	ldr	r3, [sp, #12]
    dec2:	4684      	mov	ip, r0
    dec4:	4619      	mov	r1, r3
    dec6:	4638      	mov	r0, r7
    dec8:	4667      	mov	r7, ip
    deca:	f000 fc8f 	bl	e7ec <__aeabi_fsub>
    dece:	4601      	mov	r1, r0
    ded0:	4648      	mov	r0, r9
    ded2:	f000 fc8b 	bl	e7ec <__aeabi_fsub>
    ded6:	4659      	mov	r1, fp
    ded8:	f000 fd92 	bl	ea00 <__aeabi_fmul>
    dedc:	4601      	mov	r1, r0
    dede:	4638      	mov	r0, r7
    dee0:	f000 fc84 	bl	e7ec <__aeabi_fsub>
    dee4:	9902      	ldr	r1, [sp, #8]
    dee6:	f000 fd8b 	bl	ea00 <__aeabi_fmul>
    deea:	4641      	mov	r1, r8
    deec:	4681      	mov	r9, r0
    deee:	4640      	mov	r0, r8
    def0:	f000 fd86 	bl	ea00 <__aeabi_fmul>
    def4:	497d      	ldr	r1, [pc, #500]	; (e0ec <__ieee754_powf+0x694>)
    def6:	4607      	mov	r7, r0
    def8:	f000 fd82 	bl	ea00 <__aeabi_fmul>
    defc:	497c      	ldr	r1, [pc, #496]	; (e0f0 <__ieee754_powf+0x698>)
    defe:	f000 fc77 	bl	e7f0 <__addsf3>
    df02:	4639      	mov	r1, r7
    df04:	f000 fd7c 	bl	ea00 <__aeabi_fmul>
    df08:	497a      	ldr	r1, [pc, #488]	; (e0f4 <__ieee754_powf+0x69c>)
    df0a:	f000 fc71 	bl	e7f0 <__addsf3>
    df0e:	4639      	mov	r1, r7
    df10:	f000 fd76 	bl	ea00 <__aeabi_fmul>
    df14:	4978      	ldr	r1, [pc, #480]	; (e0f8 <__ieee754_powf+0x6a0>)
    df16:	f000 fc6b 	bl	e7f0 <__addsf3>
    df1a:	4639      	mov	r1, r7
    df1c:	f000 fd70 	bl	ea00 <__aeabi_fmul>
    df20:	4976      	ldr	r1, [pc, #472]	; (e0fc <__ieee754_powf+0x6a4>)
    df22:	f000 fc65 	bl	e7f0 <__addsf3>
    df26:	4639      	mov	r1, r7
    df28:	f000 fd6a 	bl	ea00 <__aeabi_fmul>
    df2c:	4974      	ldr	r1, [pc, #464]	; (e100 <__ieee754_powf+0x6a8>)
    df2e:	f000 fc5f 	bl	e7f0 <__addsf3>
    df32:	4639      	mov	r1, r7
    df34:	4682      	mov	sl, r0
    df36:	4638      	mov	r0, r7
    df38:	f000 fd62 	bl	ea00 <__aeabi_fmul>
    df3c:	4601      	mov	r1, r0
    df3e:	4650      	mov	r0, sl
    df40:	f000 fd5e 	bl	ea00 <__aeabi_fmul>
    df44:	4659      	mov	r1, fp
    df46:	4607      	mov	r7, r0
    df48:	4640      	mov	r0, r8
    df4a:	f000 fc51 	bl	e7f0 <__addsf3>
    df4e:	4649      	mov	r1, r9
    df50:	f000 fd56 	bl	ea00 <__aeabi_fmul>
    df54:	4639      	mov	r1, r7
    df56:	f000 fc4b 	bl	e7f0 <__addsf3>
    df5a:	4659      	mov	r1, fp
    df5c:	4682      	mov	sl, r0
    df5e:	4658      	mov	r0, fp
    df60:	f000 fd4e 	bl	ea00 <__aeabi_fmul>
    df64:	4967      	ldr	r1, [pc, #412]	; (e104 <__ieee754_powf+0x6ac>)
    df66:	9002      	str	r0, [sp, #8]
    df68:	f000 fc42 	bl	e7f0 <__addsf3>
    df6c:	4651      	mov	r1, sl
    df6e:	f000 fc3f 	bl	e7f0 <__addsf3>
    df72:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
    df76:	f027 070f 	bic.w	r7, r7, #15
    df7a:	4639      	mov	r1, r7
    df7c:	4658      	mov	r0, fp
    df7e:	f000 fd3f 	bl	ea00 <__aeabi_fmul>
    df82:	4960      	ldr	r1, [pc, #384]	; (e104 <__ieee754_powf+0x6ac>)
    df84:	4683      	mov	fp, r0
    df86:	4638      	mov	r0, r7
    df88:	f000 fc30 	bl	e7ec <__aeabi_fsub>
    df8c:	9b02      	ldr	r3, [sp, #8]
    df8e:	4619      	mov	r1, r3
    df90:	f000 fc2c 	bl	e7ec <__aeabi_fsub>
    df94:	4601      	mov	r1, r0
    df96:	4650      	mov	r0, sl
    df98:	f000 fc28 	bl	e7ec <__aeabi_fsub>
    df9c:	4641      	mov	r1, r8
    df9e:	f000 fd2f 	bl	ea00 <__aeabi_fmul>
    dfa2:	4639      	mov	r1, r7
    dfa4:	4680      	mov	r8, r0
    dfa6:	4648      	mov	r0, r9
    dfa8:	f000 fd2a 	bl	ea00 <__aeabi_fmul>
    dfac:	4601      	mov	r1, r0
    dfae:	4640      	mov	r0, r8
    dfb0:	f000 fc1e 	bl	e7f0 <__addsf3>
    dfb4:	4680      	mov	r8, r0
    dfb6:	4601      	mov	r1, r0
    dfb8:	4658      	mov	r0, fp
    dfba:	f000 fc19 	bl	e7f0 <__addsf3>
    dfbe:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
    dfc2:	f027 070f 	bic.w	r7, r7, #15
    dfc6:	4950      	ldr	r1, [pc, #320]	; (e108 <__ieee754_powf+0x6b0>)
    dfc8:	4638      	mov	r0, r7
    dfca:	f000 fd19 	bl	ea00 <__aeabi_fmul>
    dfce:	4659      	mov	r1, fp
    dfd0:	4681      	mov	r9, r0
    dfd2:	4638      	mov	r0, r7
    dfd4:	f000 fc0a 	bl	e7ec <__aeabi_fsub>
    dfd8:	4601      	mov	r1, r0
    dfda:	4640      	mov	r0, r8
    dfdc:	f000 fc06 	bl	e7ec <__aeabi_fsub>
    dfe0:	494a      	ldr	r1, [pc, #296]	; (e10c <__ieee754_powf+0x6b4>)
    dfe2:	f000 fd0d 	bl	ea00 <__aeabi_fmul>
    dfe6:	494a      	ldr	r1, [pc, #296]	; (e110 <__ieee754_powf+0x6b8>)
    dfe8:	4680      	mov	r8, r0
    dfea:	4638      	mov	r0, r7
    dfec:	f000 fd08 	bl	ea00 <__aeabi_fmul>
    dff0:	4601      	mov	r1, r0
    dff2:	4640      	mov	r0, r8
    dff4:	f000 fbfc 	bl	e7f0 <__addsf3>
    dff8:	9904      	ldr	r1, [sp, #16]
    dffa:	f000 fbf9 	bl	e7f0 <__addsf3>
    dffe:	4680      	mov	r8, r0
    e000:	9801      	ldr	r0, [sp, #4]
    e002:	f000 fca9 	bl	e958 <__aeabi_i2f>
    e006:	4641      	mov	r1, r8
    e008:	4682      	mov	sl, r0
    e00a:	4648      	mov	r0, r9
    e00c:	f000 fbf0 	bl	e7f0 <__addsf3>
    e010:	f8dd b014 	ldr.w	fp, [sp, #20]
    e014:	4659      	mov	r1, fp
    e016:	f000 fbeb 	bl	e7f0 <__addsf3>
    e01a:	4651      	mov	r1, sl
    e01c:	f000 fbe8 	bl	e7f0 <__addsf3>
    e020:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
    e024:	f027 070f 	bic.w	r7, r7, #15
    e028:	4651      	mov	r1, sl
    e02a:	4638      	mov	r0, r7
    e02c:	f000 fbde 	bl	e7ec <__aeabi_fsub>
    e030:	4659      	mov	r1, fp
    e032:	f000 fbdb 	bl	e7ec <__aeabi_fsub>
    e036:	4649      	mov	r1, r9
    e038:	e5a4      	b.n	db84 <__ieee754_powf+0x12c>
    e03a:	2e01      	cmp	r6, #1
    e03c:	f47f ad21 	bne.w	da82 <__ieee754_powf+0x2a>
    e040:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    e044:	e51d      	b.n	da82 <__ieee754_powf+0x2a>
    e046:	f002 0201 	and.w	r2, r2, #1
    e04a:	f1c2 0602 	rsb	r6, r2, #2
    e04e:	e52d      	b.n	daac <__ieee754_powf+0x54>
    e050:	4a30      	ldr	r2, [pc, #192]	; (e114 <__ieee754_powf+0x6bc>)
    e052:	4293      	cmp	r3, r2
    e054:	f300 80a9 	bgt.w	e1aa <__ieee754_powf+0x752>
    e058:	f000 808b 	beq.w	e172 <__ieee754_powf+0x71a>
    e05c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
    e060:	f77f adcd 	ble.w	dbfe <__ieee754_powf+0x1a6>
    e064:	15db      	asrs	r3, r3, #23
    e066:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    e06a:	3b7e      	subs	r3, #126	; 0x7e
    e06c:	fa42 f303 	asr.w	r3, r2, r3
    e070:	4403      	add	r3, r0
    e072:	4929      	ldr	r1, [pc, #164]	; (e118 <__ieee754_powf+0x6c0>)
    e074:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    e078:	3a7f      	subs	r2, #127	; 0x7f
    e07a:	f3c3 0516 	ubfx	r5, r3, #0, #23
    e07e:	4111      	asrs	r1, r2
    e080:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
    e084:	f1c2 0217 	rsb	r2, r2, #23
    e088:	4019      	ands	r1, r3
    e08a:	4115      	asrs	r5, r2
    e08c:	426d      	negs	r5, r5
    e08e:	4638      	mov	r0, r7
    e090:	f000 fbac 	bl	e7ec <__aeabi_fsub>
    e094:	4601      	mov	r1, r0
    e096:	4607      	mov	r7, r0
    e098:	4640      	mov	r0, r8
    e09a:	f000 fba9 	bl	e7f0 <__addsf3>
    e09e:	ea4f 59c5 	mov.w	r9, r5, lsl #23
    e0a2:	4604      	mov	r4, r0
    e0a4:	e5ae      	b.n	dc04 <__ieee754_powf+0x1ac>
    e0a6:	2200      	movs	r2, #0
    e0a8:	e6c4      	b.n	de34 <__ieee754_powf+0x3dc>
    e0aa:	2d00      	cmp	r5, #0
    e0ac:	db0b      	blt.n	e0c6 <__ieee754_powf+0x66e>
    e0ae:	2000      	movs	r0, #0
    e0b0:	b007      	add	sp, #28
    e0b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0b6:	f000 b913 	b.w	e2e0 <__math_uflowf>
    e0ba:	4629      	mov	r1, r5
    e0bc:	f000 f89a 	bl	e1f4 <scalbnf>
    e0c0:	e619      	b.n	dcf6 <__ieee754_powf+0x29e>
    e0c2:	2d00      	cmp	r5, #0
    e0c4:	ddf3      	ble.n	e0ae <__ieee754_powf+0x656>
    e0c6:	2000      	movs	r0, #0
    e0c8:	b007      	add	sp, #28
    e0ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0ce:	f000 b90b 	b.w	e2e8 <__math_oflowf>
    e0d2:	4b12      	ldr	r3, [pc, #72]	; (e11c <__ieee754_powf+0x6c4>)
    e0d4:	9305      	str	r3, [sp, #20]
    e0d6:	4b12      	ldr	r3, [pc, #72]	; (e120 <__ieee754_powf+0x6c8>)
    e0d8:	9304      	str	r3, [sp, #16]
    e0da:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
    e0de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    e0e2:	e6c2      	b.n	de6a <__ieee754_powf+0x412>
    e0e4:	001cc471 	.word	0x001cc471
    e0e8:	005db3d6 	.word	0x005db3d6
    e0ec:	3e53f142 	.word	0x3e53f142
    e0f0:	3e6c3255 	.word	0x3e6c3255
    e0f4:	3e8ba305 	.word	0x3e8ba305
    e0f8:	3eaaaaab 	.word	0x3eaaaaab
    e0fc:	3edb6db7 	.word	0x3edb6db7
    e100:	3f19999a 	.word	0x3f19999a
    e104:	40400000 	.word	0x40400000
    e108:	3f763800 	.word	0x3f763800
    e10c:	3f76384f 	.word	0x3f76384f
    e110:	369dc3a0 	.word	0x369dc3a0
    e114:	43160000 	.word	0x43160000
    e118:	ff800000 	.word	0xff800000
    e11c:	3f15c000 	.word	0x3f15c000
    e120:	35d1cfdc 	.word	0x35d1cfdc
    e124:	492f      	ldr	r1, [pc, #188]	; (e1e4 <__ieee754_powf+0x78c>)
    e126:	4640      	mov	r0, r8
    e128:	f000 fb62 	bl	e7f0 <__addsf3>
    e12c:	4639      	mov	r1, r7
    e12e:	4681      	mov	r9, r0
    e130:	4628      	mov	r0, r5
    e132:	f000 fb5b 	bl	e7ec <__aeabi_fsub>
    e136:	4601      	mov	r1, r0
    e138:	4648      	mov	r0, r9
    e13a:	f000 fe1d 	bl	ed78 <__aeabi_fcmpgt>
    e13e:	b980      	cbnz	r0, e162 <__ieee754_powf+0x70a>
    e140:	f505 4300 	add.w	r3, r5, #32768	; 0x8000
    e144:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    e148:	4927      	ldr	r1, [pc, #156]	; (e1e8 <__ieee754_powf+0x790>)
    e14a:	3a7f      	subs	r2, #127	; 0x7f
    e14c:	4111      	asrs	r1, r2
    e14e:	4019      	ands	r1, r3
    e150:	f3c3 0316 	ubfx	r3, r3, #0, #23
    e154:	f1c2 0217 	rsb	r2, r2, #23
    e158:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    e15c:	fa43 f502 	asr.w	r5, r3, r2
    e160:	e795      	b.n	e08e <__ieee754_powf+0x636>
    e162:	2100      	movs	r1, #0
    e164:	4630      	mov	r0, r6
    e166:	f000 fde9 	bl	ed3c <__aeabi_fcmplt>
    e16a:	3800      	subs	r0, #0
    e16c:	bf18      	it	ne
    e16e:	2001      	movne	r0, #1
    e170:	e7aa      	b.n	e0c8 <__ieee754_powf+0x670>
    e172:	4639      	mov	r1, r7
    e174:	f000 fb3a 	bl	e7ec <__aeabi_fsub>
    e178:	4641      	mov	r1, r8
    e17a:	f000 fdf3 	bl	ed64 <__aeabi_fcmpge>
    e17e:	b9a0      	cbnz	r0, e1aa <__ieee754_powf+0x752>
    e180:	f505 4300 	add.w	r3, r5, #32768	; 0x8000
    e184:	4918      	ldr	r1, [pc, #96]	; (e1e8 <__ieee754_powf+0x790>)
    e186:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    e18a:	3a7f      	subs	r2, #127	; 0x7f
    e18c:	f3c3 0516 	ubfx	r5, r3, #0, #23
    e190:	4111      	asrs	r1, r2
    e192:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
    e196:	f1c2 0217 	rsb	r2, r2, #23
    e19a:	2c00      	cmp	r4, #0
    e19c:	ea01 0103 	and.w	r1, r1, r3
    e1a0:	fa45 f502 	asr.w	r5, r5, r2
    e1a4:	f6ff af72 	blt.w	e08c <__ieee754_powf+0x634>
    e1a8:	e771      	b.n	e08e <__ieee754_powf+0x636>
    e1aa:	2100      	movs	r1, #0
    e1ac:	4630      	mov	r0, r6
    e1ae:	f000 fdc5 	bl	ed3c <__aeabi_fcmplt>
    e1b2:	3800      	subs	r0, #0
    e1b4:	bf18      	it	ne
    e1b6:	2001      	movne	r0, #1
    e1b8:	e77a      	b.n	e0b0 <__ieee754_powf+0x658>
    e1ba:	15db      	asrs	r3, r3, #23
    e1bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    e1c0:	3b7e      	subs	r3, #126	; 0x7e
    e1c2:	fa42 f303 	asr.w	r3, r2, r3
    e1c6:	4423      	add	r3, r4
    e1c8:	4907      	ldr	r1, [pc, #28]	; (e1e8 <__ieee754_powf+0x790>)
    e1ca:	15da      	asrs	r2, r3, #23
    e1cc:	3a7f      	subs	r2, #127	; 0x7f
    e1ce:	f3c3 0516 	ubfx	r5, r3, #0, #23
    e1d2:	4111      	asrs	r1, r2
    e1d4:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
    e1d8:	f1c2 0217 	rsb	r2, r2, #23
    e1dc:	4019      	ands	r1, r3
    e1de:	4115      	asrs	r5, r2
    e1e0:	e755      	b.n	e08e <__ieee754_powf+0x636>
    e1e2:	bf00      	nop
    e1e4:	3338aa3c 	.word	0x3338aa3c
    e1e8:	ff800000 	.word	0xff800000

0000e1ec <fabsf>:
    e1ec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    e1f0:	4770      	bx	lr
    e1f2:	bf00      	nop

0000e1f4 <scalbnf>:
    e1f4:	b510      	push	{r4, lr}
    e1f6:	460c      	mov	r4, r1
    e1f8:	f030 4100 	bics.w	r1, r0, #2147483648	; 0x80000000
    e1fc:	4603      	mov	r3, r0
    e1fe:	d01d      	beq.n	e23c <scalbnf+0x48>
    e200:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    e204:	d21b      	bcs.n	e23e <scalbnf+0x4a>
    e206:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
    e20a:	4602      	mov	r2, r0
    e20c:	d11b      	bne.n	e246 <scalbnf+0x52>
    e20e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
    e212:	f000 fbf5 	bl	ea00 <__aeabi_fmul>
    e216:	4a20      	ldr	r2, [pc, #128]	; (e298 <scalbnf+0xa4>)
    e218:	4294      	cmp	r4, r2
    e21a:	4603      	mov	r3, r0
    e21c:	db2c      	blt.n	e278 <scalbnf+0x84>
    e21e:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    e222:	4602      	mov	r2, r0
    e224:	f24c 3050 	movw	r0, #50000	; 0xc350
    e228:	4284      	cmp	r4, r0
    e22a:	f1a1 0119 	sub.w	r1, r1, #25
    e22e:	dd10      	ble.n	e252 <scalbnf+0x5e>
    e230:	491a      	ldr	r1, [pc, #104]	; (e29c <scalbnf+0xa8>)
    e232:	4618      	mov	r0, r3
    e234:	f361 001e 	bfi	r0, r1, #0, #31
    e238:	f000 fbe2 	bl	ea00 <__aeabi_fmul>
    e23c:	bd10      	pop	{r4, pc}
    e23e:	4601      	mov	r1, r0
    e240:	f000 fad6 	bl	e7f0 <__addsf3>
    e244:	bd10      	pop	{r4, pc}
    e246:	f24c 3050 	movw	r0, #50000	; 0xc350
    e24a:	4284      	cmp	r4, r0
    e24c:	ea4f 51d1 	mov.w	r1, r1, lsr #23
    e250:	dcee      	bgt.n	e230 <scalbnf+0x3c>
    e252:	4421      	add	r1, r4
    e254:	29fe      	cmp	r1, #254	; 0xfe
    e256:	dceb      	bgt.n	e230 <scalbnf+0x3c>
    e258:	2900      	cmp	r1, #0
    e25a:	dc11      	bgt.n	e280 <scalbnf+0x8c>
    e25c:	f111 0f16 	cmn.w	r1, #22
    e260:	db13      	blt.n	e28a <scalbnf+0x96>
    e262:	f101 0019 	add.w	r0, r1, #25
    e266:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    e26a:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
    e26e:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
    e272:	f000 fbc5 	bl	ea00 <__aeabi_fmul>
    e276:	bd10      	pop	{r4, pc}
    e278:	4909      	ldr	r1, [pc, #36]	; (e2a0 <scalbnf+0xac>)
    e27a:	f000 fbc1 	bl	ea00 <__aeabi_fmul>
    e27e:	bd10      	pop	{r4, pc}
    e280:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    e284:	ea42 50c1 	orr.w	r0, r2, r1, lsl #23
    e288:	bd10      	pop	{r4, pc}
    e28a:	4905      	ldr	r1, [pc, #20]	; (e2a0 <scalbnf+0xac>)
    e28c:	4618      	mov	r0, r3
    e28e:	f361 001e 	bfi	r0, r1, #0, #31
    e292:	f000 fbb5 	bl	ea00 <__aeabi_fmul>
    e296:	bd10      	pop	{r4, pc}
    e298:	ffff3cb0 	.word	0xffff3cb0
    e29c:	7149f2ca 	.word	0x7149f2ca
    e2a0:	0da24260 	.word	0x0da24260

0000e2a4 <with_errnof>:
    e2a4:	b538      	push	{r3, r4, r5, lr}
    e2a6:	4605      	mov	r5, r0
    e2a8:	460c      	mov	r4, r1
    e2aa:	f001 fd31 	bl	fd10 <__errno>
    e2ae:	4603      	mov	r3, r0
    e2b0:	4628      	mov	r0, r5
    e2b2:	601c      	str	r4, [r3, #0]
    e2b4:	bd38      	pop	{r3, r4, r5, pc}
    e2b6:	bf00      	nop

0000e2b8 <xflowf>:
    e2b8:	b508      	push	{r3, lr}
    e2ba:	b140      	cbz	r0, e2ce <xflowf+0x16>
    e2bc:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
    e2c0:	f000 fb9e 	bl	ea00 <__aeabi_fmul>
    e2c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e2c8:	2122      	movs	r1, #34	; 0x22
    e2ca:	f7ff bfeb 	b.w	e2a4 <with_errnof>
    e2ce:	4608      	mov	r0, r1
    e2d0:	f000 fb96 	bl	ea00 <__aeabi_fmul>
    e2d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e2d8:	2122      	movs	r1, #34	; 0x22
    e2da:	f7ff bfe3 	b.w	e2a4 <with_errnof>
    e2de:	bf00      	nop

0000e2e0 <__math_uflowf>:
    e2e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    e2e4:	f7ff bfe8 	b.w	e2b8 <xflowf>

0000e2e8 <__math_oflowf>:
    e2e8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
    e2ec:	f7ff bfe4 	b.w	e2b8 <xflowf>

0000e2f0 <__aeabi_drsub>:
    e2f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    e2f4:	e002      	b.n	e2fc <__adddf3>
    e2f6:	bf00      	nop

0000e2f8 <__aeabi_dsub>:
    e2f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000e2fc <__adddf3>:
    e2fc:	b530      	push	{r4, r5, lr}
    e2fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
    e302:	ea4f 0543 	mov.w	r5, r3, lsl #1
    e306:	ea94 0f05 	teq	r4, r5
    e30a:	bf08      	it	eq
    e30c:	ea90 0f02 	teqeq	r0, r2
    e310:	bf1f      	itttt	ne
    e312:	ea54 0c00 	orrsne.w	ip, r4, r0
    e316:	ea55 0c02 	orrsne.w	ip, r5, r2
    e31a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    e31e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    e322:	f000 80e2 	beq.w	e4ea <__adddf3+0x1ee>
    e326:	ea4f 5454 	mov.w	r4, r4, lsr #21
    e32a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    e32e:	bfb8      	it	lt
    e330:	426d      	neglt	r5, r5
    e332:	dd0c      	ble.n	e34e <__adddf3+0x52>
    e334:	442c      	add	r4, r5
    e336:	ea80 0202 	eor.w	r2, r0, r2
    e33a:	ea81 0303 	eor.w	r3, r1, r3
    e33e:	ea82 0000 	eor.w	r0, r2, r0
    e342:	ea83 0101 	eor.w	r1, r3, r1
    e346:	ea80 0202 	eor.w	r2, r0, r2
    e34a:	ea81 0303 	eor.w	r3, r1, r3
    e34e:	2d36      	cmp	r5, #54	; 0x36
    e350:	bf88      	it	hi
    e352:	bd30      	pophi	{r4, r5, pc}
    e354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    e358:	ea4f 3101 	mov.w	r1, r1, lsl #12
    e35c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    e360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    e364:	d002      	beq.n	e36c <__adddf3+0x70>
    e366:	4240      	negs	r0, r0
    e368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e36c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    e370:	ea4f 3303 	mov.w	r3, r3, lsl #12
    e374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    e378:	d002      	beq.n	e380 <__adddf3+0x84>
    e37a:	4252      	negs	r2, r2
    e37c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    e380:	ea94 0f05 	teq	r4, r5
    e384:	f000 80a7 	beq.w	e4d6 <__adddf3+0x1da>
    e388:	f1a4 0401 	sub.w	r4, r4, #1
    e38c:	f1d5 0e20 	rsbs	lr, r5, #32
    e390:	db0d      	blt.n	e3ae <__adddf3+0xb2>
    e392:	fa02 fc0e 	lsl.w	ip, r2, lr
    e396:	fa22 f205 	lsr.w	r2, r2, r5
    e39a:	1880      	adds	r0, r0, r2
    e39c:	f141 0100 	adc.w	r1, r1, #0
    e3a0:	fa03 f20e 	lsl.w	r2, r3, lr
    e3a4:	1880      	adds	r0, r0, r2
    e3a6:	fa43 f305 	asr.w	r3, r3, r5
    e3aa:	4159      	adcs	r1, r3
    e3ac:	e00e      	b.n	e3cc <__adddf3+0xd0>
    e3ae:	f1a5 0520 	sub.w	r5, r5, #32
    e3b2:	f10e 0e20 	add.w	lr, lr, #32
    e3b6:	2a01      	cmp	r2, #1
    e3b8:	fa03 fc0e 	lsl.w	ip, r3, lr
    e3bc:	bf28      	it	cs
    e3be:	f04c 0c02 	orrcs.w	ip, ip, #2
    e3c2:	fa43 f305 	asr.w	r3, r3, r5
    e3c6:	18c0      	adds	r0, r0, r3
    e3c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    e3cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e3d0:	d507      	bpl.n	e3e2 <__adddf3+0xe6>
    e3d2:	f04f 0e00 	mov.w	lr, #0
    e3d6:	f1dc 0c00 	rsbs	ip, ip, #0
    e3da:	eb7e 0000 	sbcs.w	r0, lr, r0
    e3de:	eb6e 0101 	sbc.w	r1, lr, r1
    e3e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    e3e6:	d31b      	bcc.n	e420 <__adddf3+0x124>
    e3e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    e3ec:	d30c      	bcc.n	e408 <__adddf3+0x10c>
    e3ee:	0849      	lsrs	r1, r1, #1
    e3f0:	ea5f 0030 	movs.w	r0, r0, rrx
    e3f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    e3f8:	f104 0401 	add.w	r4, r4, #1
    e3fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
    e400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    e404:	f080 809a 	bcs.w	e53c <__adddf3+0x240>
    e408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    e40c:	bf08      	it	eq
    e40e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    e412:	f150 0000 	adcs.w	r0, r0, #0
    e416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    e41a:	ea41 0105 	orr.w	r1, r1, r5
    e41e:	bd30      	pop	{r4, r5, pc}
    e420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    e424:	4140      	adcs	r0, r0
    e426:	eb41 0101 	adc.w	r1, r1, r1
    e42a:	3c01      	subs	r4, #1
    e42c:	bf28      	it	cs
    e42e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    e432:	d2e9      	bcs.n	e408 <__adddf3+0x10c>
    e434:	f091 0f00 	teq	r1, #0
    e438:	bf04      	itt	eq
    e43a:	4601      	moveq	r1, r0
    e43c:	2000      	moveq	r0, #0
    e43e:	fab1 f381 	clz	r3, r1
    e442:	bf08      	it	eq
    e444:	3320      	addeq	r3, #32
    e446:	f1a3 030b 	sub.w	r3, r3, #11
    e44a:	f1b3 0220 	subs.w	r2, r3, #32
    e44e:	da0c      	bge.n	e46a <__adddf3+0x16e>
    e450:	320c      	adds	r2, #12
    e452:	dd08      	ble.n	e466 <__adddf3+0x16a>
    e454:	f102 0c14 	add.w	ip, r2, #20
    e458:	f1c2 020c 	rsb	r2, r2, #12
    e45c:	fa01 f00c 	lsl.w	r0, r1, ip
    e460:	fa21 f102 	lsr.w	r1, r1, r2
    e464:	e00c      	b.n	e480 <__adddf3+0x184>
    e466:	f102 0214 	add.w	r2, r2, #20
    e46a:	bfd8      	it	le
    e46c:	f1c2 0c20 	rsble	ip, r2, #32
    e470:	fa01 f102 	lsl.w	r1, r1, r2
    e474:	fa20 fc0c 	lsr.w	ip, r0, ip
    e478:	bfdc      	itt	le
    e47a:	ea41 010c 	orrle.w	r1, r1, ip
    e47e:	4090      	lslle	r0, r2
    e480:	1ae4      	subs	r4, r4, r3
    e482:	bfa2      	ittt	ge
    e484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    e488:	4329      	orrge	r1, r5
    e48a:	bd30      	popge	{r4, r5, pc}
    e48c:	ea6f 0404 	mvn.w	r4, r4
    e490:	3c1f      	subs	r4, #31
    e492:	da1c      	bge.n	e4ce <__adddf3+0x1d2>
    e494:	340c      	adds	r4, #12
    e496:	dc0e      	bgt.n	e4b6 <__adddf3+0x1ba>
    e498:	f104 0414 	add.w	r4, r4, #20
    e49c:	f1c4 0220 	rsb	r2, r4, #32
    e4a0:	fa20 f004 	lsr.w	r0, r0, r4
    e4a4:	fa01 f302 	lsl.w	r3, r1, r2
    e4a8:	ea40 0003 	orr.w	r0, r0, r3
    e4ac:	fa21 f304 	lsr.w	r3, r1, r4
    e4b0:	ea45 0103 	orr.w	r1, r5, r3
    e4b4:	bd30      	pop	{r4, r5, pc}
    e4b6:	f1c4 040c 	rsb	r4, r4, #12
    e4ba:	f1c4 0220 	rsb	r2, r4, #32
    e4be:	fa20 f002 	lsr.w	r0, r0, r2
    e4c2:	fa01 f304 	lsl.w	r3, r1, r4
    e4c6:	ea40 0003 	orr.w	r0, r0, r3
    e4ca:	4629      	mov	r1, r5
    e4cc:	bd30      	pop	{r4, r5, pc}
    e4ce:	fa21 f004 	lsr.w	r0, r1, r4
    e4d2:	4629      	mov	r1, r5
    e4d4:	bd30      	pop	{r4, r5, pc}
    e4d6:	f094 0f00 	teq	r4, #0
    e4da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    e4de:	bf06      	itte	eq
    e4e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    e4e4:	3401      	addeq	r4, #1
    e4e6:	3d01      	subne	r5, #1
    e4e8:	e74e      	b.n	e388 <__adddf3+0x8c>
    e4ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    e4ee:	bf18      	it	ne
    e4f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    e4f4:	d029      	beq.n	e54a <__adddf3+0x24e>
    e4f6:	ea94 0f05 	teq	r4, r5
    e4fa:	bf08      	it	eq
    e4fc:	ea90 0f02 	teqeq	r0, r2
    e500:	d005      	beq.n	e50e <__adddf3+0x212>
    e502:	ea54 0c00 	orrs.w	ip, r4, r0
    e506:	bf04      	itt	eq
    e508:	4619      	moveq	r1, r3
    e50a:	4610      	moveq	r0, r2
    e50c:	bd30      	pop	{r4, r5, pc}
    e50e:	ea91 0f03 	teq	r1, r3
    e512:	bf1e      	ittt	ne
    e514:	2100      	movne	r1, #0
    e516:	2000      	movne	r0, #0
    e518:	bd30      	popne	{r4, r5, pc}
    e51a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    e51e:	d105      	bne.n	e52c <__adddf3+0x230>
    e520:	0040      	lsls	r0, r0, #1
    e522:	4149      	adcs	r1, r1
    e524:	bf28      	it	cs
    e526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    e52a:	bd30      	pop	{r4, r5, pc}
    e52c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    e530:	bf3c      	itt	cc
    e532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    e536:	bd30      	popcc	{r4, r5, pc}
    e538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e53c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    e540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e544:	f04f 0000 	mov.w	r0, #0
    e548:	bd30      	pop	{r4, r5, pc}
    e54a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    e54e:	bf1a      	itte	ne
    e550:	4619      	movne	r1, r3
    e552:	4610      	movne	r0, r2
    e554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    e558:	bf1c      	itt	ne
    e55a:	460b      	movne	r3, r1
    e55c:	4602      	movne	r2, r0
    e55e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    e562:	bf06      	itte	eq
    e564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    e568:	ea91 0f03 	teqeq	r1, r3
    e56c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    e570:	bd30      	pop	{r4, r5, pc}
    e572:	bf00      	nop

0000e574 <__aeabi_ui2d>:
    e574:	f090 0f00 	teq	r0, #0
    e578:	bf04      	itt	eq
    e57a:	2100      	moveq	r1, #0
    e57c:	4770      	bxeq	lr
    e57e:	b530      	push	{r4, r5, lr}
    e580:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e584:	f104 0432 	add.w	r4, r4, #50	; 0x32
    e588:	f04f 0500 	mov.w	r5, #0
    e58c:	f04f 0100 	mov.w	r1, #0
    e590:	e750      	b.n	e434 <__adddf3+0x138>
    e592:	bf00      	nop

0000e594 <__aeabi_i2d>:
    e594:	f090 0f00 	teq	r0, #0
    e598:	bf04      	itt	eq
    e59a:	2100      	moveq	r1, #0
    e59c:	4770      	bxeq	lr
    e59e:	b530      	push	{r4, r5, lr}
    e5a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e5a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    e5a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    e5ac:	bf48      	it	mi
    e5ae:	4240      	negmi	r0, r0
    e5b0:	f04f 0100 	mov.w	r1, #0
    e5b4:	e73e      	b.n	e434 <__adddf3+0x138>
    e5b6:	bf00      	nop

0000e5b8 <__aeabi_f2d>:
    e5b8:	0042      	lsls	r2, r0, #1
    e5ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
    e5be:	ea4f 0131 	mov.w	r1, r1, rrx
    e5c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    e5c6:	bf1f      	itttt	ne
    e5c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    e5cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    e5d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    e5d4:	4770      	bxne	lr
    e5d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    e5da:	bf08      	it	eq
    e5dc:	4770      	bxeq	lr
    e5de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    e5e2:	bf04      	itt	eq
    e5e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    e5e8:	4770      	bxeq	lr
    e5ea:	b530      	push	{r4, r5, lr}
    e5ec:	f44f 7460 	mov.w	r4, #896	; 0x380
    e5f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e5f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    e5f8:	e71c      	b.n	e434 <__adddf3+0x138>
    e5fa:	bf00      	nop

0000e5fc <__aeabi_ul2d>:
    e5fc:	ea50 0201 	orrs.w	r2, r0, r1
    e600:	bf08      	it	eq
    e602:	4770      	bxeq	lr
    e604:	b530      	push	{r4, r5, lr}
    e606:	f04f 0500 	mov.w	r5, #0
    e60a:	e00a      	b.n	e622 <__aeabi_l2d+0x16>

0000e60c <__aeabi_l2d>:
    e60c:	ea50 0201 	orrs.w	r2, r0, r1
    e610:	bf08      	it	eq
    e612:	4770      	bxeq	lr
    e614:	b530      	push	{r4, r5, lr}
    e616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    e61a:	d502      	bpl.n	e622 <__aeabi_l2d+0x16>
    e61c:	4240      	negs	r0, r0
    e61e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e622:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e626:	f104 0432 	add.w	r4, r4, #50	; 0x32
    e62a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    e62e:	f43f aed8 	beq.w	e3e2 <__adddf3+0xe6>
    e632:	f04f 0203 	mov.w	r2, #3
    e636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    e63a:	bf18      	it	ne
    e63c:	3203      	addne	r2, #3
    e63e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    e642:	bf18      	it	ne
    e644:	3203      	addne	r2, #3
    e646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    e64a:	f1c2 0320 	rsb	r3, r2, #32
    e64e:	fa00 fc03 	lsl.w	ip, r0, r3
    e652:	fa20 f002 	lsr.w	r0, r0, r2
    e656:	fa01 fe03 	lsl.w	lr, r1, r3
    e65a:	ea40 000e 	orr.w	r0, r0, lr
    e65e:	fa21 f102 	lsr.w	r1, r1, r2
    e662:	4414      	add	r4, r2
    e664:	e6bd      	b.n	e3e2 <__adddf3+0xe6>
    e666:	bf00      	nop

0000e668 <__gedf2>:
    e668:	f04f 3cff 	mov.w	ip, #4294967295
    e66c:	e006      	b.n	e67c <__cmpdf2+0x4>
    e66e:	bf00      	nop

0000e670 <__ledf2>:
    e670:	f04f 0c01 	mov.w	ip, #1
    e674:	e002      	b.n	e67c <__cmpdf2+0x4>
    e676:	bf00      	nop

0000e678 <__cmpdf2>:
    e678:	f04f 0c01 	mov.w	ip, #1
    e67c:	f84d cd04 	str.w	ip, [sp, #-4]!
    e680:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    e684:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    e688:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    e68c:	bf18      	it	ne
    e68e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    e692:	d01b      	beq.n	e6cc <__cmpdf2+0x54>
    e694:	b001      	add	sp, #4
    e696:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    e69a:	bf0c      	ite	eq
    e69c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    e6a0:	ea91 0f03 	teqne	r1, r3
    e6a4:	bf02      	ittt	eq
    e6a6:	ea90 0f02 	teqeq	r0, r2
    e6aa:	2000      	moveq	r0, #0
    e6ac:	4770      	bxeq	lr
    e6ae:	f110 0f00 	cmn.w	r0, #0
    e6b2:	ea91 0f03 	teq	r1, r3
    e6b6:	bf58      	it	pl
    e6b8:	4299      	cmppl	r1, r3
    e6ba:	bf08      	it	eq
    e6bc:	4290      	cmpeq	r0, r2
    e6be:	bf2c      	ite	cs
    e6c0:	17d8      	asrcs	r0, r3, #31
    e6c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    e6c6:	f040 0001 	orr.w	r0, r0, #1
    e6ca:	4770      	bx	lr
    e6cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    e6d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    e6d4:	d102      	bne.n	e6dc <__cmpdf2+0x64>
    e6d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    e6da:	d107      	bne.n	e6ec <__cmpdf2+0x74>
    e6dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    e6e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    e6e4:	d1d6      	bne.n	e694 <__cmpdf2+0x1c>
    e6e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    e6ea:	d0d3      	beq.n	e694 <__cmpdf2+0x1c>
    e6ec:	f85d 0b04 	ldr.w	r0, [sp], #4
    e6f0:	4770      	bx	lr
    e6f2:	bf00      	nop

0000e6f4 <__aeabi_cdrcmple>:
    e6f4:	4684      	mov	ip, r0
    e6f6:	4610      	mov	r0, r2
    e6f8:	4662      	mov	r2, ip
    e6fa:	468c      	mov	ip, r1
    e6fc:	4619      	mov	r1, r3
    e6fe:	4663      	mov	r3, ip
    e700:	e000      	b.n	e704 <__aeabi_cdcmpeq>
    e702:	bf00      	nop

0000e704 <__aeabi_cdcmpeq>:
    e704:	b501      	push	{r0, lr}
    e706:	f7ff ffb7 	bl	e678 <__cmpdf2>
    e70a:	2800      	cmp	r0, #0
    e70c:	bf48      	it	mi
    e70e:	f110 0f00 	cmnmi.w	r0, #0
    e712:	bd01      	pop	{r0, pc}

0000e714 <__aeabi_dcmpeq>:
    e714:	f84d ed08 	str.w	lr, [sp, #-8]!
    e718:	f7ff fff4 	bl	e704 <__aeabi_cdcmpeq>
    e71c:	bf0c      	ite	eq
    e71e:	2001      	moveq	r0, #1
    e720:	2000      	movne	r0, #0
    e722:	f85d fb08 	ldr.w	pc, [sp], #8
    e726:	bf00      	nop

0000e728 <__aeabi_dcmplt>:
    e728:	f84d ed08 	str.w	lr, [sp, #-8]!
    e72c:	f7ff ffea 	bl	e704 <__aeabi_cdcmpeq>
    e730:	bf34      	ite	cc
    e732:	2001      	movcc	r0, #1
    e734:	2000      	movcs	r0, #0
    e736:	f85d fb08 	ldr.w	pc, [sp], #8
    e73a:	bf00      	nop

0000e73c <__aeabi_dcmple>:
    e73c:	f84d ed08 	str.w	lr, [sp, #-8]!
    e740:	f7ff ffe0 	bl	e704 <__aeabi_cdcmpeq>
    e744:	bf94      	ite	ls
    e746:	2001      	movls	r0, #1
    e748:	2000      	movhi	r0, #0
    e74a:	f85d fb08 	ldr.w	pc, [sp], #8
    e74e:	bf00      	nop

0000e750 <__aeabi_dcmpge>:
    e750:	f84d ed08 	str.w	lr, [sp, #-8]!
    e754:	f7ff ffce 	bl	e6f4 <__aeabi_cdrcmple>
    e758:	bf94      	ite	ls
    e75a:	2001      	movls	r0, #1
    e75c:	2000      	movhi	r0, #0
    e75e:	f85d fb08 	ldr.w	pc, [sp], #8
    e762:	bf00      	nop

0000e764 <__aeabi_dcmpgt>:
    e764:	f84d ed08 	str.w	lr, [sp, #-8]!
    e768:	f7ff ffc4 	bl	e6f4 <__aeabi_cdrcmple>
    e76c:	bf34      	ite	cc
    e76e:	2001      	movcc	r0, #1
    e770:	2000      	movcs	r0, #0
    e772:	f85d fb08 	ldr.w	pc, [sp], #8
    e776:	bf00      	nop

0000e778 <__aeabi_dcmpun>:
    e778:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    e77c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    e780:	d102      	bne.n	e788 <__aeabi_dcmpun+0x10>
    e782:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    e786:	d10a      	bne.n	e79e <__aeabi_dcmpun+0x26>
    e788:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    e78c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    e790:	d102      	bne.n	e798 <__aeabi_dcmpun+0x20>
    e792:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    e796:	d102      	bne.n	e79e <__aeabi_dcmpun+0x26>
    e798:	f04f 0000 	mov.w	r0, #0
    e79c:	4770      	bx	lr
    e79e:	f04f 0001 	mov.w	r0, #1
    e7a2:	4770      	bx	lr

0000e7a4 <__aeabi_d2uiz>:
    e7a4:	004a      	lsls	r2, r1, #1
    e7a6:	d211      	bcs.n	e7cc <__aeabi_d2uiz+0x28>
    e7a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    e7ac:	d211      	bcs.n	e7d2 <__aeabi_d2uiz+0x2e>
    e7ae:	d50d      	bpl.n	e7cc <__aeabi_d2uiz+0x28>
    e7b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    e7b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    e7b8:	d40e      	bmi.n	e7d8 <__aeabi_d2uiz+0x34>
    e7ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    e7be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e7c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    e7c6:	fa23 f002 	lsr.w	r0, r3, r2
    e7ca:	4770      	bx	lr
    e7cc:	f04f 0000 	mov.w	r0, #0
    e7d0:	4770      	bx	lr
    e7d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    e7d6:	d102      	bne.n	e7de <__aeabi_d2uiz+0x3a>
    e7d8:	f04f 30ff 	mov.w	r0, #4294967295
    e7dc:	4770      	bx	lr
    e7de:	f04f 0000 	mov.w	r0, #0
    e7e2:	4770      	bx	lr

0000e7e4 <__aeabi_frsub>:
    e7e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    e7e8:	e002      	b.n	e7f0 <__addsf3>
    e7ea:	bf00      	nop

0000e7ec <__aeabi_fsub>:
    e7ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000e7f0 <__addsf3>:
    e7f0:	0042      	lsls	r2, r0, #1
    e7f2:	bf1f      	itttt	ne
    e7f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    e7f8:	ea92 0f03 	teqne	r2, r3
    e7fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    e800:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    e804:	d06a      	beq.n	e8dc <__addsf3+0xec>
    e806:	ea4f 6212 	mov.w	r2, r2, lsr #24
    e80a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    e80e:	bfc1      	itttt	gt
    e810:	18d2      	addgt	r2, r2, r3
    e812:	4041      	eorgt	r1, r0
    e814:	4048      	eorgt	r0, r1
    e816:	4041      	eorgt	r1, r0
    e818:	bfb8      	it	lt
    e81a:	425b      	neglt	r3, r3
    e81c:	2b19      	cmp	r3, #25
    e81e:	bf88      	it	hi
    e820:	4770      	bxhi	lr
    e822:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    e826:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    e82a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e82e:	bf18      	it	ne
    e830:	4240      	negne	r0, r0
    e832:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    e836:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    e83a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e83e:	bf18      	it	ne
    e840:	4249      	negne	r1, r1
    e842:	ea92 0f03 	teq	r2, r3
    e846:	d03f      	beq.n	e8c8 <__addsf3+0xd8>
    e848:	f1a2 0201 	sub.w	r2, r2, #1
    e84c:	fa41 fc03 	asr.w	ip, r1, r3
    e850:	eb10 000c 	adds.w	r0, r0, ip
    e854:	f1c3 0320 	rsb	r3, r3, #32
    e858:	fa01 f103 	lsl.w	r1, r1, r3
    e85c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    e860:	d502      	bpl.n	e868 <__addsf3+0x78>
    e862:	4249      	negs	r1, r1
    e864:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    e868:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e86c:	d313      	bcc.n	e896 <__addsf3+0xa6>
    e86e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    e872:	d306      	bcc.n	e882 <__addsf3+0x92>
    e874:	0840      	lsrs	r0, r0, #1
    e876:	ea4f 0131 	mov.w	r1, r1, rrx
    e87a:	f102 0201 	add.w	r2, r2, #1
    e87e:	2afe      	cmp	r2, #254	; 0xfe
    e880:	d251      	bcs.n	e926 <__addsf3+0x136>
    e882:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    e886:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    e88a:	bf08      	it	eq
    e88c:	f020 0001 	biceq.w	r0, r0, #1
    e890:	ea40 0003 	orr.w	r0, r0, r3
    e894:	4770      	bx	lr
    e896:	0049      	lsls	r1, r1, #1
    e898:	eb40 0000 	adc.w	r0, r0, r0
    e89c:	3a01      	subs	r2, #1
    e89e:	bf28      	it	cs
    e8a0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    e8a4:	d2ed      	bcs.n	e882 <__addsf3+0x92>
    e8a6:	fab0 fc80 	clz	ip, r0
    e8aa:	f1ac 0c08 	sub.w	ip, ip, #8
    e8ae:	ebb2 020c 	subs.w	r2, r2, ip
    e8b2:	fa00 f00c 	lsl.w	r0, r0, ip
    e8b6:	bfaa      	itet	ge
    e8b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    e8bc:	4252      	neglt	r2, r2
    e8be:	4318      	orrge	r0, r3
    e8c0:	bfbc      	itt	lt
    e8c2:	40d0      	lsrlt	r0, r2
    e8c4:	4318      	orrlt	r0, r3
    e8c6:	4770      	bx	lr
    e8c8:	f092 0f00 	teq	r2, #0
    e8cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    e8d0:	bf06      	itte	eq
    e8d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    e8d6:	3201      	addeq	r2, #1
    e8d8:	3b01      	subne	r3, #1
    e8da:	e7b5      	b.n	e848 <__addsf3+0x58>
    e8dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    e8e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    e8e4:	bf18      	it	ne
    e8e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    e8ea:	d021      	beq.n	e930 <__addsf3+0x140>
    e8ec:	ea92 0f03 	teq	r2, r3
    e8f0:	d004      	beq.n	e8fc <__addsf3+0x10c>
    e8f2:	f092 0f00 	teq	r2, #0
    e8f6:	bf08      	it	eq
    e8f8:	4608      	moveq	r0, r1
    e8fa:	4770      	bx	lr
    e8fc:	ea90 0f01 	teq	r0, r1
    e900:	bf1c      	itt	ne
    e902:	2000      	movne	r0, #0
    e904:	4770      	bxne	lr
    e906:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    e90a:	d104      	bne.n	e916 <__addsf3+0x126>
    e90c:	0040      	lsls	r0, r0, #1
    e90e:	bf28      	it	cs
    e910:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    e914:	4770      	bx	lr
    e916:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    e91a:	bf3c      	itt	cc
    e91c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    e920:	4770      	bxcc	lr
    e922:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    e926:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    e92a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    e92e:	4770      	bx	lr
    e930:	ea7f 6222 	mvns.w	r2, r2, asr #24
    e934:	bf16      	itet	ne
    e936:	4608      	movne	r0, r1
    e938:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    e93c:	4601      	movne	r1, r0
    e93e:	0242      	lsls	r2, r0, #9
    e940:	bf06      	itte	eq
    e942:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    e946:	ea90 0f01 	teqeq	r0, r1
    e94a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    e94e:	4770      	bx	lr

0000e950 <__aeabi_ui2f>:
    e950:	f04f 0300 	mov.w	r3, #0
    e954:	e004      	b.n	e960 <__aeabi_i2f+0x8>
    e956:	bf00      	nop

0000e958 <__aeabi_i2f>:
    e958:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    e95c:	bf48      	it	mi
    e95e:	4240      	negmi	r0, r0
    e960:	ea5f 0c00 	movs.w	ip, r0
    e964:	bf08      	it	eq
    e966:	4770      	bxeq	lr
    e968:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    e96c:	4601      	mov	r1, r0
    e96e:	f04f 0000 	mov.w	r0, #0
    e972:	e01c      	b.n	e9ae <__aeabi_l2f+0x2a>

0000e974 <__aeabi_ul2f>:
    e974:	ea50 0201 	orrs.w	r2, r0, r1
    e978:	bf08      	it	eq
    e97a:	4770      	bxeq	lr
    e97c:	f04f 0300 	mov.w	r3, #0
    e980:	e00a      	b.n	e998 <__aeabi_l2f+0x14>
    e982:	bf00      	nop

0000e984 <__aeabi_l2f>:
    e984:	ea50 0201 	orrs.w	r2, r0, r1
    e988:	bf08      	it	eq
    e98a:	4770      	bxeq	lr
    e98c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    e990:	d502      	bpl.n	e998 <__aeabi_l2f+0x14>
    e992:	4240      	negs	r0, r0
    e994:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e998:	ea5f 0c01 	movs.w	ip, r1
    e99c:	bf02      	ittt	eq
    e99e:	4684      	moveq	ip, r0
    e9a0:	4601      	moveq	r1, r0
    e9a2:	2000      	moveq	r0, #0
    e9a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    e9a8:	bf08      	it	eq
    e9aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    e9ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    e9b2:	fabc f28c 	clz	r2, ip
    e9b6:	3a08      	subs	r2, #8
    e9b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    e9bc:	db10      	blt.n	e9e0 <__aeabi_l2f+0x5c>
    e9be:	fa01 fc02 	lsl.w	ip, r1, r2
    e9c2:	4463      	add	r3, ip
    e9c4:	fa00 fc02 	lsl.w	ip, r0, r2
    e9c8:	f1c2 0220 	rsb	r2, r2, #32
    e9cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    e9d0:	fa20 f202 	lsr.w	r2, r0, r2
    e9d4:	eb43 0002 	adc.w	r0, r3, r2
    e9d8:	bf08      	it	eq
    e9da:	f020 0001 	biceq.w	r0, r0, #1
    e9de:	4770      	bx	lr
    e9e0:	f102 0220 	add.w	r2, r2, #32
    e9e4:	fa01 fc02 	lsl.w	ip, r1, r2
    e9e8:	f1c2 0220 	rsb	r2, r2, #32
    e9ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    e9f0:	fa21 f202 	lsr.w	r2, r1, r2
    e9f4:	eb43 0002 	adc.w	r0, r3, r2
    e9f8:	bf08      	it	eq
    e9fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    e9fe:	4770      	bx	lr

0000ea00 <__aeabi_fmul>:
    ea00:	f04f 0cff 	mov.w	ip, #255	; 0xff
    ea04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    ea08:	bf1e      	ittt	ne
    ea0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    ea0e:	ea92 0f0c 	teqne	r2, ip
    ea12:	ea93 0f0c 	teqne	r3, ip
    ea16:	d06f      	beq.n	eaf8 <__aeabi_fmul+0xf8>
    ea18:	441a      	add	r2, r3
    ea1a:	ea80 0c01 	eor.w	ip, r0, r1
    ea1e:	0240      	lsls	r0, r0, #9
    ea20:	bf18      	it	ne
    ea22:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    ea26:	d01e      	beq.n	ea66 <__aeabi_fmul+0x66>
    ea28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    ea2c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    ea30:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    ea34:	fba0 3101 	umull	r3, r1, r0, r1
    ea38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    ea3c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    ea40:	bf3e      	ittt	cc
    ea42:	0049      	lslcc	r1, r1, #1
    ea44:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    ea48:	005b      	lslcc	r3, r3, #1
    ea4a:	ea40 0001 	orr.w	r0, r0, r1
    ea4e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    ea52:	2afd      	cmp	r2, #253	; 0xfd
    ea54:	d81d      	bhi.n	ea92 <__aeabi_fmul+0x92>
    ea56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    ea5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ea5e:	bf08      	it	eq
    ea60:	f020 0001 	biceq.w	r0, r0, #1
    ea64:	4770      	bx	lr
    ea66:	f090 0f00 	teq	r0, #0
    ea6a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    ea6e:	bf08      	it	eq
    ea70:	0249      	lsleq	r1, r1, #9
    ea72:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    ea76:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    ea7a:	3a7f      	subs	r2, #127	; 0x7f
    ea7c:	bfc2      	ittt	gt
    ea7e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    ea82:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    ea86:	4770      	bxgt	lr
    ea88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    ea8c:	f04f 0300 	mov.w	r3, #0
    ea90:	3a01      	subs	r2, #1
    ea92:	dc5d      	bgt.n	eb50 <__aeabi_fmul+0x150>
    ea94:	f112 0f19 	cmn.w	r2, #25
    ea98:	bfdc      	itt	le
    ea9a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    ea9e:	4770      	bxle	lr
    eaa0:	f1c2 0200 	rsb	r2, r2, #0
    eaa4:	0041      	lsls	r1, r0, #1
    eaa6:	fa21 f102 	lsr.w	r1, r1, r2
    eaaa:	f1c2 0220 	rsb	r2, r2, #32
    eaae:	fa00 fc02 	lsl.w	ip, r0, r2
    eab2:	ea5f 0031 	movs.w	r0, r1, rrx
    eab6:	f140 0000 	adc.w	r0, r0, #0
    eaba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    eabe:	bf08      	it	eq
    eac0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    eac4:	4770      	bx	lr
    eac6:	f092 0f00 	teq	r2, #0
    eaca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    eace:	bf02      	ittt	eq
    ead0:	0040      	lsleq	r0, r0, #1
    ead2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    ead6:	3a01      	subeq	r2, #1
    ead8:	d0f9      	beq.n	eace <__aeabi_fmul+0xce>
    eada:	ea40 000c 	orr.w	r0, r0, ip
    eade:	f093 0f00 	teq	r3, #0
    eae2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    eae6:	bf02      	ittt	eq
    eae8:	0049      	lsleq	r1, r1, #1
    eaea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    eaee:	3b01      	subeq	r3, #1
    eaf0:	d0f9      	beq.n	eae6 <__aeabi_fmul+0xe6>
    eaf2:	ea41 010c 	orr.w	r1, r1, ip
    eaf6:	e78f      	b.n	ea18 <__aeabi_fmul+0x18>
    eaf8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    eafc:	ea92 0f0c 	teq	r2, ip
    eb00:	bf18      	it	ne
    eb02:	ea93 0f0c 	teqne	r3, ip
    eb06:	d00a      	beq.n	eb1e <__aeabi_fmul+0x11e>
    eb08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    eb0c:	bf18      	it	ne
    eb0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    eb12:	d1d8      	bne.n	eac6 <__aeabi_fmul+0xc6>
    eb14:	ea80 0001 	eor.w	r0, r0, r1
    eb18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    eb1c:	4770      	bx	lr
    eb1e:	f090 0f00 	teq	r0, #0
    eb22:	bf17      	itett	ne
    eb24:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    eb28:	4608      	moveq	r0, r1
    eb2a:	f091 0f00 	teqne	r1, #0
    eb2e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    eb32:	d014      	beq.n	eb5e <__aeabi_fmul+0x15e>
    eb34:	ea92 0f0c 	teq	r2, ip
    eb38:	d101      	bne.n	eb3e <__aeabi_fmul+0x13e>
    eb3a:	0242      	lsls	r2, r0, #9
    eb3c:	d10f      	bne.n	eb5e <__aeabi_fmul+0x15e>
    eb3e:	ea93 0f0c 	teq	r3, ip
    eb42:	d103      	bne.n	eb4c <__aeabi_fmul+0x14c>
    eb44:	024b      	lsls	r3, r1, #9
    eb46:	bf18      	it	ne
    eb48:	4608      	movne	r0, r1
    eb4a:	d108      	bne.n	eb5e <__aeabi_fmul+0x15e>
    eb4c:	ea80 0001 	eor.w	r0, r0, r1
    eb50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    eb54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    eb58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    eb5c:	4770      	bx	lr
    eb5e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    eb62:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    eb66:	4770      	bx	lr

0000eb68 <__aeabi_fdiv>:
    eb68:	f04f 0cff 	mov.w	ip, #255	; 0xff
    eb6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    eb70:	bf1e      	ittt	ne
    eb72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    eb76:	ea92 0f0c 	teqne	r2, ip
    eb7a:	ea93 0f0c 	teqne	r3, ip
    eb7e:	d069      	beq.n	ec54 <__aeabi_fdiv+0xec>
    eb80:	eba2 0203 	sub.w	r2, r2, r3
    eb84:	ea80 0c01 	eor.w	ip, r0, r1
    eb88:	0249      	lsls	r1, r1, #9
    eb8a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    eb8e:	d037      	beq.n	ec00 <__aeabi_fdiv+0x98>
    eb90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    eb94:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    eb98:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    eb9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    eba0:	428b      	cmp	r3, r1
    eba2:	bf38      	it	cc
    eba4:	005b      	lslcc	r3, r3, #1
    eba6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    ebaa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    ebae:	428b      	cmp	r3, r1
    ebb0:	bf24      	itt	cs
    ebb2:	1a5b      	subcs	r3, r3, r1
    ebb4:	ea40 000c 	orrcs.w	r0, r0, ip
    ebb8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    ebbc:	bf24      	itt	cs
    ebbe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    ebc2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    ebc6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    ebca:	bf24      	itt	cs
    ebcc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    ebd0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    ebd4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    ebd8:	bf24      	itt	cs
    ebda:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    ebde:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    ebe2:	011b      	lsls	r3, r3, #4
    ebe4:	bf18      	it	ne
    ebe6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    ebea:	d1e0      	bne.n	ebae <__aeabi_fdiv+0x46>
    ebec:	2afd      	cmp	r2, #253	; 0xfd
    ebee:	f63f af50 	bhi.w	ea92 <__aeabi_fmul+0x92>
    ebf2:	428b      	cmp	r3, r1
    ebf4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ebf8:	bf08      	it	eq
    ebfa:	f020 0001 	biceq.w	r0, r0, #1
    ebfe:	4770      	bx	lr
    ec00:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    ec04:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    ec08:	327f      	adds	r2, #127	; 0x7f
    ec0a:	bfc2      	ittt	gt
    ec0c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    ec10:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    ec14:	4770      	bxgt	lr
    ec16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    ec1a:	f04f 0300 	mov.w	r3, #0
    ec1e:	3a01      	subs	r2, #1
    ec20:	e737      	b.n	ea92 <__aeabi_fmul+0x92>
    ec22:	f092 0f00 	teq	r2, #0
    ec26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    ec2a:	bf02      	ittt	eq
    ec2c:	0040      	lsleq	r0, r0, #1
    ec2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    ec32:	3a01      	subeq	r2, #1
    ec34:	d0f9      	beq.n	ec2a <__aeabi_fdiv+0xc2>
    ec36:	ea40 000c 	orr.w	r0, r0, ip
    ec3a:	f093 0f00 	teq	r3, #0
    ec3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    ec42:	bf02      	ittt	eq
    ec44:	0049      	lsleq	r1, r1, #1
    ec46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    ec4a:	3b01      	subeq	r3, #1
    ec4c:	d0f9      	beq.n	ec42 <__aeabi_fdiv+0xda>
    ec4e:	ea41 010c 	orr.w	r1, r1, ip
    ec52:	e795      	b.n	eb80 <__aeabi_fdiv+0x18>
    ec54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    ec58:	ea92 0f0c 	teq	r2, ip
    ec5c:	d108      	bne.n	ec70 <__aeabi_fdiv+0x108>
    ec5e:	0242      	lsls	r2, r0, #9
    ec60:	f47f af7d 	bne.w	eb5e <__aeabi_fmul+0x15e>
    ec64:	ea93 0f0c 	teq	r3, ip
    ec68:	f47f af70 	bne.w	eb4c <__aeabi_fmul+0x14c>
    ec6c:	4608      	mov	r0, r1
    ec6e:	e776      	b.n	eb5e <__aeabi_fmul+0x15e>
    ec70:	ea93 0f0c 	teq	r3, ip
    ec74:	d104      	bne.n	ec80 <__aeabi_fdiv+0x118>
    ec76:	024b      	lsls	r3, r1, #9
    ec78:	f43f af4c 	beq.w	eb14 <__aeabi_fmul+0x114>
    ec7c:	4608      	mov	r0, r1
    ec7e:	e76e      	b.n	eb5e <__aeabi_fmul+0x15e>
    ec80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    ec84:	bf18      	it	ne
    ec86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    ec8a:	d1ca      	bne.n	ec22 <__aeabi_fdiv+0xba>
    ec8c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    ec90:	f47f af5c 	bne.w	eb4c <__aeabi_fmul+0x14c>
    ec94:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    ec98:	f47f af3c 	bne.w	eb14 <__aeabi_fmul+0x114>
    ec9c:	e75f      	b.n	eb5e <__aeabi_fmul+0x15e>
    ec9e:	bf00      	nop

0000eca0 <__gesf2>:
    eca0:	f04f 3cff 	mov.w	ip, #4294967295
    eca4:	e006      	b.n	ecb4 <__cmpsf2+0x4>
    eca6:	bf00      	nop

0000eca8 <__lesf2>:
    eca8:	f04f 0c01 	mov.w	ip, #1
    ecac:	e002      	b.n	ecb4 <__cmpsf2+0x4>
    ecae:	bf00      	nop

0000ecb0 <__cmpsf2>:
    ecb0:	f04f 0c01 	mov.w	ip, #1
    ecb4:	f84d cd04 	str.w	ip, [sp, #-4]!
    ecb8:	ea4f 0240 	mov.w	r2, r0, lsl #1
    ecbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    ecc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    ecc4:	bf18      	it	ne
    ecc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    ecca:	d011      	beq.n	ecf0 <__cmpsf2+0x40>
    eccc:	b001      	add	sp, #4
    ecce:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    ecd2:	bf18      	it	ne
    ecd4:	ea90 0f01 	teqne	r0, r1
    ecd8:	bf58      	it	pl
    ecda:	ebb2 0003 	subspl.w	r0, r2, r3
    ecde:	bf88      	it	hi
    ece0:	17c8      	asrhi	r0, r1, #31
    ece2:	bf38      	it	cc
    ece4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    ece8:	bf18      	it	ne
    ecea:	f040 0001 	orrne.w	r0, r0, #1
    ecee:	4770      	bx	lr
    ecf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    ecf4:	d102      	bne.n	ecfc <__cmpsf2+0x4c>
    ecf6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    ecfa:	d105      	bne.n	ed08 <__cmpsf2+0x58>
    ecfc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    ed00:	d1e4      	bne.n	eccc <__cmpsf2+0x1c>
    ed02:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    ed06:	d0e1      	beq.n	eccc <__cmpsf2+0x1c>
    ed08:	f85d 0b04 	ldr.w	r0, [sp], #4
    ed0c:	4770      	bx	lr
    ed0e:	bf00      	nop

0000ed10 <__aeabi_cfrcmple>:
    ed10:	4684      	mov	ip, r0
    ed12:	4608      	mov	r0, r1
    ed14:	4661      	mov	r1, ip
    ed16:	e7ff      	b.n	ed18 <__aeabi_cfcmpeq>

0000ed18 <__aeabi_cfcmpeq>:
    ed18:	b50f      	push	{r0, r1, r2, r3, lr}
    ed1a:	f7ff ffc9 	bl	ecb0 <__cmpsf2>
    ed1e:	2800      	cmp	r0, #0
    ed20:	bf48      	it	mi
    ed22:	f110 0f00 	cmnmi.w	r0, #0
    ed26:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000ed28 <__aeabi_fcmpeq>:
    ed28:	f84d ed08 	str.w	lr, [sp, #-8]!
    ed2c:	f7ff fff4 	bl	ed18 <__aeabi_cfcmpeq>
    ed30:	bf0c      	ite	eq
    ed32:	2001      	moveq	r0, #1
    ed34:	2000      	movne	r0, #0
    ed36:	f85d fb08 	ldr.w	pc, [sp], #8
    ed3a:	bf00      	nop

0000ed3c <__aeabi_fcmplt>:
    ed3c:	f84d ed08 	str.w	lr, [sp, #-8]!
    ed40:	f7ff ffea 	bl	ed18 <__aeabi_cfcmpeq>
    ed44:	bf34      	ite	cc
    ed46:	2001      	movcc	r0, #1
    ed48:	2000      	movcs	r0, #0
    ed4a:	f85d fb08 	ldr.w	pc, [sp], #8
    ed4e:	bf00      	nop

0000ed50 <__aeabi_fcmple>:
    ed50:	f84d ed08 	str.w	lr, [sp, #-8]!
    ed54:	f7ff ffe0 	bl	ed18 <__aeabi_cfcmpeq>
    ed58:	bf94      	ite	ls
    ed5a:	2001      	movls	r0, #1
    ed5c:	2000      	movhi	r0, #0
    ed5e:	f85d fb08 	ldr.w	pc, [sp], #8
    ed62:	bf00      	nop

0000ed64 <__aeabi_fcmpge>:
    ed64:	f84d ed08 	str.w	lr, [sp, #-8]!
    ed68:	f7ff ffd2 	bl	ed10 <__aeabi_cfrcmple>
    ed6c:	bf94      	ite	ls
    ed6e:	2001      	movls	r0, #1
    ed70:	2000      	movhi	r0, #0
    ed72:	f85d fb08 	ldr.w	pc, [sp], #8
    ed76:	bf00      	nop

0000ed78 <__aeabi_fcmpgt>:
    ed78:	f84d ed08 	str.w	lr, [sp, #-8]!
    ed7c:	f7ff ffc8 	bl	ed10 <__aeabi_cfrcmple>
    ed80:	bf34      	ite	cc
    ed82:	2001      	movcc	r0, #1
    ed84:	2000      	movcs	r0, #0
    ed86:	f85d fb08 	ldr.w	pc, [sp], #8
    ed8a:	bf00      	nop

0000ed8c <__aeabi_fcmpun>:
    ed8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    ed90:	ea4f 0341 	mov.w	r3, r1, lsl #1
    ed94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    ed98:	d102      	bne.n	eda0 <__aeabi_fcmpun+0x14>
    ed9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    ed9e:	d108      	bne.n	edb2 <__aeabi_fcmpun+0x26>
    eda0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    eda4:	d102      	bne.n	edac <__aeabi_fcmpun+0x20>
    eda6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    edaa:	d102      	bne.n	edb2 <__aeabi_fcmpun+0x26>
    edac:	f04f 0000 	mov.w	r0, #0
    edb0:	4770      	bx	lr
    edb2:	f04f 0001 	mov.w	r0, #1
    edb6:	4770      	bx	lr

0000edb8 <__aeabi_f2iz>:
    edb8:	ea4f 0240 	mov.w	r2, r0, lsl #1
    edbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    edc0:	d30f      	bcc.n	ede2 <__aeabi_f2iz+0x2a>
    edc2:	f04f 039e 	mov.w	r3, #158	; 0x9e
    edc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    edca:	d90d      	bls.n	ede8 <__aeabi_f2iz+0x30>
    edcc:	ea4f 2300 	mov.w	r3, r0, lsl #8
    edd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    edd4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    edd8:	fa23 f002 	lsr.w	r0, r3, r2
    eddc:	bf18      	it	ne
    edde:	4240      	negne	r0, r0
    ede0:	4770      	bx	lr
    ede2:	f04f 0000 	mov.w	r0, #0
    ede6:	4770      	bx	lr
    ede8:	f112 0f61 	cmn.w	r2, #97	; 0x61
    edec:	d101      	bne.n	edf2 <__aeabi_f2iz+0x3a>
    edee:	0242      	lsls	r2, r0, #9
    edf0:	d105      	bne.n	edfe <__aeabi_f2iz+0x46>
    edf2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    edf6:	bf08      	it	eq
    edf8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    edfc:	4770      	bx	lr
    edfe:	f04f 0000 	mov.w	r0, #0
    ee02:	4770      	bx	lr

0000ee04 <__aeabi_f2uiz>:
    ee04:	0042      	lsls	r2, r0, #1
    ee06:	d20e      	bcs.n	ee26 <__aeabi_f2uiz+0x22>
    ee08:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    ee0c:	d30b      	bcc.n	ee26 <__aeabi_f2uiz+0x22>
    ee0e:	f04f 039e 	mov.w	r3, #158	; 0x9e
    ee12:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    ee16:	d409      	bmi.n	ee2c <__aeabi_f2uiz+0x28>
    ee18:	ea4f 2300 	mov.w	r3, r0, lsl #8
    ee1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ee20:	fa23 f002 	lsr.w	r0, r3, r2
    ee24:	4770      	bx	lr
    ee26:	f04f 0000 	mov.w	r0, #0
    ee2a:	4770      	bx	lr
    ee2c:	f112 0f61 	cmn.w	r2, #97	; 0x61
    ee30:	d101      	bne.n	ee36 <__aeabi_f2uiz+0x32>
    ee32:	0242      	lsls	r2, r0, #9
    ee34:	d102      	bne.n	ee3c <__aeabi_f2uiz+0x38>
    ee36:	f04f 30ff 	mov.w	r0, #4294967295
    ee3a:	4770      	bx	lr
    ee3c:	f04f 0000 	mov.w	r0, #0
    ee40:	4770      	bx	lr
    ee42:	bf00      	nop

0000ee44 <malloc>:
    ee44:	4b02      	ldr	r3, [pc, #8]	; (ee50 <malloc+0xc>)
    ee46:	4601      	mov	r1, r0
    ee48:	6818      	ldr	r0, [r3, #0]
    ee4a:	f000 b803 	b.w	ee54 <_malloc_r>
    ee4e:	bf00      	nop
    ee50:	1fff9168 	.word	0x1fff9168

0000ee54 <_malloc_r>:
    ee54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee58:	f101 060b 	add.w	r6, r1, #11
    ee5c:	2e16      	cmp	r6, #22
    ee5e:	b083      	sub	sp, #12
    ee60:	4604      	mov	r4, r0
    ee62:	d824      	bhi.n	eeae <_malloc_r+0x5a>
    ee64:	2910      	cmp	r1, #16
    ee66:	f200 80ba 	bhi.w	efde <_malloc_r+0x18a>
    ee6a:	f000 faa3 	bl	f3b4 <__malloc_lock>
    ee6e:	2610      	movs	r6, #16
    ee70:	2218      	movs	r2, #24
    ee72:	2002      	movs	r0, #2
    ee74:	4fb5      	ldr	r7, [pc, #724]	; (f14c <_malloc_r+0x2f8>)
    ee76:	443a      	add	r2, r7
    ee78:	f1a2 0108 	sub.w	r1, r2, #8
    ee7c:	6853      	ldr	r3, [r2, #4]
    ee7e:	428b      	cmp	r3, r1
    ee80:	f000 80ba 	beq.w	eff8 <_malloc_r+0x1a4>
    ee84:	685a      	ldr	r2, [r3, #4]
    ee86:	68d9      	ldr	r1, [r3, #12]
    ee88:	f022 0203 	bic.w	r2, r2, #3
    ee8c:	441a      	add	r2, r3
    ee8e:	689d      	ldr	r5, [r3, #8]
    ee90:	60e9      	str	r1, [r5, #12]
    ee92:	608d      	str	r5, [r1, #8]
    ee94:	6851      	ldr	r1, [r2, #4]
    ee96:	f041 0101 	orr.w	r1, r1, #1
    ee9a:	4620      	mov	r0, r4
    ee9c:	6051      	str	r1, [r2, #4]
    ee9e:	f103 0508 	add.w	r5, r3, #8
    eea2:	f000 fa8d 	bl	f3c0 <__malloc_unlock>
    eea6:	4628      	mov	r0, r5
    eea8:	b003      	add	sp, #12
    eeaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eeae:	f036 0607 	bics.w	r6, r6, #7
    eeb2:	f100 8094 	bmi.w	efde <_malloc_r+0x18a>
    eeb6:	42b1      	cmp	r1, r6
    eeb8:	f200 8091 	bhi.w	efde <_malloc_r+0x18a>
    eebc:	f000 fa7a 	bl	f3b4 <__malloc_lock>
    eec0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    eec4:	f0c0 819a 	bcc.w	f1fc <_malloc_r+0x3a8>
    eec8:	0a73      	lsrs	r3, r6, #9
    eeca:	f000 808f 	beq.w	efec <_malloc_r+0x198>
    eece:	2b04      	cmp	r3, #4
    eed0:	f200 816f 	bhi.w	f1b2 <_malloc_r+0x35e>
    eed4:	09b3      	lsrs	r3, r6, #6
    eed6:	f103 0039 	add.w	r0, r3, #57	; 0x39
    eeda:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    eede:	00c3      	lsls	r3, r0, #3
    eee0:	4f9a      	ldr	r7, [pc, #616]	; (f14c <_malloc_r+0x2f8>)
    eee2:	443b      	add	r3, r7
    eee4:	f1a3 0508 	sub.w	r5, r3, #8
    eee8:	685b      	ldr	r3, [r3, #4]
    eeea:	429d      	cmp	r5, r3
    eeec:	d106      	bne.n	eefc <_malloc_r+0xa8>
    eeee:	e00c      	b.n	ef0a <_malloc_r+0xb6>
    eef0:	2900      	cmp	r1, #0
    eef2:	f280 8127 	bge.w	f144 <_malloc_r+0x2f0>
    eef6:	68db      	ldr	r3, [r3, #12]
    eef8:	429d      	cmp	r5, r3
    eefa:	d006      	beq.n	ef0a <_malloc_r+0xb6>
    eefc:	685a      	ldr	r2, [r3, #4]
    eefe:	f022 0203 	bic.w	r2, r2, #3
    ef02:	1b91      	subs	r1, r2, r6
    ef04:	290f      	cmp	r1, #15
    ef06:	ddf3      	ble.n	eef0 <_malloc_r+0x9c>
    ef08:	4660      	mov	r0, ip
    ef0a:	693d      	ldr	r5, [r7, #16]
    ef0c:	f8df c240 	ldr.w	ip, [pc, #576]	; f150 <_malloc_r+0x2fc>
    ef10:	4565      	cmp	r5, ip
    ef12:	d07c      	beq.n	f00e <_malloc_r+0x1ba>
    ef14:	686a      	ldr	r2, [r5, #4]
    ef16:	f022 0203 	bic.w	r2, r2, #3
    ef1a:	1b93      	subs	r3, r2, r6
    ef1c:	2b0f      	cmp	r3, #15
    ef1e:	f300 817b 	bgt.w	f218 <_malloc_r+0x3c4>
    ef22:	2b00      	cmp	r3, #0
    ef24:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    ef28:	f280 816c 	bge.w	f204 <_malloc_r+0x3b0>
    ef2c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    ef30:	f080 811a 	bcs.w	f168 <_malloc_r+0x314>
    ef34:	08d3      	lsrs	r3, r2, #3
    ef36:	6879      	ldr	r1, [r7, #4]
    ef38:	3301      	adds	r3, #1
    ef3a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    ef3e:	2201      	movs	r2, #1
    ef40:	fa02 f20e 	lsl.w	r2, r2, lr
    ef44:	430a      	orrs	r2, r1
    ef46:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    ef4a:	f8c5 e008 	str.w	lr, [r5, #8]
    ef4e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    ef52:	3908      	subs	r1, #8
    ef54:	60e9      	str	r1, [r5, #12]
    ef56:	607a      	str	r2, [r7, #4]
    ef58:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    ef5c:	f8ce 500c 	str.w	r5, [lr, #12]
    ef60:	1083      	asrs	r3, r0, #2
    ef62:	2101      	movs	r1, #1
    ef64:	4099      	lsls	r1, r3
    ef66:	4291      	cmp	r1, r2
    ef68:	d857      	bhi.n	f01a <_malloc_r+0x1c6>
    ef6a:	4211      	tst	r1, r2
    ef6c:	d106      	bne.n	ef7c <_malloc_r+0x128>
    ef6e:	f020 0003 	bic.w	r0, r0, #3
    ef72:	0049      	lsls	r1, r1, #1
    ef74:	4211      	tst	r1, r2
    ef76:	f100 0004 	add.w	r0, r0, #4
    ef7a:	d0fa      	beq.n	ef72 <_malloc_r+0x11e>
    ef7c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    ef80:	464d      	mov	r5, r9
    ef82:	4686      	mov	lr, r0
    ef84:	f8d5 800c 	ldr.w	r8, [r5, #12]
    ef88:	4545      	cmp	r5, r8
    ef8a:	d108      	bne.n	ef9e <_malloc_r+0x14a>
    ef8c:	e11d      	b.n	f1ca <_malloc_r+0x376>
    ef8e:	2b00      	cmp	r3, #0
    ef90:	f280 8124 	bge.w	f1dc <_malloc_r+0x388>
    ef94:	f8d8 800c 	ldr.w	r8, [r8, #12]
    ef98:	4545      	cmp	r5, r8
    ef9a:	f000 8116 	beq.w	f1ca <_malloc_r+0x376>
    ef9e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    efa2:	f022 0203 	bic.w	r2, r2, #3
    efa6:	1b93      	subs	r3, r2, r6
    efa8:	2b0f      	cmp	r3, #15
    efaa:	ddf0      	ble.n	ef8e <_malloc_r+0x13a>
    efac:	4620      	mov	r0, r4
    efae:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    efb2:	eb08 0106 	add.w	r1, r8, r6
    efb6:	f046 0601 	orr.w	r6, r6, #1
    efba:	f8c8 6004 	str.w	r6, [r8, #4]
    efbe:	60ec      	str	r4, [r5, #12]
    efc0:	60a5      	str	r5, [r4, #8]
    efc2:	f043 0401 	orr.w	r4, r3, #1
    efc6:	e9c7 1104 	strd	r1, r1, [r7, #16]
    efca:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    efce:	604c      	str	r4, [r1, #4]
    efd0:	f848 3002 	str.w	r3, [r8, r2]
    efd4:	f000 f9f4 	bl	f3c0 <__malloc_unlock>
    efd8:	f108 0508 	add.w	r5, r8, #8
    efdc:	e002      	b.n	efe4 <_malloc_r+0x190>
    efde:	230c      	movs	r3, #12
    efe0:	6023      	str	r3, [r4, #0]
    efe2:	2500      	movs	r5, #0
    efe4:	4628      	mov	r0, r5
    efe6:	b003      	add	sp, #12
    efe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efec:	f44f 7300 	mov.w	r3, #512	; 0x200
    eff0:	2040      	movs	r0, #64	; 0x40
    eff2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    eff6:	e773      	b.n	eee0 <_malloc_r+0x8c>
    eff8:	68d3      	ldr	r3, [r2, #12]
    effa:	429a      	cmp	r2, r3
    effc:	bf08      	it	eq
    effe:	3002      	addeq	r0, #2
    f000:	f47f af40 	bne.w	ee84 <_malloc_r+0x30>
    f004:	693d      	ldr	r5, [r7, #16]
    f006:	f8df c148 	ldr.w	ip, [pc, #328]	; f150 <_malloc_r+0x2fc>
    f00a:	4565      	cmp	r5, ip
    f00c:	d182      	bne.n	ef14 <_malloc_r+0xc0>
    f00e:	687a      	ldr	r2, [r7, #4]
    f010:	1083      	asrs	r3, r0, #2
    f012:	2101      	movs	r1, #1
    f014:	4099      	lsls	r1, r3
    f016:	4291      	cmp	r1, r2
    f018:	d9a7      	bls.n	ef6a <_malloc_r+0x116>
    f01a:	68bd      	ldr	r5, [r7, #8]
    f01c:	686b      	ldr	r3, [r5, #4]
    f01e:	f023 0903 	bic.w	r9, r3, #3
    f022:	454e      	cmp	r6, r9
    f024:	d803      	bhi.n	f02e <_malloc_r+0x1da>
    f026:	eba9 0306 	sub.w	r3, r9, r6
    f02a:	2b0f      	cmp	r3, #15
    f02c:	dc7a      	bgt.n	f124 <_malloc_r+0x2d0>
    f02e:	f8df b124 	ldr.w	fp, [pc, #292]	; f154 <_malloc_r+0x300>
    f032:	4b49      	ldr	r3, [pc, #292]	; (f158 <_malloc_r+0x304>)
    f034:	f8db 2000 	ldr.w	r2, [fp]
    f038:	681b      	ldr	r3, [r3, #0]
    f03a:	3201      	adds	r2, #1
    f03c:	4433      	add	r3, r6
    f03e:	eb05 0a09 	add.w	sl, r5, r9
    f042:	f000 8133 	beq.w	f2ac <_malloc_r+0x458>
    f046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    f04a:	330f      	adds	r3, #15
    f04c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    f050:	f028 080f 	bic.w	r8, r8, #15
    f054:	4641      	mov	r1, r8
    f056:	4620      	mov	r0, r4
    f058:	f000 fe32 	bl	fcc0 <_sbrk_r>
    f05c:	1c41      	adds	r1, r0, #1
    f05e:	4602      	mov	r2, r0
    f060:	f000 80f3 	beq.w	f24a <_malloc_r+0x3f6>
    f064:	4582      	cmp	sl, r0
    f066:	f200 80ee 	bhi.w	f246 <_malloc_r+0x3f2>
    f06a:	4b3c      	ldr	r3, [pc, #240]	; (f15c <_malloc_r+0x308>)
    f06c:	6819      	ldr	r1, [r3, #0]
    f06e:	4441      	add	r1, r8
    f070:	6019      	str	r1, [r3, #0]
    f072:	4608      	mov	r0, r1
    f074:	f000 814e 	beq.w	f314 <_malloc_r+0x4c0>
    f078:	f8db 1000 	ldr.w	r1, [fp]
    f07c:	9301      	str	r3, [sp, #4]
    f07e:	3101      	adds	r1, #1
    f080:	bf1b      	ittet	ne
    f082:	eba2 010a 	subne.w	r1, r2, sl
    f086:	1809      	addne	r1, r1, r0
    f088:	f8cb 2000 	streq.w	r2, [fp]
    f08c:	6019      	strne	r1, [r3, #0]
    f08e:	f012 0b07 	ands.w	fp, r2, #7
    f092:	f000 8117 	beq.w	f2c4 <_malloc_r+0x470>
    f096:	f1cb 0108 	rsb	r1, fp, #8
    f09a:	440a      	add	r2, r1
    f09c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    f0a0:	4490      	add	r8, r2
    f0a2:	3108      	adds	r1, #8
    f0a4:	eba1 0108 	sub.w	r1, r1, r8
    f0a8:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    f0ac:	4651      	mov	r1, sl
    f0ae:	4620      	mov	r0, r4
    f0b0:	9200      	str	r2, [sp, #0]
    f0b2:	f000 fe05 	bl	fcc0 <_sbrk_r>
    f0b6:	1c42      	adds	r2, r0, #1
    f0b8:	e9dd 2300 	ldrd	r2, r3, [sp]
    f0bc:	f000 814f 	beq.w	f35e <_malloc_r+0x50a>
    f0c0:	1a80      	subs	r0, r0, r2
    f0c2:	eb00 080a 	add.w	r8, r0, sl
    f0c6:	6819      	ldr	r1, [r3, #0]
    f0c8:	60ba      	str	r2, [r7, #8]
    f0ca:	f048 0001 	orr.w	r0, r8, #1
    f0ce:	4451      	add	r1, sl
    f0d0:	42bd      	cmp	r5, r7
    f0d2:	6050      	str	r0, [r2, #4]
    f0d4:	6019      	str	r1, [r3, #0]
    f0d6:	f000 8129 	beq.w	f32c <_malloc_r+0x4d8>
    f0da:	f1b9 0f0f 	cmp.w	r9, #15
    f0de:	f240 8127 	bls.w	f330 <_malloc_r+0x4dc>
    f0e2:	6868      	ldr	r0, [r5, #4]
    f0e4:	f1a9 0c0c 	sub.w	ip, r9, #12
    f0e8:	f02c 0c07 	bic.w	ip, ip, #7
    f0ec:	f000 0001 	and.w	r0, r0, #1
    f0f0:	ea40 000c 	orr.w	r0, r0, ip
    f0f4:	6068      	str	r0, [r5, #4]
    f0f6:	f04f 0e05 	mov.w	lr, #5
    f0fa:	eb05 000c 	add.w	r0, r5, ip
    f0fe:	f1bc 0f0f 	cmp.w	ip, #15
    f102:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    f106:	f200 8132 	bhi.w	f36e <_malloc_r+0x51a>
    f10a:	6850      	ldr	r0, [r2, #4]
    f10c:	4615      	mov	r5, r2
    f10e:	4b14      	ldr	r3, [pc, #80]	; (f160 <_malloc_r+0x30c>)
    f110:	681a      	ldr	r2, [r3, #0]
    f112:	428a      	cmp	r2, r1
    f114:	bf38      	it	cc
    f116:	6019      	strcc	r1, [r3, #0]
    f118:	4b12      	ldr	r3, [pc, #72]	; (f164 <_malloc_r+0x310>)
    f11a:	681a      	ldr	r2, [r3, #0]
    f11c:	428a      	cmp	r2, r1
    f11e:	bf38      	it	cc
    f120:	6019      	strcc	r1, [r3, #0]
    f122:	e094      	b.n	f24e <_malloc_r+0x3fa>
    f124:	19aa      	adds	r2, r5, r6
    f126:	f043 0301 	orr.w	r3, r3, #1
    f12a:	f046 0601 	orr.w	r6, r6, #1
    f12e:	606e      	str	r6, [r5, #4]
    f130:	4620      	mov	r0, r4
    f132:	60ba      	str	r2, [r7, #8]
    f134:	6053      	str	r3, [r2, #4]
    f136:	f000 f943 	bl	f3c0 <__malloc_unlock>
    f13a:	3508      	adds	r5, #8
    f13c:	4628      	mov	r0, r5
    f13e:	b003      	add	sp, #12
    f140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f144:	68d9      	ldr	r1, [r3, #12]
    f146:	441a      	add	r2, r3
    f148:	e6a1      	b.n	ee8e <_malloc_r+0x3a>
    f14a:	bf00      	nop
    f14c:	1fff8abc 	.word	0x1fff8abc
    f150:	1fff8ac4 	.word	0x1fff8ac4
    f154:	1fff8ec4 	.word	0x1fff8ec4
    f158:	1fffbca0 	.word	0x1fffbca0
    f15c:	1fffbc70 	.word	0x1fffbc70
    f160:	1fffbc98 	.word	0x1fffbc98
    f164:	1fffbc9c 	.word	0x1fffbc9c
    f168:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    f16c:	ea4f 2352 	mov.w	r3, r2, lsr #9
    f170:	d363      	bcc.n	f23a <_malloc_r+0x3e6>
    f172:	2b14      	cmp	r3, #20
    f174:	f200 80b7 	bhi.w	f2e6 <_malloc_r+0x492>
    f178:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    f17c:	00c9      	lsls	r1, r1, #3
    f17e:	335b      	adds	r3, #91	; 0x5b
    f180:	eb07 0e01 	add.w	lr, r7, r1
    f184:	5879      	ldr	r1, [r7, r1]
    f186:	f1ae 0e08 	sub.w	lr, lr, #8
    f18a:	458e      	cmp	lr, r1
    f18c:	f000 8091 	beq.w	f2b2 <_malloc_r+0x45e>
    f190:	684b      	ldr	r3, [r1, #4]
    f192:	f023 0303 	bic.w	r3, r3, #3
    f196:	4293      	cmp	r3, r2
    f198:	d902      	bls.n	f1a0 <_malloc_r+0x34c>
    f19a:	6889      	ldr	r1, [r1, #8]
    f19c:	458e      	cmp	lr, r1
    f19e:	d1f7      	bne.n	f190 <_malloc_r+0x33c>
    f1a0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    f1a4:	687a      	ldr	r2, [r7, #4]
    f1a6:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    f1aa:	f8ce 5008 	str.w	r5, [lr, #8]
    f1ae:	60cd      	str	r5, [r1, #12]
    f1b0:	e6d6      	b.n	ef60 <_malloc_r+0x10c>
    f1b2:	2b14      	cmp	r3, #20
    f1b4:	d959      	bls.n	f26a <_malloc_r+0x416>
    f1b6:	2b54      	cmp	r3, #84	; 0x54
    f1b8:	f200 809d 	bhi.w	f2f6 <_malloc_r+0x4a2>
    f1bc:	0b33      	lsrs	r3, r6, #12
    f1be:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    f1c2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    f1c6:	00c3      	lsls	r3, r0, #3
    f1c8:	e68a      	b.n	eee0 <_malloc_r+0x8c>
    f1ca:	f10e 0e01 	add.w	lr, lr, #1
    f1ce:	f01e 0f03 	tst.w	lr, #3
    f1d2:	f105 0508 	add.w	r5, r5, #8
    f1d6:	f47f aed5 	bne.w	ef84 <_malloc_r+0x130>
    f1da:	e051      	b.n	f280 <_malloc_r+0x42c>
    f1dc:	4442      	add	r2, r8
    f1de:	4645      	mov	r5, r8
    f1e0:	6853      	ldr	r3, [r2, #4]
    f1e2:	f8d8 100c 	ldr.w	r1, [r8, #12]
    f1e6:	f043 0301 	orr.w	r3, r3, #1
    f1ea:	6053      	str	r3, [r2, #4]
    f1ec:	f855 3f08 	ldr.w	r3, [r5, #8]!
    f1f0:	4620      	mov	r0, r4
    f1f2:	60d9      	str	r1, [r3, #12]
    f1f4:	608b      	str	r3, [r1, #8]
    f1f6:	f000 f8e3 	bl	f3c0 <__malloc_unlock>
    f1fa:	e6f3      	b.n	efe4 <_malloc_r+0x190>
    f1fc:	08f0      	lsrs	r0, r6, #3
    f1fe:	f106 0208 	add.w	r2, r6, #8
    f202:	e637      	b.n	ee74 <_malloc_r+0x20>
    f204:	442a      	add	r2, r5
    f206:	4620      	mov	r0, r4
    f208:	6853      	ldr	r3, [r2, #4]
    f20a:	f043 0301 	orr.w	r3, r3, #1
    f20e:	6053      	str	r3, [r2, #4]
    f210:	3508      	adds	r5, #8
    f212:	f000 f8d5 	bl	f3c0 <__malloc_unlock>
    f216:	e6e5      	b.n	efe4 <_malloc_r+0x190>
    f218:	19a9      	adds	r1, r5, r6
    f21a:	4620      	mov	r0, r4
    f21c:	f046 0601 	orr.w	r6, r6, #1
    f220:	f043 0401 	orr.w	r4, r3, #1
    f224:	606e      	str	r6, [r5, #4]
    f226:	e9c7 1104 	strd	r1, r1, [r7, #16]
    f22a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    f22e:	604c      	str	r4, [r1, #4]
    f230:	50ab      	str	r3, [r5, r2]
    f232:	f000 f8c5 	bl	f3c0 <__malloc_unlock>
    f236:	3508      	adds	r5, #8
    f238:	e6d4      	b.n	efe4 <_malloc_r+0x190>
    f23a:	0993      	lsrs	r3, r2, #6
    f23c:	f103 0139 	add.w	r1, r3, #57	; 0x39
    f240:	00c9      	lsls	r1, r1, #3
    f242:	3338      	adds	r3, #56	; 0x38
    f244:	e79c      	b.n	f180 <_malloc_r+0x32c>
    f246:	42bd      	cmp	r5, r7
    f248:	d05f      	beq.n	f30a <_malloc_r+0x4b6>
    f24a:	68bd      	ldr	r5, [r7, #8]
    f24c:	6868      	ldr	r0, [r5, #4]
    f24e:	f020 0803 	bic.w	r8, r0, #3
    f252:	4546      	cmp	r6, r8
    f254:	eba8 0306 	sub.w	r3, r8, r6
    f258:	d802      	bhi.n	f260 <_malloc_r+0x40c>
    f25a:	2b0f      	cmp	r3, #15
    f25c:	f73f af62 	bgt.w	f124 <_malloc_r+0x2d0>
    f260:	4620      	mov	r0, r4
    f262:	f000 f8ad 	bl	f3c0 <__malloc_unlock>
    f266:	2500      	movs	r5, #0
    f268:	e6bc      	b.n	efe4 <_malloc_r+0x190>
    f26a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    f26e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    f272:	00c3      	lsls	r3, r0, #3
    f274:	e634      	b.n	eee0 <_malloc_r+0x8c>
    f276:	f859 3908 	ldr.w	r3, [r9], #-8
    f27a:	454b      	cmp	r3, r9
    f27c:	f040 8096 	bne.w	f3ac <_malloc_r+0x558>
    f280:	f010 0f03 	tst.w	r0, #3
    f284:	f100 30ff 	add.w	r0, r0, #4294967295
    f288:	d1f5      	bne.n	f276 <_malloc_r+0x422>
    f28a:	687b      	ldr	r3, [r7, #4]
    f28c:	ea23 0301 	bic.w	r3, r3, r1
    f290:	607b      	str	r3, [r7, #4]
    f292:	0049      	lsls	r1, r1, #1
    f294:	4299      	cmp	r1, r3
    f296:	f63f aec0 	bhi.w	f01a <_malloc_r+0x1c6>
    f29a:	b919      	cbnz	r1, f2a4 <_malloc_r+0x450>
    f29c:	e6bd      	b.n	f01a <_malloc_r+0x1c6>
    f29e:	0049      	lsls	r1, r1, #1
    f2a0:	f10e 0e04 	add.w	lr, lr, #4
    f2a4:	4219      	tst	r1, r3
    f2a6:	d0fa      	beq.n	f29e <_malloc_r+0x44a>
    f2a8:	4670      	mov	r0, lr
    f2aa:	e667      	b.n	ef7c <_malloc_r+0x128>
    f2ac:	f103 0810 	add.w	r8, r3, #16
    f2b0:	e6d0      	b.n	f054 <_malloc_r+0x200>
    f2b2:	109a      	asrs	r2, r3, #2
    f2b4:	f04f 0801 	mov.w	r8, #1
    f2b8:	687b      	ldr	r3, [r7, #4]
    f2ba:	fa08 f202 	lsl.w	r2, r8, r2
    f2be:	431a      	orrs	r2, r3
    f2c0:	607a      	str	r2, [r7, #4]
    f2c2:	e770      	b.n	f1a6 <_malloc_r+0x352>
    f2c4:	eb02 0108 	add.w	r1, r2, r8
    f2c8:	4249      	negs	r1, r1
    f2ca:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    f2ce:	4651      	mov	r1, sl
    f2d0:	4620      	mov	r0, r4
    f2d2:	9200      	str	r2, [sp, #0]
    f2d4:	f000 fcf4 	bl	fcc0 <_sbrk_r>
    f2d8:	1c43      	adds	r3, r0, #1
    f2da:	e9dd 2300 	ldrd	r2, r3, [sp]
    f2de:	f47f aeef 	bne.w	f0c0 <_malloc_r+0x26c>
    f2e2:	46da      	mov	sl, fp
    f2e4:	e6ef      	b.n	f0c6 <_malloc_r+0x272>
    f2e6:	2b54      	cmp	r3, #84	; 0x54
    f2e8:	d825      	bhi.n	f336 <_malloc_r+0x4e2>
    f2ea:	0b13      	lsrs	r3, r2, #12
    f2ec:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    f2f0:	00c9      	lsls	r1, r1, #3
    f2f2:	336e      	adds	r3, #110	; 0x6e
    f2f4:	e744      	b.n	f180 <_malloc_r+0x32c>
    f2f6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    f2fa:	d825      	bhi.n	f348 <_malloc_r+0x4f4>
    f2fc:	0bf3      	lsrs	r3, r6, #15
    f2fe:	f103 0078 	add.w	r0, r3, #120	; 0x78
    f302:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    f306:	00c3      	lsls	r3, r0, #3
    f308:	e5ea      	b.n	eee0 <_malloc_r+0x8c>
    f30a:	4b29      	ldr	r3, [pc, #164]	; (f3b0 <_malloc_r+0x55c>)
    f30c:	6818      	ldr	r0, [r3, #0]
    f30e:	4440      	add	r0, r8
    f310:	6018      	str	r0, [r3, #0]
    f312:	e6b1      	b.n	f078 <_malloc_r+0x224>
    f314:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    f318:	f1bc 0f00 	cmp.w	ip, #0
    f31c:	f47f aeac 	bne.w	f078 <_malloc_r+0x224>
    f320:	68bd      	ldr	r5, [r7, #8]
    f322:	44c8      	add	r8, r9
    f324:	f048 0001 	orr.w	r0, r8, #1
    f328:	6068      	str	r0, [r5, #4]
    f32a:	e6f0      	b.n	f10e <_malloc_r+0x2ba>
    f32c:	4615      	mov	r5, r2
    f32e:	e6ee      	b.n	f10e <_malloc_r+0x2ba>
    f330:	2301      	movs	r3, #1
    f332:	6053      	str	r3, [r2, #4]
    f334:	e794      	b.n	f260 <_malloc_r+0x40c>
    f336:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    f33a:	d823      	bhi.n	f384 <_malloc_r+0x530>
    f33c:	0bd3      	lsrs	r3, r2, #15
    f33e:	f103 0178 	add.w	r1, r3, #120	; 0x78
    f342:	00c9      	lsls	r1, r1, #3
    f344:	3377      	adds	r3, #119	; 0x77
    f346:	e71b      	b.n	f180 <_malloc_r+0x32c>
    f348:	f240 5254 	movw	r2, #1364	; 0x554
    f34c:	4293      	cmp	r3, r2
    f34e:	d823      	bhi.n	f398 <_malloc_r+0x544>
    f350:	0cb3      	lsrs	r3, r6, #18
    f352:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    f356:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    f35a:	00c3      	lsls	r3, r0, #3
    f35c:	e5c0      	b.n	eee0 <_malloc_r+0x8c>
    f35e:	f1ab 0b08 	sub.w	fp, fp, #8
    f362:	44d8      	add	r8, fp
    f364:	eba8 0802 	sub.w	r8, r8, r2
    f368:	f04f 0a00 	mov.w	sl, #0
    f36c:	e6ab      	b.n	f0c6 <_malloc_r+0x272>
    f36e:	f105 0108 	add.w	r1, r5, #8
    f372:	4620      	mov	r0, r4
    f374:	9300      	str	r3, [sp, #0]
    f376:	f000 fdd1 	bl	ff1c <_free_r>
    f37a:	68bd      	ldr	r5, [r7, #8]
    f37c:	9b00      	ldr	r3, [sp, #0]
    f37e:	6868      	ldr	r0, [r5, #4]
    f380:	6819      	ldr	r1, [r3, #0]
    f382:	e6c4      	b.n	f10e <_malloc_r+0x2ba>
    f384:	f240 5154 	movw	r1, #1364	; 0x554
    f388:	428b      	cmp	r3, r1
    f38a:	d80b      	bhi.n	f3a4 <_malloc_r+0x550>
    f38c:	0c93      	lsrs	r3, r2, #18
    f38e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    f392:	00c9      	lsls	r1, r1, #3
    f394:	337c      	adds	r3, #124	; 0x7c
    f396:	e6f3      	b.n	f180 <_malloc_r+0x32c>
    f398:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    f39c:	207f      	movs	r0, #127	; 0x7f
    f39e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    f3a2:	e59d      	b.n	eee0 <_malloc_r+0x8c>
    f3a4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    f3a8:	237e      	movs	r3, #126	; 0x7e
    f3aa:	e6e9      	b.n	f180 <_malloc_r+0x32c>
    f3ac:	687b      	ldr	r3, [r7, #4]
    f3ae:	e770      	b.n	f292 <_malloc_r+0x43e>
    f3b0:	1fffbc70 	.word	0x1fffbc70

0000f3b4 <__malloc_lock>:
    f3b4:	4801      	ldr	r0, [pc, #4]	; (f3bc <__malloc_lock+0x8>)
    f3b6:	f000 bcd9 	b.w	fd6c <__retarget_lock_acquire_recursive>
    f3ba:	bf00      	nop
    f3bc:	1fffbde8 	.word	0x1fffbde8

0000f3c0 <__malloc_unlock>:
    f3c0:	4801      	ldr	r0, [pc, #4]	; (f3c8 <__malloc_unlock+0x8>)
    f3c2:	f000 bcd5 	b.w	fd70 <__retarget_lock_release_recursive>
    f3c6:	bf00      	nop
    f3c8:	1fffbde8 	.word	0x1fffbde8

0000f3cc <_realloc_r>:
    f3cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3d0:	4617      	mov	r7, r2
    f3d2:	2900      	cmp	r1, #0
    f3d4:	f000 8098 	beq.w	f508 <_realloc_r+0x13c>
    f3d8:	460c      	mov	r4, r1
    f3da:	f107 050b 	add.w	r5, r7, #11
    f3de:	4680      	mov	r8, r0
    f3e0:	f7ff ffe8 	bl	f3b4 <__malloc_lock>
    f3e4:	2d16      	cmp	r5, #22
    f3e6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    f3ea:	d85b      	bhi.n	f4a4 <_realloc_r+0xd8>
    f3ec:	2510      	movs	r5, #16
    f3ee:	462a      	mov	r2, r5
    f3f0:	42af      	cmp	r7, r5
    f3f2:	d85c      	bhi.n	f4ae <_realloc_r+0xe2>
    f3f4:	f021 0603 	bic.w	r6, r1, #3
    f3f8:	4296      	cmp	r6, r2
    f3fa:	f1a4 0908 	sub.w	r9, r4, #8
    f3fe:	da62      	bge.n	f4c6 <_realloc_r+0xfa>
    f400:	4bbc      	ldr	r3, [pc, #752]	; (f6f4 <_realloc_r+0x328>)
    f402:	f8d3 c008 	ldr.w	ip, [r3, #8]
    f406:	eb09 0006 	add.w	r0, r9, r6
    f40a:	4584      	cmp	ip, r0
    f40c:	f000 8097 	beq.w	f53e <_realloc_r+0x172>
    f410:	f8d0 c004 	ldr.w	ip, [r0, #4]
    f414:	f02c 0301 	bic.w	r3, ip, #1
    f418:	4403      	add	r3, r0
    f41a:	685b      	ldr	r3, [r3, #4]
    f41c:	07db      	lsls	r3, r3, #31
    f41e:	d468      	bmi.n	f4f2 <_realloc_r+0x126>
    f420:	f02c 0c03 	bic.w	ip, ip, #3
    f424:	eb06 030c 	add.w	r3, r6, ip
    f428:	4293      	cmp	r3, r2
    f42a:	da47      	bge.n	f4bc <_realloc_r+0xf0>
    f42c:	07cb      	lsls	r3, r1, #31
    f42e:	d410      	bmi.n	f452 <_realloc_r+0x86>
    f430:	f854 3c08 	ldr.w	r3, [r4, #-8]
    f434:	eba9 0a03 	sub.w	sl, r9, r3
    f438:	f8da 3004 	ldr.w	r3, [sl, #4]
    f43c:	f023 0103 	bic.w	r1, r3, #3
    f440:	448c      	add	ip, r1
    f442:	44b4      	add	ip, r6
    f444:	4594      	cmp	ip, r2
    f446:	f280 8111 	bge.w	f66c <_realloc_r+0x2a0>
    f44a:	1873      	adds	r3, r6, r1
    f44c:	4293      	cmp	r3, r2
    f44e:	f280 80e8 	bge.w	f622 <_realloc_r+0x256>
    f452:	4639      	mov	r1, r7
    f454:	4640      	mov	r0, r8
    f456:	f7ff fcfd 	bl	ee54 <_malloc_r>
    f45a:	4607      	mov	r7, r0
    f45c:	b1e0      	cbz	r0, f498 <_realloc_r+0xcc>
    f45e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f462:	f023 0301 	bic.w	r3, r3, #1
    f466:	444b      	add	r3, r9
    f468:	f1a0 0208 	sub.w	r2, r0, #8
    f46c:	4293      	cmp	r3, r2
    f46e:	f000 80d2 	beq.w	f616 <_realloc_r+0x24a>
    f472:	1f32      	subs	r2, r6, #4
    f474:	2a24      	cmp	r2, #36	; 0x24
    f476:	f200 80f5 	bhi.w	f664 <_realloc_r+0x298>
    f47a:	2a13      	cmp	r2, #19
    f47c:	f200 80ac 	bhi.w	f5d8 <_realloc_r+0x20c>
    f480:	4603      	mov	r3, r0
    f482:	4622      	mov	r2, r4
    f484:	6811      	ldr	r1, [r2, #0]
    f486:	6019      	str	r1, [r3, #0]
    f488:	6851      	ldr	r1, [r2, #4]
    f48a:	6059      	str	r1, [r3, #4]
    f48c:	6892      	ldr	r2, [r2, #8]
    f48e:	609a      	str	r2, [r3, #8]
    f490:	4621      	mov	r1, r4
    f492:	4640      	mov	r0, r8
    f494:	f000 fd42 	bl	ff1c <_free_r>
    f498:	4640      	mov	r0, r8
    f49a:	f7ff ff91 	bl	f3c0 <__malloc_unlock>
    f49e:	4638      	mov	r0, r7
    f4a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4a4:	f025 0507 	bic.w	r5, r5, #7
    f4a8:	2d00      	cmp	r5, #0
    f4aa:	462a      	mov	r2, r5
    f4ac:	daa0      	bge.n	f3f0 <_realloc_r+0x24>
    f4ae:	230c      	movs	r3, #12
    f4b0:	f8c8 3000 	str.w	r3, [r8]
    f4b4:	2700      	movs	r7, #0
    f4b6:	4638      	mov	r0, r7
    f4b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4bc:	461e      	mov	r6, r3
    f4be:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    f4c2:	60d3      	str	r3, [r2, #12]
    f4c4:	609a      	str	r2, [r3, #8]
    f4c6:	1b73      	subs	r3, r6, r5
    f4c8:	2b0f      	cmp	r3, #15
    f4ca:	d822      	bhi.n	f512 <_realloc_r+0x146>
    f4cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
    f4d0:	f003 0301 	and.w	r3, r3, #1
    f4d4:	4333      	orrs	r3, r6
    f4d6:	444e      	add	r6, r9
    f4d8:	f8c9 3004 	str.w	r3, [r9, #4]
    f4dc:	6873      	ldr	r3, [r6, #4]
    f4de:	f043 0301 	orr.w	r3, r3, #1
    f4e2:	6073      	str	r3, [r6, #4]
    f4e4:	4640      	mov	r0, r8
    f4e6:	4627      	mov	r7, r4
    f4e8:	f7ff ff6a 	bl	f3c0 <__malloc_unlock>
    f4ec:	4638      	mov	r0, r7
    f4ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4f2:	07c9      	lsls	r1, r1, #31
    f4f4:	d4ad      	bmi.n	f452 <_realloc_r+0x86>
    f4f6:	f854 3c08 	ldr.w	r3, [r4, #-8]
    f4fa:	eba9 0a03 	sub.w	sl, r9, r3
    f4fe:	f8da 1004 	ldr.w	r1, [sl, #4]
    f502:	f021 0103 	bic.w	r1, r1, #3
    f506:	e7a0      	b.n	f44a <_realloc_r+0x7e>
    f508:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f50c:	4611      	mov	r1, r2
    f50e:	f7ff bca1 	b.w	ee54 <_malloc_r>
    f512:	f8d9 2004 	ldr.w	r2, [r9, #4]
    f516:	eb09 0105 	add.w	r1, r9, r5
    f51a:	f002 0201 	and.w	r2, r2, #1
    f51e:	444e      	add	r6, r9
    f520:	f043 0301 	orr.w	r3, r3, #1
    f524:	432a      	orrs	r2, r5
    f526:	f8c9 2004 	str.w	r2, [r9, #4]
    f52a:	604b      	str	r3, [r1, #4]
    f52c:	6873      	ldr	r3, [r6, #4]
    f52e:	f043 0301 	orr.w	r3, r3, #1
    f532:	3108      	adds	r1, #8
    f534:	6073      	str	r3, [r6, #4]
    f536:	4640      	mov	r0, r8
    f538:	f000 fcf0 	bl	ff1c <_free_r>
    f53c:	e7d2      	b.n	f4e4 <_realloc_r+0x118>
    f53e:	f8dc 0004 	ldr.w	r0, [ip, #4]
    f542:	f020 0b03 	bic.w	fp, r0, #3
    f546:	eb06 0c0b 	add.w	ip, r6, fp
    f54a:	f105 0010 	add.w	r0, r5, #16
    f54e:	4584      	cmp	ip, r0
    f550:	da4d      	bge.n	f5ee <_realloc_r+0x222>
    f552:	07c9      	lsls	r1, r1, #31
    f554:	f53f af7d 	bmi.w	f452 <_realloc_r+0x86>
    f558:	f854 1c08 	ldr.w	r1, [r4, #-8]
    f55c:	eba9 0a01 	sub.w	sl, r9, r1
    f560:	f8da 1004 	ldr.w	r1, [sl, #4]
    f564:	f021 0103 	bic.w	r1, r1, #3
    f568:	448b      	add	fp, r1
    f56a:	44b3      	add	fp, r6
    f56c:	4558      	cmp	r0, fp
    f56e:	f73f af6c 	bgt.w	f44a <_realloc_r+0x7e>
    f572:	4657      	mov	r7, sl
    f574:	f8da 100c 	ldr.w	r1, [sl, #12]
    f578:	f857 0f08 	ldr.w	r0, [r7, #8]!
    f57c:	1f32      	subs	r2, r6, #4
    f57e:	2a24      	cmp	r2, #36	; 0x24
    f580:	60c1      	str	r1, [r0, #12]
    f582:	6088      	str	r0, [r1, #8]
    f584:	f200 80db 	bhi.w	f73e <_realloc_r+0x372>
    f588:	2a13      	cmp	r2, #19
    f58a:	f240 80d6 	bls.w	f73a <_realloc_r+0x36e>
    f58e:	6821      	ldr	r1, [r4, #0]
    f590:	f8ca 1008 	str.w	r1, [sl, #8]
    f594:	6861      	ldr	r1, [r4, #4]
    f596:	f8ca 100c 	str.w	r1, [sl, #12]
    f59a:	2a1b      	cmp	r2, #27
    f59c:	f200 80df 	bhi.w	f75e <_realloc_r+0x392>
    f5a0:	3408      	adds	r4, #8
    f5a2:	f10a 0210 	add.w	r2, sl, #16
    f5a6:	6821      	ldr	r1, [r4, #0]
    f5a8:	6011      	str	r1, [r2, #0]
    f5aa:	6861      	ldr	r1, [r4, #4]
    f5ac:	6051      	str	r1, [r2, #4]
    f5ae:	68a1      	ldr	r1, [r4, #8]
    f5b0:	6091      	str	r1, [r2, #8]
    f5b2:	eb0a 0105 	add.w	r1, sl, r5
    f5b6:	ebab 0205 	sub.w	r2, fp, r5
    f5ba:	f042 0201 	orr.w	r2, r2, #1
    f5be:	6099      	str	r1, [r3, #8]
    f5c0:	604a      	str	r2, [r1, #4]
    f5c2:	f8da 3004 	ldr.w	r3, [sl, #4]
    f5c6:	f003 0301 	and.w	r3, r3, #1
    f5ca:	432b      	orrs	r3, r5
    f5cc:	4640      	mov	r0, r8
    f5ce:	f8ca 3004 	str.w	r3, [sl, #4]
    f5d2:	f7ff fef5 	bl	f3c0 <__malloc_unlock>
    f5d6:	e76e      	b.n	f4b6 <_realloc_r+0xea>
    f5d8:	6823      	ldr	r3, [r4, #0]
    f5da:	6003      	str	r3, [r0, #0]
    f5dc:	6863      	ldr	r3, [r4, #4]
    f5de:	6043      	str	r3, [r0, #4]
    f5e0:	2a1b      	cmp	r2, #27
    f5e2:	d868      	bhi.n	f6b6 <_realloc_r+0x2ea>
    f5e4:	f104 0208 	add.w	r2, r4, #8
    f5e8:	f100 0308 	add.w	r3, r0, #8
    f5ec:	e74a      	b.n	f484 <_realloc_r+0xb8>
    f5ee:	eb09 0205 	add.w	r2, r9, r5
    f5f2:	609a      	str	r2, [r3, #8]
    f5f4:	ebac 0305 	sub.w	r3, ip, r5
    f5f8:	f043 0301 	orr.w	r3, r3, #1
    f5fc:	6053      	str	r3, [r2, #4]
    f5fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f602:	f003 0301 	and.w	r3, r3, #1
    f606:	432b      	orrs	r3, r5
    f608:	4640      	mov	r0, r8
    f60a:	f844 3c04 	str.w	r3, [r4, #-4]
    f60e:	f7ff fed7 	bl	f3c0 <__malloc_unlock>
    f612:	4627      	mov	r7, r4
    f614:	e74f      	b.n	f4b6 <_realloc_r+0xea>
    f616:	f850 3c04 	ldr.w	r3, [r0, #-4]
    f61a:	f023 0303 	bic.w	r3, r3, #3
    f61e:	441e      	add	r6, r3
    f620:	e751      	b.n	f4c6 <_realloc_r+0xfa>
    f622:	4657      	mov	r7, sl
    f624:	f8da 100c 	ldr.w	r1, [sl, #12]
    f628:	f857 0f08 	ldr.w	r0, [r7, #8]!
    f62c:	1f32      	subs	r2, r6, #4
    f62e:	2a24      	cmp	r2, #36	; 0x24
    f630:	60c1      	str	r1, [r0, #12]
    f632:	6088      	str	r0, [r1, #8]
    f634:	d84c      	bhi.n	f6d0 <_realloc_r+0x304>
    f636:	2a13      	cmp	r2, #19
    f638:	d948      	bls.n	f6cc <_realloc_r+0x300>
    f63a:	6821      	ldr	r1, [r4, #0]
    f63c:	f8ca 1008 	str.w	r1, [sl, #8]
    f640:	6861      	ldr	r1, [r4, #4]
    f642:	f8ca 100c 	str.w	r1, [sl, #12]
    f646:	2a1b      	cmp	r2, #27
    f648:	d856      	bhi.n	f6f8 <_realloc_r+0x32c>
    f64a:	3408      	adds	r4, #8
    f64c:	f10a 0210 	add.w	r2, sl, #16
    f650:	461e      	mov	r6, r3
    f652:	6823      	ldr	r3, [r4, #0]
    f654:	6013      	str	r3, [r2, #0]
    f656:	6863      	ldr	r3, [r4, #4]
    f658:	6053      	str	r3, [r2, #4]
    f65a:	68a3      	ldr	r3, [r4, #8]
    f65c:	6093      	str	r3, [r2, #8]
    f65e:	46d1      	mov	r9, sl
    f660:	463c      	mov	r4, r7
    f662:	e730      	b.n	f4c6 <_realloc_r+0xfa>
    f664:	4621      	mov	r1, r4
    f666:	f000 f9e7 	bl	fa38 <memmove>
    f66a:	e711      	b.n	f490 <_realloc_r+0xc4>
    f66c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    f670:	4657      	mov	r7, sl
    f672:	60cb      	str	r3, [r1, #12]
    f674:	6099      	str	r1, [r3, #8]
    f676:	f857 1f08 	ldr.w	r1, [r7, #8]!
    f67a:	f8da 300c 	ldr.w	r3, [sl, #12]
    f67e:	60cb      	str	r3, [r1, #12]
    f680:	1f32      	subs	r2, r6, #4
    f682:	2a24      	cmp	r2, #36	; 0x24
    f684:	6099      	str	r1, [r3, #8]
    f686:	d82d      	bhi.n	f6e4 <_realloc_r+0x318>
    f688:	2a13      	cmp	r2, #19
    f68a:	d929      	bls.n	f6e0 <_realloc_r+0x314>
    f68c:	6823      	ldr	r3, [r4, #0]
    f68e:	f8ca 3008 	str.w	r3, [sl, #8]
    f692:	6863      	ldr	r3, [r4, #4]
    f694:	f8ca 300c 	str.w	r3, [sl, #12]
    f698:	2a1b      	cmp	r2, #27
    f69a:	d842      	bhi.n	f722 <_realloc_r+0x356>
    f69c:	3408      	adds	r4, #8
    f69e:	f10a 0310 	add.w	r3, sl, #16
    f6a2:	6822      	ldr	r2, [r4, #0]
    f6a4:	601a      	str	r2, [r3, #0]
    f6a6:	6862      	ldr	r2, [r4, #4]
    f6a8:	605a      	str	r2, [r3, #4]
    f6aa:	68a2      	ldr	r2, [r4, #8]
    f6ac:	609a      	str	r2, [r3, #8]
    f6ae:	4666      	mov	r6, ip
    f6b0:	46d1      	mov	r9, sl
    f6b2:	463c      	mov	r4, r7
    f6b4:	e707      	b.n	f4c6 <_realloc_r+0xfa>
    f6b6:	68a3      	ldr	r3, [r4, #8]
    f6b8:	6083      	str	r3, [r0, #8]
    f6ba:	68e3      	ldr	r3, [r4, #12]
    f6bc:	60c3      	str	r3, [r0, #12]
    f6be:	2a24      	cmp	r2, #36	; 0x24
    f6c0:	d026      	beq.n	f710 <_realloc_r+0x344>
    f6c2:	f104 0210 	add.w	r2, r4, #16
    f6c6:	f100 0310 	add.w	r3, r0, #16
    f6ca:	e6db      	b.n	f484 <_realloc_r+0xb8>
    f6cc:	463a      	mov	r2, r7
    f6ce:	e7bf      	b.n	f650 <_realloc_r+0x284>
    f6d0:	4621      	mov	r1, r4
    f6d2:	4638      	mov	r0, r7
    f6d4:	461e      	mov	r6, r3
    f6d6:	46d1      	mov	r9, sl
    f6d8:	f000 f9ae 	bl	fa38 <memmove>
    f6dc:	463c      	mov	r4, r7
    f6de:	e6f2      	b.n	f4c6 <_realloc_r+0xfa>
    f6e0:	463b      	mov	r3, r7
    f6e2:	e7de      	b.n	f6a2 <_realloc_r+0x2d6>
    f6e4:	4621      	mov	r1, r4
    f6e6:	4638      	mov	r0, r7
    f6e8:	4666      	mov	r6, ip
    f6ea:	46d1      	mov	r9, sl
    f6ec:	f000 f9a4 	bl	fa38 <memmove>
    f6f0:	463c      	mov	r4, r7
    f6f2:	e6e8      	b.n	f4c6 <_realloc_r+0xfa>
    f6f4:	1fff8abc 	.word	0x1fff8abc
    f6f8:	68a1      	ldr	r1, [r4, #8]
    f6fa:	f8ca 1010 	str.w	r1, [sl, #16]
    f6fe:	68e1      	ldr	r1, [r4, #12]
    f700:	f8ca 1014 	str.w	r1, [sl, #20]
    f704:	2a24      	cmp	r2, #36	; 0x24
    f706:	d020      	beq.n	f74a <_realloc_r+0x37e>
    f708:	3410      	adds	r4, #16
    f70a:	f10a 0218 	add.w	r2, sl, #24
    f70e:	e79f      	b.n	f650 <_realloc_r+0x284>
    f710:	6923      	ldr	r3, [r4, #16]
    f712:	6103      	str	r3, [r0, #16]
    f714:	6961      	ldr	r1, [r4, #20]
    f716:	6141      	str	r1, [r0, #20]
    f718:	f104 0218 	add.w	r2, r4, #24
    f71c:	f100 0318 	add.w	r3, r0, #24
    f720:	e6b0      	b.n	f484 <_realloc_r+0xb8>
    f722:	68a3      	ldr	r3, [r4, #8]
    f724:	f8ca 3010 	str.w	r3, [sl, #16]
    f728:	68e3      	ldr	r3, [r4, #12]
    f72a:	f8ca 3014 	str.w	r3, [sl, #20]
    f72e:	2a24      	cmp	r2, #36	; 0x24
    f730:	d021      	beq.n	f776 <_realloc_r+0x3aa>
    f732:	3410      	adds	r4, #16
    f734:	f10a 0318 	add.w	r3, sl, #24
    f738:	e7b3      	b.n	f6a2 <_realloc_r+0x2d6>
    f73a:	463a      	mov	r2, r7
    f73c:	e733      	b.n	f5a6 <_realloc_r+0x1da>
    f73e:	4621      	mov	r1, r4
    f740:	4638      	mov	r0, r7
    f742:	f000 f979 	bl	fa38 <memmove>
    f746:	4b16      	ldr	r3, [pc, #88]	; (f7a0 <_realloc_r+0x3d4>)
    f748:	e733      	b.n	f5b2 <_realloc_r+0x1e6>
    f74a:	6922      	ldr	r2, [r4, #16]
    f74c:	f8ca 2018 	str.w	r2, [sl, #24]
    f750:	6962      	ldr	r2, [r4, #20]
    f752:	f8ca 201c 	str.w	r2, [sl, #28]
    f756:	3418      	adds	r4, #24
    f758:	f10a 0220 	add.w	r2, sl, #32
    f75c:	e778      	b.n	f650 <_realloc_r+0x284>
    f75e:	68a1      	ldr	r1, [r4, #8]
    f760:	f8ca 1010 	str.w	r1, [sl, #16]
    f764:	68e1      	ldr	r1, [r4, #12]
    f766:	f8ca 1014 	str.w	r1, [sl, #20]
    f76a:	2a24      	cmp	r2, #36	; 0x24
    f76c:	d00d      	beq.n	f78a <_realloc_r+0x3be>
    f76e:	3410      	adds	r4, #16
    f770:	f10a 0218 	add.w	r2, sl, #24
    f774:	e717      	b.n	f5a6 <_realloc_r+0x1da>
    f776:	6923      	ldr	r3, [r4, #16]
    f778:	f8ca 3018 	str.w	r3, [sl, #24]
    f77c:	6963      	ldr	r3, [r4, #20]
    f77e:	f8ca 301c 	str.w	r3, [sl, #28]
    f782:	3418      	adds	r4, #24
    f784:	f10a 0320 	add.w	r3, sl, #32
    f788:	e78b      	b.n	f6a2 <_realloc_r+0x2d6>
    f78a:	6922      	ldr	r2, [r4, #16]
    f78c:	f8ca 2018 	str.w	r2, [sl, #24]
    f790:	6962      	ldr	r2, [r4, #20]
    f792:	f8ca 201c 	str.w	r2, [sl, #28]
    f796:	3418      	adds	r4, #24
    f798:	f10a 0220 	add.w	r2, sl, #32
    f79c:	e703      	b.n	f5a6 <_realloc_r+0x1da>
    f79e:	bf00      	nop
    f7a0:	1fff8abc 	.word	0x1fff8abc

0000f7a4 <stdio_exit_handler>:
    f7a4:	4a02      	ldr	r2, [pc, #8]	; (f7b0 <stdio_exit_handler+0xc>)
    f7a6:	4903      	ldr	r1, [pc, #12]	; (f7b4 <stdio_exit_handler+0x10>)
    f7a8:	4803      	ldr	r0, [pc, #12]	; (f7b8 <stdio_exit_handler+0x14>)
    f7aa:	f000 b8bb 	b.w	f924 <_fwalk_sglue>
    f7ae:	bf00      	nop
    f7b0:	1fff8ecc 	.word	0x1fff8ecc
    f7b4:	00012471 	.word	0x00012471
    f7b8:	1fff9048 	.word	0x1fff9048

0000f7bc <cleanup_stdio>:
    f7bc:	4b0c      	ldr	r3, [pc, #48]	; (f7f0 <cleanup_stdio+0x34>)
    f7be:	6841      	ldr	r1, [r0, #4]
    f7c0:	4299      	cmp	r1, r3
    f7c2:	b510      	push	{r4, lr}
    f7c4:	4604      	mov	r4, r0
    f7c6:	d001      	beq.n	f7cc <cleanup_stdio+0x10>
    f7c8:	f002 fe52 	bl	12470 <_fclose_r>
    f7cc:	68a1      	ldr	r1, [r4, #8]
    f7ce:	4b09      	ldr	r3, [pc, #36]	; (f7f4 <cleanup_stdio+0x38>)
    f7d0:	4299      	cmp	r1, r3
    f7d2:	d002      	beq.n	f7da <cleanup_stdio+0x1e>
    f7d4:	4620      	mov	r0, r4
    f7d6:	f002 fe4b 	bl	12470 <_fclose_r>
    f7da:	68e1      	ldr	r1, [r4, #12]
    f7dc:	4b06      	ldr	r3, [pc, #24]	; (f7f8 <cleanup_stdio+0x3c>)
    f7de:	4299      	cmp	r1, r3
    f7e0:	d004      	beq.n	f7ec <cleanup_stdio+0x30>
    f7e2:	4620      	mov	r0, r4
    f7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7e8:	f002 be42 	b.w	12470 <_fclose_r>
    f7ec:	bd10      	pop	{r4, pc}
    f7ee:	bf00      	nop
    f7f0:	1fffbca4 	.word	0x1fffbca4
    f7f4:	1fffbd0c 	.word	0x1fffbd0c
    f7f8:	1fffbd74 	.word	0x1fffbd74

0000f7fc <global_stdio_init.part.0>:
    f7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f800:	4c2a      	ldr	r4, [pc, #168]	; (f8ac <global_stdio_init.part.0+0xb0>)
    f802:	4b2b      	ldr	r3, [pc, #172]	; (f8b0 <global_stdio_init.part.0+0xb4>)
    f804:	482b      	ldr	r0, [pc, #172]	; (f8b4 <global_stdio_init.part.0+0xb8>)
    f806:	f8df 90b0 	ldr.w	r9, [pc, #176]	; f8b8 <global_stdio_init.part.0+0xbc>
    f80a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; f8bc <global_stdio_init.part.0+0xc0>
    f80e:	4f2c      	ldr	r7, [pc, #176]	; (f8c0 <global_stdio_init.part.0+0xc4>)
    f810:	6018      	str	r0, [r3, #0]
    f812:	2500      	movs	r5, #0
    f814:	2304      	movs	r3, #4
    f816:	2208      	movs	r2, #8
    f818:	4629      	mov	r1, r5
    f81a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    f81e:	4e29      	ldr	r6, [pc, #164]	; (f8c4 <global_stdio_init.part.0+0xc8>)
    f820:	6665      	str	r5, [r4, #100]	; 0x64
    f822:	e9c4 5302 	strd	r5, r3, [r4, #8]
    f826:	e9c4 5500 	strd	r5, r5, [r4]
    f82a:	e9c4 5504 	strd	r5, r5, [r4, #16]
    f82e:	61a5      	str	r5, [r4, #24]
    f830:	f000 f97e 	bl	fb30 <memset>
    f834:	4b24      	ldr	r3, [pc, #144]	; (f8c8 <global_stdio_init.part.0+0xcc>)
    f836:	6763      	str	r3, [r4, #116]	; 0x74
    f838:	2208      	movs	r2, #8
    f83a:	4629      	mov	r1, r5
    f83c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    f840:	e9c4 4907 	strd	r4, r9, [r4, #28]
    f844:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    f848:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    f84c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    f850:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    f854:	6725      	str	r5, [r4, #112]	; 0x70
    f856:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    f85a:	62e6      	str	r6, [r4, #44]	; 0x2c
    f85c:	f000 f968 	bl	fb30 <memset>
    f860:	4b1a      	ldr	r3, [pc, #104]	; (f8cc <global_stdio_init.part.0+0xd0>)
    f862:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    f866:	4629      	mov	r1, r5
    f868:	f104 0368 	add.w	r3, r4, #104	; 0x68
    f86c:	2208      	movs	r2, #8
    f86e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    f872:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    f876:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    f87a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    f87e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    f882:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    f886:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    f88a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    f88e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    f892:	f000 f94d 	bl	fb30 <memset>
    f896:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    f89a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    f89e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    f8a2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    f8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f8aa:	bf00      	nop
    f8ac:	1fffbca4 	.word	0x1fffbca4
    f8b0:	1fffbddc 	.word	0x1fffbddc
    f8b4:	0000f7a5 	.word	0x0000f7a5
    f8b8:	0000f9ad 	.word	0x0000f9ad
    f8bc:	0000f9d1 	.word	0x0000f9d1
    f8c0:	0000fa11 	.word	0x0000fa11
    f8c4:	0000fa31 	.word	0x0000fa31
    f8c8:	00010009 	.word	0x00010009
    f8cc:	00020012 	.word	0x00020012

0000f8d0 <__sinit>:
    f8d0:	b510      	push	{r4, lr}
    f8d2:	4604      	mov	r4, r0
    f8d4:	480a      	ldr	r0, [pc, #40]	; (f900 <__sinit+0x30>)
    f8d6:	f000 fa49 	bl	fd6c <__retarget_lock_acquire_recursive>
    f8da:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f8dc:	b923      	cbnz	r3, f8e8 <__sinit+0x18>
    f8de:	4b09      	ldr	r3, [pc, #36]	; (f904 <__sinit+0x34>)
    f8e0:	4a09      	ldr	r2, [pc, #36]	; (f908 <__sinit+0x38>)
    f8e2:	681b      	ldr	r3, [r3, #0]
    f8e4:	6362      	str	r2, [r4, #52]	; 0x34
    f8e6:	b123      	cbz	r3, f8f2 <__sinit+0x22>
    f8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8ec:	4804      	ldr	r0, [pc, #16]	; (f900 <__sinit+0x30>)
    f8ee:	f000 ba3f 	b.w	fd70 <__retarget_lock_release_recursive>
    f8f2:	f7ff ff83 	bl	f7fc <global_stdio_init.part.0>
    f8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8fa:	4801      	ldr	r0, [pc, #4]	; (f900 <__sinit+0x30>)
    f8fc:	f000 ba38 	b.w	fd70 <__retarget_lock_release_recursive>
    f900:	1fffbdec 	.word	0x1fffbdec
    f904:	1fffbddc 	.word	0x1fffbddc
    f908:	0000f7bd 	.word	0x0000f7bd

0000f90c <__sfp_lock_acquire>:
    f90c:	4801      	ldr	r0, [pc, #4]	; (f914 <__sfp_lock_acquire+0x8>)
    f90e:	f000 ba2d 	b.w	fd6c <__retarget_lock_acquire_recursive>
    f912:	bf00      	nop
    f914:	1fffbdec 	.word	0x1fffbdec

0000f918 <__sfp_lock_release>:
    f918:	4801      	ldr	r0, [pc, #4]	; (f920 <__sfp_lock_release+0x8>)
    f91a:	f000 ba29 	b.w	fd70 <__retarget_lock_release_recursive>
    f91e:	bf00      	nop
    f920:	1fffbdec 	.word	0x1fffbdec

0000f924 <_fwalk_sglue>:
    f924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f928:	4680      	mov	r8, r0
    f92a:	460f      	mov	r7, r1
    f92c:	4616      	mov	r6, r2
    f92e:	f04f 0900 	mov.w	r9, #0
    f932:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    f936:	3d01      	subs	r5, #1
    f938:	d411      	bmi.n	f95e <_fwalk_sglue+0x3a>
    f93a:	89a3      	ldrh	r3, [r4, #12]
    f93c:	2b01      	cmp	r3, #1
    f93e:	f105 35ff 	add.w	r5, r5, #4294967295
    f942:	d908      	bls.n	f956 <_fwalk_sglue+0x32>
    f944:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    f948:	3301      	adds	r3, #1
    f94a:	4621      	mov	r1, r4
    f94c:	d003      	beq.n	f956 <_fwalk_sglue+0x32>
    f94e:	4640      	mov	r0, r8
    f950:	47b8      	blx	r7
    f952:	ea49 0900 	orr.w	r9, r9, r0
    f956:	1c6b      	adds	r3, r5, #1
    f958:	f104 0468 	add.w	r4, r4, #104	; 0x68
    f95c:	d1ed      	bne.n	f93a <_fwalk_sglue+0x16>
    f95e:	6836      	ldr	r6, [r6, #0]
    f960:	2e00      	cmp	r6, #0
    f962:	d1e6      	bne.n	f932 <_fwalk_sglue+0xe>
    f964:	4648      	mov	r0, r9
    f966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f96a:	bf00      	nop

0000f96c <sprintf>:
    f96c:	b40e      	push	{r1, r2, r3}
    f96e:	b510      	push	{r4, lr}
    f970:	b09d      	sub	sp, #116	; 0x74
    f972:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f976:	ab1f      	add	r3, sp, #124	; 0x7c
    f978:	e9cd 0106 	strd	r0, r1, [sp, #24]
    f97c:	9104      	str	r1, [sp, #16]
    f97e:	4909      	ldr	r1, [pc, #36]	; (f9a4 <sprintf+0x38>)
    f980:	f853 2b04 	ldr.w	r2, [r3], #4
    f984:	9002      	str	r0, [sp, #8]
    f986:	4c08      	ldr	r4, [pc, #32]	; (f9a8 <sprintf+0x3c>)
    f988:	6808      	ldr	r0, [r1, #0]
    f98a:	9301      	str	r3, [sp, #4]
    f98c:	a902      	add	r1, sp, #8
    f98e:	9405      	str	r4, [sp, #20]
    f990:	f000 ff9c 	bl	108cc <_svfprintf_r>
    f994:	9b02      	ldr	r3, [sp, #8]
    f996:	2200      	movs	r2, #0
    f998:	701a      	strb	r2, [r3, #0]
    f99a:	b01d      	add	sp, #116	; 0x74
    f99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9a0:	b003      	add	sp, #12
    f9a2:	4770      	bx	lr
    f9a4:	1fff9168 	.word	0x1fff9168
    f9a8:	ffff0208 	.word	0xffff0208

0000f9ac <__sread>:
    f9ac:	b510      	push	{r4, lr}
    f9ae:	460c      	mov	r4, r1
    f9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    f9b4:	f000 f96e 	bl	fc94 <_read_r>
    f9b8:	2800      	cmp	r0, #0
    f9ba:	db03      	blt.n	f9c4 <__sread+0x18>
    f9bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f9be:	4403      	add	r3, r0
    f9c0:	6523      	str	r3, [r4, #80]	; 0x50
    f9c2:	bd10      	pop	{r4, pc}
    f9c4:	89a3      	ldrh	r3, [r4, #12]
    f9c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    f9ca:	81a3      	strh	r3, [r4, #12]
    f9cc:	bd10      	pop	{r4, pc}
    f9ce:	bf00      	nop

0000f9d0 <__swrite>:
    f9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9d4:	460c      	mov	r4, r1
    f9d6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    f9da:	461f      	mov	r7, r3
    f9dc:	05cb      	lsls	r3, r1, #23
    f9de:	4605      	mov	r5, r0
    f9e0:	4616      	mov	r6, r2
    f9e2:	d40b      	bmi.n	f9fc <__swrite+0x2c>
    f9e4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    f9e8:	81a1      	strh	r1, [r4, #12]
    f9ea:	463b      	mov	r3, r7
    f9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    f9f0:	4632      	mov	r2, r6
    f9f2:	4628      	mov	r0, r5
    f9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f9f8:	f000 b974 	b.w	fce4 <_write_r>
    f9fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    fa00:	2302      	movs	r3, #2
    fa02:	2200      	movs	r2, #0
    fa04:	f000 f930 	bl	fc68 <_lseek_r>
    fa08:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    fa0c:	e7ea      	b.n	f9e4 <__swrite+0x14>
    fa0e:	bf00      	nop

0000fa10 <__sseek>:
    fa10:	b510      	push	{r4, lr}
    fa12:	460c      	mov	r4, r1
    fa14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    fa18:	f000 f926 	bl	fc68 <_lseek_r>
    fa1c:	89a3      	ldrh	r3, [r4, #12]
    fa1e:	1c42      	adds	r2, r0, #1
    fa20:	bf0e      	itee	eq
    fa22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    fa26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    fa2a:	6520      	strne	r0, [r4, #80]	; 0x50
    fa2c:	81a3      	strh	r3, [r4, #12]
    fa2e:	bd10      	pop	{r4, pc}

0000fa30 <__sclose>:
    fa30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    fa34:	f000 b906 	b.w	fc44 <_close_r>

0000fa38 <memmove>:
    fa38:	4288      	cmp	r0, r1
    fa3a:	d90d      	bls.n	fa58 <memmove+0x20>
    fa3c:	188b      	adds	r3, r1, r2
    fa3e:	4283      	cmp	r3, r0
    fa40:	d90a      	bls.n	fa58 <memmove+0x20>
    fa42:	eb00 0c02 	add.w	ip, r0, r2
    fa46:	b1ba      	cbz	r2, fa78 <memmove+0x40>
    fa48:	4662      	mov	r2, ip
    fa4a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    fa4e:	f802 cd01 	strb.w	ip, [r2, #-1]!
    fa52:	4299      	cmp	r1, r3
    fa54:	d1f9      	bne.n	fa4a <memmove+0x12>
    fa56:	4770      	bx	lr
    fa58:	2a0f      	cmp	r2, #15
    fa5a:	d80e      	bhi.n	fa7a <memmove+0x42>
    fa5c:	4603      	mov	r3, r0
    fa5e:	f102 3cff 	add.w	ip, r2, #4294967295
    fa62:	b14a      	cbz	r2, fa78 <memmove+0x40>
    fa64:	f10c 0c01 	add.w	ip, ip, #1
    fa68:	3b01      	subs	r3, #1
    fa6a:	448c      	add	ip, r1
    fa6c:	f811 2b01 	ldrb.w	r2, [r1], #1
    fa70:	f803 2f01 	strb.w	r2, [r3, #1]!
    fa74:	4561      	cmp	r1, ip
    fa76:	d1f9      	bne.n	fa6c <memmove+0x34>
    fa78:	4770      	bx	lr
    fa7a:	ea40 0301 	orr.w	r3, r0, r1
    fa7e:	079b      	lsls	r3, r3, #30
    fa80:	d150      	bne.n	fb24 <memmove+0xec>
    fa82:	f1a2 0310 	sub.w	r3, r2, #16
    fa86:	b570      	push	{r4, r5, r6, lr}
    fa88:	f101 0c20 	add.w	ip, r1, #32
    fa8c:	f023 050f 	bic.w	r5, r3, #15
    fa90:	f101 0e10 	add.w	lr, r1, #16
    fa94:	f100 0410 	add.w	r4, r0, #16
    fa98:	44ac      	add	ip, r5
    fa9a:	091b      	lsrs	r3, r3, #4
    fa9c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    faa0:	f844 5c10 	str.w	r5, [r4, #-16]
    faa4:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    faa8:	f844 5c0c 	str.w	r5, [r4, #-12]
    faac:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    fab0:	f844 5c08 	str.w	r5, [r4, #-8]
    fab4:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    fab8:	f844 5c04 	str.w	r5, [r4, #-4]
    fabc:	f10e 0e10 	add.w	lr, lr, #16
    fac0:	45e6      	cmp	lr, ip
    fac2:	f104 0410 	add.w	r4, r4, #16
    fac6:	d1e9      	bne.n	fa9c <memmove+0x64>
    fac8:	3301      	adds	r3, #1
    faca:	f012 0f0c 	tst.w	r2, #12
    face:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    fad2:	f002 040f 	and.w	r4, r2, #15
    fad6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    fada:	d027      	beq.n	fb2c <memmove+0xf4>
    fadc:	3c04      	subs	r4, #4
    fade:	f024 0603 	bic.w	r6, r4, #3
    fae2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    fae6:	441e      	add	r6, r3
    fae8:	1f1c      	subs	r4, r3, #4
    faea:	468e      	mov	lr, r1
    faec:	f85e 5b04 	ldr.w	r5, [lr], #4
    faf0:	f844 5f04 	str.w	r5, [r4, #4]!
    faf4:	42b4      	cmp	r4, r6
    faf6:	d1f9      	bne.n	faec <memmove+0xb4>
    faf8:	f10c 0401 	add.w	r4, ip, #1
    fafc:	f002 0203 	and.w	r2, r2, #3
    fb00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    fb04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    fb08:	f102 3cff 	add.w	ip, r2, #4294967295
    fb0c:	b14a      	cbz	r2, fb22 <memmove+0xea>
    fb0e:	f10c 0c01 	add.w	ip, ip, #1
    fb12:	3b01      	subs	r3, #1
    fb14:	448c      	add	ip, r1
    fb16:	f811 2b01 	ldrb.w	r2, [r1], #1
    fb1a:	f803 2f01 	strb.w	r2, [r3, #1]!
    fb1e:	4561      	cmp	r1, ip
    fb20:	d1f9      	bne.n	fb16 <memmove+0xde>
    fb22:	bd70      	pop	{r4, r5, r6, pc}
    fb24:	f102 3cff 	add.w	ip, r2, #4294967295
    fb28:	4603      	mov	r3, r0
    fb2a:	e79b      	b.n	fa64 <memmove+0x2c>
    fb2c:	4622      	mov	r2, r4
    fb2e:	e7eb      	b.n	fb08 <memmove+0xd0>

0000fb30 <memset>:
    fb30:	0783      	lsls	r3, r0, #30
    fb32:	b530      	push	{r4, r5, lr}
    fb34:	d048      	beq.n	fbc8 <memset+0x98>
    fb36:	1e54      	subs	r4, r2, #1
    fb38:	2a00      	cmp	r2, #0
    fb3a:	d03f      	beq.n	fbbc <memset+0x8c>
    fb3c:	b2ca      	uxtb	r2, r1
    fb3e:	4603      	mov	r3, r0
    fb40:	e001      	b.n	fb46 <memset+0x16>
    fb42:	3c01      	subs	r4, #1
    fb44:	d33a      	bcc.n	fbbc <memset+0x8c>
    fb46:	f803 2b01 	strb.w	r2, [r3], #1
    fb4a:	079d      	lsls	r5, r3, #30
    fb4c:	d1f9      	bne.n	fb42 <memset+0x12>
    fb4e:	2c03      	cmp	r4, #3
    fb50:	d92d      	bls.n	fbae <memset+0x7e>
    fb52:	b2cd      	uxtb	r5, r1
    fb54:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    fb58:	2c0f      	cmp	r4, #15
    fb5a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    fb5e:	d936      	bls.n	fbce <memset+0x9e>
    fb60:	f1a4 0210 	sub.w	r2, r4, #16
    fb64:	f022 0c0f 	bic.w	ip, r2, #15
    fb68:	f103 0e20 	add.w	lr, r3, #32
    fb6c:	44e6      	add	lr, ip
    fb6e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    fb72:	f103 0210 	add.w	r2, r3, #16
    fb76:	e942 5504 	strd	r5, r5, [r2, #-16]
    fb7a:	e942 5502 	strd	r5, r5, [r2, #-8]
    fb7e:	3210      	adds	r2, #16
    fb80:	4572      	cmp	r2, lr
    fb82:	d1f8      	bne.n	fb76 <memset+0x46>
    fb84:	f10c 0201 	add.w	r2, ip, #1
    fb88:	f014 0f0c 	tst.w	r4, #12
    fb8c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    fb90:	f004 0c0f 	and.w	ip, r4, #15
    fb94:	d013      	beq.n	fbbe <memset+0x8e>
    fb96:	f1ac 0304 	sub.w	r3, ip, #4
    fb9a:	f023 0303 	bic.w	r3, r3, #3
    fb9e:	3304      	adds	r3, #4
    fba0:	4413      	add	r3, r2
    fba2:	f842 5b04 	str.w	r5, [r2], #4
    fba6:	4293      	cmp	r3, r2
    fba8:	d1fb      	bne.n	fba2 <memset+0x72>
    fbaa:	f00c 0403 	and.w	r4, ip, #3
    fbae:	b12c      	cbz	r4, fbbc <memset+0x8c>
    fbb0:	b2c9      	uxtb	r1, r1
    fbb2:	441c      	add	r4, r3
    fbb4:	f803 1b01 	strb.w	r1, [r3], #1
    fbb8:	429c      	cmp	r4, r3
    fbba:	d1fb      	bne.n	fbb4 <memset+0x84>
    fbbc:	bd30      	pop	{r4, r5, pc}
    fbbe:	4664      	mov	r4, ip
    fbc0:	4613      	mov	r3, r2
    fbc2:	2c00      	cmp	r4, #0
    fbc4:	d1f4      	bne.n	fbb0 <memset+0x80>
    fbc6:	e7f9      	b.n	fbbc <memset+0x8c>
    fbc8:	4603      	mov	r3, r0
    fbca:	4614      	mov	r4, r2
    fbcc:	e7bf      	b.n	fb4e <memset+0x1e>
    fbce:	461a      	mov	r2, r3
    fbd0:	46a4      	mov	ip, r4
    fbd2:	e7e0      	b.n	fb96 <memset+0x66>

0000fbd4 <strncpy>:
    fbd4:	ea40 0301 	orr.w	r3, r0, r1
    fbd8:	079b      	lsls	r3, r3, #30
    fbda:	b530      	push	{r4, r5, lr}
    fbdc:	d101      	bne.n	fbe2 <strncpy+0xe>
    fbde:	2a03      	cmp	r2, #3
    fbe0:	d80f      	bhi.n	fc02 <strncpy+0x2e>
    fbe2:	4684      	mov	ip, r0
    fbe4:	f101 3eff 	add.w	lr, r1, #4294967295
    fbe8:	e007      	b.n	fbfa <strncpy+0x26>
    fbea:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    fbee:	f803 1b01 	strb.w	r1, [r3], #1
    fbf2:	1e54      	subs	r4, r2, #1
    fbf4:	b1c1      	cbz	r1, fc28 <strncpy+0x54>
    fbf6:	469c      	mov	ip, r3
    fbf8:	4622      	mov	r2, r4
    fbfa:	4663      	mov	r3, ip
    fbfc:	2a00      	cmp	r2, #0
    fbfe:	d1f4      	bne.n	fbea <strncpy+0x16>
    fc00:	bd30      	pop	{r4, r5, pc}
    fc02:	460b      	mov	r3, r1
    fc04:	4684      	mov	ip, r0
    fc06:	4619      	mov	r1, r3
    fc08:	f853 5b04 	ldr.w	r5, [r3], #4
    fc0c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    fc10:	ea24 0405 	bic.w	r4, r4, r5
    fc14:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    fc18:	d1e4      	bne.n	fbe4 <strncpy+0x10>
    fc1a:	3a04      	subs	r2, #4
    fc1c:	2a03      	cmp	r2, #3
    fc1e:	f84c 5b04 	str.w	r5, [ip], #4
    fc22:	4619      	mov	r1, r3
    fc24:	d8ef      	bhi.n	fc06 <strncpy+0x32>
    fc26:	e7dd      	b.n	fbe4 <strncpy+0x10>
    fc28:	4494      	add	ip, r2
    fc2a:	2c00      	cmp	r4, #0
    fc2c:	d0e8      	beq.n	fc00 <strncpy+0x2c>
    fc2e:	f803 1b01 	strb.w	r1, [r3], #1
    fc32:	4563      	cmp	r3, ip
    fc34:	d1fb      	bne.n	fc2e <strncpy+0x5a>
    fc36:	bd30      	pop	{r4, r5, pc}

0000fc38 <__locale_mb_cur_max>:
    fc38:	4b01      	ldr	r3, [pc, #4]	; (fc40 <__locale_mb_cur_max+0x8>)
    fc3a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    fc3e:	4770      	bx	lr
    fc40:	1fff8ed8 	.word	0x1fff8ed8

0000fc44 <_close_r>:
    fc44:	b538      	push	{r3, r4, r5, lr}
    fc46:	4d07      	ldr	r5, [pc, #28]	; (fc64 <_close_r+0x20>)
    fc48:	2200      	movs	r2, #0
    fc4a:	4604      	mov	r4, r0
    fc4c:	4608      	mov	r0, r1
    fc4e:	602a      	str	r2, [r5, #0]
    fc50:	f7fb f84e 	bl	acf0 <_close>
    fc54:	1c43      	adds	r3, r0, #1
    fc56:	d000      	beq.n	fc5a <_close_r+0x16>
    fc58:	bd38      	pop	{r3, r4, r5, pc}
    fc5a:	682b      	ldr	r3, [r5, #0]
    fc5c:	2b00      	cmp	r3, #0
    fc5e:	d0fb      	beq.n	fc58 <_close_r+0x14>
    fc60:	6023      	str	r3, [r4, #0]
    fc62:	bd38      	pop	{r3, r4, r5, pc}
    fc64:	1fffbde0 	.word	0x1fffbde0

0000fc68 <_lseek_r>:
    fc68:	b538      	push	{r3, r4, r5, lr}
    fc6a:	460c      	mov	r4, r1
    fc6c:	4d08      	ldr	r5, [pc, #32]	; (fc90 <_lseek_r+0x28>)
    fc6e:	4684      	mov	ip, r0
    fc70:	4611      	mov	r1, r2
    fc72:	4620      	mov	r0, r4
    fc74:	461a      	mov	r2, r3
    fc76:	2300      	movs	r3, #0
    fc78:	602b      	str	r3, [r5, #0]
    fc7a:	4664      	mov	r4, ip
    fc7c:	f7fb f844 	bl	ad08 <_lseek>
    fc80:	1c43      	adds	r3, r0, #1
    fc82:	d000      	beq.n	fc86 <_lseek_r+0x1e>
    fc84:	bd38      	pop	{r3, r4, r5, pc}
    fc86:	682b      	ldr	r3, [r5, #0]
    fc88:	2b00      	cmp	r3, #0
    fc8a:	d0fb      	beq.n	fc84 <_lseek_r+0x1c>
    fc8c:	6023      	str	r3, [r4, #0]
    fc8e:	bd38      	pop	{r3, r4, r5, pc}
    fc90:	1fffbde0 	.word	0x1fffbde0

0000fc94 <_read_r>:
    fc94:	b538      	push	{r3, r4, r5, lr}
    fc96:	460c      	mov	r4, r1
    fc98:	4d08      	ldr	r5, [pc, #32]	; (fcbc <_read_r+0x28>)
    fc9a:	4684      	mov	ip, r0
    fc9c:	4611      	mov	r1, r2
    fc9e:	4620      	mov	r0, r4
    fca0:	461a      	mov	r2, r3
    fca2:	2300      	movs	r3, #0
    fca4:	602b      	str	r3, [r5, #0]
    fca6:	4664      	mov	r4, ip
    fca8:	f7fb f820 	bl	acec <_read>
    fcac:	1c43      	adds	r3, r0, #1
    fcae:	d000      	beq.n	fcb2 <_read_r+0x1e>
    fcb0:	bd38      	pop	{r3, r4, r5, pc}
    fcb2:	682b      	ldr	r3, [r5, #0]
    fcb4:	2b00      	cmp	r3, #0
    fcb6:	d0fb      	beq.n	fcb0 <_read_r+0x1c>
    fcb8:	6023      	str	r3, [r4, #0]
    fcba:	bd38      	pop	{r3, r4, r5, pc}
    fcbc:	1fffbde0 	.word	0x1fffbde0

0000fcc0 <_sbrk_r>:
    fcc0:	b538      	push	{r3, r4, r5, lr}
    fcc2:	4d07      	ldr	r5, [pc, #28]	; (fce0 <_sbrk_r+0x20>)
    fcc4:	2200      	movs	r2, #0
    fcc6:	4604      	mov	r4, r0
    fcc8:	4608      	mov	r0, r1
    fcca:	602a      	str	r2, [r5, #0]
    fccc:	f7fa fff8 	bl	acc0 <_sbrk>
    fcd0:	1c43      	adds	r3, r0, #1
    fcd2:	d000      	beq.n	fcd6 <_sbrk_r+0x16>
    fcd4:	bd38      	pop	{r3, r4, r5, pc}
    fcd6:	682b      	ldr	r3, [r5, #0]
    fcd8:	2b00      	cmp	r3, #0
    fcda:	d0fb      	beq.n	fcd4 <_sbrk_r+0x14>
    fcdc:	6023      	str	r3, [r4, #0]
    fcde:	bd38      	pop	{r3, r4, r5, pc}
    fce0:	1fffbde0 	.word	0x1fffbde0

0000fce4 <_write_r>:
    fce4:	b538      	push	{r3, r4, r5, lr}
    fce6:	460c      	mov	r4, r1
    fce8:	4d08      	ldr	r5, [pc, #32]	; (fd0c <_write_r+0x28>)
    fcea:	4684      	mov	ip, r0
    fcec:	4611      	mov	r1, r2
    fcee:	4620      	mov	r0, r4
    fcf0:	461a      	mov	r2, r3
    fcf2:	2300      	movs	r3, #0
    fcf4:	602b      	str	r3, [r5, #0]
    fcf6:	4664      	mov	r4, ip
    fcf8:	f7fa fc0c 	bl	a514 <_write>
    fcfc:	1c43      	adds	r3, r0, #1
    fcfe:	d000      	beq.n	fd02 <_write_r+0x1e>
    fd00:	bd38      	pop	{r3, r4, r5, pc}
    fd02:	682b      	ldr	r3, [r5, #0]
    fd04:	2b00      	cmp	r3, #0
    fd06:	d0fb      	beq.n	fd00 <_write_r+0x1c>
    fd08:	6023      	str	r3, [r4, #0]
    fd0a:	bd38      	pop	{r3, r4, r5, pc}
    fd0c:	1fffbde0 	.word	0x1fffbde0

0000fd10 <__errno>:
    fd10:	4b01      	ldr	r3, [pc, #4]	; (fd18 <__errno+0x8>)
    fd12:	6818      	ldr	r0, [r3, #0]
    fd14:	4770      	bx	lr
    fd16:	bf00      	nop
    fd18:	1fff9168 	.word	0x1fff9168

0000fd1c <__libc_init_array>:
    fd1c:	b570      	push	{r4, r5, r6, lr}
    fd1e:	4e0d      	ldr	r6, [pc, #52]	; (fd54 <__libc_init_array+0x38>)
    fd20:	4d0d      	ldr	r5, [pc, #52]	; (fd58 <__libc_init_array+0x3c>)
    fd22:	1b76      	subs	r6, r6, r5
    fd24:	10b6      	asrs	r6, r6, #2
    fd26:	d006      	beq.n	fd36 <__libc_init_array+0x1a>
    fd28:	2400      	movs	r4, #0
    fd2a:	f855 3b04 	ldr.w	r3, [r5], #4
    fd2e:	3401      	adds	r4, #1
    fd30:	4798      	blx	r3
    fd32:	42a6      	cmp	r6, r4
    fd34:	d1f9      	bne.n	fd2a <__libc_init_array+0xe>
    fd36:	4e09      	ldr	r6, [pc, #36]	; (fd5c <__libc_init_array+0x40>)
    fd38:	4d09      	ldr	r5, [pc, #36]	; (fd60 <__libc_init_array+0x44>)
    fd3a:	1b76      	subs	r6, r6, r5
    fd3c:	f007 fc30 	bl	175a0 <_init>
    fd40:	10b6      	asrs	r6, r6, #2
    fd42:	d006      	beq.n	fd52 <__libc_init_array+0x36>
    fd44:	2400      	movs	r4, #0
    fd46:	f855 3b04 	ldr.w	r3, [r5], #4
    fd4a:	3401      	adds	r4, #1
    fd4c:	4798      	blx	r3
    fd4e:	42a6      	cmp	r6, r4
    fd50:	d1f9      	bne.n	fd46 <__libc_init_array+0x2a>
    fd52:	bd70      	pop	{r4, r5, r6, pc}
    fd54:	000175ac 	.word	0x000175ac
    fd58:	000175ac 	.word	0x000175ac
    fd5c:	000175c0 	.word	0x000175c0
    fd60:	000175ac 	.word	0x000175ac

0000fd64 <__retarget_lock_init_recursive>:
    fd64:	4770      	bx	lr
    fd66:	bf00      	nop

0000fd68 <__retarget_lock_close_recursive>:
    fd68:	4770      	bx	lr
    fd6a:	bf00      	nop

0000fd6c <__retarget_lock_acquire_recursive>:
    fd6c:	4770      	bx	lr
    fd6e:	bf00      	nop

0000fd70 <__retarget_lock_release_recursive>:
    fd70:	4770      	bx	lr
    fd72:	bf00      	nop
    fd74:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    fd78:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    fd7c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000fd80 <strlen>:
    fd80:	f890 f000 	pld	[r0]
    fd84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    fd88:	f020 0107 	bic.w	r1, r0, #7
    fd8c:	f06f 0c00 	mvn.w	ip, #0
    fd90:	f010 0407 	ands.w	r4, r0, #7
    fd94:	f891 f020 	pld	[r1, #32]
    fd98:	f040 8049 	bne.w	fe2e <strlen+0xae>
    fd9c:	f04f 0400 	mov.w	r4, #0
    fda0:	f06f 0007 	mvn.w	r0, #7
    fda4:	e9d1 2300 	ldrd	r2, r3, [r1]
    fda8:	f891 f040 	pld	[r1, #64]	; 0x40
    fdac:	f100 0008 	add.w	r0, r0, #8
    fdb0:	fa82 f24c 	uadd8	r2, r2, ip
    fdb4:	faa4 f28c 	sel	r2, r4, ip
    fdb8:	fa83 f34c 	uadd8	r3, r3, ip
    fdbc:	faa2 f38c 	sel	r3, r2, ip
    fdc0:	bb4b      	cbnz	r3, fe16 <strlen+0x96>
    fdc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    fdc6:	fa82 f24c 	uadd8	r2, r2, ip
    fdca:	f100 0008 	add.w	r0, r0, #8
    fdce:	faa4 f28c 	sel	r2, r4, ip
    fdd2:	fa83 f34c 	uadd8	r3, r3, ip
    fdd6:	faa2 f38c 	sel	r3, r2, ip
    fdda:	b9e3      	cbnz	r3, fe16 <strlen+0x96>
    fddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    fde0:	fa82 f24c 	uadd8	r2, r2, ip
    fde4:	f100 0008 	add.w	r0, r0, #8
    fde8:	faa4 f28c 	sel	r2, r4, ip
    fdec:	fa83 f34c 	uadd8	r3, r3, ip
    fdf0:	faa2 f38c 	sel	r3, r2, ip
    fdf4:	b97b      	cbnz	r3, fe16 <strlen+0x96>
    fdf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    fdfa:	f101 0120 	add.w	r1, r1, #32
    fdfe:	fa82 f24c 	uadd8	r2, r2, ip
    fe02:	f100 0008 	add.w	r0, r0, #8
    fe06:	faa4 f28c 	sel	r2, r4, ip
    fe0a:	fa83 f34c 	uadd8	r3, r3, ip
    fe0e:	faa2 f38c 	sel	r3, r2, ip
    fe12:	2b00      	cmp	r3, #0
    fe14:	d0c6      	beq.n	fda4 <strlen+0x24>
    fe16:	2a00      	cmp	r2, #0
    fe18:	bf04      	itt	eq
    fe1a:	3004      	addeq	r0, #4
    fe1c:	461a      	moveq	r2, r3
    fe1e:	ba12      	rev	r2, r2
    fe20:	fab2 f282 	clz	r2, r2
    fe24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    fe28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    fe2c:	4770      	bx	lr
    fe2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    fe32:	f004 0503 	and.w	r5, r4, #3
    fe36:	f1c4 0000 	rsb	r0, r4, #0
    fe3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    fe3e:	f014 0f04 	tst.w	r4, #4
    fe42:	f891 f040 	pld	[r1, #64]	; 0x40
    fe46:	fa0c f505 	lsl.w	r5, ip, r5
    fe4a:	ea62 0205 	orn	r2, r2, r5
    fe4e:	bf1c      	itt	ne
    fe50:	ea63 0305 	ornne	r3, r3, r5
    fe54:	4662      	movne	r2, ip
    fe56:	f04f 0400 	mov.w	r4, #0
    fe5a:	e7a9      	b.n	fdb0 <strlen+0x30>

0000fe5c <register_fini>:
    fe5c:	4b02      	ldr	r3, [pc, #8]	; (fe68 <register_fini+0xc>)
    fe5e:	b113      	cbz	r3, fe66 <register_fini+0xa>
    fe60:	4802      	ldr	r0, [pc, #8]	; (fe6c <register_fini+0x10>)
    fe62:	f000 b805 	b.w	fe70 <atexit>
    fe66:	4770      	bx	lr
    fe68:	00000000 	.word	0x00000000
    fe6c:	000126b5 	.word	0x000126b5

0000fe70 <atexit>:
    fe70:	2300      	movs	r3, #0
    fe72:	4601      	mov	r1, r0
    fe74:	461a      	mov	r2, r3
    fe76:	4618      	mov	r0, r3
    fe78:	f002 bcba 	b.w	127f0 <__register_exitproc>

0000fe7c <_malloc_trim_r>:
    fe7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe7e:	4f24      	ldr	r7, [pc, #144]	; (ff10 <_malloc_trim_r+0x94>)
    fe80:	460c      	mov	r4, r1
    fe82:	4606      	mov	r6, r0
    fe84:	f7ff fa96 	bl	f3b4 <__malloc_lock>
    fe88:	68bb      	ldr	r3, [r7, #8]
    fe8a:	685d      	ldr	r5, [r3, #4]
    fe8c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    fe90:	310f      	adds	r1, #15
    fe92:	f025 0503 	bic.w	r5, r5, #3
    fe96:	194b      	adds	r3, r1, r5
    fe98:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    fe9c:	f023 030f 	bic.w	r3, r3, #15
    fea0:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    fea4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    fea8:	db07      	blt.n	feba <_malloc_trim_r+0x3e>
    feaa:	2100      	movs	r1, #0
    feac:	4630      	mov	r0, r6
    feae:	f7ff ff07 	bl	fcc0 <_sbrk_r>
    feb2:	68bb      	ldr	r3, [r7, #8]
    feb4:	442b      	add	r3, r5
    feb6:	4298      	cmp	r0, r3
    feb8:	d004      	beq.n	fec4 <_malloc_trim_r+0x48>
    feba:	4630      	mov	r0, r6
    febc:	f7ff fa80 	bl	f3c0 <__malloc_unlock>
    fec0:	2000      	movs	r0, #0
    fec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fec4:	4261      	negs	r1, r4
    fec6:	4630      	mov	r0, r6
    fec8:	f7ff fefa 	bl	fcc0 <_sbrk_r>
    fecc:	3001      	adds	r0, #1
    fece:	d00d      	beq.n	feec <_malloc_trim_r+0x70>
    fed0:	4a10      	ldr	r2, [pc, #64]	; (ff14 <_malloc_trim_r+0x98>)
    fed2:	68bb      	ldr	r3, [r7, #8]
    fed4:	1b2d      	subs	r5, r5, r4
    fed6:	f045 0501 	orr.w	r5, r5, #1
    feda:	605d      	str	r5, [r3, #4]
    fedc:	6813      	ldr	r3, [r2, #0]
    fede:	4630      	mov	r0, r6
    fee0:	1b1b      	subs	r3, r3, r4
    fee2:	6013      	str	r3, [r2, #0]
    fee4:	f7ff fa6c 	bl	f3c0 <__malloc_unlock>
    fee8:	2001      	movs	r0, #1
    feea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    feec:	2100      	movs	r1, #0
    feee:	4630      	mov	r0, r6
    fef0:	f7ff fee6 	bl	fcc0 <_sbrk_r>
    fef4:	68ba      	ldr	r2, [r7, #8]
    fef6:	1a83      	subs	r3, r0, r2
    fef8:	2b0f      	cmp	r3, #15
    fefa:	ddde      	ble.n	feba <_malloc_trim_r+0x3e>
    fefc:	f043 0301 	orr.w	r3, r3, #1
    ff00:	6053      	str	r3, [r2, #4]
    ff02:	4b05      	ldr	r3, [pc, #20]	; (ff18 <_malloc_trim_r+0x9c>)
    ff04:	4903      	ldr	r1, [pc, #12]	; (ff14 <_malloc_trim_r+0x98>)
    ff06:	681b      	ldr	r3, [r3, #0]
    ff08:	1ac0      	subs	r0, r0, r3
    ff0a:	6008      	str	r0, [r1, #0]
    ff0c:	e7d5      	b.n	feba <_malloc_trim_r+0x3e>
    ff0e:	bf00      	nop
    ff10:	1fff8abc 	.word	0x1fff8abc
    ff14:	1fffbc70 	.word	0x1fffbc70
    ff18:	1fff8ec4 	.word	0x1fff8ec4

0000ff1c <_free_r>:
    ff1c:	2900      	cmp	r1, #0
    ff1e:	d061      	beq.n	ffe4 <_free_r+0xc8>
    ff20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff22:	460c      	mov	r4, r1
    ff24:	4606      	mov	r6, r0
    ff26:	f7ff fa45 	bl	f3b4 <__malloc_lock>
    ff2a:	f854 2c04 	ldr.w	r2, [r4, #-4]
    ff2e:	4f7b      	ldr	r7, [pc, #492]	; (1011c <_free_r+0x200>)
    ff30:	f1a4 0508 	sub.w	r5, r4, #8
    ff34:	f022 0101 	bic.w	r1, r2, #1
    ff38:	eb05 0c01 	add.w	ip, r5, r1
    ff3c:	68b8      	ldr	r0, [r7, #8]
    ff3e:	f8dc 3004 	ldr.w	r3, [ip, #4]
    ff42:	4560      	cmp	r0, ip
    ff44:	f023 0303 	bic.w	r3, r3, #3
    ff48:	f000 808b 	beq.w	10062 <_free_r+0x146>
    ff4c:	07d2      	lsls	r2, r2, #31
    ff4e:	f8cc 3004 	str.w	r3, [ip, #4]
    ff52:	d432      	bmi.n	ffba <_free_r+0x9e>
    ff54:	f854 2c08 	ldr.w	r2, [r4, #-8]
    ff58:	1aad      	subs	r5, r5, r2
    ff5a:	4411      	add	r1, r2
    ff5c:	68aa      	ldr	r2, [r5, #8]
    ff5e:	f107 0008 	add.w	r0, r7, #8
    ff62:	4282      	cmp	r2, r0
    ff64:	d06a      	beq.n	1003c <_free_r+0x120>
    ff66:	eb0c 0403 	add.w	r4, ip, r3
    ff6a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    ff6e:	68ec      	ldr	r4, [r5, #12]
    ff70:	60d4      	str	r4, [r2, #12]
    ff72:	f01e 0f01 	tst.w	lr, #1
    ff76:	60a2      	str	r2, [r4, #8]
    ff78:	f000 8097 	beq.w	100aa <_free_r+0x18e>
    ff7c:	f041 0301 	orr.w	r3, r1, #1
    ff80:	606b      	str	r3, [r5, #4]
    ff82:	f8cc 1000 	str.w	r1, [ip]
    ff86:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    ff8a:	d235      	bcs.n	fff8 <_free_r+0xdc>
    ff8c:	6878      	ldr	r0, [r7, #4]
    ff8e:	08cb      	lsrs	r3, r1, #3
    ff90:	2201      	movs	r2, #1
    ff92:	0949      	lsrs	r1, r1, #5
    ff94:	3301      	adds	r3, #1
    ff96:	408a      	lsls	r2, r1
    ff98:	4302      	orrs	r2, r0
    ff9a:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    ff9e:	607a      	str	r2, [r7, #4]
    ffa0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    ffa4:	3a08      	subs	r2, #8
    ffa6:	e9c5 1202 	strd	r1, r2, [r5, #8]
    ffaa:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    ffae:	60cd      	str	r5, [r1, #12]
    ffb0:	4630      	mov	r0, r6
    ffb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ffb6:	f7ff ba03 	b.w	f3c0 <__malloc_unlock>
    ffba:	eb0c 0203 	add.w	r2, ip, r3
    ffbe:	6852      	ldr	r2, [r2, #4]
    ffc0:	07d0      	lsls	r0, r2, #31
    ffc2:	d410      	bmi.n	ffe6 <_free_r+0xca>
    ffc4:	4419      	add	r1, r3
    ffc6:	f107 0008 	add.w	r0, r7, #8
    ffca:	f8dc 3008 	ldr.w	r3, [ip, #8]
    ffce:	4283      	cmp	r3, r0
    ffd0:	d073      	beq.n	100ba <_free_r+0x19e>
    ffd2:	f8dc 200c 	ldr.w	r2, [ip, #12]
    ffd6:	60da      	str	r2, [r3, #12]
    ffd8:	6093      	str	r3, [r2, #8]
    ffda:	f041 0301 	orr.w	r3, r1, #1
    ffde:	606b      	str	r3, [r5, #4]
    ffe0:	5069      	str	r1, [r5, r1]
    ffe2:	e7d0      	b.n	ff86 <_free_r+0x6a>
    ffe4:	4770      	bx	lr
    ffe6:	f041 0301 	orr.w	r3, r1, #1
    ffea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    ffee:	f844 3c04 	str.w	r3, [r4, #-4]
    fff2:	f8cc 1000 	str.w	r1, [ip]
    fff6:	d3c9      	bcc.n	ff8c <_free_r+0x70>
    fff8:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    fffc:	ea4f 2351 	mov.w	r3, r1, lsr #9
   10000:	d248      	bcs.n	10094 <_free_r+0x178>
   10002:	098b      	lsrs	r3, r1, #6
   10004:	f103 0039 	add.w	r0, r3, #57	; 0x39
   10008:	f103 0238 	add.w	r2, r3, #56	; 0x38
   1000c:	00c3      	lsls	r3, r0, #3
   1000e:	18f8      	adds	r0, r7, r3
   10010:	58fb      	ldr	r3, [r7, r3]
   10012:	3808      	subs	r0, #8
   10014:	4298      	cmp	r0, r3
   10016:	d059      	beq.n	100cc <_free_r+0x1b0>
   10018:	685a      	ldr	r2, [r3, #4]
   1001a:	f022 0203 	bic.w	r2, r2, #3
   1001e:	428a      	cmp	r2, r1
   10020:	d902      	bls.n	10028 <_free_r+0x10c>
   10022:	689b      	ldr	r3, [r3, #8]
   10024:	4298      	cmp	r0, r3
   10026:	d1f7      	bne.n	10018 <_free_r+0xfc>
   10028:	68d8      	ldr	r0, [r3, #12]
   1002a:	e9c5 3002 	strd	r3, r0, [r5, #8]
   1002e:	6085      	str	r5, [r0, #8]
   10030:	60dd      	str	r5, [r3, #12]
   10032:	4630      	mov	r0, r6
   10034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10038:	f7ff b9c2 	b.w	f3c0 <__malloc_unlock>
   1003c:	eb0c 0203 	add.w	r2, ip, r3
   10040:	6852      	ldr	r2, [r2, #4]
   10042:	07d2      	lsls	r2, r2, #31
   10044:	d463      	bmi.n	1010e <_free_r+0x1f2>
   10046:	440b      	add	r3, r1
   10048:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   1004c:	60ca      	str	r2, [r1, #12]
   1004e:	6091      	str	r1, [r2, #8]
   10050:	f043 0201 	orr.w	r2, r3, #1
   10054:	606a      	str	r2, [r5, #4]
   10056:	4630      	mov	r0, r6
   10058:	50eb      	str	r3, [r5, r3]
   1005a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1005e:	f7ff b9af 	b.w	f3c0 <__malloc_unlock>
   10062:	440b      	add	r3, r1
   10064:	07d1      	lsls	r1, r2, #31
   10066:	d407      	bmi.n	10078 <_free_r+0x15c>
   10068:	f854 2c08 	ldr.w	r2, [r4, #-8]
   1006c:	1aad      	subs	r5, r5, r2
   1006e:	4413      	add	r3, r2
   10070:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   10074:	60ca      	str	r2, [r1, #12]
   10076:	6091      	str	r1, [r2, #8]
   10078:	f043 0201 	orr.w	r2, r3, #1
   1007c:	606a      	str	r2, [r5, #4]
   1007e:	4a28      	ldr	r2, [pc, #160]	; (10120 <_free_r+0x204>)
   10080:	60bd      	str	r5, [r7, #8]
   10082:	6812      	ldr	r2, [r2, #0]
   10084:	429a      	cmp	r2, r3
   10086:	d893      	bhi.n	ffb0 <_free_r+0x94>
   10088:	4b26      	ldr	r3, [pc, #152]	; (10124 <_free_r+0x208>)
   1008a:	4630      	mov	r0, r6
   1008c:	6819      	ldr	r1, [r3, #0]
   1008e:	f7ff fef5 	bl	fe7c <_malloc_trim_r>
   10092:	e78d      	b.n	ffb0 <_free_r+0x94>
   10094:	2b14      	cmp	r3, #20
   10096:	d90a      	bls.n	100ae <_free_r+0x192>
   10098:	2b54      	cmp	r3, #84	; 0x54
   1009a:	d81f      	bhi.n	100dc <_free_r+0x1c0>
   1009c:	0b0b      	lsrs	r3, r1, #12
   1009e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   100a2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   100a6:	00c3      	lsls	r3, r0, #3
   100a8:	e7b1      	b.n	1000e <_free_r+0xf2>
   100aa:	4419      	add	r1, r3
   100ac:	e78d      	b.n	ffca <_free_r+0xae>
   100ae:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   100b2:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   100b6:	00c3      	lsls	r3, r0, #3
   100b8:	e7a9      	b.n	1000e <_free_r+0xf2>
   100ba:	f041 0301 	orr.w	r3, r1, #1
   100be:	e9c7 5504 	strd	r5, r5, [r7, #16]
   100c2:	e9c5 0002 	strd	r0, r0, [r5, #8]
   100c6:	606b      	str	r3, [r5, #4]
   100c8:	5069      	str	r1, [r5, r1]
   100ca:	e771      	b.n	ffb0 <_free_r+0x94>
   100cc:	6879      	ldr	r1, [r7, #4]
   100ce:	1092      	asrs	r2, r2, #2
   100d0:	2401      	movs	r4, #1
   100d2:	fa04 f202 	lsl.w	r2, r4, r2
   100d6:	430a      	orrs	r2, r1
   100d8:	607a      	str	r2, [r7, #4]
   100da:	e7a6      	b.n	1002a <_free_r+0x10e>
   100dc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   100e0:	d806      	bhi.n	100f0 <_free_r+0x1d4>
   100e2:	0bcb      	lsrs	r3, r1, #15
   100e4:	f103 0078 	add.w	r0, r3, #120	; 0x78
   100e8:	f103 0277 	add.w	r2, r3, #119	; 0x77
   100ec:	00c3      	lsls	r3, r0, #3
   100ee:	e78e      	b.n	1000e <_free_r+0xf2>
   100f0:	f240 5254 	movw	r2, #1364	; 0x554
   100f4:	4293      	cmp	r3, r2
   100f6:	d806      	bhi.n	10106 <_free_r+0x1ea>
   100f8:	0c8b      	lsrs	r3, r1, #18
   100fa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   100fe:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   10102:	00c3      	lsls	r3, r0, #3
   10104:	e783      	b.n	1000e <_free_r+0xf2>
   10106:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1010a:	227e      	movs	r2, #126	; 0x7e
   1010c:	e77f      	b.n	1000e <_free_r+0xf2>
   1010e:	f041 0301 	orr.w	r3, r1, #1
   10112:	606b      	str	r3, [r5, #4]
   10114:	f8cc 1000 	str.w	r1, [ip]
   10118:	e74a      	b.n	ffb0 <_free_r+0x94>
   1011a:	bf00      	nop
   1011c:	1fff8abc 	.word	0x1fff8abc
   10120:	1fff8ec8 	.word	0x1fff8ec8
   10124:	1fffbca0 	.word	0x1fffbca0

00010128 <__ascii_mbtowc>:
   10128:	b082      	sub	sp, #8
   1012a:	b149      	cbz	r1, 10140 <__ascii_mbtowc+0x18>
   1012c:	b15a      	cbz	r2, 10146 <__ascii_mbtowc+0x1e>
   1012e:	b16b      	cbz	r3, 1014c <__ascii_mbtowc+0x24>
   10130:	7813      	ldrb	r3, [r2, #0]
   10132:	600b      	str	r3, [r1, #0]
   10134:	7812      	ldrb	r2, [r2, #0]
   10136:	1e10      	subs	r0, r2, #0
   10138:	bf18      	it	ne
   1013a:	2001      	movne	r0, #1
   1013c:	b002      	add	sp, #8
   1013e:	4770      	bx	lr
   10140:	a901      	add	r1, sp, #4
   10142:	2a00      	cmp	r2, #0
   10144:	d1f3      	bne.n	1012e <__ascii_mbtowc+0x6>
   10146:	4610      	mov	r0, r2
   10148:	b002      	add	sp, #8
   1014a:	4770      	bx	lr
   1014c:	f06f 0001 	mvn.w	r0, #1
   10150:	e7f4      	b.n	1013c <__ascii_mbtowc+0x14>
   10152:	bf00      	nop

00010154 <_Balloc>:
   10154:	6c43      	ldr	r3, [r0, #68]	; 0x44
   10156:	b570      	push	{r4, r5, r6, lr}
   10158:	4605      	mov	r5, r0
   1015a:	460c      	mov	r4, r1
   1015c:	b14b      	cbz	r3, 10172 <_Balloc+0x1e>
   1015e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   10162:	b180      	cbz	r0, 10186 <_Balloc+0x32>
   10164:	6802      	ldr	r2, [r0, #0]
   10166:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1016a:	2300      	movs	r3, #0
   1016c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   10170:	bd70      	pop	{r4, r5, r6, pc}
   10172:	2221      	movs	r2, #33	; 0x21
   10174:	2104      	movs	r1, #4
   10176:	f002 fb9f 	bl	128b8 <_calloc_r>
   1017a:	4603      	mov	r3, r0
   1017c:	6468      	str	r0, [r5, #68]	; 0x44
   1017e:	2800      	cmp	r0, #0
   10180:	d1ed      	bne.n	1015e <_Balloc+0xa>
   10182:	2000      	movs	r0, #0
   10184:	bd70      	pop	{r4, r5, r6, pc}
   10186:	2101      	movs	r1, #1
   10188:	fa01 f604 	lsl.w	r6, r1, r4
   1018c:	1d72      	adds	r2, r6, #5
   1018e:	0092      	lsls	r2, r2, #2
   10190:	4628      	mov	r0, r5
   10192:	f002 fb91 	bl	128b8 <_calloc_r>
   10196:	2800      	cmp	r0, #0
   10198:	d0f3      	beq.n	10182 <_Balloc+0x2e>
   1019a:	e9c0 4601 	strd	r4, r6, [r0, #4]
   1019e:	e7e4      	b.n	1016a <_Balloc+0x16>

000101a0 <_Bfree>:
   101a0:	b131      	cbz	r1, 101b0 <_Bfree+0x10>
   101a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   101a4:	684a      	ldr	r2, [r1, #4]
   101a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   101aa:	6008      	str	r0, [r1, #0]
   101ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   101b0:	4770      	bx	lr
   101b2:	bf00      	nop

000101b4 <__multadd>:
   101b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   101b8:	690d      	ldr	r5, [r1, #16]
   101ba:	4607      	mov	r7, r0
   101bc:	460e      	mov	r6, r1
   101be:	461c      	mov	r4, r3
   101c0:	f101 0e14 	add.w	lr, r1, #20
   101c4:	2000      	movs	r0, #0
   101c6:	f8de 1000 	ldr.w	r1, [lr]
   101ca:	b28b      	uxth	r3, r1
   101cc:	fb02 4303 	mla	r3, r2, r3, r4
   101d0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   101d4:	0c09      	lsrs	r1, r1, #16
   101d6:	fb02 cc01 	mla	ip, r2, r1, ip
   101da:	3001      	adds	r0, #1
   101dc:	b29b      	uxth	r3, r3
   101de:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   101e2:	4285      	cmp	r5, r0
   101e4:	f84e 3b04 	str.w	r3, [lr], #4
   101e8:	ea4f 441c 	mov.w	r4, ip, lsr #16
   101ec:	dceb      	bgt.n	101c6 <__multadd+0x12>
   101ee:	b13c      	cbz	r4, 10200 <__multadd+0x4c>
   101f0:	68b3      	ldr	r3, [r6, #8]
   101f2:	42ab      	cmp	r3, r5
   101f4:	dd07      	ble.n	10206 <__multadd+0x52>
   101f6:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   101fa:	3501      	adds	r5, #1
   101fc:	615c      	str	r4, [r3, #20]
   101fe:	6135      	str	r5, [r6, #16]
   10200:	4630      	mov	r0, r6
   10202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10206:	6871      	ldr	r1, [r6, #4]
   10208:	4638      	mov	r0, r7
   1020a:	3101      	adds	r1, #1
   1020c:	f7ff ffa2 	bl	10154 <_Balloc>
   10210:	4680      	mov	r8, r0
   10212:	b1a8      	cbz	r0, 10240 <__multadd+0x8c>
   10214:	6932      	ldr	r2, [r6, #16]
   10216:	3202      	adds	r2, #2
   10218:	f106 010c 	add.w	r1, r6, #12
   1021c:	0092      	lsls	r2, r2, #2
   1021e:	300c      	adds	r0, #12
   10220:	f7fa fc4c 	bl	aabc <memcpy>
   10224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10226:	6872      	ldr	r2, [r6, #4]
   10228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1022c:	6031      	str	r1, [r6, #0]
   1022e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   10232:	4646      	mov	r6, r8
   10234:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   10238:	3501      	adds	r5, #1
   1023a:	615c      	str	r4, [r3, #20]
   1023c:	6135      	str	r5, [r6, #16]
   1023e:	e7df      	b.n	10200 <__multadd+0x4c>
   10240:	4b02      	ldr	r3, [pc, #8]	; (1024c <__multadd+0x98>)
   10242:	4803      	ldr	r0, [pc, #12]	; (10250 <__multadd+0x9c>)
   10244:	4642      	mov	r2, r8
   10246:	21ba      	movs	r1, #186	; 0xba
   10248:	f002 fb16 	bl	12878 <__assert_func>
   1024c:	0001730c 	.word	0x0001730c
   10250:	00017320 	.word	0x00017320

00010254 <__hi0bits>:
   10254:	0c02      	lsrs	r2, r0, #16
   10256:	0412      	lsls	r2, r2, #16
   10258:	4603      	mov	r3, r0
   1025a:	b9ca      	cbnz	r2, 10290 <__hi0bits+0x3c>
   1025c:	0403      	lsls	r3, r0, #16
   1025e:	2010      	movs	r0, #16
   10260:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   10264:	bf04      	itt	eq
   10266:	021b      	lsleq	r3, r3, #8
   10268:	3008      	addeq	r0, #8
   1026a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   1026e:	bf04      	itt	eq
   10270:	011b      	lsleq	r3, r3, #4
   10272:	3004      	addeq	r0, #4
   10274:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   10278:	bf04      	itt	eq
   1027a:	009b      	lsleq	r3, r3, #2
   1027c:	3002      	addeq	r0, #2
   1027e:	2b00      	cmp	r3, #0
   10280:	db05      	blt.n	1028e <__hi0bits+0x3a>
   10282:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   10286:	f100 0001 	add.w	r0, r0, #1
   1028a:	bf08      	it	eq
   1028c:	2020      	moveq	r0, #32
   1028e:	4770      	bx	lr
   10290:	2000      	movs	r0, #0
   10292:	e7e5      	b.n	10260 <__hi0bits+0xc>

00010294 <__lo0bits>:
   10294:	6803      	ldr	r3, [r0, #0]
   10296:	f013 0207 	ands.w	r2, r3, #7
   1029a:	4601      	mov	r1, r0
   1029c:	d007      	beq.n	102ae <__lo0bits+0x1a>
   1029e:	07da      	lsls	r2, r3, #31
   102a0:	d41f      	bmi.n	102e2 <__lo0bits+0x4e>
   102a2:	0798      	lsls	r0, r3, #30
   102a4:	d521      	bpl.n	102ea <__lo0bits+0x56>
   102a6:	085b      	lsrs	r3, r3, #1
   102a8:	600b      	str	r3, [r1, #0]
   102aa:	2001      	movs	r0, #1
   102ac:	4770      	bx	lr
   102ae:	b298      	uxth	r0, r3
   102b0:	b1a0      	cbz	r0, 102dc <__lo0bits+0x48>
   102b2:	4610      	mov	r0, r2
   102b4:	b2da      	uxtb	r2, r3
   102b6:	b90a      	cbnz	r2, 102bc <__lo0bits+0x28>
   102b8:	3008      	adds	r0, #8
   102ba:	0a1b      	lsrs	r3, r3, #8
   102bc:	071a      	lsls	r2, r3, #28
   102be:	bf04      	itt	eq
   102c0:	091b      	lsreq	r3, r3, #4
   102c2:	3004      	addeq	r0, #4
   102c4:	079a      	lsls	r2, r3, #30
   102c6:	bf04      	itt	eq
   102c8:	089b      	lsreq	r3, r3, #2
   102ca:	3002      	addeq	r0, #2
   102cc:	07da      	lsls	r2, r3, #31
   102ce:	d403      	bmi.n	102d8 <__lo0bits+0x44>
   102d0:	085b      	lsrs	r3, r3, #1
   102d2:	f100 0001 	add.w	r0, r0, #1
   102d6:	d006      	beq.n	102e6 <__lo0bits+0x52>
   102d8:	600b      	str	r3, [r1, #0]
   102da:	4770      	bx	lr
   102dc:	0c1b      	lsrs	r3, r3, #16
   102de:	2010      	movs	r0, #16
   102e0:	e7e8      	b.n	102b4 <__lo0bits+0x20>
   102e2:	2000      	movs	r0, #0
   102e4:	4770      	bx	lr
   102e6:	2020      	movs	r0, #32
   102e8:	4770      	bx	lr
   102ea:	089b      	lsrs	r3, r3, #2
   102ec:	600b      	str	r3, [r1, #0]
   102ee:	2002      	movs	r0, #2
   102f0:	4770      	bx	lr
   102f2:	bf00      	nop

000102f4 <__i2b>:
   102f4:	b538      	push	{r3, r4, r5, lr}
   102f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
   102f8:	4604      	mov	r4, r0
   102fa:	460d      	mov	r5, r1
   102fc:	b14b      	cbz	r3, 10312 <__i2b+0x1e>
   102fe:	6858      	ldr	r0, [r3, #4]
   10300:	b1b0      	cbz	r0, 10330 <__i2b+0x3c>
   10302:	6802      	ldr	r2, [r0, #0]
   10304:	605a      	str	r2, [r3, #4]
   10306:	2200      	movs	r2, #0
   10308:	2301      	movs	r3, #1
   1030a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1030e:	60c2      	str	r2, [r0, #12]
   10310:	bd38      	pop	{r3, r4, r5, pc}
   10312:	2221      	movs	r2, #33	; 0x21
   10314:	2104      	movs	r1, #4
   10316:	f002 facf 	bl	128b8 <_calloc_r>
   1031a:	4603      	mov	r3, r0
   1031c:	6460      	str	r0, [r4, #68]	; 0x44
   1031e:	2800      	cmp	r0, #0
   10320:	d1ed      	bne.n	102fe <__i2b+0xa>
   10322:	4b09      	ldr	r3, [pc, #36]	; (10348 <__i2b+0x54>)
   10324:	4809      	ldr	r0, [pc, #36]	; (1034c <__i2b+0x58>)
   10326:	2200      	movs	r2, #0
   10328:	f240 1145 	movw	r1, #325	; 0x145
   1032c:	f002 faa4 	bl	12878 <__assert_func>
   10330:	221c      	movs	r2, #28
   10332:	2101      	movs	r1, #1
   10334:	4620      	mov	r0, r4
   10336:	f002 fabf 	bl	128b8 <_calloc_r>
   1033a:	2800      	cmp	r0, #0
   1033c:	d0f1      	beq.n	10322 <__i2b+0x2e>
   1033e:	2201      	movs	r2, #1
   10340:	2302      	movs	r3, #2
   10342:	e9c0 2301 	strd	r2, r3, [r0, #4]
   10346:	e7de      	b.n	10306 <__i2b+0x12>
   10348:	0001730c 	.word	0x0001730c
   1034c:	00017320 	.word	0x00017320

00010350 <__multiply>:
   10350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10354:	690e      	ldr	r6, [r1, #16]
   10356:	6915      	ldr	r5, [r2, #16]
   10358:	42ae      	cmp	r6, r5
   1035a:	b085      	sub	sp, #20
   1035c:	4688      	mov	r8, r1
   1035e:	4614      	mov	r4, r2
   10360:	db05      	blt.n	1036e <__multiply+0x1e>
   10362:	462a      	mov	r2, r5
   10364:	4623      	mov	r3, r4
   10366:	4635      	mov	r5, r6
   10368:	460c      	mov	r4, r1
   1036a:	4616      	mov	r6, r2
   1036c:	4698      	mov	r8, r3
   1036e:	68a3      	ldr	r3, [r4, #8]
   10370:	6861      	ldr	r1, [r4, #4]
   10372:	19af      	adds	r7, r5, r6
   10374:	42bb      	cmp	r3, r7
   10376:	bfb8      	it	lt
   10378:	3101      	addlt	r1, #1
   1037a:	f7ff feeb 	bl	10154 <_Balloc>
   1037e:	9001      	str	r0, [sp, #4]
   10380:	2800      	cmp	r0, #0
   10382:	f000 8087 	beq.w	10494 <__multiply+0x144>
   10386:	9b01      	ldr	r3, [sp, #4]
   10388:	f103 0914 	add.w	r9, r3, #20
   1038c:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   10390:	45d1      	cmp	r9, sl
   10392:	d205      	bcs.n	103a0 <__multiply+0x50>
   10394:	464b      	mov	r3, r9
   10396:	2200      	movs	r2, #0
   10398:	f843 2b04 	str.w	r2, [r3], #4
   1039c:	459a      	cmp	sl, r3
   1039e:	d8fb      	bhi.n	10398 <__multiply+0x48>
   103a0:	f108 0814 	add.w	r8, r8, #20
   103a4:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   103a8:	f104 0314 	add.w	r3, r4, #20
   103ac:	45d8      	cmp	r8, fp
   103ae:	461a      	mov	r2, r3
   103b0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   103b4:	d25f      	bcs.n	10476 <__multiply+0x126>
   103b6:	1b2b      	subs	r3, r5, r4
   103b8:	3b15      	subs	r3, #21
   103ba:	f023 0303 	bic.w	r3, r3, #3
   103be:	3304      	adds	r3, #4
   103c0:	3415      	adds	r4, #21
   103c2:	42a5      	cmp	r5, r4
   103c4:	bf38      	it	cc
   103c6:	2304      	movcc	r3, #4
   103c8:	e9cd a702 	strd	sl, r7, [sp, #8]
   103cc:	46ac      	mov	ip, r5
   103ce:	461f      	mov	r7, r3
   103d0:	4692      	mov	sl, r2
   103d2:	e005      	b.n	103e0 <__multiply+0x90>
   103d4:	0c09      	lsrs	r1, r1, #16
   103d6:	d129      	bne.n	1042c <__multiply+0xdc>
   103d8:	45c3      	cmp	fp, r8
   103da:	f109 0904 	add.w	r9, r9, #4
   103de:	d948      	bls.n	10472 <__multiply+0x122>
   103e0:	f858 1b04 	ldr.w	r1, [r8], #4
   103e4:	b28d      	uxth	r5, r1
   103e6:	2d00      	cmp	r5, #0
   103e8:	d0f4      	beq.n	103d4 <__multiply+0x84>
   103ea:	4656      	mov	r6, sl
   103ec:	464c      	mov	r4, r9
   103ee:	2300      	movs	r3, #0
   103f0:	f856 1b04 	ldr.w	r1, [r6], #4
   103f4:	6822      	ldr	r2, [r4, #0]
   103f6:	fa1f fe81 	uxth.w	lr, r1
   103fa:	b290      	uxth	r0, r2
   103fc:	0c09      	lsrs	r1, r1, #16
   103fe:	fb05 000e 	mla	r0, r5, lr, r0
   10402:	0c12      	lsrs	r2, r2, #16
   10404:	4403      	add	r3, r0
   10406:	fb05 2201 	mla	r2, r5, r1, r2
   1040a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   1040e:	b29b      	uxth	r3, r3
   10410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10414:	45b4      	cmp	ip, r6
   10416:	f844 3b04 	str.w	r3, [r4], #4
   1041a:	ea4f 4312 	mov.w	r3, r2, lsr #16
   1041e:	d8e7      	bhi.n	103f0 <__multiply+0xa0>
   10420:	f849 3007 	str.w	r3, [r9, r7]
   10424:	f858 1c04 	ldr.w	r1, [r8, #-4]
   10428:	0c09      	lsrs	r1, r1, #16
   1042a:	d0d5      	beq.n	103d8 <__multiply+0x88>
   1042c:	f8d9 3000 	ldr.w	r3, [r9]
   10430:	4650      	mov	r0, sl
   10432:	461a      	mov	r2, r3
   10434:	464c      	mov	r4, r9
   10436:	2600      	movs	r6, #0
   10438:	8805      	ldrh	r5, [r0, #0]
   1043a:	0c12      	lsrs	r2, r2, #16
   1043c:	fb01 2205 	mla	r2, r1, r5, r2
   10440:	4416      	add	r6, r2
   10442:	b29b      	uxth	r3, r3
   10444:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   10448:	f844 3b04 	str.w	r3, [r4], #4
   1044c:	f850 5b04 	ldr.w	r5, [r0], #4
   10450:	6822      	ldr	r2, [r4, #0]
   10452:	0c2d      	lsrs	r5, r5, #16
   10454:	b293      	uxth	r3, r2
   10456:	fb01 3305 	mla	r3, r1, r5, r3
   1045a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   1045e:	4584      	cmp	ip, r0
   10460:	ea4f 4613 	mov.w	r6, r3, lsr #16
   10464:	d8e8      	bhi.n	10438 <__multiply+0xe8>
   10466:	45c3      	cmp	fp, r8
   10468:	f849 3007 	str.w	r3, [r9, r7]
   1046c:	f109 0904 	add.w	r9, r9, #4
   10470:	d8b6      	bhi.n	103e0 <__multiply+0x90>
   10472:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   10476:	2f00      	cmp	r7, #0
   10478:	dc02      	bgt.n	10480 <__multiply+0x130>
   1047a:	e005      	b.n	10488 <__multiply+0x138>
   1047c:	3f01      	subs	r7, #1
   1047e:	d003      	beq.n	10488 <__multiply+0x138>
   10480:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   10484:	2b00      	cmp	r3, #0
   10486:	d0f9      	beq.n	1047c <__multiply+0x12c>
   10488:	9b01      	ldr	r3, [sp, #4]
   1048a:	4618      	mov	r0, r3
   1048c:	611f      	str	r7, [r3, #16]
   1048e:	b005      	add	sp, #20
   10490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10494:	4b03      	ldr	r3, [pc, #12]	; (104a4 <__multiply+0x154>)
   10496:	4804      	ldr	r0, [pc, #16]	; (104a8 <__multiply+0x158>)
   10498:	9a01      	ldr	r2, [sp, #4]
   1049a:	f44f 71b1 	mov.w	r1, #354	; 0x162
   1049e:	f002 f9eb 	bl	12878 <__assert_func>
   104a2:	bf00      	nop
   104a4:	0001730c 	.word	0x0001730c
   104a8:	00017320 	.word	0x00017320

000104ac <__pow5mult>:
   104ac:	f012 0303 	ands.w	r3, r2, #3
   104b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104b4:	4614      	mov	r4, r2
   104b6:	4606      	mov	r6, r0
   104b8:	d132      	bne.n	10520 <__pow5mult+0x74>
   104ba:	460d      	mov	r5, r1
   104bc:	10a4      	asrs	r4, r4, #2
   104be:	d020      	beq.n	10502 <__pow5mult+0x56>
   104c0:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   104c4:	f1b8 0f00 	cmp.w	r8, #0
   104c8:	d033      	beq.n	10532 <__pow5mult+0x86>
   104ca:	07e3      	lsls	r3, r4, #31
   104cc:	f04f 0700 	mov.w	r7, #0
   104d0:	d407      	bmi.n	104e2 <__pow5mult+0x36>
   104d2:	1064      	asrs	r4, r4, #1
   104d4:	d015      	beq.n	10502 <__pow5mult+0x56>
   104d6:	f8d8 0000 	ldr.w	r0, [r8]
   104da:	b1a8      	cbz	r0, 10508 <__pow5mult+0x5c>
   104dc:	4680      	mov	r8, r0
   104de:	07e3      	lsls	r3, r4, #31
   104e0:	d5f7      	bpl.n	104d2 <__pow5mult+0x26>
   104e2:	4642      	mov	r2, r8
   104e4:	4629      	mov	r1, r5
   104e6:	4630      	mov	r0, r6
   104e8:	f7ff ff32 	bl	10350 <__multiply>
   104ec:	b1b5      	cbz	r5, 1051c <__pow5mult+0x70>
   104ee:	6869      	ldr	r1, [r5, #4]
   104f0:	6c73      	ldr	r3, [r6, #68]	; 0x44
   104f2:	1064      	asrs	r4, r4, #1
   104f4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   104f8:	602a      	str	r2, [r5, #0]
   104fa:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   104fe:	4605      	mov	r5, r0
   10500:	d1e9      	bne.n	104d6 <__pow5mult+0x2a>
   10502:	4628      	mov	r0, r5
   10504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10508:	4642      	mov	r2, r8
   1050a:	4641      	mov	r1, r8
   1050c:	4630      	mov	r0, r6
   1050e:	f7ff ff1f 	bl	10350 <__multiply>
   10512:	f8c8 0000 	str.w	r0, [r8]
   10516:	6007      	str	r7, [r0, #0]
   10518:	4680      	mov	r8, r0
   1051a:	e7e0      	b.n	104de <__pow5mult+0x32>
   1051c:	4605      	mov	r5, r0
   1051e:	e7d8      	b.n	104d2 <__pow5mult+0x26>
   10520:	3b01      	subs	r3, #1
   10522:	4a0f      	ldr	r2, [pc, #60]	; (10560 <__pow5mult+0xb4>)
   10524:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   10528:	2300      	movs	r3, #0
   1052a:	f7ff fe43 	bl	101b4 <__multadd>
   1052e:	4605      	mov	r5, r0
   10530:	e7c4      	b.n	104bc <__pow5mult+0x10>
   10532:	2101      	movs	r1, #1
   10534:	4630      	mov	r0, r6
   10536:	f7ff fe0d 	bl	10154 <_Balloc>
   1053a:	4680      	mov	r8, r0
   1053c:	b140      	cbz	r0, 10550 <__pow5mult+0xa4>
   1053e:	2301      	movs	r3, #1
   10540:	f240 2271 	movw	r2, #625	; 0x271
   10544:	e9c0 3204 	strd	r3, r2, [r0, #16]
   10548:	2300      	movs	r3, #0
   1054a:	6430      	str	r0, [r6, #64]	; 0x40
   1054c:	6003      	str	r3, [r0, #0]
   1054e:	e7bc      	b.n	104ca <__pow5mult+0x1e>
   10550:	4b04      	ldr	r3, [pc, #16]	; (10564 <__pow5mult+0xb8>)
   10552:	4805      	ldr	r0, [pc, #20]	; (10568 <__pow5mult+0xbc>)
   10554:	4642      	mov	r2, r8
   10556:	f240 1145 	movw	r1, #325	; 0x145
   1055a:	f002 f98d 	bl	12878 <__assert_func>
   1055e:	bf00      	nop
   10560:	00017470 	.word	0x00017470
   10564:	0001730c 	.word	0x0001730c
   10568:	00017320 	.word	0x00017320

0001056c <__lshift>:
   1056c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10570:	460c      	mov	r4, r1
   10572:	4690      	mov	r8, r2
   10574:	6926      	ldr	r6, [r4, #16]
   10576:	68a3      	ldr	r3, [r4, #8]
   10578:	6849      	ldr	r1, [r1, #4]
   1057a:	eb06 1662 	add.w	r6, r6, r2, asr #5
   1057e:	1c75      	adds	r5, r6, #1
   10580:	429d      	cmp	r5, r3
   10582:	4607      	mov	r7, r0
   10584:	ea4f 1962 	mov.w	r9, r2, asr #5
   10588:	dd04      	ble.n	10594 <__lshift+0x28>
   1058a:	005b      	lsls	r3, r3, #1
   1058c:	429d      	cmp	r5, r3
   1058e:	f101 0101 	add.w	r1, r1, #1
   10592:	dcfa      	bgt.n	1058a <__lshift+0x1e>
   10594:	4638      	mov	r0, r7
   10596:	f7ff fddd 	bl	10154 <_Balloc>
   1059a:	4684      	mov	ip, r0
   1059c:	2800      	cmp	r0, #0
   1059e:	d051      	beq.n	10644 <__lshift+0xd8>
   105a0:	f1b9 0f00 	cmp.w	r9, #0
   105a4:	f100 0014 	add.w	r0, r0, #20
   105a8:	dd0e      	ble.n	105c8 <__lshift+0x5c>
   105aa:	f109 0205 	add.w	r2, r9, #5
   105ae:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   105b2:	4603      	mov	r3, r0
   105b4:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   105b8:	2100      	movs	r1, #0
   105ba:	f843 1b04 	str.w	r1, [r3], #4
   105be:	4293      	cmp	r3, r2
   105c0:	d1fb      	bne.n	105ba <__lshift+0x4e>
   105c2:	f1ae 0314 	sub.w	r3, lr, #20
   105c6:	4418      	add	r0, r3
   105c8:	6921      	ldr	r1, [r4, #16]
   105ca:	f104 0314 	add.w	r3, r4, #20
   105ce:	f018 081f 	ands.w	r8, r8, #31
   105d2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   105d6:	d02d      	beq.n	10634 <__lshift+0xc8>
   105d8:	f1c8 0920 	rsb	r9, r8, #32
   105dc:	4686      	mov	lr, r0
   105de:	f04f 0a00 	mov.w	sl, #0
   105e2:	681a      	ldr	r2, [r3, #0]
   105e4:	fa02 f208 	lsl.w	r2, r2, r8
   105e8:	ea42 020a 	orr.w	r2, r2, sl
   105ec:	f84e 2b04 	str.w	r2, [lr], #4
   105f0:	f853 2b04 	ldr.w	r2, [r3], #4
   105f4:	4299      	cmp	r1, r3
   105f6:	fa22 fa09 	lsr.w	sl, r2, r9
   105fa:	d8f2      	bhi.n	105e2 <__lshift+0x76>
   105fc:	1b0b      	subs	r3, r1, r4
   105fe:	3b15      	subs	r3, #21
   10600:	f023 0303 	bic.w	r3, r3, #3
   10604:	3304      	adds	r3, #4
   10606:	f104 0215 	add.w	r2, r4, #21
   1060a:	4291      	cmp	r1, r2
   1060c:	bf38      	it	cc
   1060e:	2304      	movcc	r3, #4
   10610:	f1ba 0f00 	cmp.w	sl, #0
   10614:	bf18      	it	ne
   10616:	462e      	movne	r6, r5
   10618:	f840 a003 	str.w	sl, [r0, r3]
   1061c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1061e:	6862      	ldr	r2, [r4, #4]
   10620:	f8cc 6010 	str.w	r6, [ip, #16]
   10624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10628:	6021      	str	r1, [r4, #0]
   1062a:	4660      	mov	r0, ip
   1062c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   10630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10634:	3804      	subs	r0, #4
   10636:	f853 2b04 	ldr.w	r2, [r3], #4
   1063a:	f840 2f04 	str.w	r2, [r0, #4]!
   1063e:	4299      	cmp	r1, r3
   10640:	d8f9      	bhi.n	10636 <__lshift+0xca>
   10642:	e7eb      	b.n	1061c <__lshift+0xb0>
   10644:	4b03      	ldr	r3, [pc, #12]	; (10654 <__lshift+0xe8>)
   10646:	4804      	ldr	r0, [pc, #16]	; (10658 <__lshift+0xec>)
   10648:	4662      	mov	r2, ip
   1064a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   1064e:	f002 f913 	bl	12878 <__assert_func>
   10652:	bf00      	nop
   10654:	0001730c 	.word	0x0001730c
   10658:	00017320 	.word	0x00017320

0001065c <__mcmp>:
   1065c:	690b      	ldr	r3, [r1, #16]
   1065e:	4684      	mov	ip, r0
   10660:	6900      	ldr	r0, [r0, #16]
   10662:	1ac0      	subs	r0, r0, r3
   10664:	d115      	bne.n	10692 <__mcmp+0x36>
   10666:	f10c 0c14 	add.w	ip, ip, #20
   1066a:	3114      	adds	r1, #20
   1066c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   10670:	b410      	push	{r4}
   10672:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   10676:	e001      	b.n	1067c <__mcmp+0x20>
   10678:	4594      	cmp	ip, r2
   1067a:	d208      	bcs.n	1068e <__mcmp+0x32>
   1067c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   10680:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   10684:	428c      	cmp	r4, r1
   10686:	d0f7      	beq.n	10678 <__mcmp+0x1c>
   10688:	d204      	bcs.n	10694 <__mcmp+0x38>
   1068a:	f04f 30ff 	mov.w	r0, #4294967295
   1068e:	bc10      	pop	{r4}
   10690:	4770      	bx	lr
   10692:	4770      	bx	lr
   10694:	2001      	movs	r0, #1
   10696:	bc10      	pop	{r4}
   10698:	4770      	bx	lr
   1069a:	bf00      	nop

0001069c <__mdiff>:
   1069c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106a0:	690f      	ldr	r7, [r1, #16]
   106a2:	6913      	ldr	r3, [r2, #16]
   106a4:	1aff      	subs	r7, r7, r3
   106a6:	2f00      	cmp	r7, #0
   106a8:	460e      	mov	r6, r1
   106aa:	4690      	mov	r8, r2
   106ac:	d17f      	bne.n	107ae <__mdiff+0x112>
   106ae:	f101 0514 	add.w	r5, r1, #20
   106b2:	3214      	adds	r2, #20
   106b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   106b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   106bc:	e001      	b.n	106c2 <__mdiff+0x26>
   106be:	429d      	cmp	r5, r3
   106c0:	d278      	bcs.n	107b4 <__mdiff+0x118>
   106c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   106c6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   106ca:	42a1      	cmp	r1, r4
   106cc:	d0f7      	beq.n	106be <__mdiff+0x22>
   106ce:	d369      	bcc.n	107a4 <__mdiff+0x108>
   106d0:	6871      	ldr	r1, [r6, #4]
   106d2:	f7ff fd3f 	bl	10154 <_Balloc>
   106d6:	4681      	mov	r9, r0
   106d8:	2800      	cmp	r0, #0
   106da:	d077      	beq.n	107cc <__mdiff+0x130>
   106dc:	6935      	ldr	r5, [r6, #16]
   106de:	f8d8 2010 	ldr.w	r2, [r8, #16]
   106e2:	60c7      	str	r7, [r0, #12]
   106e4:	f108 0e14 	add.w	lr, r8, #20
   106e8:	f106 0014 	add.w	r0, r6, #20
   106ec:	f109 0a14 	add.w	sl, r9, #20
   106f0:	f106 0110 	add.w	r1, r6, #16
   106f4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   106f8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   106fc:	4656      	mov	r6, sl
   106fe:	f04f 0c00 	mov.w	ip, #0
   10702:	f85e 4b04 	ldr.w	r4, [lr], #4
   10706:	f851 bf04 	ldr.w	fp, [r1, #4]!
   1070a:	b2a3      	uxth	r3, r4
   1070c:	fa1c fc8b 	uxtah	ip, ip, fp
   10710:	ebac 0303 	sub.w	r3, ip, r3
   10714:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   10718:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   1071c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   10720:	b29b      	uxth	r3, r3
   10722:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   10726:	4572      	cmp	r2, lr
   10728:	f846 3b04 	str.w	r3, [r6], #4
   1072c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   10730:	d8e7      	bhi.n	10702 <__mdiff+0x66>
   10732:	eba2 0108 	sub.w	r1, r2, r8
   10736:	3915      	subs	r1, #21
   10738:	f108 0815 	add.w	r8, r8, #21
   1073c:	4542      	cmp	r2, r8
   1073e:	f021 0403 	bic.w	r4, r1, #3
   10742:	f104 0404 	add.w	r4, r4, #4
   10746:	bf38      	it	cc
   10748:	2404      	movcc	r4, #4
   1074a:	4420      	add	r0, r4
   1074c:	f021 0203 	bic.w	r2, r1, #3
   10750:	bf38      	it	cc
   10752:	2200      	movcc	r2, #0
   10754:	4287      	cmp	r7, r0
   10756:	4452      	add	r2, sl
   10758:	4454      	add	r4, sl
   1075a:	d918      	bls.n	1078e <__mdiff+0xf2>
   1075c:	4626      	mov	r6, r4
   1075e:	4601      	mov	r1, r0
   10760:	f851 3b04 	ldr.w	r3, [r1], #4
   10764:	fa1c fc83 	uxtah	ip, ip, r3
   10768:	ea4f 422c 	mov.w	r2, ip, asr #16
   1076c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   10770:	fa1f fc8c 	uxth.w	ip, ip
   10774:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   10778:	428f      	cmp	r7, r1
   1077a:	f846 3b04 	str.w	r3, [r6], #4
   1077e:	ea4f 4c22 	mov.w	ip, r2, asr #16
   10782:	d8ed      	bhi.n	10760 <__mdiff+0xc4>
   10784:	3f01      	subs	r7, #1
   10786:	1a3f      	subs	r7, r7, r0
   10788:	f027 0703 	bic.w	r7, r7, #3
   1078c:	19e2      	adds	r2, r4, r7
   1078e:	b923      	cbnz	r3, 1079a <__mdiff+0xfe>
   10790:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   10794:	3d01      	subs	r5, #1
   10796:	2b00      	cmp	r3, #0
   10798:	d0fa      	beq.n	10790 <__mdiff+0xf4>
   1079a:	f8c9 5010 	str.w	r5, [r9, #16]
   1079e:	4648      	mov	r0, r9
   107a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107a4:	4633      	mov	r3, r6
   107a6:	2701      	movs	r7, #1
   107a8:	4646      	mov	r6, r8
   107aa:	4698      	mov	r8, r3
   107ac:	e790      	b.n	106d0 <__mdiff+0x34>
   107ae:	dbf9      	blt.n	107a4 <__mdiff+0x108>
   107b0:	2700      	movs	r7, #0
   107b2:	e78d      	b.n	106d0 <__mdiff+0x34>
   107b4:	2100      	movs	r1, #0
   107b6:	f7ff fccd 	bl	10154 <_Balloc>
   107ba:	4681      	mov	r9, r0
   107bc:	b168      	cbz	r0, 107da <__mdiff+0x13e>
   107be:	2201      	movs	r2, #1
   107c0:	2300      	movs	r3, #0
   107c2:	e9c9 2304 	strd	r2, r3, [r9, #16]
   107c6:	4648      	mov	r0, r9
   107c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107cc:	4b06      	ldr	r3, [pc, #24]	; (107e8 <__mdiff+0x14c>)
   107ce:	4807      	ldr	r0, [pc, #28]	; (107ec <__mdiff+0x150>)
   107d0:	464a      	mov	r2, r9
   107d2:	f240 2145 	movw	r1, #581	; 0x245
   107d6:	f002 f84f 	bl	12878 <__assert_func>
   107da:	4b03      	ldr	r3, [pc, #12]	; (107e8 <__mdiff+0x14c>)
   107dc:	4803      	ldr	r0, [pc, #12]	; (107ec <__mdiff+0x150>)
   107de:	464a      	mov	r2, r9
   107e0:	f240 2137 	movw	r1, #567	; 0x237
   107e4:	f002 f848 	bl	12878 <__assert_func>
   107e8:	0001730c 	.word	0x0001730c
   107ec:	00017320 	.word	0x00017320

000107f0 <__d2b>:
   107f0:	b570      	push	{r4, r5, r6, lr}
   107f2:	2101      	movs	r1, #1
   107f4:	b082      	sub	sp, #8
   107f6:	4616      	mov	r6, r2
   107f8:	461d      	mov	r5, r3
   107fa:	f7ff fcab 	bl	10154 <_Balloc>
   107fe:	4604      	mov	r4, r0
   10800:	2800      	cmp	r0, #0
   10802:	d04a      	beq.n	1089a <__d2b+0xaa>
   10804:	462b      	mov	r3, r5
   10806:	f3c5 550a 	ubfx	r5, r5, #20, #11
   1080a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1080e:	b10d      	cbz	r5, 10814 <__d2b+0x24>
   10810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10814:	2e00      	cmp	r6, #0
   10816:	9301      	str	r3, [sp, #4]
   10818:	d114      	bne.n	10844 <__d2b+0x54>
   1081a:	a801      	add	r0, sp, #4
   1081c:	f7ff fd3a 	bl	10294 <__lo0bits>
   10820:	9b01      	ldr	r3, [sp, #4]
   10822:	6163      	str	r3, [r4, #20]
   10824:	2101      	movs	r1, #1
   10826:	3020      	adds	r0, #32
   10828:	6121      	str	r1, [r4, #16]
   1082a:	b315      	cbz	r5, 10872 <__d2b+0x82>
   1082c:	9b06      	ldr	r3, [sp, #24]
   1082e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   10832:	4405      	add	r5, r0
   10834:	601d      	str	r5, [r3, #0]
   10836:	9b07      	ldr	r3, [sp, #28]
   10838:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1083c:	6018      	str	r0, [r3, #0]
   1083e:	4620      	mov	r0, r4
   10840:	b002      	add	sp, #8
   10842:	bd70      	pop	{r4, r5, r6, pc}
   10844:	4668      	mov	r0, sp
   10846:	9600      	str	r6, [sp, #0]
   10848:	f7ff fd24 	bl	10294 <__lo0bits>
   1084c:	b308      	cbz	r0, 10892 <__d2b+0xa2>
   1084e:	9b01      	ldr	r3, [sp, #4]
   10850:	9900      	ldr	r1, [sp, #0]
   10852:	f1c0 0220 	rsb	r2, r0, #32
   10856:	fa03 f202 	lsl.w	r2, r3, r2
   1085a:	430a      	orrs	r2, r1
   1085c:	40c3      	lsrs	r3, r0
   1085e:	9301      	str	r3, [sp, #4]
   10860:	6162      	str	r2, [r4, #20]
   10862:	2b00      	cmp	r3, #0
   10864:	bf14      	ite	ne
   10866:	2102      	movne	r1, #2
   10868:	2101      	moveq	r1, #1
   1086a:	61a3      	str	r3, [r4, #24]
   1086c:	6121      	str	r1, [r4, #16]
   1086e:	2d00      	cmp	r5, #0
   10870:	d1dc      	bne.n	1082c <__d2b+0x3c>
   10872:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   10876:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
   1087a:	6910      	ldr	r0, [r2, #16]
   1087c:	9a06      	ldr	r2, [sp, #24]
   1087e:	6013      	str	r3, [r2, #0]
   10880:	f7ff fce8 	bl	10254 <__hi0bits>
   10884:	9b07      	ldr	r3, [sp, #28]
   10886:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   1088a:	6018      	str	r0, [r3, #0]
   1088c:	4620      	mov	r0, r4
   1088e:	b002      	add	sp, #8
   10890:	bd70      	pop	{r4, r5, r6, pc}
   10892:	e9dd 2300 	ldrd	r2, r3, [sp]
   10896:	6162      	str	r2, [r4, #20]
   10898:	e7e3      	b.n	10862 <__d2b+0x72>
   1089a:	4b03      	ldr	r3, [pc, #12]	; (108a8 <__d2b+0xb8>)
   1089c:	4803      	ldr	r0, [pc, #12]	; (108ac <__d2b+0xbc>)
   1089e:	4622      	mov	r2, r4
   108a0:	f240 310f 	movw	r1, #783	; 0x30f
   108a4:	f001 ffe8 	bl	12878 <__assert_func>
   108a8:	0001730c 	.word	0x0001730c
   108ac:	00017320 	.word	0x00017320

000108b0 <__ascii_wctomb>:
   108b0:	b149      	cbz	r1, 108c6 <__ascii_wctomb+0x16>
   108b2:	2aff      	cmp	r2, #255	; 0xff
   108b4:	d802      	bhi.n	108bc <__ascii_wctomb+0xc>
   108b6:	700a      	strb	r2, [r1, #0]
   108b8:	2001      	movs	r0, #1
   108ba:	4770      	bx	lr
   108bc:	238a      	movs	r3, #138	; 0x8a
   108be:	6003      	str	r3, [r0, #0]
   108c0:	f04f 30ff 	mov.w	r0, #4294967295
   108c4:	4770      	bx	lr
   108c6:	4608      	mov	r0, r1
   108c8:	4770      	bx	lr
   108ca:	bf00      	nop

000108cc <_svfprintf_r>:
   108cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108d0:	b0d9      	sub	sp, #356	; 0x164
   108d2:	460c      	mov	r4, r1
   108d4:	910c      	str	r1, [sp, #48]	; 0x30
   108d6:	4690      	mov	r8, r2
   108d8:	930e      	str	r3, [sp, #56]	; 0x38
   108da:	4682      	mov	sl, r0
   108dc:	f001 fee6 	bl	126ac <_localeconv_r>
   108e0:	6803      	ldr	r3, [r0, #0]
   108e2:	9319      	str	r3, [sp, #100]	; 0x64
   108e4:	4618      	mov	r0, r3
   108e6:	f7ff fa4b 	bl	fd80 <strlen>
   108ea:	2208      	movs	r2, #8
   108ec:	9017      	str	r0, [sp, #92]	; 0x5c
   108ee:	2100      	movs	r1, #0
   108f0:	a828      	add	r0, sp, #160	; 0xa0
   108f2:	f7ff f91d 	bl	fb30 <memset>
   108f6:	89a3      	ldrh	r3, [r4, #12]
   108f8:	061f      	lsls	r7, r3, #24
   108fa:	d503      	bpl.n	10904 <_svfprintf_r+0x38>
   108fc:	6923      	ldr	r3, [r4, #16]
   108fe:	2b00      	cmp	r3, #0
   10900:	f000 873f 	beq.w	11782 <_svfprintf_r+0xeb6>
   10904:	2300      	movs	r3, #0
   10906:	aa2f      	add	r2, sp, #188	; 0xbc
   10908:	2400      	movs	r4, #0
   1090a:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
   1090e:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   10912:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   10916:	9313      	str	r3, [sp, #76]	; 0x4c
   10918:	9318      	str	r3, [sp, #96]	; 0x60
   1091a:	9309      	str	r3, [sp, #36]	; 0x24
   1091c:	2300      	movs	r3, #0
   1091e:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   10922:	922c      	str	r2, [sp, #176]	; 0xb0
   10924:	4691      	mov	r9, r2
   10926:	4644      	mov	r4, r8
   10928:	46a0      	mov	r8, r4
   1092a:	4b78      	ldr	r3, [pc, #480]	; (10b0c <_svfprintf_r+0x240>)
   1092c:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   10930:	f7ff f982 	bl	fc38 <__locale_mb_cur_max>
   10934:	4603      	mov	r3, r0
   10936:	a828      	add	r0, sp, #160	; 0xa0
   10938:	9000      	str	r0, [sp, #0]
   1093a:	4642      	mov	r2, r8
   1093c:	a924      	add	r1, sp, #144	; 0x90
   1093e:	4650      	mov	r0, sl
   10940:	47a8      	blx	r5
   10942:	2800      	cmp	r0, #0
   10944:	f000 80b0 	beq.w	10aa8 <_svfprintf_r+0x1dc>
   10948:	f2c0 80a6 	blt.w	10a98 <_svfprintf_r+0x1cc>
   1094c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1094e:	2a25      	cmp	r2, #37	; 0x25
   10950:	4603      	mov	r3, r0
   10952:	d001      	beq.n	10958 <_svfprintf_r+0x8c>
   10954:	4498      	add	r8, r3
   10956:	e7e8      	b.n	1092a <_svfprintf_r+0x5e>
   10958:	ebb8 0704 	subs.w	r7, r8, r4
   1095c:	4606      	mov	r6, r0
   1095e:	f040 80a7 	bne.w	10ab0 <_svfprintf_r+0x1e4>
   10962:	2300      	movs	r3, #0
   10964:	f04f 32ff 	mov.w	r2, #4294967295
   10968:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   1096c:	469b      	mov	fp, r3
   1096e:	930b      	str	r3, [sp, #44]	; 0x2c
   10970:	f108 0801 	add.w	r8, r8, #1
   10974:	f898 3000 	ldrb.w	r3, [r8]
   10978:	9208      	str	r2, [sp, #32]
   1097a:	252b      	movs	r5, #43	; 0x2b
   1097c:	2620      	movs	r6, #32
   1097e:	f108 0801 	add.w	r8, r8, #1
   10982:	f1a3 0220 	sub.w	r2, r3, #32
   10986:	2a5a      	cmp	r2, #90	; 0x5a
   10988:	f200 80c2 	bhi.w	10b10 <_svfprintf_r+0x244>
   1098c:	e8df f012 	tbh	[pc, r2, lsl #1]
   10990:	00c002e6 	.word	0x00c002e6
   10994:	02e100c0 	.word	0x02e100c0
   10998:	00c000c0 	.word	0x00c000c0
   1099c:	006a00c0 	.word	0x006a00c0
   109a0:	00c000c0 	.word	0x00c000c0
   109a4:	02840208 	.word	0x02840208
   109a8:	021300c0 	.word	0x021300c0
   109ac:	00c002c7 	.word	0x00c002c7
   109b0:	005b02c2 	.word	0x005b02c2
   109b4:	005b005b 	.word	0x005b005b
   109b8:	005b005b 	.word	0x005b005b
   109bc:	005b005b 	.word	0x005b005b
   109c0:	005b005b 	.word	0x005b005b
   109c4:	00c000c0 	.word	0x00c000c0
   109c8:	00c000c0 	.word	0x00c000c0
   109cc:	00c000c0 	.word	0x00c000c0
   109d0:	014300c0 	.word	0x014300c0
   109d4:	018900c0 	.word	0x018900c0
   109d8:	0143021d 	.word	0x0143021d
   109dc:	01430143 	.word	0x01430143
   109e0:	00c000c0 	.word	0x00c000c0
   109e4:	00c000c0 	.word	0x00c000c0
   109e8:	00c00218 	.word	0x00c00218
   109ec:	029600c0 	.word	0x029600c0
   109f0:	00c000c0 	.word	0x00c000c0
   109f4:	01b100c0 	.word	0x01b100c0
   109f8:	02a900c0 	.word	0x02a900c0
   109fc:	00c000c0 	.word	0x00c000c0
   10a00:	00c006dd 	.word	0x00c006dd
   10a04:	00c000c0 	.word	0x00c000c0
   10a08:	00c000c0 	.word	0x00c000c0
   10a0c:	00c000c0 	.word	0x00c000c0
   10a10:	014300c0 	.word	0x014300c0
   10a14:	018900c0 	.word	0x018900c0
   10a18:	014301e2 	.word	0x014301e2
   10a1c:	01430143 	.word	0x01430143
   10a20:	01e20277 	.word	0x01e20277
   10a24:	00c0007f 	.word	0x00c0007f
   10a28:	00c00289 	.word	0x00c00289
   10a2c:	06da025f 	.word	0x06da025f
   10a30:	007f0232 	.word	0x007f0232
   10a34:	01b100c0 	.word	0x01b100c0
   10a38:	06b4007c 	.word	0x06b4007c
   10a3c:	00c000c0 	.word	0x00c000c0
   10a40:	00c006b8 	.word	0x00c006b8
   10a44:	007c      	.short	0x007c
   10a46:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   10a4a:	2100      	movs	r1, #0
   10a4c:	f818 3b01 	ldrb.w	r3, [r8], #1
   10a50:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   10a54:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   10a58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   10a5c:	2a09      	cmp	r2, #9
   10a5e:	d9f5      	bls.n	10a4c <_svfprintf_r+0x180>
   10a60:	910b      	str	r1, [sp, #44]	; 0x2c
   10a62:	e78e      	b.n	10982 <_svfprintf_r+0xb6>
   10a64:	4650      	mov	r0, sl
   10a66:	f001 fe21 	bl	126ac <_localeconv_r>
   10a6a:	6843      	ldr	r3, [r0, #4]
   10a6c:	931c      	str	r3, [sp, #112]	; 0x70
   10a6e:	4618      	mov	r0, r3
   10a70:	f7ff f986 	bl	fd80 <strlen>
   10a74:	901d      	str	r0, [sp, #116]	; 0x74
   10a76:	4607      	mov	r7, r0
   10a78:	4650      	mov	r0, sl
   10a7a:	f001 fe17 	bl	126ac <_localeconv_r>
   10a7e:	6883      	ldr	r3, [r0, #8]
   10a80:	931a      	str	r3, [sp, #104]	; 0x68
   10a82:	2f00      	cmp	r7, #0
   10a84:	f040 85b1 	bne.w	115ea <_svfprintf_r+0xd1e>
   10a88:	f898 3000 	ldrb.w	r3, [r8]
   10a8c:	e777      	b.n	1097e <_svfprintf_r+0xb2>
   10a8e:	f898 3000 	ldrb.w	r3, [r8]
   10a92:	f04b 0b20 	orr.w	fp, fp, #32
   10a96:	e772      	b.n	1097e <_svfprintf_r+0xb2>
   10a98:	2208      	movs	r2, #8
   10a9a:	2100      	movs	r1, #0
   10a9c:	a828      	add	r0, sp, #160	; 0xa0
   10a9e:	f7ff f847 	bl	fb30 <memset>
   10aa2:	2301      	movs	r3, #1
   10aa4:	4498      	add	r8, r3
   10aa6:	e740      	b.n	1092a <_svfprintf_r+0x5e>
   10aa8:	ebb8 0704 	subs.w	r7, r8, r4
   10aac:	4606      	mov	r6, r0
   10aae:	d011      	beq.n	10ad4 <_svfprintf_r+0x208>
   10ab0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   10ab2:	443b      	add	r3, r7
   10ab4:	932e      	str	r3, [sp, #184]	; 0xb8
   10ab6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   10ab8:	3301      	adds	r3, #1
   10aba:	2b07      	cmp	r3, #7
   10abc:	e9c9 4700 	strd	r4, r7, [r9]
   10ac0:	932d      	str	r3, [sp, #180]	; 0xb4
   10ac2:	dc19      	bgt.n	10af8 <_svfprintf_r+0x22c>
   10ac4:	f109 0908 	add.w	r9, r9, #8
   10ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10aca:	443b      	add	r3, r7
   10acc:	9309      	str	r3, [sp, #36]	; 0x24
   10ace:	2e00      	cmp	r6, #0
   10ad0:	f47f af47 	bne.w	10962 <_svfprintf_r+0x96>
   10ad4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   10ad6:	2b00      	cmp	r3, #0
   10ad8:	f041 8201 	bne.w	11ede <_svfprintf_r+0x1612>
   10adc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ade:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   10ae2:	f013 0f40 	tst.w	r3, #64	; 0x40
   10ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ae8:	bf18      	it	ne
   10aea:	f04f 33ff 	movne.w	r3, #4294967295
   10aee:	9309      	str	r3, [sp, #36]	; 0x24
   10af0:	9809      	ldr	r0, [sp, #36]	; 0x24
   10af2:	b059      	add	sp, #356	; 0x164
   10af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10af8:	990c      	ldr	r1, [sp, #48]	; 0x30
   10afa:	aa2c      	add	r2, sp, #176	; 0xb0
   10afc:	4650      	mov	r0, sl
   10afe:	f002 ff4f 	bl	139a0 <__ssprint_r>
   10b02:	2800      	cmp	r0, #0
   10b04:	d1ea      	bne.n	10adc <_svfprintf_r+0x210>
   10b06:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10b0a:	e7dd      	b.n	10ac8 <_svfprintf_r+0x1fc>
   10b0c:	1fff8ed8 	.word	0x1fff8ed8
   10b10:	9310      	str	r3, [sp, #64]	; 0x40
   10b12:	2b00      	cmp	r3, #0
   10b14:	d0de      	beq.n	10ad4 <_svfprintf_r+0x208>
   10b16:	2200      	movs	r2, #0
   10b18:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
   10b1c:	2301      	movs	r3, #1
   10b1e:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   10b22:	9307      	str	r3, [sp, #28]
   10b24:	920d      	str	r2, [sp, #52]	; 0x34
   10b26:	930a      	str	r3, [sp, #40]	; 0x28
   10b28:	9208      	str	r2, [sp, #32]
   10b2a:	9212      	str	r2, [sp, #72]	; 0x48
   10b2c:	9216      	str	r2, [sp, #88]	; 0x58
   10b2e:	9211      	str	r2, [sp, #68]	; 0x44
   10b30:	ac3f      	add	r4, sp, #252	; 0xfc
   10b32:	f01b 0302 	ands.w	r3, fp, #2
   10b36:	d002      	beq.n	10b3e <_svfprintf_r+0x272>
   10b38:	9907      	ldr	r1, [sp, #28]
   10b3a:	3102      	adds	r1, #2
   10b3c:	9107      	str	r1, [sp, #28]
   10b3e:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
   10b42:	910f      	str	r1, [sp, #60]	; 0x3c
   10b44:	d105      	bne.n	10b52 <_svfprintf_r+0x286>
   10b46:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10b48:	9807      	ldr	r0, [sp, #28]
   10b4a:	1a0f      	subs	r7, r1, r0
   10b4c:	2f00      	cmp	r7, #0
   10b4e:	f300 8382 	bgt.w	11256 <_svfprintf_r+0x98a>
   10b52:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10b54:	b182      	cbz	r2, 10b78 <_svfprintf_r+0x2ac>
   10b56:	2201      	movs	r2, #1
   10b58:	f8c9 2004 	str.w	r2, [r9, #4]
   10b5c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   10b5e:	3201      	adds	r2, #1
   10b60:	3601      	adds	r6, #1
   10b62:	f10d 0187 	add.w	r1, sp, #135	; 0x87
   10b66:	2a07      	cmp	r2, #7
   10b68:	962e      	str	r6, [sp, #184]	; 0xb8
   10b6a:	922d      	str	r2, [sp, #180]	; 0xb4
   10b6c:	f8c9 1000 	str.w	r1, [r9]
   10b70:	f300 83bd 	bgt.w	112ee <_svfprintf_r+0xa22>
   10b74:	f109 0908 	add.w	r9, r9, #8
   10b78:	b183      	cbz	r3, 10b9c <_svfprintf_r+0x2d0>
   10b7a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   10b7c:	aa22      	add	r2, sp, #136	; 0x88
   10b7e:	3301      	adds	r3, #1
   10b80:	3602      	adds	r6, #2
   10b82:	f8c9 2000 	str.w	r2, [r9]
   10b86:	2b07      	cmp	r3, #7
   10b88:	f04f 0202 	mov.w	r2, #2
   10b8c:	962e      	str	r6, [sp, #184]	; 0xb8
   10b8e:	932d      	str	r3, [sp, #180]	; 0xb4
   10b90:	f8c9 2004 	str.w	r2, [r9, #4]
   10b94:	f300 83c0 	bgt.w	11318 <_svfprintf_r+0xa4c>
   10b98:	f109 0908 	add.w	r9, r9, #8
   10b9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10b9e:	2b80      	cmp	r3, #128	; 0x80
   10ba0:	f000 8281 	beq.w	110a6 <_svfprintf_r+0x7da>
   10ba4:	9b08      	ldr	r3, [sp, #32]
   10ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10ba8:	1a9f      	subs	r7, r3, r2
   10baa:	2f00      	cmp	r7, #0
   10bac:	f300 82bc 	bgt.w	11128 <_svfprintf_r+0x85c>
   10bb0:	f41b 7f80 	tst.w	fp, #256	; 0x100
   10bb4:	f040 821e 	bne.w	10ff4 <_svfprintf_r+0x728>
   10bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10bba:	f8c9 3004 	str.w	r3, [r9, #4]
   10bbe:	441e      	add	r6, r3
   10bc0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   10bc2:	f8c9 4000 	str.w	r4, [r9]
   10bc6:	3301      	adds	r3, #1
   10bc8:	2b07      	cmp	r3, #7
   10bca:	962e      	str	r6, [sp, #184]	; 0xb8
   10bcc:	932d      	str	r3, [sp, #180]	; 0xb4
   10bce:	f300 8337 	bgt.w	11240 <_svfprintf_r+0x974>
   10bd2:	f109 0908 	add.w	r9, r9, #8
   10bd6:	f01b 0f04 	tst.w	fp, #4
   10bda:	d005      	beq.n	10be8 <_svfprintf_r+0x31c>
   10bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10bde:	9a07      	ldr	r2, [sp, #28]
   10be0:	1a9c      	subs	r4, r3, r2
   10be2:	2c00      	cmp	r4, #0
   10be4:	f300 83a4 	bgt.w	11330 <_svfprintf_r+0xa64>
   10be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10bea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10bec:	9907      	ldr	r1, [sp, #28]
   10bee:	428a      	cmp	r2, r1
   10bf0:	bfac      	ite	ge
   10bf2:	189b      	addge	r3, r3, r2
   10bf4:	185b      	addlt	r3, r3, r1
   10bf6:	9309      	str	r3, [sp, #36]	; 0x24
   10bf8:	2e00      	cmp	r6, #0
   10bfa:	f040 82ca 	bne.w	11192 <_svfprintf_r+0x8c6>
   10bfe:	2300      	movs	r3, #0
   10c00:	932d      	str	r3, [sp, #180]	; 0xb4
   10c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10c04:	b11b      	cbz	r3, 10c0e <_svfprintf_r+0x342>
   10c06:	990d      	ldr	r1, [sp, #52]	; 0x34
   10c08:	4650      	mov	r0, sl
   10c0a:	f7ff f987 	bl	ff1c <_free_r>
   10c0e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10c12:	4644      	mov	r4, r8
   10c14:	e688      	b.n	10928 <_svfprintf_r+0x5c>
   10c16:	9310      	str	r3, [sp, #64]	; 0x40
   10c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10c1a:	3307      	adds	r3, #7
   10c1c:	f023 0107 	bic.w	r1, r3, #7
   10c20:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   10c24:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   10c28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   10c2c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   10c30:	910e      	str	r1, [sp, #56]	; 0x38
   10c32:	4616      	mov	r6, r2
   10c34:	4610      	mov	r0, r2
   10c36:	4bb3      	ldr	r3, [pc, #716]	; (10f04 <_svfprintf_r+0x638>)
   10c38:	4629      	mov	r1, r5
   10c3a:	f04f 32ff 	mov.w	r2, #4294967295
   10c3e:	f7fd fd9b 	bl	e778 <__aeabi_dcmpun>
   10c42:	2800      	cmp	r0, #0
   10c44:	f040 84fc 	bne.w	11640 <_svfprintf_r+0xd74>
   10c48:	4bae      	ldr	r3, [pc, #696]	; (10f04 <_svfprintf_r+0x638>)
   10c4a:	4630      	mov	r0, r6
   10c4c:	4629      	mov	r1, r5
   10c4e:	f04f 32ff 	mov.w	r2, #4294967295
   10c52:	f7fd fd73 	bl	e73c <__aeabi_dcmple>
   10c56:	2800      	cmp	r0, #0
   10c58:	f040 84f2 	bne.w	11640 <_svfprintf_r+0xd74>
   10c5c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   10c60:	2200      	movs	r2, #0
   10c62:	2300      	movs	r3, #0
   10c64:	f7fd fd60 	bl	e728 <__aeabi_dcmplt>
   10c68:	2800      	cmp	r0, #0
   10c6a:	f041 8038 	bne.w	11cde <_svfprintf_r+0x1412>
   10c6e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10c72:	4ca5      	ldr	r4, [pc, #660]	; (10f08 <_svfprintf_r+0x63c>)
   10c74:	4ba5      	ldr	r3, [pc, #660]	; (10f0c <_svfprintf_r+0x640>)
   10c76:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10c7a:	9910      	ldr	r1, [sp, #64]	; 0x40
   10c7c:	2947      	cmp	r1, #71	; 0x47
   10c7e:	bfc8      	it	gt
   10c80:	461c      	movgt	r4, r3
   10c82:	2300      	movs	r3, #0
   10c84:	2103      	movs	r1, #3
   10c86:	930d      	str	r3, [sp, #52]	; 0x34
   10c88:	9107      	str	r1, [sp, #28]
   10c8a:	910a      	str	r1, [sp, #40]	; 0x28
   10c8c:	9308      	str	r3, [sp, #32]
   10c8e:	9312      	str	r3, [sp, #72]	; 0x48
   10c90:	9316      	str	r3, [sp, #88]	; 0x58
   10c92:	9311      	str	r3, [sp, #68]	; 0x44
   10c94:	2a00      	cmp	r2, #0
   10c96:	f43f af4c 	beq.w	10b32 <_svfprintf_r+0x266>
   10c9a:	9b07      	ldr	r3, [sp, #28]
   10c9c:	3301      	adds	r3, #1
   10c9e:	9307      	str	r3, [sp, #28]
   10ca0:	e747      	b.n	10b32 <_svfprintf_r+0x266>
   10ca2:	2b43      	cmp	r3, #67	; 0x43
   10ca4:	9310      	str	r3, [sp, #64]	; 0x40
   10ca6:	d003      	beq.n	10cb0 <_svfprintf_r+0x3e4>
   10ca8:	f01b 0f10 	tst.w	fp, #16
   10cac:	f000 8551 	beq.w	11752 <_svfprintf_r+0xe86>
   10cb0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   10cb2:	2208      	movs	r2, #8
   10cb4:	2100      	movs	r1, #0
   10cb6:	a82a      	add	r0, sp, #168	; 0xa8
   10cb8:	ac3f      	add	r4, sp, #252	; 0xfc
   10cba:	f7fe ff39 	bl	fb30 <memset>
   10cbe:	ab2a      	add	r3, sp, #168	; 0xa8
   10cc0:	f856 2b04 	ldr.w	r2, [r6], #4
   10cc4:	4621      	mov	r1, r4
   10cc6:	4650      	mov	r0, sl
   10cc8:	f002 fe22 	bl	13910 <_wcrtomb_r>
   10ccc:	4603      	mov	r3, r0
   10cce:	3301      	adds	r3, #1
   10cd0:	900a      	str	r0, [sp, #40]	; 0x28
   10cd2:	f001 82c3 	beq.w	1225c <_svfprintf_r+0x1990>
   10cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10cd8:	960e      	str	r6, [sp, #56]	; 0x38
   10cda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10cde:	9307      	str	r3, [sp, #28]
   10ce0:	2200      	movs	r2, #0
   10ce2:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   10ce6:	920d      	str	r2, [sp, #52]	; 0x34
   10ce8:	9208      	str	r2, [sp, #32]
   10cea:	9212      	str	r2, [sp, #72]	; 0x48
   10cec:	9216      	str	r2, [sp, #88]	; 0x58
   10cee:	9211      	str	r2, [sp, #68]	; 0x44
   10cf0:	e71f      	b.n	10b32 <_svfprintf_r+0x266>
   10cf2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10cf4:	9310      	str	r3, [sp, #64]	; 0x40
   10cf6:	f857 4b04 	ldr.w	r4, [r7], #4
   10cfa:	2300      	movs	r3, #0
   10cfc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   10d00:	2c00      	cmp	r4, #0
   10d02:	f000 854d 	beq.w	117a0 <_svfprintf_r+0xed4>
   10d06:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10d08:	2b53      	cmp	r3, #83	; 0x53
   10d0a:	f000 86d4 	beq.w	11ab6 <_svfprintf_r+0x11ea>
   10d0e:	f01b 0310 	ands.w	r3, fp, #16
   10d12:	9311      	str	r3, [sp, #68]	; 0x44
   10d14:	f040 86cf 	bne.w	11ab6 <_svfprintf_r+0x11ea>
   10d18:	9b08      	ldr	r3, [sp, #32]
   10d1a:	1c5d      	adds	r5, r3, #1
   10d1c:	f001 80cc 	beq.w	11eb8 <_svfprintf_r+0x15ec>
   10d20:	9911      	ldr	r1, [sp, #68]	; 0x44
   10d22:	461a      	mov	r2, r3
   10d24:	4620      	mov	r0, r4
   10d26:	f001 fcdb 	bl	126e0 <memchr>
   10d2a:	900d      	str	r0, [sp, #52]	; 0x34
   10d2c:	2800      	cmp	r0, #0
   10d2e:	f001 8351 	beq.w	123d4 <_svfprintf_r+0x1b08>
   10d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10d34:	9911      	ldr	r1, [sp, #68]	; 0x44
   10d36:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10d3a:	970e      	str	r7, [sp, #56]	; 0x38
   10d3c:	1b1b      	subs	r3, r3, r4
   10d3e:	930a      	str	r3, [sp, #40]	; 0x28
   10d40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10d44:	9307      	str	r3, [sp, #28]
   10d46:	2373      	movs	r3, #115	; 0x73
   10d48:	9108      	str	r1, [sp, #32]
   10d4a:	9112      	str	r1, [sp, #72]	; 0x48
   10d4c:	9116      	str	r1, [sp, #88]	; 0x58
   10d4e:	910d      	str	r1, [sp, #52]	; 0x34
   10d50:	9310      	str	r3, [sp, #64]	; 0x40
   10d52:	e79f      	b.n	10c94 <_svfprintf_r+0x3c8>
   10d54:	f01b 0f20 	tst.w	fp, #32
   10d58:	9310      	str	r3, [sp, #64]	; 0x40
   10d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10d5c:	d03c      	beq.n	10dd8 <_svfprintf_r+0x50c>
   10d5e:	3307      	adds	r3, #7
   10d60:	f023 0307 	bic.w	r3, r3, #7
   10d64:	461a      	mov	r2, r3
   10d66:	4611      	mov	r1, r2
   10d68:	685b      	ldr	r3, [r3, #4]
   10d6a:	f851 2b08 	ldr.w	r2, [r1], #8
   10d6e:	910e      	str	r1, [sp, #56]	; 0x38
   10d70:	4619      	mov	r1, r3
   10d72:	2b00      	cmp	r3, #0
   10d74:	f2c0 8401 	blt.w	1157a <_svfprintf_r+0xcae>
   10d78:	9b08      	ldr	r3, [sp, #32]
   10d7a:	3301      	adds	r3, #1
   10d7c:	f000 82a8 	beq.w	112d0 <_svfprintf_r+0xa04>
   10d80:	ea52 0301 	orrs.w	r3, r2, r1
   10d84:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
   10d88:	f040 82a3 	bne.w	112d2 <_svfprintf_r+0xa06>
   10d8c:	9b08      	ldr	r3, [sp, #32]
   10d8e:	2b00      	cmp	r3, #0
   10d90:	f040 82a4 	bne.w	112dc <_svfprintf_r+0xa10>
   10d94:	46ab      	mov	fp, r5
   10d96:	2300      	movs	r3, #0
   10d98:	9308      	str	r3, [sp, #32]
   10d9a:	930a      	str	r3, [sp, #40]	; 0x28
   10d9c:	ac58      	add	r4, sp, #352	; 0x160
   10d9e:	e0ff      	b.n	10fa0 <_svfprintf_r+0x6d4>
   10da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10da2:	f853 2b04 	ldr.w	r2, [r3], #4
   10da6:	920b      	str	r2, [sp, #44]	; 0x2c
   10da8:	2a00      	cmp	r2, #0
   10daa:	f280 840c 	bge.w	115c6 <_svfprintf_r+0xcfa>
   10dae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10db0:	930e      	str	r3, [sp, #56]	; 0x38
   10db2:	4252      	negs	r2, r2
   10db4:	920b      	str	r2, [sp, #44]	; 0x2c
   10db6:	f898 3000 	ldrb.w	r3, [r8]
   10dba:	f04b 0b04 	orr.w	fp, fp, #4
   10dbe:	e5de      	b.n	1097e <_svfprintf_r+0xb2>
   10dc0:	f898 3000 	ldrb.w	r3, [r8]
   10dc4:	f04b 0b08 	orr.w	fp, fp, #8
   10dc8:	e5d9      	b.n	1097e <_svfprintf_r+0xb2>
   10dca:	f04b 0b10 	orr.w	fp, fp, #16
   10dce:	f01b 0f20 	tst.w	fp, #32
   10dd2:	9310      	str	r3, [sp, #64]	; 0x40
   10dd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10dd6:	d1c2      	bne.n	10d5e <_svfprintf_r+0x492>
   10dd8:	f01b 0f10 	tst.w	fp, #16
   10ddc:	f040 83fe 	bne.w	115dc <_svfprintf_r+0xd10>
   10de0:	f01b 0f40 	tst.w	fp, #64	; 0x40
   10de4:	f000 83f6 	beq.w	115d4 <_svfprintf_r+0xd08>
   10de8:	f933 2b04 	ldrsh.w	r2, [r3], #4
   10dec:	930e      	str	r3, [sp, #56]	; 0x38
   10dee:	17d1      	asrs	r1, r2, #31
   10df0:	460b      	mov	r3, r1
   10df2:	e7be      	b.n	10d72 <_svfprintf_r+0x4a6>
   10df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10df6:	f853 2b04 	ldr.w	r2, [r3], #4
   10dfa:	930e      	str	r3, [sp, #56]	; 0x38
   10dfc:	f647 0330 	movw	r3, #30768	; 0x7830
   10e00:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
   10e04:	2078      	movs	r0, #120	; 0x78
   10e06:	4b42      	ldr	r3, [pc, #264]	; (10f10 <_svfprintf_r+0x644>)
   10e08:	9318      	str	r3, [sp, #96]	; 0x60
   10e0a:	f04b 0502 	orr.w	r5, fp, #2
   10e0e:	2100      	movs	r1, #0
   10e10:	2302      	movs	r3, #2
   10e12:	9010      	str	r0, [sp, #64]	; 0x40
   10e14:	2000      	movs	r0, #0
   10e16:	9c08      	ldr	r4, [sp, #32]
   10e18:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   10e1c:	1c60      	adds	r0, r4, #1
   10e1e:	f000 80a8 	beq.w	10f72 <_svfprintf_r+0x6a6>
   10e22:	ea52 0001 	orrs.w	r0, r2, r1
   10e26:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
   10e2a:	f040 80a1 	bne.w	10f70 <_svfprintf_r+0x6a4>
   10e2e:	2c00      	cmp	r4, #0
   10e30:	f040 8695 	bne.w	11b5e <_svfprintf_r+0x1292>
   10e34:	2b00      	cmp	r3, #0
   10e36:	d1ae      	bne.n	10d96 <_svfprintf_r+0x4ca>
   10e38:	f015 0301 	ands.w	r3, r5, #1
   10e3c:	930a      	str	r3, [sp, #40]	; 0x28
   10e3e:	f000 83c7 	beq.w	115d0 <_svfprintf_r+0xd04>
   10e42:	2330      	movs	r3, #48	; 0x30
   10e44:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
   10e48:	f20d 145f 	addw	r4, sp, #351	; 0x15f
   10e4c:	e0a8      	b.n	10fa0 <_svfprintf_r+0x6d4>
   10e4e:	f01b 0f20 	tst.w	fp, #32
   10e52:	f040 83e5 	bne.w	11620 <_svfprintf_r+0xd54>
   10e56:	f01b 0f10 	tst.w	fp, #16
   10e5a:	f040 8686 	bne.w	11b6a <_svfprintf_r+0x129e>
   10e5e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   10e62:	f040 877f 	bne.w	11d64 <_svfprintf_r+0x1498>
   10e66:	f41b 7f00 	tst.w	fp, #512	; 0x200
   10e6a:	f000 867e 	beq.w	11b6a <_svfprintf_r+0x129e>
   10e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10e70:	9909      	ldr	r1, [sp, #36]	; 0x24
   10e72:	f853 2b04 	ldr.w	r2, [r3], #4
   10e76:	930e      	str	r3, [sp, #56]	; 0x38
   10e78:	7011      	strb	r1, [r2, #0]
   10e7a:	4644      	mov	r4, r8
   10e7c:	e554      	b.n	10928 <_svfprintf_r+0x5c>
   10e7e:	f898 3000 	ldrb.w	r3, [r8]
   10e82:	2b68      	cmp	r3, #104	; 0x68
   10e84:	bf03      	ittte	eq
   10e86:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   10e8a:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
   10e8e:	f108 0801 	addeq.w	r8, r8, #1
   10e92:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
   10e96:	e572      	b.n	1097e <_svfprintf_r+0xb2>
   10e98:	f898 3000 	ldrb.w	r3, [r8]
   10e9c:	f88d 5087 	strb.w	r5, [sp, #135]	; 0x87
   10ea0:	e56d      	b.n	1097e <_svfprintf_r+0xb2>
   10ea2:	f898 3000 	ldrb.w	r3, [r8]
   10ea6:	2b6c      	cmp	r3, #108	; 0x6c
   10ea8:	bf03      	ittte	eq
   10eaa:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   10eae:	f04b 0b20 	orreq.w	fp, fp, #32
   10eb2:	f108 0801 	addeq.w	r8, r8, #1
   10eb6:	f04b 0b10 	orrne.w	fp, fp, #16
   10eba:	e560      	b.n	1097e <_svfprintf_r+0xb2>
   10ebc:	9310      	str	r3, [sp, #64]	; 0x40
   10ebe:	f04b 0b10 	orr.w	fp, fp, #16
   10ec2:	f01b 0120 	ands.w	r1, fp, #32
   10ec6:	f000 834a 	beq.w	1155e <_svfprintf_r+0xc92>
   10eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10ecc:	3307      	adds	r3, #7
   10ece:	f023 0307 	bic.w	r3, r3, #7
   10ed2:	6859      	ldr	r1, [r3, #4]
   10ed4:	f853 2b08 	ldr.w	r2, [r3], #8
   10ed8:	930e      	str	r3, [sp, #56]	; 0x38
   10eda:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
   10ede:	2300      	movs	r3, #0
   10ee0:	e798      	b.n	10e14 <_svfprintf_r+0x548>
   10ee2:	9310      	str	r3, [sp, #64]	; 0x40
   10ee4:	f04b 0510 	orr.w	r5, fp, #16
   10ee8:	f015 0120 	ands.w	r1, r5, #32
   10eec:	f000 8328 	beq.w	11540 <_svfprintf_r+0xc74>
   10ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10ef2:	3307      	adds	r3, #7
   10ef4:	f023 0307 	bic.w	r3, r3, #7
   10ef8:	6859      	ldr	r1, [r3, #4]
   10efa:	f853 2b08 	ldr.w	r2, [r3], #8
   10efe:	930e      	str	r3, [sp, #56]	; 0x38
   10f00:	2301      	movs	r3, #1
   10f02:	e787      	b.n	10e14 <_svfprintf_r+0x548>
   10f04:	7fefffff 	.word	0x7fefffff
   10f08:	0001747c 	.word	0x0001747c
   10f0c:	00016ff0 	.word	0x00016ff0
   10f10:	00017484 	.word	0x00017484
   10f14:	f898 3000 	ldrb.w	r3, [r8]
   10f18:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   10f1c:	e52f      	b.n	1097e <_svfprintf_r+0xb2>
   10f1e:	4641      	mov	r1, r8
   10f20:	f811 3b01 	ldrb.w	r3, [r1], #1
   10f24:	2b2a      	cmp	r3, #42	; 0x2a
   10f26:	f001 827f 	beq.w	12428 <_svfprintf_r+0x1b5c>
   10f2a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   10f2e:	2a09      	cmp	r2, #9
   10f30:	4688      	mov	r8, r1
   10f32:	bf98      	it	ls
   10f34:	2100      	movls	r1, #0
   10f36:	f201 8176 	bhi.w	12226 <_svfprintf_r+0x195a>
   10f3a:	f818 3b01 	ldrb.w	r3, [r8], #1
   10f3e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   10f42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   10f46:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   10f4a:	2a09      	cmp	r2, #9
   10f4c:	d9f5      	bls.n	10f3a <_svfprintf_r+0x66e>
   10f4e:	9108      	str	r1, [sp, #32]
   10f50:	e517      	b.n	10982 <_svfprintf_r+0xb6>
   10f52:	f898 3000 	ldrb.w	r3, [r8]
   10f56:	f04b 0b01 	orr.w	fp, fp, #1
   10f5a:	e510      	b.n	1097e <_svfprintf_r+0xb2>
   10f5c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
   10f60:	2b00      	cmp	r3, #0
   10f62:	f47f ad91 	bne.w	10a88 <_svfprintf_r+0x1bc>
   10f66:	f898 3000 	ldrb.w	r3, [r8]
   10f6a:	f88d 6087 	strb.w	r6, [sp, #135]	; 0x87
   10f6e:	e506      	b.n	1097e <_svfprintf_r+0xb2>
   10f70:	465d      	mov	r5, fp
   10f72:	2b01      	cmp	r3, #1
   10f74:	f000 81ad 	beq.w	112d2 <_svfprintf_r+0xa06>
   10f78:	2b02      	cmp	r3, #2
   10f7a:	ac58      	add	r4, sp, #352	; 0x160
   10f7c:	d11f      	bne.n	10fbe <_svfprintf_r+0x6f2>
   10f7e:	9818      	ldr	r0, [sp, #96]	; 0x60
   10f80:	f002 030f 	and.w	r3, r2, #15
   10f84:	0912      	lsrs	r2, r2, #4
   10f86:	5cc3      	ldrb	r3, [r0, r3]
   10f88:	f804 3d01 	strb.w	r3, [r4, #-1]!
   10f8c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   10f90:	0909      	lsrs	r1, r1, #4
   10f92:	ea52 0301 	orrs.w	r3, r2, r1
   10f96:	d1f3      	bne.n	10f80 <_svfprintf_r+0x6b4>
   10f98:	ab58      	add	r3, sp, #352	; 0x160
   10f9a:	1b1b      	subs	r3, r3, r4
   10f9c:	46ab      	mov	fp, r5
   10f9e:	930a      	str	r3, [sp, #40]	; 0x28
   10fa0:	990a      	ldr	r1, [sp, #40]	; 0x28
   10fa2:	9808      	ldr	r0, [sp, #32]
   10fa4:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10fa8:	4281      	cmp	r1, r0
   10faa:	f04f 0300 	mov.w	r3, #0
   10fae:	bfb8      	it	lt
   10fb0:	4601      	movlt	r1, r0
   10fb2:	930d      	str	r3, [sp, #52]	; 0x34
   10fb4:	9107      	str	r1, [sp, #28]
   10fb6:	9312      	str	r3, [sp, #72]	; 0x48
   10fb8:	9316      	str	r3, [sp, #88]	; 0x58
   10fba:	9311      	str	r3, [sp, #68]	; 0x44
   10fbc:	e66a      	b.n	10c94 <_svfprintf_r+0x3c8>
   10fbe:	f002 0307 	and.w	r3, r2, #7
   10fc2:	08d2      	lsrs	r2, r2, #3
   10fc4:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   10fc8:	08c9      	lsrs	r1, r1, #3
   10fca:	3330      	adds	r3, #48	; 0x30
   10fcc:	ea52 0601 	orrs.w	r6, r2, r1
   10fd0:	4620      	mov	r0, r4
   10fd2:	f804 3d01 	strb.w	r3, [r4, #-1]!
   10fd6:	d1f2      	bne.n	10fbe <_svfprintf_r+0x6f2>
   10fd8:	07e9      	lsls	r1, r5, #31
   10fda:	d5dd      	bpl.n	10f98 <_svfprintf_r+0x6cc>
   10fdc:	2b30      	cmp	r3, #48	; 0x30
   10fde:	d0db      	beq.n	10f98 <_svfprintf_r+0x6cc>
   10fe0:	2330      	movs	r3, #48	; 0x30
   10fe2:	3802      	subs	r0, #2
   10fe4:	f804 3c01 	strb.w	r3, [r4, #-1]
   10fe8:	ab58      	add	r3, sp, #352	; 0x160
   10fea:	1a1b      	subs	r3, r3, r0
   10fec:	46ab      	mov	fp, r5
   10fee:	930a      	str	r3, [sp, #40]	; 0x28
   10ff0:	4604      	mov	r4, r0
   10ff2:	e7d5      	b.n	10fa0 <_svfprintf_r+0x6d4>
   10ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10ff6:	2b65      	cmp	r3, #101	; 0x65
   10ff8:	f340 80dc 	ble.w	111b4 <_svfprintf_r+0x8e8>
   10ffc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   11000:	2200      	movs	r2, #0
   11002:	2300      	movs	r3, #0
   11004:	f7fd fb86 	bl	e714 <__aeabi_dcmpeq>
   11008:	2800      	cmp	r0, #0
   1100a:	f000 81c8 	beq.w	1139e <_svfprintf_r+0xad2>
   1100e:	2301      	movs	r3, #1
   11010:	f8c9 3004 	str.w	r3, [r9, #4]
   11014:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   11016:	4abd      	ldr	r2, [pc, #756]	; (1130c <_svfprintf_r+0xa40>)
   11018:	f8c9 2000 	str.w	r2, [r9]
   1101c:	3301      	adds	r3, #1
   1101e:	3601      	adds	r6, #1
   11020:	2b07      	cmp	r3, #7
   11022:	962e      	str	r6, [sp, #184]	; 0xb8
   11024:	932d      	str	r3, [sp, #180]	; 0xb4
   11026:	f300 8539 	bgt.w	11a9c <_svfprintf_r+0x11d0>
   1102a:	f109 0908 	add.w	r9, r9, #8
   1102e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11030:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11032:	4293      	cmp	r3, r2
   11034:	f280 82c2 	bge.w	115bc <_svfprintf_r+0xcf0>
   11038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1103a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1103c:	441e      	add	r6, r3
   1103e:	e9c9 2300 	strd	r2, r3, [r9]
   11042:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   11044:	962e      	str	r6, [sp, #184]	; 0xb8
   11046:	3301      	adds	r3, #1
   11048:	2b07      	cmp	r3, #7
   1104a:	932d      	str	r3, [sp, #180]	; 0xb4
   1104c:	f300 838d 	bgt.w	1176a <_svfprintf_r+0xe9e>
   11050:	f109 0908 	add.w	r9, r9, #8
   11054:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11056:	1e5c      	subs	r4, r3, #1
   11058:	2c00      	cmp	r4, #0
   1105a:	f77f adbc 	ble.w	10bd6 <_svfprintf_r+0x30a>
   1105e:	2c10      	cmp	r4, #16
   11060:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   11062:	4dab      	ldr	r5, [pc, #684]	; (11310 <_svfprintf_r+0xa44>)
   11064:	f340 8555 	ble.w	11b12 <_svfprintf_r+0x1246>
   11068:	4632      	mov	r2, r6
   1106a:	2710      	movs	r7, #16
   1106c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1106e:	e005      	b.n	1107c <_svfprintf_r+0x7b0>
   11070:	f109 0908 	add.w	r9, r9, #8
   11074:	3c10      	subs	r4, #16
   11076:	2c10      	cmp	r4, #16
   11078:	f340 854a 	ble.w	11b10 <_svfprintf_r+0x1244>
   1107c:	3301      	adds	r3, #1
   1107e:	3210      	adds	r2, #16
   11080:	2b07      	cmp	r3, #7
   11082:	e9c9 5700 	strd	r5, r7, [r9]
   11086:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   1108a:	ddf1      	ble.n	11070 <_svfprintf_r+0x7a4>
   1108c:	aa2c      	add	r2, sp, #176	; 0xb0
   1108e:	4631      	mov	r1, r6
   11090:	4650      	mov	r0, sl
   11092:	f002 fc85 	bl	139a0 <__ssprint_r>
   11096:	2800      	cmp	r0, #0
   11098:	f040 8083 	bne.w	111a2 <_svfprintf_r+0x8d6>
   1109c:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   110a0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   110a4:	e7e6      	b.n	11074 <_svfprintf_r+0x7a8>
   110a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   110a8:	9a07      	ldr	r2, [sp, #28]
   110aa:	1a9f      	subs	r7, r3, r2
   110ac:	2f00      	cmp	r7, #0
   110ae:	f77f ad79 	ble.w	10ba4 <_svfprintf_r+0x2d8>
   110b2:	2f10      	cmp	r7, #16
   110b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   110b6:	4d96      	ldr	r5, [pc, #600]	; (11310 <_svfprintf_r+0xa44>)
   110b8:	dd23      	ble.n	11102 <_svfprintf_r+0x836>
   110ba:	4632      	mov	r2, r6
   110bc:	4626      	mov	r6, r4
   110be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   110c0:	e004      	b.n	110cc <_svfprintf_r+0x800>
   110c2:	3f10      	subs	r7, #16
   110c4:	2f10      	cmp	r7, #16
   110c6:	f109 0908 	add.w	r9, r9, #8
   110ca:	dd18      	ble.n	110fe <_svfprintf_r+0x832>
   110cc:	3301      	adds	r3, #1
   110ce:	3210      	adds	r2, #16
   110d0:	2110      	movs	r1, #16
   110d2:	2b07      	cmp	r3, #7
   110d4:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   110d8:	f8c9 5000 	str.w	r5, [r9]
   110dc:	f8c9 1004 	str.w	r1, [r9, #4]
   110e0:	ddef      	ble.n	110c2 <_svfprintf_r+0x7f6>
   110e2:	aa2c      	add	r2, sp, #176	; 0xb0
   110e4:	4621      	mov	r1, r4
   110e6:	4650      	mov	r0, sl
   110e8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   110ec:	f002 fc58 	bl	139a0 <__ssprint_r>
   110f0:	2800      	cmp	r0, #0
   110f2:	d156      	bne.n	111a2 <_svfprintf_r+0x8d6>
   110f4:	3f10      	subs	r7, #16
   110f6:	2f10      	cmp	r7, #16
   110f8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   110fc:	dce6      	bgt.n	110cc <_svfprintf_r+0x800>
   110fe:	4634      	mov	r4, r6
   11100:	4616      	mov	r6, r2
   11102:	3301      	adds	r3, #1
   11104:	443e      	add	r6, r7
   11106:	2b07      	cmp	r3, #7
   11108:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   1110c:	f8c9 5000 	str.w	r5, [r9]
   11110:	f8c9 7004 	str.w	r7, [r9, #4]
   11114:	f300 8516 	bgt.w	11b44 <_svfprintf_r+0x1278>
   11118:	9b08      	ldr	r3, [sp, #32]
   1111a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1111c:	1a9f      	subs	r7, r3, r2
   1111e:	2f00      	cmp	r7, #0
   11120:	f109 0908 	add.w	r9, r9, #8
   11124:	f77f ad44 	ble.w	10bb0 <_svfprintf_r+0x2e4>
   11128:	2f10      	cmp	r7, #16
   1112a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1112c:	4d78      	ldr	r5, [pc, #480]	; (11310 <_svfprintf_r+0xa44>)
   1112e:	dd22      	ble.n	11176 <_svfprintf_r+0x8aa>
   11130:	4632      	mov	r2, r6
   11132:	4626      	mov	r6, r4
   11134:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   11136:	e004      	b.n	11142 <_svfprintf_r+0x876>
   11138:	3f10      	subs	r7, #16
   1113a:	2f10      	cmp	r7, #16
   1113c:	f109 0908 	add.w	r9, r9, #8
   11140:	dd17      	ble.n	11172 <_svfprintf_r+0x8a6>
   11142:	3301      	adds	r3, #1
   11144:	3210      	adds	r2, #16
   11146:	2110      	movs	r1, #16
   11148:	2b07      	cmp	r3, #7
   1114a:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   1114e:	f8c9 5000 	str.w	r5, [r9]
   11152:	f8c9 1004 	str.w	r1, [r9, #4]
   11156:	ddef      	ble.n	11138 <_svfprintf_r+0x86c>
   11158:	aa2c      	add	r2, sp, #176	; 0xb0
   1115a:	4621      	mov	r1, r4
   1115c:	4650      	mov	r0, sl
   1115e:	f002 fc1f 	bl	139a0 <__ssprint_r>
   11162:	b9f0      	cbnz	r0, 111a2 <_svfprintf_r+0x8d6>
   11164:	3f10      	subs	r7, #16
   11166:	2f10      	cmp	r7, #16
   11168:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   1116c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11170:	dce7      	bgt.n	11142 <_svfprintf_r+0x876>
   11172:	4634      	mov	r4, r6
   11174:	4616      	mov	r6, r2
   11176:	3301      	adds	r3, #1
   11178:	443e      	add	r6, r7
   1117a:	2b07      	cmp	r3, #7
   1117c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   11180:	f8c9 5000 	str.w	r5, [r9]
   11184:	f8c9 7004 	str.w	r7, [r9, #4]
   11188:	f300 81cd 	bgt.w	11526 <_svfprintf_r+0xc5a>
   1118c:	f109 0908 	add.w	r9, r9, #8
   11190:	e50e      	b.n	10bb0 <_svfprintf_r+0x2e4>
   11192:	990c      	ldr	r1, [sp, #48]	; 0x30
   11194:	aa2c      	add	r2, sp, #176	; 0xb0
   11196:	4650      	mov	r0, sl
   11198:	f002 fc02 	bl	139a0 <__ssprint_r>
   1119c:	2800      	cmp	r0, #0
   1119e:	f43f ad2e 	beq.w	10bfe <_svfprintf_r+0x332>
   111a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   111a4:	2b00      	cmp	r3, #0
   111a6:	f43f ac99 	beq.w	10adc <_svfprintf_r+0x210>
   111aa:	990d      	ldr	r1, [sp, #52]	; 0x34
   111ac:	4650      	mov	r0, sl
   111ae:	f7fe feb5 	bl	ff1c <_free_r>
   111b2:	e493      	b.n	10adc <_svfprintf_r+0x210>
   111b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   111b6:	2b01      	cmp	r3, #1
   111b8:	f340 816e 	ble.w	11498 <_svfprintf_r+0xbcc>
   111bc:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
   111be:	f8c9 4000 	str.w	r4, [r9]
   111c2:	2301      	movs	r3, #1
   111c4:	441f      	add	r7, r3
   111c6:	3601      	adds	r6, #1
   111c8:	2f07      	cmp	r7, #7
   111ca:	f8c9 3004 	str.w	r3, [r9, #4]
   111ce:	962e      	str	r6, [sp, #184]	; 0xb8
   111d0:	972d      	str	r7, [sp, #180]	; 0xb4
   111d2:	f300 81d9 	bgt.w	11588 <_svfprintf_r+0xcbc>
   111d6:	f109 0908 	add.w	r9, r9, #8
   111da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   111dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   111de:	3701      	adds	r7, #1
   111e0:	441e      	add	r6, r3
   111e2:	2f07      	cmp	r7, #7
   111e4:	e9c9 2300 	strd	r2, r3, [r9]
   111e8:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
   111ec:	f300 81d9 	bgt.w	115a2 <_svfprintf_r+0xcd6>
   111f0:	f109 0908 	add.w	r9, r9, #8
   111f4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   111f8:	2200      	movs	r2, #0
   111fa:	2300      	movs	r3, #0
   111fc:	f7fd fa8a 	bl	e714 <__aeabi_dcmpeq>
   11200:	2800      	cmp	r0, #0
   11202:	f040 8167 	bne.w	114d4 <_svfprintf_r+0xc08>
   11206:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11208:	3701      	adds	r7, #1
   1120a:	3b01      	subs	r3, #1
   1120c:	3401      	adds	r4, #1
   1120e:	441e      	add	r6, r3
   11210:	2f07      	cmp	r7, #7
   11212:	f8c9 4000 	str.w	r4, [r9]
   11216:	972d      	str	r7, [sp, #180]	; 0xb4
   11218:	f8c9 3004 	str.w	r3, [r9, #4]
   1121c:	962e      	str	r6, [sp, #184]	; 0xb8
   1121e:	f300 814c 	bgt.w	114ba <_svfprintf_r+0xbee>
   11222:	f109 0908 	add.w	r9, r9, #8
   11226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11228:	f8c9 3004 	str.w	r3, [r9, #4]
   1122c:	3701      	adds	r7, #1
   1122e:	441e      	add	r6, r3
   11230:	2f07      	cmp	r7, #7
   11232:	ab26      	add	r3, sp, #152	; 0x98
   11234:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
   11238:	f8c9 3000 	str.w	r3, [r9]
   1123c:	f77f acc9 	ble.w	10bd2 <_svfprintf_r+0x306>
   11240:	990c      	ldr	r1, [sp, #48]	; 0x30
   11242:	aa2c      	add	r2, sp, #176	; 0xb0
   11244:	4650      	mov	r0, sl
   11246:	f002 fbab 	bl	139a0 <__ssprint_r>
   1124a:	2800      	cmp	r0, #0
   1124c:	d1a9      	bne.n	111a2 <_svfprintf_r+0x8d6>
   1124e:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   11250:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11254:	e4bf      	b.n	10bd6 <_svfprintf_r+0x30a>
   11256:	2f10      	cmp	r7, #16
   11258:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
   1125c:	4d2d      	ldr	r5, [pc, #180]	; (11314 <_svfprintf_r+0xa48>)
   1125e:	dd27      	ble.n	112b0 <_svfprintf_r+0x9e4>
   11260:	e9cd 381e 	strd	r3, r8, [sp, #120]	; 0x78
   11264:	2610      	movs	r6, #16
   11266:	46d0      	mov	r8, sl
   11268:	46a2      	mov	sl, r4
   1126a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1126c:	e004      	b.n	11278 <_svfprintf_r+0x9ac>
   1126e:	3f10      	subs	r7, #16
   11270:	2f10      	cmp	r7, #16
   11272:	f109 0908 	add.w	r9, r9, #8
   11276:	dd16      	ble.n	112a6 <_svfprintf_r+0x9da>
   11278:	3201      	adds	r2, #1
   1127a:	3110      	adds	r1, #16
   1127c:	2a07      	cmp	r2, #7
   1127e:	e9c9 5600 	strd	r5, r6, [r9]
   11282:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
   11286:	ddf2      	ble.n	1126e <_svfprintf_r+0x9a2>
   11288:	aa2c      	add	r2, sp, #176	; 0xb0
   1128a:	4621      	mov	r1, r4
   1128c:	4640      	mov	r0, r8
   1128e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11292:	f002 fb85 	bl	139a0 <__ssprint_r>
   11296:	2800      	cmp	r0, #0
   11298:	f040 83f2 	bne.w	11a80 <_svfprintf_r+0x11b4>
   1129c:	3f10      	subs	r7, #16
   1129e:	2f10      	cmp	r7, #16
   112a0:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
   112a4:	dce8      	bgt.n	11278 <_svfprintf_r+0x9ac>
   112a6:	4654      	mov	r4, sl
   112a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   112aa:	46c2      	mov	sl, r8
   112ac:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   112b0:	f8c9 5000 	str.w	r5, [r9]
   112b4:	3201      	adds	r2, #1
   112b6:	187e      	adds	r6, r7, r1
   112b8:	2a07      	cmp	r2, #7
   112ba:	e9cd 262d 	strd	r2, r6, [sp, #180]	; 0xb4
   112be:	f8c9 7004 	str.w	r7, [r9, #4]
   112c2:	f300 83cc 	bgt.w	11a5e <_svfprintf_r+0x1192>
   112c6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   112ca:	f109 0908 	add.w	r9, r9, #8
   112ce:	e441      	b.n	10b54 <_svfprintf_r+0x288>
   112d0:	465d      	mov	r5, fp
   112d2:	2a0a      	cmp	r2, #10
   112d4:	f171 0300 	sbcs.w	r3, r1, #0
   112d8:	f080 8329 	bcs.w	1192e <_svfprintf_r+0x1062>
   112dc:	3230      	adds	r2, #48	; 0x30
   112de:	2301      	movs	r3, #1
   112e0:	f88d 215f 	strb.w	r2, [sp, #351]	; 0x15f
   112e4:	46ab      	mov	fp, r5
   112e6:	930a      	str	r3, [sp, #40]	; 0x28
   112e8:	f20d 145f 	addw	r4, sp, #351	; 0x15f
   112ec:	e658      	b.n	10fa0 <_svfprintf_r+0x6d4>
   112ee:	990c      	ldr	r1, [sp, #48]	; 0x30
   112f0:	931e      	str	r3, [sp, #120]	; 0x78
   112f2:	aa2c      	add	r2, sp, #176	; 0xb0
   112f4:	4650      	mov	r0, sl
   112f6:	f002 fb53 	bl	139a0 <__ssprint_r>
   112fa:	2800      	cmp	r0, #0
   112fc:	f47f af51 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11300:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   11302:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   11304:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11308:	e436      	b.n	10b78 <_svfprintf_r+0x2ac>
   1130a:	bf00      	nop
   1130c:	00015bd0 	.word	0x00015bd0
   11310:	000174c4 	.word	0x000174c4
   11314:	000174b4 	.word	0x000174b4
   11318:	990c      	ldr	r1, [sp, #48]	; 0x30
   1131a:	aa2c      	add	r2, sp, #176	; 0xb0
   1131c:	4650      	mov	r0, sl
   1131e:	f002 fb3f 	bl	139a0 <__ssprint_r>
   11322:	2800      	cmp	r0, #0
   11324:	f47f af3d 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11328:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   1132a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   1132e:	e435      	b.n	10b9c <_svfprintf_r+0x2d0>
   11330:	2c10      	cmp	r4, #16
   11332:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   11334:	4db8      	ldr	r5, [pc, #736]	; (11618 <_svfprintf_r+0xd4c>)
   11336:	dd1f      	ble.n	11378 <_svfprintf_r+0xaac>
   11338:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   1133c:	2710      	movs	r7, #16
   1133e:	e004      	b.n	1134a <_svfprintf_r+0xa7e>
   11340:	3c10      	subs	r4, #16
   11342:	2c10      	cmp	r4, #16
   11344:	f109 0908 	add.w	r9, r9, #8
   11348:	dd16      	ble.n	11378 <_svfprintf_r+0xaac>
   1134a:	3301      	adds	r3, #1
   1134c:	3610      	adds	r6, #16
   1134e:	2b07      	cmp	r3, #7
   11350:	e9c9 5700 	strd	r5, r7, [r9]
   11354:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   11358:	ddf2      	ble.n	11340 <_svfprintf_r+0xa74>
   1135a:	aa2c      	add	r2, sp, #176	; 0xb0
   1135c:	4659      	mov	r1, fp
   1135e:	4650      	mov	r0, sl
   11360:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11364:	f002 fb1c 	bl	139a0 <__ssprint_r>
   11368:	2800      	cmp	r0, #0
   1136a:	f47f af1a 	bne.w	111a2 <_svfprintf_r+0x8d6>
   1136e:	3c10      	subs	r4, #16
   11370:	2c10      	cmp	r4, #16
   11372:	e9dd 362d 	ldrd	r3, r6, [sp, #180]	; 0xb4
   11376:	dce8      	bgt.n	1134a <_svfprintf_r+0xa7e>
   11378:	3301      	adds	r3, #1
   1137a:	4426      	add	r6, r4
   1137c:	2b07      	cmp	r3, #7
   1137e:	e9c9 5400 	strd	r5, r4, [r9]
   11382:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   11386:	f77f ac2f 	ble.w	10be8 <_svfprintf_r+0x31c>
   1138a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1138c:	aa2c      	add	r2, sp, #176	; 0xb0
   1138e:	4650      	mov	r0, sl
   11390:	f002 fb06 	bl	139a0 <__ssprint_r>
   11394:	2800      	cmp	r0, #0
   11396:	f47f af04 	bne.w	111a2 <_svfprintf_r+0x8d6>
   1139a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   1139c:	e424      	b.n	10be8 <_svfprintf_r+0x31c>
   1139e:	9923      	ldr	r1, [sp, #140]	; 0x8c
   113a0:	2900      	cmp	r1, #0
   113a2:	f340 8327 	ble.w	119f4 <_svfprintf_r+0x1128>
   113a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   113a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   113aa:	429d      	cmp	r5, r3
   113ac:	bfa8      	it	ge
   113ae:	461d      	movge	r5, r3
   113b0:	2d00      	cmp	r5, #0
   113b2:	dd0b      	ble.n	113cc <_svfprintf_r+0xb00>
   113b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   113b6:	3301      	adds	r3, #1
   113b8:	442e      	add	r6, r5
   113ba:	2b07      	cmp	r3, #7
   113bc:	e9c9 4500 	strd	r4, r5, [r9]
   113c0:	962e      	str	r6, [sp, #184]	; 0xb8
   113c2:	932d      	str	r3, [sp, #180]	; 0xb4
   113c4:	f300 86dd 	bgt.w	12182 <_svfprintf_r+0x18b6>
   113c8:	f109 0908 	add.w	r9, r9, #8
   113cc:	9f11      	ldr	r7, [sp, #68]	; 0x44
   113ce:	2d00      	cmp	r5, #0
   113d0:	bfa8      	it	ge
   113d2:	1b7f      	subge	r7, r7, r5
   113d4:	2f00      	cmp	r7, #0
   113d6:	f300 81f4 	bgt.w	117c2 <_svfprintf_r+0xef6>
   113da:	9b11      	ldr	r3, [sp, #68]	; 0x44
   113dc:	f41b 6f80 	tst.w	fp, #1024	; 0x400
   113e0:	4423      	add	r3, r4
   113e2:	930a      	str	r3, [sp, #40]	; 0x28
   113e4:	f040 8214 	bne.w	11810 <_svfprintf_r+0xf44>
   113e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   113ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   113ec:	4293      	cmp	r3, r2
   113ee:	db03      	blt.n	113f8 <_svfprintf_r+0xb2c>
   113f0:	f01b 0f01 	tst.w	fp, #1
   113f4:	f000 84a5 	beq.w	11d42 <_svfprintf_r+0x1476>
   113f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   113fa:	9919      	ldr	r1, [sp, #100]	; 0x64
   113fc:	4416      	add	r6, r2
   113fe:	e9c9 1200 	strd	r1, r2, [r9]
   11402:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   11404:	962e      	str	r6, [sp, #184]	; 0xb8
   11406:	3201      	adds	r2, #1
   11408:	2a07      	cmp	r2, #7
   1140a:	922d      	str	r2, [sp, #180]	; 0xb4
   1140c:	f300 86c6 	bgt.w	1219c <_svfprintf_r+0x18d0>
   11410:	f109 0908 	add.w	r9, r9, #8
   11414:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11416:	18a5      	adds	r5, r4, r2
   11418:	1ad4      	subs	r4, r2, r3
   1141a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1141c:	1aed      	subs	r5, r5, r3
   1141e:	42a5      	cmp	r5, r4
   11420:	bfa8      	it	ge
   11422:	4625      	movge	r5, r4
   11424:	2d00      	cmp	r5, #0
   11426:	dd0d      	ble.n	11444 <_svfprintf_r+0xb78>
   11428:	f8c9 3000 	str.w	r3, [r9]
   1142c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1142e:	f8c9 5004 	str.w	r5, [r9, #4]
   11432:	3301      	adds	r3, #1
   11434:	442e      	add	r6, r5
   11436:	2b07      	cmp	r3, #7
   11438:	962e      	str	r6, [sp, #184]	; 0xb8
   1143a:	932d      	str	r3, [sp, #180]	; 0xb4
   1143c:	f300 86be 	bgt.w	121bc <_svfprintf_r+0x18f0>
   11440:	f109 0908 	add.w	r9, r9, #8
   11444:	2d00      	cmp	r5, #0
   11446:	bfa8      	it	ge
   11448:	1b64      	subge	r4, r4, r5
   1144a:	2c00      	cmp	r4, #0
   1144c:	f77f abc3 	ble.w	10bd6 <_svfprintf_r+0x30a>
   11450:	2c10      	cmp	r4, #16
   11452:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   11454:	4d71      	ldr	r5, [pc, #452]	; (1161c <_svfprintf_r+0xd50>)
   11456:	f340 835c 	ble.w	11b12 <_svfprintf_r+0x1246>
   1145a:	4632      	mov	r2, r6
   1145c:	2710      	movs	r7, #16
   1145e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11460:	e005      	b.n	1146e <_svfprintf_r+0xba2>
   11462:	f109 0908 	add.w	r9, r9, #8
   11466:	3c10      	subs	r4, #16
   11468:	2c10      	cmp	r4, #16
   1146a:	f340 8351 	ble.w	11b10 <_svfprintf_r+0x1244>
   1146e:	3301      	adds	r3, #1
   11470:	3210      	adds	r2, #16
   11472:	2b07      	cmp	r3, #7
   11474:	e9c9 5700 	strd	r5, r7, [r9]
   11478:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   1147c:	ddf1      	ble.n	11462 <_svfprintf_r+0xb96>
   1147e:	aa2c      	add	r2, sp, #176	; 0xb0
   11480:	4631      	mov	r1, r6
   11482:	4650      	mov	r0, sl
   11484:	f002 fa8c 	bl	139a0 <__ssprint_r>
   11488:	2800      	cmp	r0, #0
   1148a:	f47f ae8a 	bne.w	111a2 <_svfprintf_r+0x8d6>
   1148e:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   11492:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11496:	e7e6      	b.n	11466 <_svfprintf_r+0xb9a>
   11498:	f01b 0f01 	tst.w	fp, #1
   1149c:	f47f ae8e 	bne.w	111bc <_svfprintf_r+0x8f0>
   114a0:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
   114a2:	f8c9 4000 	str.w	r4, [r9]
   114a6:	2301      	movs	r3, #1
   114a8:	441f      	add	r7, r3
   114aa:	3601      	adds	r6, #1
   114ac:	2f07      	cmp	r7, #7
   114ae:	f8c9 3004 	str.w	r3, [r9, #4]
   114b2:	962e      	str	r6, [sp, #184]	; 0xb8
   114b4:	972d      	str	r7, [sp, #180]	; 0xb4
   114b6:	f77f aeb4 	ble.w	11222 <_svfprintf_r+0x956>
   114ba:	990c      	ldr	r1, [sp, #48]	; 0x30
   114bc:	aa2c      	add	r2, sp, #176	; 0xb0
   114be:	4650      	mov	r0, sl
   114c0:	f002 fa6e 	bl	139a0 <__ssprint_r>
   114c4:	2800      	cmp	r0, #0
   114c6:	f47f ae6c 	bne.w	111a2 <_svfprintf_r+0x8d6>
   114ca:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
   114ce:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   114d2:	e6a8      	b.n	11226 <_svfprintf_r+0x95a>
   114d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   114d6:	1e5c      	subs	r4, r3, #1
   114d8:	2c00      	cmp	r4, #0
   114da:	f77f aea4 	ble.w	11226 <_svfprintf_r+0x95a>
   114de:	2c10      	cmp	r4, #16
   114e0:	4d4e      	ldr	r5, [pc, #312]	; (1161c <_svfprintf_r+0xd50>)
   114e2:	f340 834c 	ble.w	11b7e <_svfprintf_r+0x12b2>
   114e6:	4632      	mov	r2, r6
   114e8:	2310      	movs	r3, #16
   114ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   114ec:	e005      	b.n	114fa <_svfprintf_r+0xc2e>
   114ee:	f109 0908 	add.w	r9, r9, #8
   114f2:	3c10      	subs	r4, #16
   114f4:	2c10      	cmp	r4, #16
   114f6:	f340 8341 	ble.w	11b7c <_svfprintf_r+0x12b0>
   114fa:	3701      	adds	r7, #1
   114fc:	3210      	adds	r2, #16
   114fe:	2f07      	cmp	r7, #7
   11500:	e9c9 5300 	strd	r5, r3, [r9]
   11504:	e9cd 722d 	strd	r7, r2, [sp, #180]	; 0xb4
   11508:	ddf1      	ble.n	114ee <_svfprintf_r+0xc22>
   1150a:	aa2c      	add	r2, sp, #176	; 0xb0
   1150c:	4631      	mov	r1, r6
   1150e:	4650      	mov	r0, sl
   11510:	f002 fa46 	bl	139a0 <__ssprint_r>
   11514:	2800      	cmp	r0, #0
   11516:	f47f ae44 	bne.w	111a2 <_svfprintf_r+0x8d6>
   1151a:	e9dd 722d 	ldrd	r7, r2, [sp, #180]	; 0xb4
   1151e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11522:	2310      	movs	r3, #16
   11524:	e7e5      	b.n	114f2 <_svfprintf_r+0xc26>
   11526:	990c      	ldr	r1, [sp, #48]	; 0x30
   11528:	aa2c      	add	r2, sp, #176	; 0xb0
   1152a:	4650      	mov	r0, sl
   1152c:	f002 fa38 	bl	139a0 <__ssprint_r>
   11530:	2800      	cmp	r0, #0
   11532:	f47f ae36 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11536:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   11538:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   1153c:	f7ff bb38 	b.w	10bb0 <_svfprintf_r+0x2e4>
   11540:	f015 0310 	ands.w	r3, r5, #16
   11544:	d160      	bne.n	11608 <_svfprintf_r+0xd3c>
   11546:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   1154a:	f000 8373 	beq.w	11c34 <_svfprintf_r+0x1368>
   1154e:	980e      	ldr	r0, [sp, #56]	; 0x38
   11550:	f850 2b04 	ldr.w	r2, [r0], #4
   11554:	900e      	str	r0, [sp, #56]	; 0x38
   11556:	4619      	mov	r1, r3
   11558:	b292      	uxth	r2, r2
   1155a:	2301      	movs	r3, #1
   1155c:	e45a      	b.n	10e14 <_svfprintf_r+0x548>
   1155e:	f01b 0310 	ands.w	r3, fp, #16
   11562:	d168      	bne.n	11636 <_svfprintf_r+0xd6a>
   11564:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
   11568:	f000 8356 	beq.w	11c18 <_svfprintf_r+0x134c>
   1156c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1156e:	f850 2b04 	ldr.w	r2, [r0], #4
   11572:	900e      	str	r0, [sp, #56]	; 0x38
   11574:	4619      	mov	r1, r3
   11576:	b292      	uxth	r2, r2
   11578:	e4af      	b.n	10eda <_svfprintf_r+0x60e>
   1157a:	4252      	negs	r2, r2
   1157c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11580:	465d      	mov	r5, fp
   11582:	202d      	movs	r0, #45	; 0x2d
   11584:	2301      	movs	r3, #1
   11586:	e446      	b.n	10e16 <_svfprintf_r+0x54a>
   11588:	990c      	ldr	r1, [sp, #48]	; 0x30
   1158a:	aa2c      	add	r2, sp, #176	; 0xb0
   1158c:	4650      	mov	r0, sl
   1158e:	f002 fa07 	bl	139a0 <__ssprint_r>
   11592:	2800      	cmp	r0, #0
   11594:	f47f ae05 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11598:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
   1159c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   115a0:	e61b      	b.n	111da <_svfprintf_r+0x90e>
   115a2:	990c      	ldr	r1, [sp, #48]	; 0x30
   115a4:	aa2c      	add	r2, sp, #176	; 0xb0
   115a6:	4650      	mov	r0, sl
   115a8:	f002 f9fa 	bl	139a0 <__ssprint_r>
   115ac:	2800      	cmp	r0, #0
   115ae:	f47f adf8 	bne.w	111a2 <_svfprintf_r+0x8d6>
   115b2:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
   115b6:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   115ba:	e61b      	b.n	111f4 <_svfprintf_r+0x928>
   115bc:	f01b 0f01 	tst.w	fp, #1
   115c0:	f43f ab09 	beq.w	10bd6 <_svfprintf_r+0x30a>
   115c4:	e538      	b.n	11038 <_svfprintf_r+0x76c>
   115c6:	930e      	str	r3, [sp, #56]	; 0x38
   115c8:	f898 3000 	ldrb.w	r3, [r8]
   115cc:	f7ff b9d7 	b.w	1097e <_svfprintf_r+0xb2>
   115d0:	ac58      	add	r4, sp, #352	; 0x160
   115d2:	e4e5      	b.n	10fa0 <_svfprintf_r+0x6d4>
   115d4:	f41b 7f00 	tst.w	fp, #512	; 0x200
   115d8:	f040 83bd 	bne.w	11d56 <_svfprintf_r+0x148a>
   115dc:	f853 2b04 	ldr.w	r2, [r3], #4
   115e0:	930e      	str	r3, [sp, #56]	; 0x38
   115e2:	17d1      	asrs	r1, r2, #31
   115e4:	460b      	mov	r3, r1
   115e6:	f7ff bbc4 	b.w	10d72 <_svfprintf_r+0x4a6>
   115ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   115ec:	2b00      	cmp	r3, #0
   115ee:	f43f aa4b 	beq.w	10a88 <_svfprintf_r+0x1bc>
   115f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   115f4:	781b      	ldrb	r3, [r3, #0]
   115f6:	2b00      	cmp	r3, #0
   115f8:	f43f aa46 	beq.w	10a88 <_svfprintf_r+0x1bc>
   115fc:	f898 3000 	ldrb.w	r3, [r8]
   11600:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
   11604:	f7ff b9bb 	b.w	1097e <_svfprintf_r+0xb2>
   11608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1160a:	f853 2b04 	ldr.w	r2, [r3], #4
   1160e:	930e      	str	r3, [sp, #56]	; 0x38
   11610:	2301      	movs	r3, #1
   11612:	f7ff bbff 	b.w	10e14 <_svfprintf_r+0x548>
   11616:	bf00      	nop
   11618:	000174b4 	.word	0x000174b4
   1161c:	000174c4 	.word	0x000174c4
   11620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11622:	9809      	ldr	r0, [sp, #36]	; 0x24
   11624:	f853 1b04 	ldr.w	r1, [r3], #4
   11628:	930e      	str	r3, [sp, #56]	; 0x38
   1162a:	17c2      	asrs	r2, r0, #31
   1162c:	e9c1 0200 	strd	r0, r2, [r1]
   11630:	4644      	mov	r4, r8
   11632:	f7ff b979 	b.w	10928 <_svfprintf_r+0x5c>
   11636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11638:	f853 2b04 	ldr.w	r2, [r3], #4
   1163c:	930e      	str	r3, [sp, #56]	; 0x38
   1163e:	e44c      	b.n	10eda <_svfprintf_r+0x60e>
   11640:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   11644:	4602      	mov	r2, r0
   11646:	460b      	mov	r3, r1
   11648:	f7fd f896 	bl	e778 <__aeabi_dcmpun>
   1164c:	2800      	cmp	r0, #0
   1164e:	f040 8675 	bne.w	1233c <_svfprintf_r+0x1a70>
   11652:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11654:	2b61      	cmp	r3, #97	; 0x61
   11656:	f000 855b 	beq.w	12110 <_svfprintf_r+0x1844>
   1165a:	2b41      	cmp	r3, #65	; 0x41
   1165c:	f000 85ac 	beq.w	121b8 <_svfprintf_r+0x18ec>
   11660:	9b08      	ldr	r3, [sp, #32]
   11662:	3301      	adds	r3, #1
   11664:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11666:	f023 0320 	bic.w	r3, r3, #32
   1166a:	9307      	str	r3, [sp, #28]
   1166c:	f000 8463 	beq.w	11f36 <_svfprintf_r+0x166a>
   11670:	2b47      	cmp	r3, #71	; 0x47
   11672:	d104      	bne.n	1167e <_svfprintf_r+0xdb2>
   11674:	9b08      	ldr	r3, [sp, #32]
   11676:	2b00      	cmp	r3, #0
   11678:	bf08      	it	eq
   1167a:	2301      	moveq	r3, #1
   1167c:	9308      	str	r3, [sp, #32]
   1167e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   11682:	460a      	mov	r2, r1
   11684:	2a00      	cmp	r2, #0
   11686:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   1168a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   1168e:	f2c0 85e1 	blt.w	12254 <_svfprintf_r+0x1988>
   11692:	469b      	mov	fp, r3
   11694:	2300      	movs	r3, #0
   11696:	4616      	mov	r6, r2
   11698:	931e      	str	r3, [sp, #120]	; 0x78
   1169a:	4607      	mov	r7, r0
   1169c:	930d      	str	r3, [sp, #52]	; 0x34
   1169e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   116a0:	3b41      	subs	r3, #65	; 0x41
   116a2:	2b25      	cmp	r3, #37	; 0x25
   116a4:	f200 8367 	bhi.w	11d76 <_svfprintf_r+0x14aa>
   116a8:	e8df f013 	tbh	[pc, r3, lsl #1]
   116ac:	03650452 	.word	0x03650452
   116b0:	03650365 	.word	0x03650365
   116b4:	044e0449 	.word	0x044e0449
   116b8:	03650365 	.word	0x03650365
   116bc:	03650365 	.word	0x03650365
   116c0:	03650365 	.word	0x03650365
   116c4:	03650365 	.word	0x03650365
   116c8:	03650365 	.word	0x03650365
   116cc:	03650365 	.word	0x03650365
   116d0:	03650365 	.word	0x03650365
   116d4:	03650365 	.word	0x03650365
   116d8:	03650365 	.word	0x03650365
   116dc:	03650365 	.word	0x03650365
   116e0:	03650365 	.word	0x03650365
   116e4:	03650365 	.word	0x03650365
   116e8:	03650365 	.word	0x03650365
   116ec:	03650365 	.word	0x03650365
   116f0:	03650365 	.word	0x03650365
   116f4:	044e0449 	.word	0x044e0449
   116f8:	9310      	str	r3, [sp, #64]	; 0x40
   116fa:	465d      	mov	r5, fp
   116fc:	f7ff bbf4 	b.w	10ee8 <_svfprintf_r+0x61c>
   11700:	9310      	str	r3, [sp, #64]	; 0x40
   11702:	4bb7      	ldr	r3, [pc, #732]	; (119e0 <_svfprintf_r+0x1114>)
   11704:	9318      	str	r3, [sp, #96]	; 0x60
   11706:	f01b 0120 	ands.w	r1, fp, #32
   1170a:	f000 80fc 	beq.w	11906 <_svfprintf_r+0x103a>
   1170e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11710:	3307      	adds	r3, #7
   11712:	f023 0307 	bic.w	r3, r3, #7
   11716:	6859      	ldr	r1, [r3, #4]
   11718:	f853 2b08 	ldr.w	r2, [r3], #8
   1171c:	930e      	str	r3, [sp, #56]	; 0x38
   1171e:	f01b 0f01 	tst.w	fp, #1
   11722:	d00a      	beq.n	1173a <_svfprintf_r+0xe6e>
   11724:	ea52 0301 	orrs.w	r3, r2, r1
   11728:	d007      	beq.n	1173a <_svfprintf_r+0xe6e>
   1172a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1172c:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
   11730:	2330      	movs	r3, #48	; 0x30
   11732:	f04b 0b02 	orr.w	fp, fp, #2
   11736:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
   1173a:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
   1173e:	2302      	movs	r3, #2
   11740:	f7ff bb68 	b.w	10e14 <_svfprintf_r+0x548>
   11744:	9310      	str	r3, [sp, #64]	; 0x40
   11746:	f7ff bbbc 	b.w	10ec2 <_svfprintf_r+0x5f6>
   1174a:	9310      	str	r3, [sp, #64]	; 0x40
   1174c:	4ba5      	ldr	r3, [pc, #660]	; (119e4 <_svfprintf_r+0x1118>)
   1174e:	9318      	str	r3, [sp, #96]	; 0x60
   11750:	e7d9      	b.n	11706 <_svfprintf_r+0xe3a>
   11752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11754:	2101      	movs	r1, #1
   11756:	f853 2b04 	ldr.w	r2, [r3], #4
   1175a:	9107      	str	r1, [sp, #28]
   1175c:	f88d 20fc 	strb.w	r2, [sp, #252]	; 0xfc
   11760:	930e      	str	r3, [sp, #56]	; 0x38
   11762:	910a      	str	r1, [sp, #40]	; 0x28
   11764:	ac3f      	add	r4, sp, #252	; 0xfc
   11766:	f7ff babb 	b.w	10ce0 <_svfprintf_r+0x414>
   1176a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1176c:	aa2c      	add	r2, sp, #176	; 0xb0
   1176e:	4650      	mov	r0, sl
   11770:	f002 f916 	bl	139a0 <__ssprint_r>
   11774:	2800      	cmp	r0, #0
   11776:	f47f ad14 	bne.w	111a2 <_svfprintf_r+0x8d6>
   1177a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   1177c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11780:	e468      	b.n	11054 <_svfprintf_r+0x788>
   11782:	2140      	movs	r1, #64	; 0x40
   11784:	4650      	mov	r0, sl
   11786:	f7fd fb65 	bl	ee54 <_malloc_r>
   1178a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1178c:	6018      	str	r0, [r3, #0]
   1178e:	6118      	str	r0, [r3, #16]
   11790:	2800      	cmp	r0, #0
   11792:	f000 8660 	beq.w	12456 <_svfprintf_r+0x1b8a>
   11796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11798:	2340      	movs	r3, #64	; 0x40
   1179a:	6153      	str	r3, [r2, #20]
   1179c:	f7ff b8b2 	b.w	10904 <_svfprintf_r+0x38>
   117a0:	9b08      	ldr	r3, [sp, #32]
   117a2:	940d      	str	r4, [sp, #52]	; 0x34
   117a4:	2b06      	cmp	r3, #6
   117a6:	4621      	mov	r1, r4
   117a8:	bf28      	it	cs
   117aa:	2306      	movcs	r3, #6
   117ac:	9408      	str	r4, [sp, #32]
   117ae:	4622      	mov	r2, r4
   117b0:	9307      	str	r3, [sp, #28]
   117b2:	4c8d      	ldr	r4, [pc, #564]	; (119e8 <_svfprintf_r+0x111c>)
   117b4:	970e      	str	r7, [sp, #56]	; 0x38
   117b6:	930a      	str	r3, [sp, #40]	; 0x28
   117b8:	9112      	str	r1, [sp, #72]	; 0x48
   117ba:	9116      	str	r1, [sp, #88]	; 0x58
   117bc:	9111      	str	r1, [sp, #68]	; 0x44
   117be:	f7ff ba69 	b.w	10c94 <_svfprintf_r+0x3c8>
   117c2:	2f10      	cmp	r7, #16
   117c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   117c6:	4d89      	ldr	r5, [pc, #548]	; (119ec <_svfprintf_r+0x1120>)
   117c8:	f340 8245 	ble.w	11c56 <_svfprintf_r+0x138a>
   117cc:	4632      	mov	r2, r6
   117ce:	4626      	mov	r6, r4
   117d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   117d2:	e005      	b.n	117e0 <_svfprintf_r+0xf14>
   117d4:	f109 0908 	add.w	r9, r9, #8
   117d8:	3f10      	subs	r7, #16
   117da:	2f10      	cmp	r7, #16
   117dc:	f340 8239 	ble.w	11c52 <_svfprintf_r+0x1386>
   117e0:	3301      	adds	r3, #1
   117e2:	3210      	adds	r2, #16
   117e4:	2110      	movs	r1, #16
   117e6:	2b07      	cmp	r3, #7
   117e8:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   117ec:	f8c9 5000 	str.w	r5, [r9]
   117f0:	f8c9 1004 	str.w	r1, [r9, #4]
   117f4:	ddee      	ble.n	117d4 <_svfprintf_r+0xf08>
   117f6:	aa2c      	add	r2, sp, #176	; 0xb0
   117f8:	4621      	mov	r1, r4
   117fa:	4650      	mov	r0, sl
   117fc:	f002 f8d0 	bl	139a0 <__ssprint_r>
   11800:	2800      	cmp	r0, #0
   11802:	f47f acce 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11806:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   1180a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   1180e:	e7e3      	b.n	117d8 <_svfprintf_r+0xf0c>
   11810:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11812:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11814:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   11818:	464a      	mov	r2, r9
   1181a:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   1181e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   11822:	18e3      	adds	r3, r4, r3
   11824:	9308      	str	r3, [sp, #32]
   11826:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   11828:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   1182c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   11830:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11832:	9410      	str	r4, [sp, #64]	; 0x40
   11834:	4631      	mov	r1, r6
   11836:	f1b9 0f00 	cmp.w	r9, #0
   1183a:	d02e      	beq.n	1189a <_svfprintf_r+0xfce>
   1183c:	bb83      	cbnz	r3, 118a0 <_svfprintf_r+0xfd4>
   1183e:	3f01      	subs	r7, #1
   11840:	f109 39ff 	add.w	r9, r9, #4294967295
   11844:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   11846:	e9c2 3b00 	strd	r3, fp, [r2]
   1184a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1184c:	3301      	adds	r3, #1
   1184e:	4459      	add	r1, fp
   11850:	2b07      	cmp	r3, #7
   11852:	912e      	str	r1, [sp, #184]	; 0xb8
   11854:	932d      	str	r3, [sp, #180]	; 0xb4
   11856:	dc5f      	bgt.n	11918 <_svfprintf_r+0x104c>
   11858:	3208      	adds	r2, #8
   1185a:	9b08      	ldr	r3, [sp, #32]
   1185c:	7838      	ldrb	r0, [r7, #0]
   1185e:	1b5b      	subs	r3, r3, r5
   11860:	4283      	cmp	r3, r0
   11862:	bfa8      	it	ge
   11864:	4603      	movge	r3, r0
   11866:	2b00      	cmp	r3, #0
   11868:	461e      	mov	r6, r3
   1186a:	dd0b      	ble.n	11884 <_svfprintf_r+0xfb8>
   1186c:	982d      	ldr	r0, [sp, #180]	; 0xb4
   1186e:	3001      	adds	r0, #1
   11870:	4419      	add	r1, r3
   11872:	2807      	cmp	r0, #7
   11874:	e9c2 5300 	strd	r5, r3, [r2]
   11878:	912e      	str	r1, [sp, #184]	; 0xb8
   1187a:	902d      	str	r0, [sp, #180]	; 0xb4
   1187c:	f300 8156 	bgt.w	11b2c <_svfprintf_r+0x1260>
   11880:	7838      	ldrb	r0, [r7, #0]
   11882:	3208      	adds	r2, #8
   11884:	2e00      	cmp	r6, #0
   11886:	bfac      	ite	ge
   11888:	1b84      	subge	r4, r0, r6
   1188a:	4604      	movlt	r4, r0
   1188c:	2c00      	cmp	r4, #0
   1188e:	dc0b      	bgt.n	118a8 <_svfprintf_r+0xfdc>
   11890:	4405      	add	r5, r0
   11892:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11894:	f1b9 0f00 	cmp.w	r9, #0
   11898:	d1d0      	bne.n	1183c <_svfprintf_r+0xf70>
   1189a:	2b00      	cmp	r3, #0
   1189c:	f000 83d4 	beq.w	12048 <_svfprintf_r+0x177c>
   118a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   118a2:	3b01      	subs	r3, #1
   118a4:	9312      	str	r3, [sp, #72]	; 0x48
   118a6:	e7cd      	b.n	11844 <_svfprintf_r+0xf78>
   118a8:	2c10      	cmp	r4, #16
   118aa:	982d      	ldr	r0, [sp, #180]	; 0xb4
   118ac:	dd1d      	ble.n	118ea <_svfprintf_r+0x101e>
   118ae:	2610      	movs	r6, #16
   118b0:	e004      	b.n	118bc <_svfprintf_r+0xff0>
   118b2:	3c10      	subs	r4, #16
   118b4:	2c10      	cmp	r4, #16
   118b6:	f102 0208 	add.w	r2, r2, #8
   118ba:	dd16      	ble.n	118ea <_svfprintf_r+0x101e>
   118bc:	3001      	adds	r0, #1
   118be:	4b4b      	ldr	r3, [pc, #300]	; (119ec <_svfprintf_r+0x1120>)
   118c0:	3110      	adds	r1, #16
   118c2:	2807      	cmp	r0, #7
   118c4:	e9c2 3600 	strd	r3, r6, [r2]
   118c8:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
   118cc:	ddf1      	ble.n	118b2 <_svfprintf_r+0xfe6>
   118ce:	aa2c      	add	r2, sp, #176	; 0xb0
   118d0:	4641      	mov	r1, r8
   118d2:	4650      	mov	r0, sl
   118d4:	f002 f864 	bl	139a0 <__ssprint_r>
   118d8:	2800      	cmp	r0, #0
   118da:	f47f ac62 	bne.w	111a2 <_svfprintf_r+0x8d6>
   118de:	3c10      	subs	r4, #16
   118e0:	2c10      	cmp	r4, #16
   118e2:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	; 0xb4
   118e6:	aa2f      	add	r2, sp, #188	; 0xbc
   118e8:	dce8      	bgt.n	118bc <_svfprintf_r+0xff0>
   118ea:	3001      	adds	r0, #1
   118ec:	4b3f      	ldr	r3, [pc, #252]	; (119ec <_svfprintf_r+0x1120>)
   118ee:	6054      	str	r4, [r2, #4]
   118f0:	4421      	add	r1, r4
   118f2:	2807      	cmp	r0, #7
   118f4:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
   118f8:	6013      	str	r3, [r2, #0]
   118fa:	f300 83fb 	bgt.w	120f4 <_svfprintf_r+0x1828>
   118fe:	7838      	ldrb	r0, [r7, #0]
   11900:	3208      	adds	r2, #8
   11902:	4405      	add	r5, r0
   11904:	e7c5      	b.n	11892 <_svfprintf_r+0xfc6>
   11906:	f01b 0310 	ands.w	r3, fp, #16
   1190a:	f000 80bc 	beq.w	11a86 <_svfprintf_r+0x11ba>
   1190e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11910:	f853 2b04 	ldr.w	r2, [r3], #4
   11914:	930e      	str	r3, [sp, #56]	; 0x38
   11916:	e702      	b.n	1171e <_svfprintf_r+0xe52>
   11918:	aa2c      	add	r2, sp, #176	; 0xb0
   1191a:	4641      	mov	r1, r8
   1191c:	4650      	mov	r0, sl
   1191e:	f002 f83f 	bl	139a0 <__ssprint_r>
   11922:	2800      	cmp	r0, #0
   11924:	f47f ac3d 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11928:	992e      	ldr	r1, [sp, #184]	; 0xb8
   1192a:	aa2f      	add	r2, sp, #188	; 0xbc
   1192c:	e795      	b.n	1185a <_svfprintf_r+0xf8e>
   1192e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   11932:	4b2f      	ldr	r3, [pc, #188]	; (119f0 <_svfprintf_r+0x1124>)
   11934:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   11938:	f8cd 801c 	str.w	r8, [sp, #28]
   1193c:	f405 6780 	and.w	r7, r5, #1024	; 0x400
   11940:	f04f 0c00 	mov.w	ip, #0
   11944:	ac58      	add	r4, sp, #352	; 0x160
   11946:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
   1194a:	950a      	str	r5, [sp, #40]	; 0x28
   1194c:	e005      	b.n	1195a <_svfprintf_r+0x108e>
   1194e:	2a0a      	cmp	r2, #10
   11950:	f171 0100 	sbcs.w	r1, r1, #0
   11954:	d334      	bcc.n	119c0 <_svfprintf_r+0x10f4>
   11956:	4642      	mov	r2, r8
   11958:	4631      	mov	r1, r6
   1195a:	1850      	adds	r0, r2, r1
   1195c:	f140 0000 	adc.w	r0, r0, #0
   11960:	fba3 5600 	umull	r5, r6, r3, r0
   11964:	f026 0503 	bic.w	r5, r6, #3
   11968:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   1196c:	1b40      	subs	r0, r0, r5
   1196e:	1a15      	subs	r5, r2, r0
   11970:	f161 0e00 	sbc.w	lr, r1, #0
   11974:	fb0b f605 	mul.w	r6, fp, r5
   11978:	fb03 660e 	mla	r6, r3, lr, r6
   1197c:	fba5 8503 	umull	r8, r5, r5, r3
   11980:	442e      	add	r6, r5
   11982:	f008 0e01 	and.w	lr, r8, #1
   11986:	2505      	movs	r5, #5
   11988:	fbae 5e05 	umull	r5, lr, lr, r5
   1198c:	182d      	adds	r5, r5, r0
   1198e:	ea4f 0858 	mov.w	r8, r8, lsr #1
   11992:	3530      	adds	r5, #48	; 0x30
   11994:	f804 5c01 	strb.w	r5, [r4, #-1]
   11998:	ea48 78c6 	orr.w	r8, r8, r6, lsl #31
   1199c:	f10c 0c01 	add.w	ip, ip, #1
   119a0:	3c01      	subs	r4, #1
   119a2:	0876      	lsrs	r6, r6, #1
   119a4:	2f00      	cmp	r7, #0
   119a6:	d0d2      	beq.n	1194e <_svfprintf_r+0x1082>
   119a8:	f899 0000 	ldrb.w	r0, [r9]
   119ac:	4584      	cmp	ip, r0
   119ae:	d1ce      	bne.n	1194e <_svfprintf_r+0x1082>
   119b0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   119b4:	d0cb      	beq.n	1194e <_svfprintf_r+0x1082>
   119b6:	2a0a      	cmp	r2, #10
   119b8:	f171 0100 	sbcs.w	r1, r1, #0
   119bc:	f080 8198 	bcs.w	11cf0 <_svfprintf_r+0x1424>
   119c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   119c2:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   119c6:	ab58      	add	r3, sp, #352	; 0x160
   119c8:	1b1b      	subs	r3, r3, r4
   119ca:	f8dd 801c 	ldr.w	r8, [sp, #28]
   119ce:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   119d2:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
   119d6:	46ab      	mov	fp, r5
   119d8:	930a      	str	r3, [sp, #40]	; 0x28
   119da:	f7ff bae1 	b.w	10fa0 <_svfprintf_r+0x6d4>
   119de:	bf00      	nop
   119e0:	00017484 	.word	0x00017484
   119e4:	00017498 	.word	0x00017498
   119e8:	000174ac 	.word	0x000174ac
   119ec:	000174c4 	.word	0x000174c4
   119f0:	cccccccd 	.word	0xcccccccd
   119f4:	2301      	movs	r3, #1
   119f6:	f8c9 3004 	str.w	r3, [r9, #4]
   119fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   119fc:	4aba      	ldr	r2, [pc, #744]	; (11ce8 <_svfprintf_r+0x141c>)
   119fe:	f8c9 2000 	str.w	r2, [r9]
   11a02:	3301      	adds	r3, #1
   11a04:	3601      	adds	r6, #1
   11a06:	2b07      	cmp	r3, #7
   11a08:	962e      	str	r6, [sp, #184]	; 0xb8
   11a0a:	932d      	str	r3, [sp, #180]	; 0xb4
   11a0c:	f300 818c 	bgt.w	11d28 <_svfprintf_r+0x145c>
   11a10:	f109 0908 	add.w	r9, r9, #8
   11a14:	2900      	cmp	r1, #0
   11a16:	f040 80be 	bne.w	11b96 <_svfprintf_r+0x12ca>
   11a1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11a1c:	f00b 0301 	and.w	r3, fp, #1
   11a20:	4313      	orrs	r3, r2
   11a22:	f43f a8d8 	beq.w	10bd6 <_svfprintf_r+0x30a>
   11a26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11a28:	9919      	ldr	r1, [sp, #100]	; 0x64
   11a2a:	199a      	adds	r2, r3, r6
   11a2c:	e9c9 1300 	strd	r1, r3, [r9]
   11a30:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   11a32:	922e      	str	r2, [sp, #184]	; 0xb8
   11a34:	3301      	adds	r3, #1
   11a36:	2b07      	cmp	r3, #7
   11a38:	932d      	str	r3, [sp, #180]	; 0xb4
   11a3a:	f300 826e 	bgt.w	11f1a <_svfprintf_r+0x164e>
   11a3e:	f109 0908 	add.w	r9, r9, #8
   11a42:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11a44:	f8c9 4000 	str.w	r4, [r9]
   11a48:	3301      	adds	r3, #1
   11a4a:	188e      	adds	r6, r1, r2
   11a4c:	2b07      	cmp	r3, #7
   11a4e:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   11a52:	f8c9 1004 	str.w	r1, [r9, #4]
   11a56:	f77f a8bc 	ble.w	10bd2 <_svfprintf_r+0x306>
   11a5a:	f7ff bbf1 	b.w	11240 <_svfprintf_r+0x974>
   11a5e:	990c      	ldr	r1, [sp, #48]	; 0x30
   11a60:	931e      	str	r3, [sp, #120]	; 0x78
   11a62:	aa2c      	add	r2, sp, #176	; 0xb0
   11a64:	4650      	mov	r0, sl
   11a66:	f001 ff9b 	bl	139a0 <__ssprint_r>
   11a6a:	2800      	cmp	r0, #0
   11a6c:	f47f ab99 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11a70:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   11a74:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   11a76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   11a78:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11a7c:	f7ff b86a 	b.w	10b54 <_svfprintf_r+0x288>
   11a80:	46c2      	mov	sl, r8
   11a82:	f7ff bb8e 	b.w	111a2 <_svfprintf_r+0x8d6>
   11a86:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
   11a8a:	f000 80b8 	beq.w	11bfe <_svfprintf_r+0x1332>
   11a8e:	980e      	ldr	r0, [sp, #56]	; 0x38
   11a90:	f850 2b04 	ldr.w	r2, [r0], #4
   11a94:	900e      	str	r0, [sp, #56]	; 0x38
   11a96:	4619      	mov	r1, r3
   11a98:	b292      	uxth	r2, r2
   11a9a:	e640      	b.n	1171e <_svfprintf_r+0xe52>
   11a9c:	990c      	ldr	r1, [sp, #48]	; 0x30
   11a9e:	aa2c      	add	r2, sp, #176	; 0xb0
   11aa0:	4650      	mov	r0, sl
   11aa2:	f001 ff7d 	bl	139a0 <__ssprint_r>
   11aa6:	2800      	cmp	r0, #0
   11aa8:	f47f ab7b 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11aac:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   11aae:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11ab2:	f7ff babc 	b.w	1102e <_svfprintf_r+0x762>
   11ab6:	ae2a      	add	r6, sp, #168	; 0xa8
   11ab8:	2208      	movs	r2, #8
   11aba:	2100      	movs	r1, #0
   11abc:	4630      	mov	r0, r6
   11abe:	9425      	str	r4, [sp, #148]	; 0x94
   11ac0:	f7fe f836 	bl	fb30 <memset>
   11ac4:	9b08      	ldr	r3, [sp, #32]
   11ac6:	1c5a      	adds	r2, r3, #1
   11ac8:	f000 80d4 	beq.w	11c74 <_svfprintf_r+0x13a8>
   11acc:	2500      	movs	r5, #0
   11ace:	f8cd 801c 	str.w	r8, [sp, #28]
   11ad2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   11ad6:	46a8      	mov	r8, r5
   11ad8:	469b      	mov	fp, r3
   11ada:	e00c      	b.n	11af6 <_svfprintf_r+0x122a>
   11adc:	a93f      	add	r1, sp, #252	; 0xfc
   11ade:	4650      	mov	r0, sl
   11ae0:	f001 ff16 	bl	13910 <_wcrtomb_r>
   11ae4:	1c43      	adds	r3, r0, #1
   11ae6:	4440      	add	r0, r8
   11ae8:	f000 83b8 	beq.w	1225c <_svfprintf_r+0x1990>
   11aec:	4558      	cmp	r0, fp
   11aee:	dc08      	bgt.n	11b02 <_svfprintf_r+0x1236>
   11af0:	f000 8435 	beq.w	1235e <_svfprintf_r+0x1a92>
   11af4:	4680      	mov	r8, r0
   11af6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   11af8:	5952      	ldr	r2, [r2, r5]
   11afa:	4633      	mov	r3, r6
   11afc:	3504      	adds	r5, #4
   11afe:	2a00      	cmp	r2, #0
   11b00:	d1ec      	bne.n	11adc <_svfprintf_r+0x1210>
   11b02:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   11b06:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   11b0a:	f8dd 801c 	ldr.w	r8, [sp, #28]
   11b0e:	e0be      	b.n	11c8e <_svfprintf_r+0x13c2>
   11b10:	4616      	mov	r6, r2
   11b12:	3301      	adds	r3, #1
   11b14:	4426      	add	r6, r4
   11b16:	2b07      	cmp	r3, #7
   11b18:	f8c9 5000 	str.w	r5, [r9]
   11b1c:	f8c9 4004 	str.w	r4, [r9, #4]
   11b20:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   11b24:	f77f a855 	ble.w	10bd2 <_svfprintf_r+0x306>
   11b28:	f7ff bb8a 	b.w	11240 <_svfprintf_r+0x974>
   11b2c:	aa2c      	add	r2, sp, #176	; 0xb0
   11b2e:	4641      	mov	r1, r8
   11b30:	4650      	mov	r0, sl
   11b32:	f001 ff35 	bl	139a0 <__ssprint_r>
   11b36:	2800      	cmp	r0, #0
   11b38:	f47f ab33 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11b3c:	7838      	ldrb	r0, [r7, #0]
   11b3e:	992e      	ldr	r1, [sp, #184]	; 0xb8
   11b40:	aa2f      	add	r2, sp, #188	; 0xbc
   11b42:	e69f      	b.n	11884 <_svfprintf_r+0xfb8>
   11b44:	990c      	ldr	r1, [sp, #48]	; 0x30
   11b46:	aa2c      	add	r2, sp, #176	; 0xb0
   11b48:	4650      	mov	r0, sl
   11b4a:	f001 ff29 	bl	139a0 <__ssprint_r>
   11b4e:	2800      	cmp	r0, #0
   11b50:	f47f ab27 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11b54:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   11b56:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11b5a:	f7ff b823 	b.w	10ba4 <_svfprintf_r+0x2d8>
   11b5e:	2b01      	cmp	r3, #1
   11b60:	465d      	mov	r5, fp
   11b62:	f47f aa09 	bne.w	10f78 <_svfprintf_r+0x6ac>
   11b66:	f7ff bbb9 	b.w	112dc <_svfprintf_r+0xa10>
   11b6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
   11b6e:	f853 2b04 	ldr.w	r2, [r3], #4
   11b72:	4644      	mov	r4, r8
   11b74:	6011      	str	r1, [r2, #0]
   11b76:	930e      	str	r3, [sp, #56]	; 0x38
   11b78:	f7fe bed6 	b.w	10928 <_svfprintf_r+0x5c>
   11b7c:	4616      	mov	r6, r2
   11b7e:	3701      	adds	r7, #1
   11b80:	4426      	add	r6, r4
   11b82:	2f07      	cmp	r7, #7
   11b84:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
   11b88:	f8c9 5000 	str.w	r5, [r9]
   11b8c:	f8c9 4004 	str.w	r4, [r9, #4]
   11b90:	f77f ab47 	ble.w	11222 <_svfprintf_r+0x956>
   11b94:	e491      	b.n	114ba <_svfprintf_r+0xbee>
   11b96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11b98:	9819      	ldr	r0, [sp, #100]	; 0x64
   11b9a:	199a      	adds	r2, r3, r6
   11b9c:	e9c9 0300 	strd	r0, r3, [r9]
   11ba0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   11ba2:	922e      	str	r2, [sp, #184]	; 0xb8
   11ba4:	3301      	adds	r3, #1
   11ba6:	2b07      	cmp	r3, #7
   11ba8:	932d      	str	r3, [sp, #180]	; 0xb4
   11baa:	f300 81b6 	bgt.w	11f1a <_svfprintf_r+0x164e>
   11bae:	f109 0908 	add.w	r9, r9, #8
   11bb2:	2900      	cmp	r1, #0
   11bb4:	f6bf af45 	bge.w	11a42 <_svfprintf_r+0x1176>
   11bb8:	424f      	negs	r7, r1
   11bba:	3110      	adds	r1, #16
   11bbc:	4d4b      	ldr	r5, [pc, #300]	; (11cec <_svfprintf_r+0x1420>)
   11bbe:	f280 8388 	bge.w	122d2 <_svfprintf_r+0x1a06>
   11bc2:	4649      	mov	r1, r9
   11bc4:	2610      	movs	r6, #16
   11bc6:	46a1      	mov	r9, r4
   11bc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   11bca:	e004      	b.n	11bd6 <_svfprintf_r+0x130a>
   11bcc:	3108      	adds	r1, #8
   11bce:	3f10      	subs	r7, #16
   11bd0:	2f10      	cmp	r7, #16
   11bd2:	f340 837c 	ble.w	122ce <_svfprintf_r+0x1a02>
   11bd6:	3301      	adds	r3, #1
   11bd8:	3210      	adds	r2, #16
   11bda:	2b07      	cmp	r3, #7
   11bdc:	e9c1 5600 	strd	r5, r6, [r1]
   11be0:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   11be4:	ddf2      	ble.n	11bcc <_svfprintf_r+0x1300>
   11be6:	aa2c      	add	r2, sp, #176	; 0xb0
   11be8:	4621      	mov	r1, r4
   11bea:	4650      	mov	r0, sl
   11bec:	f001 fed8 	bl	139a0 <__ssprint_r>
   11bf0:	2800      	cmp	r0, #0
   11bf2:	f47f aad6 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11bf6:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   11bfa:	a92f      	add	r1, sp, #188	; 0xbc
   11bfc:	e7e7      	b.n	11bce <_svfprintf_r+0x1302>
   11bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11c00:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
   11c04:	bf1a      	itte	ne
   11c06:	4611      	movne	r1, r2
   11c08:	f853 2b04 	ldrne.w	r2, [r3], #4
   11c0c:	f853 2b04 	ldreq.w	r2, [r3], #4
   11c10:	930e      	str	r3, [sp, #56]	; 0x38
   11c12:	bf18      	it	ne
   11c14:	b2d2      	uxtbne	r2, r2
   11c16:	e582      	b.n	1171e <_svfprintf_r+0xe52>
   11c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11c1a:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
   11c1e:	bf1a      	itte	ne
   11c20:	4611      	movne	r1, r2
   11c22:	f853 2b04 	ldrne.w	r2, [r3], #4
   11c26:	f853 2b04 	ldreq.w	r2, [r3], #4
   11c2a:	930e      	str	r3, [sp, #56]	; 0x38
   11c2c:	bf18      	it	ne
   11c2e:	b2d2      	uxtbne	r2, r2
   11c30:	f7ff b953 	b.w	10eda <_svfprintf_r+0x60e>
   11c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11c36:	f415 7100 	ands.w	r1, r5, #512	; 0x200
   11c3a:	bf1a      	itte	ne
   11c3c:	4611      	movne	r1, r2
   11c3e:	f853 2b04 	ldrne.w	r2, [r3], #4
   11c42:	f853 2b04 	ldreq.w	r2, [r3], #4
   11c46:	930e      	str	r3, [sp, #56]	; 0x38
   11c48:	bf18      	it	ne
   11c4a:	b2d2      	uxtbne	r2, r2
   11c4c:	2301      	movs	r3, #1
   11c4e:	f7ff b8e1 	b.w	10e14 <_svfprintf_r+0x548>
   11c52:	4634      	mov	r4, r6
   11c54:	4616      	mov	r6, r2
   11c56:	3301      	adds	r3, #1
   11c58:	443e      	add	r6, r7
   11c5a:	2b07      	cmp	r3, #7
   11c5c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   11c60:	f8c9 5000 	str.w	r5, [r9]
   11c64:	f8c9 7004 	str.w	r7, [r9, #4]
   11c68:	f300 814a 	bgt.w	11f00 <_svfprintf_r+0x1634>
   11c6c:	f109 0908 	add.w	r9, r9, #8
   11c70:	f7ff bbb3 	b.w	113da <_svfprintf_r+0xb0e>
   11c74:	2300      	movs	r3, #0
   11c76:	4619      	mov	r1, r3
   11c78:	9600      	str	r6, [sp, #0]
   11c7a:	aa25      	add	r2, sp, #148	; 0x94
   11c7c:	4650      	mov	r0, sl
   11c7e:	f001 fe6d 	bl	1395c <_wcsrtombs_r>
   11c82:	4603      	mov	r3, r0
   11c84:	3301      	adds	r3, #1
   11c86:	900a      	str	r0, [sp, #40]	; 0x28
   11c88:	f000 82e8 	beq.w	1225c <_svfprintf_r+0x1990>
   11c8c:	9425      	str	r4, [sp, #148]	; 0x94
   11c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11c90:	2b00      	cmp	r3, #0
   11c92:	d03d      	beq.n	11d10 <_svfprintf_r+0x1444>
   11c94:	2b63      	cmp	r3, #99	; 0x63
   11c96:	f300 8129 	bgt.w	11eec <_svfprintf_r+0x1620>
   11c9a:	2300      	movs	r3, #0
   11c9c:	930d      	str	r3, [sp, #52]	; 0x34
   11c9e:	ac3f      	add	r4, sp, #252	; 0xfc
   11ca0:	2208      	movs	r2, #8
   11ca2:	2100      	movs	r1, #0
   11ca4:	4630      	mov	r0, r6
   11ca6:	f7fd ff43 	bl	fb30 <memset>
   11caa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11cac:	9600      	str	r6, [sp, #0]
   11cae:	462b      	mov	r3, r5
   11cb0:	aa25      	add	r2, sp, #148	; 0x94
   11cb2:	4621      	mov	r1, r4
   11cb4:	4650      	mov	r0, sl
   11cb6:	f001 fe51 	bl	1395c <_wcsrtombs_r>
   11cba:	4285      	cmp	r5, r0
   11cbc:	f040 83c4 	bne.w	12448 <_svfprintf_r+0x1b7c>
   11cc0:	990a      	ldr	r1, [sp, #40]	; 0x28
   11cc2:	970e      	str	r7, [sp, #56]	; 0x38
   11cc4:	2300      	movs	r3, #0
   11cc6:	5463      	strb	r3, [r4, r1]
   11cc8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   11ccc:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   11cd0:	9308      	str	r3, [sp, #32]
   11cd2:	9107      	str	r1, [sp, #28]
   11cd4:	9312      	str	r3, [sp, #72]	; 0x48
   11cd6:	9316      	str	r3, [sp, #88]	; 0x58
   11cd8:	9311      	str	r3, [sp, #68]	; 0x44
   11cda:	f7fe bfdb 	b.w	10c94 <_svfprintf_r+0x3c8>
   11cde:	222d      	movs	r2, #45	; 0x2d
   11ce0:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   11ce4:	f7fe bfc5 	b.w	10c72 <_svfprintf_r+0x3a6>
   11ce8:	00015bd0 	.word	0x00015bd0
   11cec:	000174c4 	.word	0x000174c4
   11cf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   11cf2:	991c      	ldr	r1, [sp, #112]	; 0x70
   11cf4:	1ae4      	subs	r4, r4, r3
   11cf6:	461a      	mov	r2, r3
   11cf8:	4620      	mov	r0, r4
   11cfa:	f7fd ff6b 	bl	fbd4 <strncpy>
   11cfe:	f899 2001 	ldrb.w	r2, [r9, #1]
   11d02:	4ba5      	ldr	r3, [pc, #660]	; (11f98 <_svfprintf_r+0x16cc>)
   11d04:	b10a      	cbz	r2, 11d0a <_svfprintf_r+0x143e>
   11d06:	f109 0901 	add.w	r9, r9, #1
   11d0a:	f04f 0c00 	mov.w	ip, #0
   11d0e:	e622      	b.n	11956 <_svfprintf_r+0x108a>
   11d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d12:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   11d16:	970e      	str	r7, [sp, #56]	; 0x38
   11d18:	e9cd 3307 	strd	r3, r3, [sp, #28]
   11d1c:	9312      	str	r3, [sp, #72]	; 0x48
   11d1e:	9316      	str	r3, [sp, #88]	; 0x58
   11d20:	9311      	str	r3, [sp, #68]	; 0x44
   11d22:	930d      	str	r3, [sp, #52]	; 0x34
   11d24:	f7fe bfb6 	b.w	10c94 <_svfprintf_r+0x3c8>
   11d28:	990c      	ldr	r1, [sp, #48]	; 0x30
   11d2a:	aa2c      	add	r2, sp, #176	; 0xb0
   11d2c:	4650      	mov	r0, sl
   11d2e:	f001 fe37 	bl	139a0 <__ssprint_r>
   11d32:	2800      	cmp	r0, #0
   11d34:	f47f aa35 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11d38:	9923      	ldr	r1, [sp, #140]	; 0x8c
   11d3a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   11d3c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11d40:	e668      	b.n	11a14 <_svfprintf_r+0x1148>
   11d42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11d44:	990a      	ldr	r1, [sp, #40]	; 0x28
   11d46:	18a5      	adds	r5, r4, r2
   11d48:	1a6d      	subs	r5, r5, r1
   11d4a:	1ad4      	subs	r4, r2, r3
   11d4c:	42a5      	cmp	r5, r4
   11d4e:	bfa8      	it	ge
   11d50:	4625      	movge	r5, r4
   11d52:	f7ff bb77 	b.w	11444 <_svfprintf_r+0xb78>
   11d56:	f913 2b04 	ldrsb.w	r2, [r3], #4
   11d5a:	930e      	str	r3, [sp, #56]	; 0x38
   11d5c:	17d1      	asrs	r1, r2, #31
   11d5e:	460b      	mov	r3, r1
   11d60:	f7ff b807 	b.w	10d72 <_svfprintf_r+0x4a6>
   11d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11d66:	9909      	ldr	r1, [sp, #36]	; 0x24
   11d68:	f853 2b04 	ldr.w	r2, [r3], #4
   11d6c:	930e      	str	r3, [sp, #56]	; 0x38
   11d6e:	8011      	strh	r1, [r2, #0]
   11d70:	4644      	mov	r4, r8
   11d72:	f7fe bdd9 	b.w	10928 <_svfprintf_r+0x5c>
   11d76:	9b08      	ldr	r3, [sp, #32]
   11d78:	930a      	str	r3, [sp, #40]	; 0x28
   11d7a:	2302      	movs	r3, #2
   11d7c:	a92a      	add	r1, sp, #168	; 0xa8
   11d7e:	9104      	str	r1, [sp, #16]
   11d80:	a925      	add	r1, sp, #148	; 0x94
   11d82:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11d84:	9103      	str	r1, [sp, #12]
   11d86:	a923      	add	r1, sp, #140	; 0x8c
   11d88:	9300      	str	r3, [sp, #0]
   11d8a:	463a      	mov	r2, r7
   11d8c:	4633      	mov	r3, r6
   11d8e:	9501      	str	r5, [sp, #4]
   11d90:	9102      	str	r1, [sp, #8]
   11d92:	4650      	mov	r0, sl
   11d94:	f000 fe60 	bl	12a58 <_dtoa_r>
   11d98:	9b07      	ldr	r3, [sp, #28]
   11d9a:	2b47      	cmp	r3, #71	; 0x47
   11d9c:	4604      	mov	r4, r0
   11d9e:	f000 81a3 	beq.w	120e8 <_svfprintf_r+0x181c>
   11da2:	2b46      	cmp	r3, #70	; 0x46
   11da4:	4405      	add	r5, r0
   11da6:	d105      	bne.n	11db4 <_svfprintf_r+0x14e8>
   11da8:	7803      	ldrb	r3, [r0, #0]
   11daa:	2b30      	cmp	r3, #48	; 0x30
   11dac:	f000 82b8 	beq.w	12320 <_svfprintf_r+0x1a54>
   11db0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11db2:	441d      	add	r5, r3
   11db4:	4638      	mov	r0, r7
   11db6:	4631      	mov	r1, r6
   11db8:	2200      	movs	r2, #0
   11dba:	2300      	movs	r3, #0
   11dbc:	f7fc fcaa 	bl	e714 <__aeabi_dcmpeq>
   11dc0:	2800      	cmp	r0, #0
   11dc2:	f000 8166 	beq.w	12092 <_svfprintf_r+0x17c6>
   11dc6:	462b      	mov	r3, r5
   11dc8:	1b1b      	subs	r3, r3, r4
   11dca:	9313      	str	r3, [sp, #76]	; 0x4c
   11dcc:	9b07      	ldr	r3, [sp, #28]
   11dce:	2b47      	cmp	r3, #71	; 0x47
   11dd0:	f000 814a 	beq.w	12068 <_svfprintf_r+0x179c>
   11dd4:	9b07      	ldr	r3, [sp, #28]
   11dd6:	2b46      	cmp	r3, #70	; 0x46
   11dd8:	f000 8200 	beq.w	121dc <_svfprintf_r+0x1910>
   11ddc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11dde:	9311      	str	r3, [sp, #68]	; 0x44
   11de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11de2:	9a07      	ldr	r2, [sp, #28]
   11de4:	3b01      	subs	r3, #1
   11de6:	2a41      	cmp	r2, #65	; 0x41
   11de8:	9323      	str	r3, [sp, #140]	; 0x8c
   11dea:	f000 8223 	beq.w	12234 <_svfprintf_r+0x1968>
   11dee:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   11df2:	2100      	movs	r1, #0
   11df4:	2b00      	cmp	r3, #0
   11df6:	bfb8      	it	lt
   11df8:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
   11dfa:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   11dfe:	bfba      	itte	lt
   11e00:	f1c3 0301 	rsblt	r3, r3, #1
   11e04:	222d      	movlt	r2, #45	; 0x2d
   11e06:	222b      	movge	r2, #43	; 0x2b
   11e08:	2b09      	cmp	r3, #9
   11e0a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   11e0e:	f340 824f 	ble.w	122b0 <_svfprintf_r+0x19e4>
   11e12:	f10d 05af 	add.w	r5, sp, #175	; 0xaf
   11e16:	4e61      	ldr	r6, [pc, #388]	; (11f9c <_svfprintf_r+0x16d0>)
   11e18:	462a      	mov	r2, r5
   11e1a:	4610      	mov	r0, r2
   11e1c:	fb86 2103 	smull	r2, r1, r6, r3
   11e20:	17da      	asrs	r2, r3, #31
   11e22:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   11e26:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   11e2a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   11e2e:	3130      	adds	r1, #48	; 0x30
   11e30:	f800 1c01 	strb.w	r1, [r0, #-1]
   11e34:	4619      	mov	r1, r3
   11e36:	2963      	cmp	r1, #99	; 0x63
   11e38:	4613      	mov	r3, r2
   11e3a:	f100 32ff 	add.w	r2, r0, #4294967295
   11e3e:	dcec      	bgt.n	11e1a <_svfprintf_r+0x154e>
   11e40:	3330      	adds	r3, #48	; 0x30
   11e42:	b2d9      	uxtb	r1, r3
   11e44:	1e83      	subs	r3, r0, #2
   11e46:	429d      	cmp	r5, r3
   11e48:	f802 1c01 	strb.w	r1, [r2, #-1]
   11e4c:	f240 82e9 	bls.w	12422 <_svfprintf_r+0x1b56>
   11e50:	4613      	mov	r3, r2
   11e52:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   11e56:	e001      	b.n	11e5c <_svfprintf_r+0x1590>
   11e58:	f813 1b01 	ldrb.w	r1, [r3], #1
   11e5c:	f802 1b01 	strb.w	r1, [r2], #1
   11e60:	429d      	cmp	r5, r3
   11e62:	d1f9      	bne.n	11e58 <_svfprintf_r+0x158c>
   11e64:	f10d 03b1 	add.w	r3, sp, #177	; 0xb1
   11e68:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   11e6c:	1a1b      	subs	r3, r3, r0
   11e6e:	4413      	add	r3, r2
   11e70:	aa26      	add	r2, sp, #152	; 0x98
   11e72:	1a9b      	subs	r3, r3, r2
   11e74:	931b      	str	r3, [sp, #108]	; 0x6c
   11e76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11e78:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11e7a:	2b01      	cmp	r3, #1
   11e7c:	441a      	add	r2, r3
   11e7e:	920a      	str	r2, [sp, #40]	; 0x28
   11e80:	f340 8249 	ble.w	12316 <_svfprintf_r+0x1a4a>
   11e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11e86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   11e88:	4413      	add	r3, r2
   11e8a:	930a      	str	r3, [sp, #40]	; 0x28
   11e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11e8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   11e94:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
   11e98:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   11e9c:	2300      	movs	r3, #0
   11e9e:	9312      	str	r3, [sp, #72]	; 0x48
   11ea0:	9207      	str	r2, [sp, #28]
   11ea2:	9316      	str	r3, [sp, #88]	; 0x58
   11ea4:	9311      	str	r3, [sp, #68]	; 0x44
   11ea6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   11ea8:	2b00      	cmp	r3, #0
   11eaa:	f040 80eb 	bne.w	12084 <_svfprintf_r+0x17b8>
   11eae:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   11eb2:	9308      	str	r3, [sp, #32]
   11eb4:	f7fe beee 	b.w	10c94 <_svfprintf_r+0x3c8>
   11eb8:	4620      	mov	r0, r4
   11eba:	970e      	str	r7, [sp, #56]	; 0x38
   11ebc:	f7fd ff60 	bl	fd80 <strlen>
   11ec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11ec2:	9308      	str	r3, [sp, #32]
   11ec4:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   11ec8:	9312      	str	r3, [sp, #72]	; 0x48
   11eca:	9316      	str	r3, [sp, #88]	; 0x58
   11ecc:	930d      	str	r3, [sp, #52]	; 0x34
   11ece:	2373      	movs	r3, #115	; 0x73
   11ed0:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   11ed4:	900a      	str	r0, [sp, #40]	; 0x28
   11ed6:	9107      	str	r1, [sp, #28]
   11ed8:	9310      	str	r3, [sp, #64]	; 0x40
   11eda:	f7fe bedb 	b.w	10c94 <_svfprintf_r+0x3c8>
   11ede:	990c      	ldr	r1, [sp, #48]	; 0x30
   11ee0:	aa2c      	add	r2, sp, #176	; 0xb0
   11ee2:	4650      	mov	r0, sl
   11ee4:	f001 fd5c 	bl	139a0 <__ssprint_r>
   11ee8:	f7fe bdf8 	b.w	10adc <_svfprintf_r+0x210>
   11eec:	1c59      	adds	r1, r3, #1
   11eee:	4650      	mov	r0, sl
   11ef0:	f7fc ffb0 	bl	ee54 <_malloc_r>
   11ef4:	4604      	mov	r4, r0
   11ef6:	2800      	cmp	r0, #0
   11ef8:	f000 81b0 	beq.w	1225c <_svfprintf_r+0x1990>
   11efc:	900d      	str	r0, [sp, #52]	; 0x34
   11efe:	e6cf      	b.n	11ca0 <_svfprintf_r+0x13d4>
   11f00:	990c      	ldr	r1, [sp, #48]	; 0x30
   11f02:	aa2c      	add	r2, sp, #176	; 0xb0
   11f04:	4650      	mov	r0, sl
   11f06:	f001 fd4b 	bl	139a0 <__ssprint_r>
   11f0a:	2800      	cmp	r0, #0
   11f0c:	f47f a949 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11f10:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   11f12:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11f16:	f7ff ba60 	b.w	113da <_svfprintf_r+0xb0e>
   11f1a:	990c      	ldr	r1, [sp, #48]	; 0x30
   11f1c:	aa2c      	add	r2, sp, #176	; 0xb0
   11f1e:	4650      	mov	r0, sl
   11f20:	f001 fd3e 	bl	139a0 <__ssprint_r>
   11f24:	2800      	cmp	r0, #0
   11f26:	f47f a93c 	bne.w	111a2 <_svfprintf_r+0x8d6>
   11f2a:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   11f2e:	9923      	ldr	r1, [sp, #140]	; 0x8c
   11f30:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   11f34:	e63d      	b.n	11bb2 <_svfprintf_r+0x12e6>
   11f36:	2306      	movs	r3, #6
   11f38:	9308      	str	r3, [sp, #32]
   11f3a:	f7ff bba0 	b.w	1167e <_svfprintf_r+0xdb2>
   11f3e:	9b08      	ldr	r3, [sp, #32]
   11f40:	3301      	adds	r3, #1
   11f42:	930a      	str	r3, [sp, #40]	; 0x28
   11f44:	2302      	movs	r3, #2
   11f46:	e719      	b.n	11d7c <_svfprintf_r+0x14b0>
   11f48:	9b08      	ldr	r3, [sp, #32]
   11f4a:	930a      	str	r3, [sp, #40]	; 0x28
   11f4c:	2303      	movs	r3, #3
   11f4e:	e715      	b.n	11d7c <_svfprintf_r+0x14b0>
   11f50:	4638      	mov	r0, r7
   11f52:	4631      	mov	r1, r6
   11f54:	aa23      	add	r2, sp, #140	; 0x8c
   11f56:	f000 fc13 	bl	12780 <frexp>
   11f5a:	2200      	movs	r2, #0
   11f5c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   11f60:	f003 f9ba 	bl	152d8 <__aeabi_dmul>
   11f64:	2200      	movs	r2, #0
   11f66:	2300      	movs	r3, #0
   11f68:	4606      	mov	r6, r0
   11f6a:	460f      	mov	r7, r1
   11f6c:	f7fc fbd2 	bl	e714 <__aeabi_dcmpeq>
   11f70:	b108      	cbz	r0, 11f76 <_svfprintf_r+0x16aa>
   11f72:	2301      	movs	r3, #1
   11f74:	9323      	str	r3, [sp, #140]	; 0x8c
   11f76:	4b0a      	ldr	r3, [pc, #40]	; (11fa0 <_svfprintf_r+0x16d4>)
   11f78:	930a      	str	r3, [sp, #40]	; 0x28
   11f7a:	9b08      	ldr	r3, [sp, #32]
   11f7c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   11f80:	3b01      	subs	r3, #1
   11f82:	e9cd 8b11 	strd	r8, fp, [sp, #68]	; 0x44
   11f86:	4625      	mov	r5, r4
   11f88:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   11f8c:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
   11f90:	4698      	mov	r8, r3
   11f92:	941f      	str	r4, [sp, #124]	; 0x7c
   11f94:	e00d      	b.n	11fb2 <_svfprintf_r+0x16e6>
   11f96:	bf00      	nop
   11f98:	cccccccd 	.word	0xcccccccd
   11f9c:	66666667 	.word	0x66666667
   11fa0:	00017498 	.word	0x00017498
   11fa4:	2200      	movs	r2, #0
   11fa6:	2300      	movs	r3, #0
   11fa8:	f108 38ff 	add.w	r8, r8, #4294967295
   11fac:	f7fc fbb2 	bl	e714 <__aeabi_dcmpeq>
   11fb0:	b9e8      	cbnz	r0, 11fee <_svfprintf_r+0x1722>
   11fb2:	4bae      	ldr	r3, [pc, #696]	; (1226c <_svfprintf_r+0x19a0>)
   11fb4:	2200      	movs	r2, #0
   11fb6:	4630      	mov	r0, r6
   11fb8:	4639      	mov	r1, r7
   11fba:	f003 f98d 	bl	152d8 <__aeabi_dmul>
   11fbe:	460f      	mov	r7, r1
   11fc0:	4606      	mov	r6, r0
   11fc2:	f003 fb9b 	bl	156fc <__aeabi_d2iz>
   11fc6:	4604      	mov	r4, r0
   11fc8:	f7fc fae4 	bl	e594 <__aeabi_i2d>
   11fcc:	460b      	mov	r3, r1
   11fce:	4602      	mov	r2, r0
   11fd0:	4639      	mov	r1, r7
   11fd2:	4630      	mov	r0, r6
   11fd4:	f7fc f990 	bl	e2f8 <__aeabi_dsub>
   11fd8:	f81b 3004 	ldrb.w	r3, [fp, r4]
   11fdc:	f1b8 3fff 	cmp.w	r8, #4294967295
   11fe0:	46aa      	mov	sl, r5
   11fe2:	46c1      	mov	r9, r8
   11fe4:	f805 3b01 	strb.w	r3, [r5], #1
   11fe8:	4606      	mov	r6, r0
   11fea:	460f      	mov	r7, r1
   11fec:	d1da      	bne.n	11fa4 <_svfprintf_r+0x16d8>
   11fee:	4ba0      	ldr	r3, [pc, #640]	; (12270 <_svfprintf_r+0x19a4>)
   11ff0:	2200      	movs	r2, #0
   11ff2:	4630      	mov	r0, r6
   11ff4:	4639      	mov	r1, r7
   11ff6:	e9dd 8b11 	ldrd	r8, fp, [sp, #68]	; 0x44
   11ffa:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
   11ffe:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
   12002:	e9cd a412 	strd	sl, r4, [sp, #72]	; 0x48
   12006:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   1200a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   1200c:	f7fc fbaa 	bl	e764 <__aeabi_dcmpgt>
   12010:	2800      	cmp	r0, #0
   12012:	f040 8131 	bne.w	12278 <_svfprintf_r+0x19ac>
   12016:	4b96      	ldr	r3, [pc, #600]	; (12270 <_svfprintf_r+0x19a4>)
   12018:	4630      	mov	r0, r6
   1201a:	4639      	mov	r1, r7
   1201c:	2200      	movs	r2, #0
   1201e:	f7fc fb79 	bl	e714 <__aeabi_dcmpeq>
   12022:	b118      	cbz	r0, 1202c <_svfprintf_r+0x1760>
   12024:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12026:	07de      	lsls	r6, r3, #31
   12028:	f100 8126 	bmi.w	12278 <_svfprintf_r+0x19ac>
   1202c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1202e:	2b00      	cmp	r3, #0
   12030:	db07      	blt.n	12042 <_svfprintf_r+0x1776>
   12032:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12034:	3301      	adds	r3, #1
   12036:	442b      	add	r3, r5
   12038:	2230      	movs	r2, #48	; 0x30
   1203a:	f805 2b01 	strb.w	r2, [r5], #1
   1203e:	42ab      	cmp	r3, r5
   12040:	d1fb      	bne.n	1203a <_svfprintf_r+0x176e>
   12042:	1b2b      	subs	r3, r5, r4
   12044:	9313      	str	r3, [sp, #76]	; 0x4c
   12046:	e6c1      	b.n	11dcc <_svfprintf_r+0x1500>
   12048:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1204a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1204c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   12050:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   12054:	971a      	str	r7, [sp, #104]	; 0x68
   12056:	18e3      	adds	r3, r4, r3
   12058:	429d      	cmp	r5, r3
   1205a:	bf28      	it	cs
   1205c:	461d      	movcs	r5, r3
   1205e:	4691      	mov	r9, r2
   12060:	460e      	mov	r6, r1
   12062:	950a      	str	r5, [sp, #40]	; 0x28
   12064:	f7ff b9c0 	b.w	113e8 <_svfprintf_r+0xb1c>
   12068:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1206a:	9311      	str	r3, [sp, #68]	; 0x44
   1206c:	1cdd      	adds	r5, r3, #3
   1206e:	db02      	blt.n	12076 <_svfprintf_r+0x17aa>
   12070:	9a08      	ldr	r2, [sp, #32]
   12072:	4293      	cmp	r3, r2
   12074:	dd19      	ble.n	120aa <_svfprintf_r+0x17de>
   12076:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12078:	3b02      	subs	r3, #2
   1207a:	9310      	str	r3, [sp, #64]	; 0x40
   1207c:	f023 0320 	bic.w	r3, r3, #32
   12080:	9307      	str	r3, [sp, #28]
   12082:	e6ad      	b.n	11de0 <_svfprintf_r+0x1514>
   12084:	222d      	movs	r2, #45	; 0x2d
   12086:	2300      	movs	r3, #0
   12088:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   1208c:	9308      	str	r3, [sp, #32]
   1208e:	f7fe be04 	b.w	10c9a <_svfprintf_r+0x3ce>
   12092:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   12094:	42ab      	cmp	r3, r5
   12096:	f4bf ae97 	bcs.w	11dc8 <_svfprintf_r+0x14fc>
   1209a:	2130      	movs	r1, #48	; 0x30
   1209c:	1c5a      	adds	r2, r3, #1
   1209e:	922a      	str	r2, [sp, #168]	; 0xa8
   120a0:	7019      	strb	r1, [r3, #0]
   120a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   120a4:	429d      	cmp	r5, r3
   120a6:	d8f9      	bhi.n	1209c <_svfprintf_r+0x17d0>
   120a8:	e68e      	b.n	11dc8 <_svfprintf_r+0x14fc>
   120aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   120ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   120ae:	4293      	cmp	r3, r2
   120b0:	f2c0 80c5 	blt.w	1223e <_svfprintf_r+0x1972>
   120b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   120b6:	f013 0f01 	tst.w	r3, #1
   120ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   120bc:	f000 814d 	beq.w	1235a <_svfprintf_r+0x1a8e>
   120c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   120c2:	4413      	add	r3, r2
   120c4:	930a      	str	r3, [sp, #40]	; 0x28
   120c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   120c8:	0559      	lsls	r1, r3, #21
   120ca:	d503      	bpl.n	120d4 <_svfprintf_r+0x1808>
   120cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   120ce:	2b00      	cmp	r3, #0
   120d0:	f300 8156 	bgt.w	12380 <_svfprintf_r+0x1ab4>
   120d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   120d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   120da:	9307      	str	r3, [sp, #28]
   120dc:	2367      	movs	r3, #103	; 0x67
   120de:	9310      	str	r3, [sp, #64]	; 0x40
   120e0:	2300      	movs	r3, #0
   120e2:	9312      	str	r3, [sp, #72]	; 0x48
   120e4:	9316      	str	r3, [sp, #88]	; 0x58
   120e6:	e6de      	b.n	11ea6 <_svfprintf_r+0x15da>
   120e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   120ea:	07db      	lsls	r3, r3, #31
   120ec:	f100 809f 	bmi.w	1222e <_svfprintf_r+0x1962>
   120f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   120f2:	e669      	b.n	11dc8 <_svfprintf_r+0x14fc>
   120f4:	aa2c      	add	r2, sp, #176	; 0xb0
   120f6:	4641      	mov	r1, r8
   120f8:	4650      	mov	r0, sl
   120fa:	f001 fc51 	bl	139a0 <__ssprint_r>
   120fe:	2800      	cmp	r0, #0
   12100:	f47f a84f 	bne.w	111a2 <_svfprintf_r+0x8d6>
   12104:	7838      	ldrb	r0, [r7, #0]
   12106:	992e      	ldr	r1, [sp, #184]	; 0xb8
   12108:	aa2f      	add	r2, sp, #188	; 0xbc
   1210a:	4405      	add	r5, r0
   1210c:	f7ff bbc1 	b.w	11892 <_svfprintf_r+0xfc6>
   12110:	2378      	movs	r3, #120	; 0x78
   12112:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
   12116:	2330      	movs	r3, #48	; 0x30
   12118:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
   1211c:	f04b 0302 	orr.w	r3, fp, #2
   12120:	930f      	str	r3, [sp, #60]	; 0x3c
   12122:	9b08      	ldr	r3, [sp, #32]
   12124:	2b63      	cmp	r3, #99	; 0x63
   12126:	f300 80ed 	bgt.w	12304 <_svfprintf_r+0x1a38>
   1212a:	2300      	movs	r3, #0
   1212c:	930d      	str	r3, [sp, #52]	; 0x34
   1212e:	ac3f      	add	r4, sp, #252	; 0xfc
   12130:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   12134:	4613      	mov	r3, r2
   12136:	2b00      	cmp	r3, #0
   12138:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
   1213c:	db67      	blt.n	1220e <_svfprintf_r+0x1942>
   1213e:	461e      	mov	r6, r3
   12140:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12142:	f023 0320 	bic.w	r3, r3, #32
   12146:	9307      	str	r3, [sp, #28]
   12148:	2300      	movs	r3, #0
   1214a:	460f      	mov	r7, r1
   1214c:	931e      	str	r3, [sp, #120]	; 0x78
   1214e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12150:	2b61      	cmp	r3, #97	; 0x61
   12152:	f47f aaa4 	bne.w	1169e <_svfprintf_r+0xdd2>
   12156:	4638      	mov	r0, r7
   12158:	4631      	mov	r1, r6
   1215a:	aa23      	add	r2, sp, #140	; 0x8c
   1215c:	f000 fb10 	bl	12780 <frexp>
   12160:	2200      	movs	r2, #0
   12162:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   12166:	f003 f8b7 	bl	152d8 <__aeabi_dmul>
   1216a:	2200      	movs	r2, #0
   1216c:	2300      	movs	r3, #0
   1216e:	4606      	mov	r6, r0
   12170:	460f      	mov	r7, r1
   12172:	f7fc facf 	bl	e714 <__aeabi_dcmpeq>
   12176:	b108      	cbz	r0, 1217c <_svfprintf_r+0x18b0>
   12178:	2301      	movs	r3, #1
   1217a:	9323      	str	r3, [sp, #140]	; 0x8c
   1217c:	4b3d      	ldr	r3, [pc, #244]	; (12274 <_svfprintf_r+0x19a8>)
   1217e:	930a      	str	r3, [sp, #40]	; 0x28
   12180:	e6fb      	b.n	11f7a <_svfprintf_r+0x16ae>
   12182:	990c      	ldr	r1, [sp, #48]	; 0x30
   12184:	aa2c      	add	r2, sp, #176	; 0xb0
   12186:	4650      	mov	r0, sl
   12188:	f001 fc0a 	bl	139a0 <__ssprint_r>
   1218c:	2800      	cmp	r0, #0
   1218e:	f47f a808 	bne.w	111a2 <_svfprintf_r+0x8d6>
   12192:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   12194:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   12198:	f7ff b918 	b.w	113cc <_svfprintf_r+0xb00>
   1219c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1219e:	aa2c      	add	r2, sp, #176	; 0xb0
   121a0:	4650      	mov	r0, sl
   121a2:	f001 fbfd 	bl	139a0 <__ssprint_r>
   121a6:	2800      	cmp	r0, #0
   121a8:	f47e affb 	bne.w	111a2 <_svfprintf_r+0x8d6>
   121ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   121ae:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   121b0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   121b4:	f7ff b92e 	b.w	11414 <_svfprintf_r+0xb48>
   121b8:	2358      	movs	r3, #88	; 0x58
   121ba:	e7aa      	b.n	12112 <_svfprintf_r+0x1846>
   121bc:	990c      	ldr	r1, [sp, #48]	; 0x30
   121be:	aa2c      	add	r2, sp, #176	; 0xb0
   121c0:	4650      	mov	r0, sl
   121c2:	f001 fbed 	bl	139a0 <__ssprint_r>
   121c6:	2800      	cmp	r0, #0
   121c8:	f47e afeb 	bne.w	111a2 <_svfprintf_r+0x8d6>
   121cc:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   121ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   121d0:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   121d2:	1b1c      	subs	r4, r3, r4
   121d4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   121d8:	f7ff b934 	b.w	11444 <_svfprintf_r+0xb78>
   121dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   121de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   121e0:	9211      	str	r2, [sp, #68]	; 0x44
   121e2:	2a00      	cmp	r2, #0
   121e4:	f003 0301 	and.w	r3, r3, #1
   121e8:	f340 8108 	ble.w	123fc <_svfprintf_r+0x1b30>
   121ec:	9908      	ldr	r1, [sp, #32]
   121ee:	430b      	orrs	r3, r1
   121f0:	f040 80fd 	bne.w	123ee <_svfprintf_r+0x1b22>
   121f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   121f6:	930a      	str	r3, [sp, #40]	; 0x28
   121f8:	2366      	movs	r3, #102	; 0x66
   121fa:	9310      	str	r3, [sp, #64]	; 0x40
   121fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   121fe:	055a      	lsls	r2, r3, #21
   12200:	f100 80c0 	bmi.w	12384 <_svfprintf_r+0x1ab8>
   12204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12206:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1220a:	9307      	str	r3, [sp, #28]
   1220c:	e768      	b.n	120e0 <_svfprintf_r+0x1814>
   1220e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12210:	f023 0320 	bic.w	r3, r3, #32
   12214:	9307      	str	r3, [sp, #28]
   12216:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1221a:	f103 4600 	add.w	r6, r3, #2147483648	; 0x80000000
   1221e:	232d      	movs	r3, #45	; 0x2d
   12220:	4617      	mov	r7, r2
   12222:	931e      	str	r3, [sp, #120]	; 0x78
   12224:	e793      	b.n	1214e <_svfprintf_r+0x1882>
   12226:	2200      	movs	r2, #0
   12228:	9208      	str	r2, [sp, #32]
   1222a:	f7fe bbaa 	b.w	10982 <_svfprintf_r+0xb6>
   1222e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   12230:	4425      	add	r5, r4
   12232:	e5bf      	b.n	11db4 <_svfprintf_r+0x14e8>
   12234:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12236:	320f      	adds	r2, #15
   12238:	b2d2      	uxtb	r2, r2
   1223a:	2101      	movs	r1, #1
   1223c:	e5da      	b.n	11df4 <_svfprintf_r+0x1528>
   1223e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12240:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12242:	189a      	adds	r2, r3, r2
   12244:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12246:	920a      	str	r2, [sp, #40]	; 0x28
   12248:	2b00      	cmp	r3, #0
   1224a:	f340 808f 	ble.w	1236c <_svfprintf_r+0x1aa0>
   1224e:	2367      	movs	r3, #103	; 0x67
   12250:	9310      	str	r3, [sp, #64]	; 0x40
   12252:	e7d3      	b.n	121fc <_svfprintf_r+0x1930>
   12254:	469b      	mov	fp, r3
   12256:	2300      	movs	r3, #0
   12258:	930d      	str	r3, [sp, #52]	; 0x34
   1225a:	e7dc      	b.n	12216 <_svfprintf_r+0x194a>
   1225c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1225e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   12262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12266:	8193      	strh	r3, [r2, #12]
   12268:	f7fe bc3b 	b.w	10ae2 <_svfprintf_r+0x216>
   1226c:	40300000 	.word	0x40300000
   12270:	3fe00000 	.word	0x3fe00000
   12274:	00017484 	.word	0x00017484
   12278:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1227a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1227c:	932a      	str	r3, [sp, #168]	; 0xa8
   1227e:	7bd1      	ldrb	r1, [r2, #15]
   12280:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   12284:	428b      	cmp	r3, r1
   12286:	462a      	mov	r2, r5
   12288:	d109      	bne.n	1229e <_svfprintf_r+0x19d2>
   1228a:	2030      	movs	r0, #48	; 0x30
   1228c:	f802 0c01 	strb.w	r0, [r2, #-1]
   12290:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   12292:	1e53      	subs	r3, r2, #1
   12294:	932a      	str	r3, [sp, #168]	; 0xa8
   12296:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   1229a:	4299      	cmp	r1, r3
   1229c:	d0f6      	beq.n	1228c <_svfprintf_r+0x19c0>
   1229e:	2b39      	cmp	r3, #57	; 0x39
   122a0:	bf0b      	itete	eq
   122a2:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   122a4:	3301      	addne	r3, #1
   122a6:	7a9b      	ldrbeq	r3, [r3, #10]
   122a8:	b2db      	uxtbne	r3, r3
   122aa:	f802 3c01 	strb.w	r3, [r2, #-1]
   122ae:	e6c8      	b.n	12042 <_svfprintf_r+0x1776>
   122b0:	2900      	cmp	r1, #0
   122b2:	f040 808c 	bne.w	123ce <_svfprintf_r+0x1b02>
   122b6:	2230      	movs	r2, #48	; 0x30
   122b8:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   122bc:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   122c0:	3330      	adds	r3, #48	; 0x30
   122c2:	f802 3b01 	strb.w	r3, [r2], #1
   122c6:	ab26      	add	r3, sp, #152	; 0x98
   122c8:	1ad3      	subs	r3, r2, r3
   122ca:	931b      	str	r3, [sp, #108]	; 0x6c
   122cc:	e5d3      	b.n	11e76 <_svfprintf_r+0x15aa>
   122ce:	464c      	mov	r4, r9
   122d0:	4689      	mov	r9, r1
   122d2:	3301      	adds	r3, #1
   122d4:	443a      	add	r2, r7
   122d6:	2b07      	cmp	r3, #7
   122d8:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   122dc:	f8c9 5000 	str.w	r5, [r9]
   122e0:	f8c9 7004 	str.w	r7, [r9, #4]
   122e4:	f77f abab 	ble.w	11a3e <_svfprintf_r+0x1172>
   122e8:	990c      	ldr	r1, [sp, #48]	; 0x30
   122ea:	aa2c      	add	r2, sp, #176	; 0xb0
   122ec:	4650      	mov	r0, sl
   122ee:	f001 fb57 	bl	139a0 <__ssprint_r>
   122f2:	2800      	cmp	r0, #0
   122f4:	f47e af55 	bne.w	111a2 <_svfprintf_r+0x8d6>
   122f8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   122fc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   12300:	f7ff bb9f 	b.w	11a42 <_svfprintf_r+0x1176>
   12304:	1c59      	adds	r1, r3, #1
   12306:	4650      	mov	r0, sl
   12308:	f7fc fda4 	bl	ee54 <_malloc_r>
   1230c:	4604      	mov	r4, r0
   1230e:	2800      	cmp	r0, #0
   12310:	d0a4      	beq.n	1225c <_svfprintf_r+0x1990>
   12312:	900d      	str	r0, [sp, #52]	; 0x34
   12314:	e70c      	b.n	12130 <_svfprintf_r+0x1864>
   12316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12318:	07d8      	lsls	r0, r3, #31
   1231a:	f57f adb7 	bpl.w	11e8c <_svfprintf_r+0x15c0>
   1231e:	e5b1      	b.n	11e84 <_svfprintf_r+0x15b8>
   12320:	4638      	mov	r0, r7
   12322:	4631      	mov	r1, r6
   12324:	2200      	movs	r2, #0
   12326:	2300      	movs	r3, #0
   12328:	f7fc f9f4 	bl	e714 <__aeabi_dcmpeq>
   1232c:	2800      	cmp	r0, #0
   1232e:	f47f ad3f 	bne.w	11db0 <_svfprintf_r+0x14e4>
   12332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12334:	f1c3 0301 	rsb	r3, r3, #1
   12338:	9323      	str	r3, [sp, #140]	; 0x8c
   1233a:	e53a      	b.n	11db2 <_svfprintf_r+0x14e6>
   1233c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1233e:	4c4a      	ldr	r4, [pc, #296]	; (12468 <_svfprintf_r+0x1b9c>)
   12340:	2b00      	cmp	r3, #0
   12342:	bfb4      	ite	lt
   12344:	222d      	movlt	r2, #45	; 0x2d
   12346:	f89d 2087 	ldrbge.w	r2, [sp, #135]	; 0x87
   1234a:	4b48      	ldr	r3, [pc, #288]	; (1246c <_svfprintf_r+0x1ba0>)
   1234c:	bfb8      	it	lt
   1234e:	f88d 2087 	strblt.w	r2, [sp, #135]	; 0x87
   12352:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   12356:	f7fe bc90 	b.w	10c7a <_svfprintf_r+0x3ae>
   1235a:	930a      	str	r3, [sp, #40]	; 0x28
   1235c:	e6b3      	b.n	120c6 <_svfprintf_r+0x17fa>
   1235e:	9b08      	ldr	r3, [sp, #32]
   12360:	f8dd 801c 	ldr.w	r8, [sp, #28]
   12364:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   12368:	930a      	str	r3, [sp, #40]	; 0x28
   1236a:	e490      	b.n	11c8e <_svfprintf_r+0x13c2>
   1236c:	f1c3 0301 	rsb	r3, r3, #1
   12370:	441a      	add	r2, r3
   12372:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   12376:	9307      	str	r3, [sp, #28]
   12378:	2367      	movs	r3, #103	; 0x67
   1237a:	920a      	str	r2, [sp, #40]	; 0x28
   1237c:	9310      	str	r3, [sp, #64]	; 0x40
   1237e:	e6af      	b.n	120e0 <_svfprintf_r+0x1814>
   12380:	2367      	movs	r3, #103	; 0x67
   12382:	9310      	str	r3, [sp, #64]	; 0x40
   12384:	991a      	ldr	r1, [sp, #104]	; 0x68
   12386:	780b      	ldrb	r3, [r1, #0]
   12388:	2bff      	cmp	r3, #255	; 0xff
   1238a:	d059      	beq.n	12440 <_svfprintf_r+0x1b74>
   1238c:	2500      	movs	r5, #0
   1238e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12390:	4628      	mov	r0, r5
   12392:	e003      	b.n	1239c <_svfprintf_r+0x1ad0>
   12394:	3001      	adds	r0, #1
   12396:	3101      	adds	r1, #1
   12398:	2bff      	cmp	r3, #255	; 0xff
   1239a:	d008      	beq.n	123ae <_svfprintf_r+0x1ae2>
   1239c:	4293      	cmp	r3, r2
   1239e:	da06      	bge.n	123ae <_svfprintf_r+0x1ae2>
   123a0:	1ad2      	subs	r2, r2, r3
   123a2:	784b      	ldrb	r3, [r1, #1]
   123a4:	2b00      	cmp	r3, #0
   123a6:	d1f5      	bne.n	12394 <_svfprintf_r+0x1ac8>
   123a8:	780b      	ldrb	r3, [r1, #0]
   123aa:	3501      	adds	r5, #1
   123ac:	e7f4      	b.n	12398 <_svfprintf_r+0x1acc>
   123ae:	9211      	str	r2, [sp, #68]	; 0x44
   123b0:	911a      	str	r1, [sp, #104]	; 0x68
   123b2:	9016      	str	r0, [sp, #88]	; 0x58
   123b4:	9512      	str	r5, [sp, #72]	; 0x48
   123b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   123b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   123ba:	991d      	ldr	r1, [sp, #116]	; 0x74
   123bc:	4413      	add	r3, r2
   123be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   123c0:	fb01 2303 	mla	r3, r1, r3, r2
   123c4:	930a      	str	r3, [sp, #40]	; 0x28
   123c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   123ca:	9307      	str	r3, [sp, #28]
   123cc:	e56b      	b.n	11ea6 <_svfprintf_r+0x15da>
   123ce:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   123d2:	e775      	b.n	122c0 <_svfprintf_r+0x19f4>
   123d4:	9b08      	ldr	r3, [sp, #32]
   123d6:	9307      	str	r3, [sp, #28]
   123d8:	930a      	str	r3, [sp, #40]	; 0x28
   123da:	2373      	movs	r3, #115	; 0x73
   123dc:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   123e0:	970e      	str	r7, [sp, #56]	; 0x38
   123e2:	9008      	str	r0, [sp, #32]
   123e4:	9012      	str	r0, [sp, #72]	; 0x48
   123e6:	9016      	str	r0, [sp, #88]	; 0x58
   123e8:	9310      	str	r3, [sp, #64]	; 0x40
   123ea:	f7fe bc53 	b.w	10c94 <_svfprintf_r+0x3c8>
   123ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   123f0:	18d5      	adds	r5, r2, r3
   123f2:	4429      	add	r1, r5
   123f4:	2366      	movs	r3, #102	; 0x66
   123f6:	910a      	str	r1, [sp, #40]	; 0x28
   123f8:	9310      	str	r3, [sp, #64]	; 0x40
   123fa:	e6ff      	b.n	121fc <_svfprintf_r+0x1930>
   123fc:	9a08      	ldr	r2, [sp, #32]
   123fe:	4313      	orrs	r3, r2
   12400:	d105      	bne.n	1240e <_svfprintf_r+0x1b42>
   12402:	2301      	movs	r3, #1
   12404:	2266      	movs	r2, #102	; 0x66
   12406:	9307      	str	r3, [sp, #28]
   12408:	9210      	str	r2, [sp, #64]	; 0x40
   1240a:	930a      	str	r3, [sp, #40]	; 0x28
   1240c:	e668      	b.n	120e0 <_svfprintf_r+0x1814>
   1240e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12410:	1c5d      	adds	r5, r3, #1
   12412:	442a      	add	r2, r5
   12414:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   12418:	9307      	str	r3, [sp, #28]
   1241a:	2366      	movs	r3, #102	; 0x66
   1241c:	920a      	str	r2, [sp, #40]	; 0x28
   1241e:	9310      	str	r3, [sp, #64]	; 0x40
   12420:	e65e      	b.n	120e0 <_svfprintf_r+0x1814>
   12422:	2302      	movs	r3, #2
   12424:	931b      	str	r3, [sp, #108]	; 0x6c
   12426:	e526      	b.n	11e76 <_svfprintf_r+0x15aa>
   12428:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1242a:	f898 3001 	ldrb.w	r3, [r8, #1]
   1242e:	4688      	mov	r8, r1
   12430:	f852 1b04 	ldr.w	r1, [r2], #4
   12434:	920e      	str	r2, [sp, #56]	; 0x38
   12436:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   1243a:	9108      	str	r1, [sp, #32]
   1243c:	f7fe ba9f 	b.w	1097e <_svfprintf_r+0xb2>
   12440:	2300      	movs	r3, #0
   12442:	9312      	str	r3, [sp, #72]	; 0x48
   12444:	9316      	str	r3, [sp, #88]	; 0x58
   12446:	e7b6      	b.n	123b6 <_svfprintf_r+0x1aea>
   12448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1244a:	8993      	ldrh	r3, [r2, #12]
   1244c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12450:	8193      	strh	r3, [r2, #12]
   12452:	f7fe bea6 	b.w	111a2 <_svfprintf_r+0x8d6>
   12456:	230c      	movs	r3, #12
   12458:	f8ca 3000 	str.w	r3, [sl]
   1245c:	f04f 33ff 	mov.w	r3, #4294967295
   12460:	9309      	str	r3, [sp, #36]	; 0x24
   12462:	f7fe bb45 	b.w	10af0 <_svfprintf_r+0x224>
   12466:	bf00      	nop
   12468:	00017480 	.word	0x00017480
   1246c:	00016fec 	.word	0x00016fec

00012470 <_fclose_r>:
   12470:	b570      	push	{r4, r5, r6, lr}
   12472:	2900      	cmp	r1, #0
   12474:	d04b      	beq.n	1250e <_fclose_r+0x9e>
   12476:	4606      	mov	r6, r0
   12478:	460c      	mov	r4, r1
   1247a:	b110      	cbz	r0, 12482 <_fclose_r+0x12>
   1247c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1247e:	2b00      	cmp	r3, #0
   12480:	d048      	beq.n	12514 <_fclose_r+0xa4>
   12482:	6e63      	ldr	r3, [r4, #100]	; 0x64
   12484:	07d8      	lsls	r0, r3, #31
   12486:	d534      	bpl.n	124f2 <_fclose_r+0x82>
   12488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1248c:	2b00      	cmp	r3, #0
   1248e:	d03e      	beq.n	1250e <_fclose_r+0x9e>
   12490:	4621      	mov	r1, r4
   12492:	4630      	mov	r0, r6
   12494:	f000 f850 	bl	12538 <__sflush_r>
   12498:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1249a:	4605      	mov	r5, r0
   1249c:	b133      	cbz	r3, 124ac <_fclose_r+0x3c>
   1249e:	69e1      	ldr	r1, [r4, #28]
   124a0:	4630      	mov	r0, r6
   124a2:	4798      	blx	r3
   124a4:	2800      	cmp	r0, #0
   124a6:	bfb8      	it	lt
   124a8:	f04f 35ff 	movlt.w	r5, #4294967295
   124ac:	89a3      	ldrh	r3, [r4, #12]
   124ae:	061a      	lsls	r2, r3, #24
   124b0:	d43c      	bmi.n	1252c <_fclose_r+0xbc>
   124b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   124b4:	b141      	cbz	r1, 124c8 <_fclose_r+0x58>
   124b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   124ba:	4299      	cmp	r1, r3
   124bc:	d002      	beq.n	124c4 <_fclose_r+0x54>
   124be:	4630      	mov	r0, r6
   124c0:	f7fd fd2c 	bl	ff1c <_free_r>
   124c4:	2300      	movs	r3, #0
   124c6:	6323      	str	r3, [r4, #48]	; 0x30
   124c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   124ca:	b121      	cbz	r1, 124d6 <_fclose_r+0x66>
   124cc:	4630      	mov	r0, r6
   124ce:	f7fd fd25 	bl	ff1c <_free_r>
   124d2:	2300      	movs	r3, #0
   124d4:	6463      	str	r3, [r4, #68]	; 0x44
   124d6:	f7fd fa19 	bl	f90c <__sfp_lock_acquire>
   124da:	6e63      	ldr	r3, [r4, #100]	; 0x64
   124dc:	2200      	movs	r2, #0
   124de:	07db      	lsls	r3, r3, #31
   124e0:	81a2      	strh	r2, [r4, #12]
   124e2:	d51f      	bpl.n	12524 <_fclose_r+0xb4>
   124e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   124e6:	f7fd fc3f 	bl	fd68 <__retarget_lock_close_recursive>
   124ea:	f7fd fa15 	bl	f918 <__sfp_lock_release>
   124ee:	4628      	mov	r0, r5
   124f0:	bd70      	pop	{r4, r5, r6, pc}
   124f2:	89a3      	ldrh	r3, [r4, #12]
   124f4:	0599      	lsls	r1, r3, #22
   124f6:	d4cb      	bmi.n	12490 <_fclose_r+0x20>
   124f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   124fa:	f7fd fc37 	bl	fd6c <__retarget_lock_acquire_recursive>
   124fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12502:	2b00      	cmp	r3, #0
   12504:	d1c4      	bne.n	12490 <_fclose_r+0x20>
   12506:	6e65      	ldr	r5, [r4, #100]	; 0x64
   12508:	f015 0501 	ands.w	r5, r5, #1
   1250c:	d005      	beq.n	1251a <_fclose_r+0xaa>
   1250e:	2500      	movs	r5, #0
   12510:	4628      	mov	r0, r5
   12512:	bd70      	pop	{r4, r5, r6, pc}
   12514:	f7fd f9dc 	bl	f8d0 <__sinit>
   12518:	e7b3      	b.n	12482 <_fclose_r+0x12>
   1251a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1251c:	f7fd fc28 	bl	fd70 <__retarget_lock_release_recursive>
   12520:	4628      	mov	r0, r5
   12522:	bd70      	pop	{r4, r5, r6, pc}
   12524:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12526:	f7fd fc23 	bl	fd70 <__retarget_lock_release_recursive>
   1252a:	e7db      	b.n	124e4 <_fclose_r+0x74>
   1252c:	6921      	ldr	r1, [r4, #16]
   1252e:	4630      	mov	r0, r6
   12530:	f7fd fcf4 	bl	ff1c <_free_r>
   12534:	e7bd      	b.n	124b2 <_fclose_r+0x42>
   12536:	bf00      	nop

00012538 <__sflush_r>:
   12538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   1253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1253e:	460c      	mov	r4, r1
   12540:	0711      	lsls	r1, r2, #28
   12542:	4607      	mov	r7, r0
   12544:	d442      	bmi.n	125cc <__sflush_r+0x94>
   12546:	6863      	ldr	r3, [r4, #4]
   12548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1254c:	2b00      	cmp	r3, #0
   1254e:	81a2      	strh	r2, [r4, #12]
   12550:	dd59      	ble.n	12606 <__sflush_r+0xce>
   12552:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   12554:	2d00      	cmp	r5, #0
   12556:	d054      	beq.n	12602 <__sflush_r+0xca>
   12558:	2300      	movs	r3, #0
   1255a:	683e      	ldr	r6, [r7, #0]
   1255c:	603b      	str	r3, [r7, #0]
   1255e:	b293      	uxth	r3, r2
   12560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   12564:	d153      	bne.n	1260e <__sflush_r+0xd6>
   12566:	69e1      	ldr	r1, [r4, #28]
   12568:	2301      	movs	r3, #1
   1256a:	4638      	mov	r0, r7
   1256c:	47a8      	blx	r5
   1256e:	1c42      	adds	r2, r0, #1
   12570:	d063      	beq.n	1263a <__sflush_r+0x102>
   12572:	89a3      	ldrh	r3, [r4, #12]
   12574:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   12576:	075b      	lsls	r3, r3, #29
   12578:	d505      	bpl.n	12586 <__sflush_r+0x4e>
   1257a:	6863      	ldr	r3, [r4, #4]
   1257c:	1ac0      	subs	r0, r0, r3
   1257e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12580:	b10b      	cbz	r3, 12586 <__sflush_r+0x4e>
   12582:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12584:	1ac0      	subs	r0, r0, r3
   12586:	69e1      	ldr	r1, [r4, #28]
   12588:	4602      	mov	r2, r0
   1258a:	2300      	movs	r3, #0
   1258c:	4638      	mov	r0, r7
   1258e:	47a8      	blx	r5
   12590:	1c41      	adds	r1, r0, #1
   12592:	d13e      	bne.n	12612 <__sflush_r+0xda>
   12594:	683b      	ldr	r3, [r7, #0]
   12596:	2b00      	cmp	r3, #0
   12598:	d03b      	beq.n	12612 <__sflush_r+0xda>
   1259a:	2b1d      	cmp	r3, #29
   1259c:	d001      	beq.n	125a2 <__sflush_r+0x6a>
   1259e:	2b16      	cmp	r3, #22
   125a0:	d152      	bne.n	12648 <__sflush_r+0x110>
   125a2:	89a3      	ldrh	r3, [r4, #12]
   125a4:	6922      	ldr	r2, [r4, #16]
   125a6:	6022      	str	r2, [r4, #0]
   125a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   125ac:	2100      	movs	r1, #0
   125ae:	6061      	str	r1, [r4, #4]
   125b0:	81a3      	strh	r3, [r4, #12]
   125b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   125b4:	603e      	str	r6, [r7, #0]
   125b6:	b321      	cbz	r1, 12602 <__sflush_r+0xca>
   125b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   125bc:	4299      	cmp	r1, r3
   125be:	d002      	beq.n	125c6 <__sflush_r+0x8e>
   125c0:	4638      	mov	r0, r7
   125c2:	f7fd fcab 	bl	ff1c <_free_r>
   125c6:	2000      	movs	r0, #0
   125c8:	6320      	str	r0, [r4, #48]	; 0x30
   125ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   125cc:	6926      	ldr	r6, [r4, #16]
   125ce:	b1c6      	cbz	r6, 12602 <__sflush_r+0xca>
   125d0:	b293      	uxth	r3, r2
   125d2:	6825      	ldr	r5, [r4, #0]
   125d4:	6026      	str	r6, [r4, #0]
   125d6:	079a      	lsls	r2, r3, #30
   125d8:	bf0c      	ite	eq
   125da:	6963      	ldreq	r3, [r4, #20]
   125dc:	2300      	movne	r3, #0
   125de:	1bad      	subs	r5, r5, r6
   125e0:	60a3      	str	r3, [r4, #8]
   125e2:	e00c      	b.n	125fe <__sflush_r+0xc6>
   125e4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   125e8:	69e1      	ldr	r1, [r4, #28]
   125ea:	462b      	mov	r3, r5
   125ec:	4632      	mov	r2, r6
   125ee:	4638      	mov	r0, r7
   125f0:	47e0      	blx	ip
   125f2:	f1b0 0c00 	subs.w	ip, r0, #0
   125f6:	eba5 050c 	sub.w	r5, r5, ip
   125fa:	4466      	add	r6, ip
   125fc:	dd16      	ble.n	1262c <__sflush_r+0xf4>
   125fe:	2d00      	cmp	r5, #0
   12600:	dcf0      	bgt.n	125e4 <__sflush_r+0xac>
   12602:	2000      	movs	r0, #0
   12604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12606:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12608:	2b00      	cmp	r3, #0
   1260a:	dca2      	bgt.n	12552 <__sflush_r+0x1a>
   1260c:	e7f9      	b.n	12602 <__sflush_r+0xca>
   1260e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   12610:	e7b1      	b.n	12576 <__sflush_r+0x3e>
   12612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12616:	6922      	ldr	r2, [r4, #16]
   12618:	6022      	str	r2, [r4, #0]
   1261a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1261e:	81a3      	strh	r3, [r4, #12]
   12620:	2200      	movs	r2, #0
   12622:	04db      	lsls	r3, r3, #19
   12624:	6062      	str	r2, [r4, #4]
   12626:	d5c4      	bpl.n	125b2 <__sflush_r+0x7a>
   12628:	6520      	str	r0, [r4, #80]	; 0x50
   1262a:	e7c2      	b.n	125b2 <__sflush_r+0x7a>
   1262c:	89a3      	ldrh	r3, [r4, #12]
   1262e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12632:	f04f 30ff 	mov.w	r0, #4294967295
   12636:	81a3      	strh	r3, [r4, #12]
   12638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1263a:	683b      	ldr	r3, [r7, #0]
   1263c:	2b00      	cmp	r3, #0
   1263e:	d098      	beq.n	12572 <__sflush_r+0x3a>
   12640:	2b1d      	cmp	r3, #29
   12642:	d006      	beq.n	12652 <__sflush_r+0x11a>
   12644:	2b16      	cmp	r3, #22
   12646:	d004      	beq.n	12652 <__sflush_r+0x11a>
   12648:	89a3      	ldrh	r3, [r4, #12]
   1264a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1264e:	81a3      	strh	r3, [r4, #12]
   12650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12652:	603e      	str	r6, [r7, #0]
   12654:	e7d5      	b.n	12602 <__sflush_r+0xca>
   12656:	bf00      	nop

00012658 <_fflush_r>:
   12658:	b538      	push	{r3, r4, r5, lr}
   1265a:	460c      	mov	r4, r1
   1265c:	4605      	mov	r5, r0
   1265e:	b108      	cbz	r0, 12664 <_fflush_r+0xc>
   12660:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12662:	b303      	cbz	r3, 126a6 <_fflush_r+0x4e>
   12664:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   12668:	b188      	cbz	r0, 1268e <_fflush_r+0x36>
   1266a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1266c:	07db      	lsls	r3, r3, #31
   1266e:	d401      	bmi.n	12674 <_fflush_r+0x1c>
   12670:	0581      	lsls	r1, r0, #22
   12672:	d50f      	bpl.n	12694 <_fflush_r+0x3c>
   12674:	4628      	mov	r0, r5
   12676:	4621      	mov	r1, r4
   12678:	f7ff ff5e 	bl	12538 <__sflush_r>
   1267c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1267e:	07da      	lsls	r2, r3, #31
   12680:	4605      	mov	r5, r0
   12682:	d402      	bmi.n	1268a <_fflush_r+0x32>
   12684:	89a3      	ldrh	r3, [r4, #12]
   12686:	059b      	lsls	r3, r3, #22
   12688:	d508      	bpl.n	1269c <_fflush_r+0x44>
   1268a:	4628      	mov	r0, r5
   1268c:	bd38      	pop	{r3, r4, r5, pc}
   1268e:	4605      	mov	r5, r0
   12690:	4628      	mov	r0, r5
   12692:	bd38      	pop	{r3, r4, r5, pc}
   12694:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12696:	f7fd fb69 	bl	fd6c <__retarget_lock_acquire_recursive>
   1269a:	e7eb      	b.n	12674 <_fflush_r+0x1c>
   1269c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1269e:	f7fd fb67 	bl	fd70 <__retarget_lock_release_recursive>
   126a2:	4628      	mov	r0, r5
   126a4:	bd38      	pop	{r3, r4, r5, pc}
   126a6:	f7fd f913 	bl	f8d0 <__sinit>
   126aa:	e7db      	b.n	12664 <_fflush_r+0xc>

000126ac <_localeconv_r>:
   126ac:	4800      	ldr	r0, [pc, #0]	; (126b0 <_localeconv_r+0x4>)
   126ae:	4770      	bx	lr
   126b0:	1fff8fc8 	.word	0x1fff8fc8

000126b4 <__libc_fini_array>:
   126b4:	b538      	push	{r3, r4, r5, lr}
   126b6:	4d07      	ldr	r5, [pc, #28]	; (126d4 <__libc_fini_array+0x20>)
   126b8:	4c07      	ldr	r4, [pc, #28]	; (126d8 <__libc_fini_array+0x24>)
   126ba:	1b2c      	subs	r4, r5, r4
   126bc:	10a4      	asrs	r4, r4, #2
   126be:	d005      	beq.n	126cc <__libc_fini_array+0x18>
   126c0:	3c01      	subs	r4, #1
   126c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   126c6:	4798      	blx	r3
   126c8:	2c00      	cmp	r4, #0
   126ca:	d1f9      	bne.n	126c0 <__libc_fini_array+0xc>
   126cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   126d0:	f004 bf76 	b.w	175c0 <__init_array_end>
	...
   126dc:	ffffffff 	.word	0xffffffff

000126e0 <memchr>:
   126e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   126e4:	2a10      	cmp	r2, #16
   126e6:	db2b      	blt.n	12740 <memchr+0x60>
   126e8:	f010 0f07 	tst.w	r0, #7
   126ec:	d008      	beq.n	12700 <memchr+0x20>
   126ee:	f810 3b01 	ldrb.w	r3, [r0], #1
   126f2:	3a01      	subs	r2, #1
   126f4:	428b      	cmp	r3, r1
   126f6:	d02d      	beq.n	12754 <memchr+0x74>
   126f8:	f010 0f07 	tst.w	r0, #7
   126fc:	b342      	cbz	r2, 12750 <memchr+0x70>
   126fe:	d1f6      	bne.n	126ee <memchr+0xe>
   12700:	b4f0      	push	{r4, r5, r6, r7}
   12702:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   12706:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1270a:	f022 0407 	bic.w	r4, r2, #7
   1270e:	f07f 0700 	mvns.w	r7, #0
   12712:	2300      	movs	r3, #0
   12714:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   12718:	3c08      	subs	r4, #8
   1271a:	ea85 0501 	eor.w	r5, r5, r1
   1271e:	ea86 0601 	eor.w	r6, r6, r1
   12722:	fa85 f547 	uadd8	r5, r5, r7
   12726:	faa3 f587 	sel	r5, r3, r7
   1272a:	fa86 f647 	uadd8	r6, r6, r7
   1272e:	faa5 f687 	sel	r6, r5, r7
   12732:	b98e      	cbnz	r6, 12758 <memchr+0x78>
   12734:	d1ee      	bne.n	12714 <memchr+0x34>
   12736:	bcf0      	pop	{r4, r5, r6, r7}
   12738:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1273c:	f002 0207 	and.w	r2, r2, #7
   12740:	b132      	cbz	r2, 12750 <memchr+0x70>
   12742:	f810 3b01 	ldrb.w	r3, [r0], #1
   12746:	3a01      	subs	r2, #1
   12748:	ea83 0301 	eor.w	r3, r3, r1
   1274c:	b113      	cbz	r3, 12754 <memchr+0x74>
   1274e:	d1f8      	bne.n	12742 <memchr+0x62>
   12750:	2000      	movs	r0, #0
   12752:	4770      	bx	lr
   12754:	3801      	subs	r0, #1
   12756:	4770      	bx	lr
   12758:	2d00      	cmp	r5, #0
   1275a:	bf06      	itte	eq
   1275c:	4635      	moveq	r5, r6
   1275e:	3803      	subeq	r0, #3
   12760:	3807      	subne	r0, #7
   12762:	f015 0f01 	tst.w	r5, #1
   12766:	d107      	bne.n	12778 <memchr+0x98>
   12768:	3001      	adds	r0, #1
   1276a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1276e:	bf02      	ittt	eq
   12770:	3001      	addeq	r0, #1
   12772:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   12776:	3001      	addeq	r0, #1
   12778:	bcf0      	pop	{r4, r5, r6, r7}
   1277a:	3801      	subs	r0, #1
   1277c:	4770      	bx	lr
   1277e:	bf00      	nop

00012780 <frexp>:
   12780:	f8df c060 	ldr.w	ip, [pc, #96]	; 127e4 <frexp+0x64>
   12784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12786:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1278a:	2700      	movs	r7, #0
   1278c:	4563      	cmp	r3, ip
   1278e:	4604      	mov	r4, r0
   12790:	460d      	mov	r5, r1
   12792:	4616      	mov	r6, r2
   12794:	6017      	str	r7, [r2, #0]
   12796:	dc22      	bgt.n	127de <frexp+0x5e>
   12798:	4684      	mov	ip, r0
   1279a:	ea53 0c0c 	orrs.w	ip, r3, ip
   1279e:	d01e      	beq.n	127de <frexp+0x5e>
   127a0:	f8df c044 	ldr.w	ip, [pc, #68]	; 127e8 <frexp+0x68>
   127a4:	ea01 0c0c 	and.w	ip, r1, ip
   127a8:	460a      	mov	r2, r1
   127aa:	f1bc 0f00 	cmp.w	ip, #0
   127ae:	d109      	bne.n	127c4 <frexp+0x44>
   127b0:	4b0e      	ldr	r3, [pc, #56]	; (127ec <frexp+0x6c>)
   127b2:	2200      	movs	r2, #0
   127b4:	f002 fd90 	bl	152d8 <__aeabi_dmul>
   127b8:	f06f 0735 	mvn.w	r7, #53	; 0x35
   127bc:	4604      	mov	r4, r0
   127be:	460a      	mov	r2, r1
   127c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   127c4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   127c8:	151b      	asrs	r3, r3, #20
   127ca:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   127ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   127d2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   127d6:	443b      	add	r3, r7
   127d8:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   127dc:	6033      	str	r3, [r6, #0]
   127de:	4620      	mov	r0, r4
   127e0:	4629      	mov	r1, r5
   127e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   127e4:	7fefffff 	.word	0x7fefffff
   127e8:	7ff00000 	.word	0x7ff00000
   127ec:	43500000 	.word	0x43500000

000127f0 <__register_exitproc>:
   127f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127f4:	f8df a074 	ldr.w	sl, [pc, #116]	; 1286c <__register_exitproc+0x7c>
   127f8:	4606      	mov	r6, r0
   127fa:	f8da 0000 	ldr.w	r0, [sl]
   127fe:	4698      	mov	r8, r3
   12800:	460f      	mov	r7, r1
   12802:	4691      	mov	r9, r2
   12804:	f7fd fab2 	bl	fd6c <__retarget_lock_acquire_recursive>
   12808:	4b19      	ldr	r3, [pc, #100]	; (12870 <__register_exitproc+0x80>)
   1280a:	681c      	ldr	r4, [r3, #0]
   1280c:	b324      	cbz	r4, 12858 <__register_exitproc+0x68>
   1280e:	6865      	ldr	r5, [r4, #4]
   12810:	2d1f      	cmp	r5, #31
   12812:	dc24      	bgt.n	1285e <__register_exitproc+0x6e>
   12814:	b95e      	cbnz	r6, 1282e <__register_exitproc+0x3e>
   12816:	1c6b      	adds	r3, r5, #1
   12818:	3502      	adds	r5, #2
   1281a:	f8da 0000 	ldr.w	r0, [sl]
   1281e:	6063      	str	r3, [r4, #4]
   12820:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   12824:	f7fd faa4 	bl	fd70 <__retarget_lock_release_recursive>
   12828:	2000      	movs	r0, #0
   1282a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1282e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   12832:	2301      	movs	r3, #1
   12834:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   12838:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   1283c:	40ab      	lsls	r3, r5
   1283e:	431a      	orrs	r2, r3
   12840:	2e02      	cmp	r6, #2
   12842:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   12846:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1284a:	d1e4      	bne.n	12816 <__register_exitproc+0x26>
   1284c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   12850:	431a      	orrs	r2, r3
   12852:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   12856:	e7de      	b.n	12816 <__register_exitproc+0x26>
   12858:	4c06      	ldr	r4, [pc, #24]	; (12874 <__register_exitproc+0x84>)
   1285a:	601c      	str	r4, [r3, #0]
   1285c:	e7d7      	b.n	1280e <__register_exitproc+0x1e>
   1285e:	f8da 0000 	ldr.w	r0, [sl]
   12862:	f7fd fa85 	bl	fd70 <__retarget_lock_release_recursive>
   12866:	f04f 30ff 	mov.w	r0, #4294967295
   1286a:	e7de      	b.n	1282a <__register_exitproc+0x3a>
   1286c:	1fff916c 	.word	0x1fff916c
   12870:	1fffbdf0 	.word	0x1fffbdf0
   12874:	1fffbdf4 	.word	0x1fffbdf4

00012878 <__assert_func>:
   12878:	b500      	push	{lr}
   1287a:	4c0b      	ldr	r4, [pc, #44]	; (128a8 <__assert_func+0x30>)
   1287c:	6825      	ldr	r5, [r4, #0]
   1287e:	4614      	mov	r4, r2
   12880:	68ee      	ldr	r6, [r5, #12]
   12882:	461a      	mov	r2, r3
   12884:	b085      	sub	sp, #20
   12886:	4603      	mov	r3, r0
   12888:	460d      	mov	r5, r1
   1288a:	b14c      	cbz	r4, 128a0 <__assert_func+0x28>
   1288c:	4907      	ldr	r1, [pc, #28]	; (128ac <__assert_func+0x34>)
   1288e:	9500      	str	r5, [sp, #0]
   12890:	e9cd 1401 	strd	r1, r4, [sp, #4]
   12894:	4630      	mov	r0, r6
   12896:	4906      	ldr	r1, [pc, #24]	; (128b0 <__assert_func+0x38>)
   12898:	f001 f86e 	bl	13978 <fiprintf>
   1289c:	f7f8 fa38 	bl	ad10 <abort>
   128a0:	4904      	ldr	r1, [pc, #16]	; (128b4 <__assert_func+0x3c>)
   128a2:	460c      	mov	r4, r1
   128a4:	e7f3      	b.n	1288e <__assert_func+0x16>
   128a6:	bf00      	nop
   128a8:	1fff9168 	.word	0x1fff9168
   128ac:	000174d4 	.word	0x000174d4
   128b0:	000174e4 	.word	0x000174e4
   128b4:	00015cd4 	.word	0x00015cd4

000128b8 <_calloc_r>:
   128b8:	b538      	push	{r3, r4, r5, lr}
   128ba:	fba1 1402 	umull	r1, r4, r1, r2
   128be:	bb8c      	cbnz	r4, 12924 <_calloc_r+0x6c>
   128c0:	f7fc fac8 	bl	ee54 <_malloc_r>
   128c4:	4605      	mov	r5, r0
   128c6:	b1e0      	cbz	r0, 12902 <_calloc_r+0x4a>
   128c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
   128cc:	f022 0203 	bic.w	r2, r2, #3
   128d0:	3a04      	subs	r2, #4
   128d2:	2a24      	cmp	r2, #36	; 0x24
   128d4:	d817      	bhi.n	12906 <_calloc_r+0x4e>
   128d6:	2a13      	cmp	r2, #19
   128d8:	d91a      	bls.n	12910 <_calloc_r+0x58>
   128da:	2a1b      	cmp	r2, #27
   128dc:	e9c0 4400 	strd	r4, r4, [r0]
   128e0:	d91d      	bls.n	1291e <_calloc_r+0x66>
   128e2:	2a24      	cmp	r2, #36	; 0x24
   128e4:	bf14      	ite	ne
   128e6:	f100 0210 	addne.w	r2, r0, #16
   128ea:	f100 0218 	addeq.w	r2, r0, #24
   128ee:	f04f 0300 	mov.w	r3, #0
   128f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
   128f6:	bf04      	itt	eq
   128f8:	6104      	streq	r4, [r0, #16]
   128fa:	6144      	streq	r4, [r0, #20]
   128fc:	e9c2 3300 	strd	r3, r3, [r2]
   12900:	6093      	str	r3, [r2, #8]
   12902:	4628      	mov	r0, r5
   12904:	bd38      	pop	{r3, r4, r5, pc}
   12906:	4621      	mov	r1, r4
   12908:	f7fd f912 	bl	fb30 <memset>
   1290c:	4628      	mov	r0, r5
   1290e:	bd38      	pop	{r3, r4, r5, pc}
   12910:	4602      	mov	r2, r0
   12912:	2300      	movs	r3, #0
   12914:	e9c2 3300 	strd	r3, r3, [r2]
   12918:	6093      	str	r3, [r2, #8]
   1291a:	4628      	mov	r0, r5
   1291c:	bd38      	pop	{r3, r4, r5, pc}
   1291e:	f100 0208 	add.w	r2, r0, #8
   12922:	e7f6      	b.n	12912 <_calloc_r+0x5a>
   12924:	f7fd f9f4 	bl	fd10 <__errno>
   12928:	230c      	movs	r3, #12
   1292a:	2500      	movs	r5, #0
   1292c:	6003      	str	r3, [r0, #0]
   1292e:	e7e8      	b.n	12902 <_calloc_r+0x4a>

00012930 <quorem>:
   12930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12934:	6903      	ldr	r3, [r0, #16]
   12936:	690c      	ldr	r4, [r1, #16]
   12938:	42a3      	cmp	r3, r4
   1293a:	b083      	sub	sp, #12
   1293c:	f2c0 8088 	blt.w	12a50 <quorem+0x120>
   12940:	3c01      	subs	r4, #1
   12942:	f101 0514 	add.w	r5, r1, #20
   12946:	00a3      	lsls	r3, r4, #2
   12948:	f100 0814 	add.w	r8, r0, #20
   1294c:	9300      	str	r3, [sp, #0]
   1294e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   12952:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   12956:	3301      	adds	r3, #1
   12958:	468a      	mov	sl, r1
   1295a:	429a      	cmp	r2, r3
   1295c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   12960:	4681      	mov	r9, r0
   12962:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   12966:	9101      	str	r1, [sp, #4]
   12968:	fbb2 f6f3 	udiv	r6, r2, r3
   1296c:	d33a      	bcc.n	129e4 <quorem+0xb4>
   1296e:	f04f 0c00 	mov.w	ip, #0
   12972:	46ae      	mov	lr, r5
   12974:	4640      	mov	r0, r8
   12976:	4662      	mov	r2, ip
   12978:	4663      	mov	r3, ip
   1297a:	f85e bb04 	ldr.w	fp, [lr], #4
   1297e:	6801      	ldr	r1, [r0, #0]
   12980:	fa1f fc8b 	uxth.w	ip, fp
   12984:	fb06 330c 	mla	r3, r6, ip, r3
   12988:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1298c:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   12990:	fb06 cc0b 	mla	ip, r6, fp, ip
   12994:	b29b      	uxth	r3, r3
   12996:	1ad3      	subs	r3, r2, r3
   12998:	fa1f f28c 	uxth.w	r2, ip
   1299c:	fa13 f381 	uxtah	r3, r3, r1
   129a0:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
   129a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   129a8:	b29b      	uxth	r3, r3
   129aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   129ae:	4577      	cmp	r7, lr
   129b0:	f840 3b04 	str.w	r3, [r0], #4
   129b4:	ea4f 4222 	mov.w	r2, r2, asr #16
   129b8:	ea4f 431c 	mov.w	r3, ip, lsr #16
   129bc:	d2dd      	bcs.n	1297a <quorem+0x4a>
   129be:	9b00      	ldr	r3, [sp, #0]
   129c0:	f858 3003 	ldr.w	r3, [r8, r3]
   129c4:	b973      	cbnz	r3, 129e4 <quorem+0xb4>
   129c6:	9b01      	ldr	r3, [sp, #4]
   129c8:	3b04      	subs	r3, #4
   129ca:	4598      	cmp	r8, r3
   129cc:	d304      	bcc.n	129d8 <quorem+0xa8>
   129ce:	e007      	b.n	129e0 <quorem+0xb0>
   129d0:	4598      	cmp	r8, r3
   129d2:	f104 34ff 	add.w	r4, r4, #4294967295
   129d6:	d203      	bcs.n	129e0 <quorem+0xb0>
   129d8:	f853 2904 	ldr.w	r2, [r3], #-4
   129dc:	2a00      	cmp	r2, #0
   129de:	d0f7      	beq.n	129d0 <quorem+0xa0>
   129e0:	f8c9 4010 	str.w	r4, [r9, #16]
   129e4:	4651      	mov	r1, sl
   129e6:	4648      	mov	r0, r9
   129e8:	f7fd fe38 	bl	1065c <__mcmp>
   129ec:	2800      	cmp	r0, #0
   129ee:	db2b      	blt.n	12a48 <quorem+0x118>
   129f0:	3601      	adds	r6, #1
   129f2:	4641      	mov	r1, r8
   129f4:	2300      	movs	r3, #0
   129f6:	f855 0b04 	ldr.w	r0, [r5], #4
   129fa:	f8d1 c000 	ldr.w	ip, [r1]
   129fe:	b282      	uxth	r2, r0
   12a00:	1a9a      	subs	r2, r3, r2
   12a02:	0c03      	lsrs	r3, r0, #16
   12a04:	fa12 f28c 	uxtah	r2, r2, ip
   12a08:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   12a0c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   12a10:	b292      	uxth	r2, r2
   12a12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   12a16:	42af      	cmp	r7, r5
   12a18:	f841 2b04 	str.w	r2, [r1], #4
   12a1c:	ea4f 4323 	mov.w	r3, r3, asr #16
   12a20:	d2e9      	bcs.n	129f6 <quorem+0xc6>
   12a22:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   12a26:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   12a2a:	b96a      	cbnz	r2, 12a48 <quorem+0x118>
   12a2c:	3b04      	subs	r3, #4
   12a2e:	4598      	cmp	r8, r3
   12a30:	d304      	bcc.n	12a3c <quorem+0x10c>
   12a32:	e007      	b.n	12a44 <quorem+0x114>
   12a34:	4598      	cmp	r8, r3
   12a36:	f104 34ff 	add.w	r4, r4, #4294967295
   12a3a:	d203      	bcs.n	12a44 <quorem+0x114>
   12a3c:	f853 2904 	ldr.w	r2, [r3], #-4
   12a40:	2a00      	cmp	r2, #0
   12a42:	d0f7      	beq.n	12a34 <quorem+0x104>
   12a44:	f8c9 4010 	str.w	r4, [r9, #16]
   12a48:	4630      	mov	r0, r6
   12a4a:	b003      	add	sp, #12
   12a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a50:	2000      	movs	r0, #0
   12a52:	b003      	add	sp, #12
   12a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012a58 <_dtoa_r>:
   12a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a5c:	6b81      	ldr	r1, [r0, #56]	; 0x38
   12a5e:	b099      	sub	sp, #100	; 0x64
   12a60:	4690      	mov	r8, r2
   12a62:	4699      	mov	r9, r3
   12a64:	e9cd 8904 	strd	r8, r9, [sp, #16]
   12a68:	9d25      	ldr	r5, [sp, #148]	; 0x94
   12a6a:	4604      	mov	r4, r0
   12a6c:	b141      	cbz	r1, 12a80 <_dtoa_r+0x28>
   12a6e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   12a70:	604a      	str	r2, [r1, #4]
   12a72:	2301      	movs	r3, #1
   12a74:	4093      	lsls	r3, r2
   12a76:	608b      	str	r3, [r1, #8]
   12a78:	f7fd fb92 	bl	101a0 <_Bfree>
   12a7c:	2300      	movs	r3, #0
   12a7e:	63a3      	str	r3, [r4, #56]	; 0x38
   12a80:	f1b9 0a00 	subs.w	sl, r9, #0
   12a84:	bfb4      	ite	lt
   12a86:	2301      	movlt	r3, #1
   12a88:	2300      	movge	r3, #0
   12a8a:	602b      	str	r3, [r5, #0]
   12a8c:	4b76      	ldr	r3, [pc, #472]	; (12c68 <_dtoa_r+0x210>)
   12a8e:	bfbc      	itt	lt
   12a90:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   12a94:	f8cd a014 	strlt.w	sl, [sp, #20]
   12a98:	ea33 030a 	bics.w	r3, r3, sl
   12a9c:	f000 80ab 	beq.w	12bf6 <_dtoa_r+0x19e>
   12aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   12aa4:	4610      	mov	r0, r2
   12aa6:	4619      	mov	r1, r3
   12aa8:	2200      	movs	r2, #0
   12aaa:	2300      	movs	r3, #0
   12aac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   12ab0:	f7fb fe30 	bl	e714 <__aeabi_dcmpeq>
   12ab4:	4607      	mov	r7, r0
   12ab6:	b178      	cbz	r0, 12ad8 <_dtoa_r+0x80>
   12ab8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   12aba:	2301      	movs	r3, #1
   12abc:	6013      	str	r3, [r2, #0]
   12abe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   12ac0:	2b00      	cmp	r3, #0
   12ac2:	f000 83ae 	beq.w	13222 <_dtoa_r+0x7ca>
   12ac6:	4b69      	ldr	r3, [pc, #420]	; (12c6c <_dtoa_r+0x214>)
   12ac8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12aca:	6013      	str	r3, [r2, #0]
   12acc:	3b01      	subs	r3, #1
   12ace:	9303      	str	r3, [sp, #12]
   12ad0:	9803      	ldr	r0, [sp, #12]
   12ad2:	b019      	add	sp, #100	; 0x64
   12ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ad8:	ab16      	add	r3, sp, #88	; 0x58
   12ada:	9301      	str	r3, [sp, #4]
   12adc:	ab17      	add	r3, sp, #92	; 0x5c
   12ade:	9300      	str	r3, [sp, #0]
   12ae0:	4620      	mov	r0, r4
   12ae2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   12ae6:	f7fd fe83 	bl	107f0 <__d2b>
   12aea:	ea5f 561a 	movs.w	r6, sl, lsr #20
   12aee:	4605      	mov	r5, r0
   12af0:	f040 8097 	bne.w	12c22 <_dtoa_r+0x1ca>
   12af4:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   12af8:	443e      	add	r6, r7
   12afa:	f206 4332 	addw	r3, r6, #1074	; 0x432
   12afe:	2b20      	cmp	r3, #32
   12b00:	f340 83a6 	ble.w	13250 <_dtoa_r+0x7f8>
   12b04:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   12b08:	fa0a fa03 	lsl.w	sl, sl, r3
   12b0c:	f206 4312 	addw	r3, r6, #1042	; 0x412
   12b10:	fa28 f003 	lsr.w	r0, r8, r3
   12b14:	ea4a 0000 	orr.w	r0, sl, r0
   12b18:	f7fb fd2c 	bl	e574 <__aeabi_ui2d>
   12b1c:	2301      	movs	r3, #1
   12b1e:	3e01      	subs	r6, #1
   12b20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   12b24:	930f      	str	r3, [sp, #60]	; 0x3c
   12b26:	4b52      	ldr	r3, [pc, #328]	; (12c70 <_dtoa_r+0x218>)
   12b28:	2200      	movs	r2, #0
   12b2a:	f7fb fbe5 	bl	e2f8 <__aeabi_dsub>
   12b2e:	a348      	add	r3, pc, #288	; (adr r3, 12c50 <_dtoa_r+0x1f8>)
   12b30:	e9d3 2300 	ldrd	r2, r3, [r3]
   12b34:	f002 fbd0 	bl	152d8 <__aeabi_dmul>
   12b38:	a347      	add	r3, pc, #284	; (adr r3, 12c58 <_dtoa_r+0x200>)
   12b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   12b3e:	f7fb fbdd 	bl	e2fc <__adddf3>
   12b42:	4680      	mov	r8, r0
   12b44:	4630      	mov	r0, r6
   12b46:	4689      	mov	r9, r1
   12b48:	f7fb fd24 	bl	e594 <__aeabi_i2d>
   12b4c:	a344      	add	r3, pc, #272	; (adr r3, 12c60 <_dtoa_r+0x208>)
   12b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   12b52:	f002 fbc1 	bl	152d8 <__aeabi_dmul>
   12b56:	4602      	mov	r2, r0
   12b58:	460b      	mov	r3, r1
   12b5a:	4640      	mov	r0, r8
   12b5c:	4649      	mov	r1, r9
   12b5e:	f7fb fbcd 	bl	e2fc <__adddf3>
   12b62:	4680      	mov	r8, r0
   12b64:	4689      	mov	r9, r1
   12b66:	f002 fdc9 	bl	156fc <__aeabi_d2iz>
   12b6a:	2200      	movs	r2, #0
   12b6c:	4683      	mov	fp, r0
   12b6e:	2300      	movs	r3, #0
   12b70:	4640      	mov	r0, r8
   12b72:	4649      	mov	r1, r9
   12b74:	f7fb fdd8 	bl	e728 <__aeabi_dcmplt>
   12b78:	2800      	cmp	r0, #0
   12b7a:	f040 8345 	bne.w	13208 <_dtoa_r+0x7b0>
   12b7e:	f1bb 0f16 	cmp.w	fp, #22
   12b82:	f200 8334 	bhi.w	131ee <_dtoa_r+0x796>
   12b86:	4b3b      	ldr	r3, [pc, #236]	; (12c74 <_dtoa_r+0x21c>)
   12b88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   12b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12b90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   12b94:	f7fb fdc8 	bl	e728 <__aeabi_dcmplt>
   12b98:	2800      	cmp	r0, #0
   12b9a:	d071      	beq.n	12c80 <_dtoa_r+0x228>
   12b9c:	2300      	movs	r3, #0
   12b9e:	1bbf      	subs	r7, r7, r6
   12ba0:	930e      	str	r3, [sp, #56]	; 0x38
   12ba2:	1e7b      	subs	r3, r7, #1
   12ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
   12ba8:	9306      	str	r3, [sp, #24]
   12baa:	f100 8327 	bmi.w	131fc <_dtoa_r+0x7a4>
   12bae:	2300      	movs	r3, #0
   12bb0:	9309      	str	r3, [sp, #36]	; 0x24
   12bb2:	f1bb 0f00 	cmp.w	fp, #0
   12bb6:	da6a      	bge.n	12c8e <_dtoa_r+0x236>
   12bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12bba:	f8cd b01c 	str.w	fp, [sp, #28]
   12bbe:	eba3 030b 	sub.w	r3, r3, fp
   12bc2:	9309      	str	r3, [sp, #36]	; 0x24
   12bc4:	f1cb 0300 	rsb	r3, fp, #0
   12bc8:	930d      	str	r3, [sp, #52]	; 0x34
   12bca:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12bcc:	2b09      	cmp	r3, #9
   12bce:	f04f 0b00 	mov.w	fp, #0
   12bd2:	d865      	bhi.n	12ca0 <_dtoa_r+0x248>
   12bd4:	2b05      	cmp	r3, #5
   12bd6:	f340 8339 	ble.w	1324c <_dtoa_r+0x7f4>
   12bda:	3b04      	subs	r3, #4
   12bdc:	9322      	str	r3, [sp, #136]	; 0x88
   12bde:	2600      	movs	r6, #0
   12be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12be2:	3b02      	subs	r3, #2
   12be4:	2b03      	cmp	r3, #3
   12be6:	f200 8667 	bhi.w	138b8 <_dtoa_r+0xe60>
   12bea:	e8df f013 	tbh	[pc, r3, lsl #1]
   12bee:	044e      	.short	0x044e
   12bf0:	0442044b 	.word	0x0442044b
   12bf4:	0425      	.short	0x0425
   12bf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   12bf8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   12bfc:	f242 730f 	movw	r3, #9999	; 0x270f
   12c00:	ea5a 0a08 	orrs.w	sl, sl, r8
   12c04:	6013      	str	r3, [r2, #0]
   12c06:	d11a      	bne.n	12c3e <_dtoa_r+0x1e6>
   12c08:	9b26      	ldr	r3, [sp, #152]	; 0x98
   12c0a:	2b00      	cmp	r3, #0
   12c0c:	f000 8663 	beq.w	138d6 <_dtoa_r+0xe7e>
   12c10:	4b19      	ldr	r3, [pc, #100]	; (12c78 <_dtoa_r+0x220>)
   12c12:	9303      	str	r3, [sp, #12]
   12c14:	3308      	adds	r3, #8
   12c16:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12c18:	9803      	ldr	r0, [sp, #12]
   12c1a:	6013      	str	r3, [r2, #0]
   12c1c:	b019      	add	sp, #100	; 0x64
   12c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c22:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   12c26:	f3c2 0313 	ubfx	r3, r2, #0, #20
   12c2a:	4608      	mov	r0, r1
   12c2c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   12c30:	970f      	str	r7, [sp, #60]	; 0x3c
   12c32:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   12c36:	9f16      	ldr	r7, [sp, #88]	; 0x58
   12c38:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   12c3c:	e773      	b.n	12b26 <_dtoa_r+0xce>
   12c3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   12c40:	2b00      	cmp	r3, #0
   12c42:	f040 83db 	bne.w	133fc <_dtoa_r+0x9a4>
   12c46:	4b0d      	ldr	r3, [pc, #52]	; (12c7c <_dtoa_r+0x224>)
   12c48:	9303      	str	r3, [sp, #12]
   12c4a:	e741      	b.n	12ad0 <_dtoa_r+0x78>
   12c4c:	f3af 8000 	nop.w
   12c50:	636f4361 	.word	0x636f4361
   12c54:	3fd287a7 	.word	0x3fd287a7
   12c58:	8b60c8b3 	.word	0x8b60c8b3
   12c5c:	3fc68a28 	.word	0x3fc68a28
   12c60:	509f79fb 	.word	0x509f79fb
   12c64:	3fd34413 	.word	0x3fd34413
   12c68:	7ff00000 	.word	0x7ff00000
   12c6c:	00015bd1 	.word	0x00015bd1
   12c70:	3ff80000 	.word	0x3ff80000
   12c74:	000173a8 	.word	0x000173a8
   12c78:	00017514 	.word	0x00017514
   12c7c:	00017520 	.word	0x00017520
   12c80:	1bbf      	subs	r7, r7, r6
   12c82:	1e7b      	subs	r3, r7, #1
   12c84:	9306      	str	r3, [sp, #24]
   12c86:	f100 847e 	bmi.w	13586 <_dtoa_r+0xb2e>
   12c8a:	900e      	str	r0, [sp, #56]	; 0x38
   12c8c:	9009      	str	r0, [sp, #36]	; 0x24
   12c8e:	9b06      	ldr	r3, [sp, #24]
   12c90:	445b      	add	r3, fp
   12c92:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   12c96:	2300      	movs	r3, #0
   12c98:	930d      	str	r3, [sp, #52]	; 0x34
   12c9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12c9c:	2b09      	cmp	r3, #9
   12c9e:	d999      	bls.n	12bd4 <_dtoa_r+0x17c>
   12ca0:	2300      	movs	r3, #0
   12ca2:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
   12ca6:	2601      	movs	r6, #1
   12ca8:	f04f 33ff 	mov.w	r3, #4294967295
   12cac:	960c      	str	r6, [sp, #48]	; 0x30
   12cae:	9308      	str	r3, [sp, #32]
   12cb0:	9b08      	ldr	r3, [sp, #32]
   12cb2:	9312      	str	r3, [sp, #72]	; 0x48
   12cb4:	2100      	movs	r1, #0
   12cb6:	63e1      	str	r1, [r4, #60]	; 0x3c
   12cb8:	4620      	mov	r0, r4
   12cba:	f7fd fa4b 	bl	10154 <_Balloc>
   12cbe:	9003      	str	r0, [sp, #12]
   12cc0:	2800      	cmp	r0, #0
   12cc2:	f000 8601 	beq.w	138c8 <_dtoa_r+0xe70>
   12cc6:	9b03      	ldr	r3, [sp, #12]
   12cc8:	63a3      	str	r3, [r4, #56]	; 0x38
   12cca:	9b08      	ldr	r3, [sp, #32]
   12ccc:	2b0e      	cmp	r3, #14
   12cce:	f200 8113 	bhi.w	12ef8 <_dtoa_r+0x4a0>
   12cd2:	2e00      	cmp	r6, #0
   12cd4:	f000 8110 	beq.w	12ef8 <_dtoa_r+0x4a0>
   12cd8:	9907      	ldr	r1, [sp, #28]
   12cda:	2900      	cmp	r1, #0
   12cdc:	f340 8455 	ble.w	1358a <_dtoa_r+0xb32>
   12ce0:	4bae      	ldr	r3, [pc, #696]	; (12f9c <_dtoa_r+0x544>)
   12ce2:	f001 020f 	and.w	r2, r1, #15
   12ce6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12cea:	ea4f 1821 	mov.w	r8, r1, asr #4
   12cee:	05c9      	lsls	r1, r1, #23
   12cf0:	e9d3 6700 	ldrd	r6, r7, [r3]
   12cf4:	f140 8411 	bpl.w	1351a <_dtoa_r+0xac2>
   12cf8:	4ba9      	ldr	r3, [pc, #676]	; (12fa0 <_dtoa_r+0x548>)
   12cfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   12cfe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   12d02:	f002 fc13 	bl	1552c <__aeabi_ddiv>
   12d06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   12d0a:	f008 080f 	and.w	r8, r8, #15
   12d0e:	f04f 0a03 	mov.w	sl, #3
   12d12:	f1b8 0f00 	cmp.w	r8, #0
   12d16:	d013      	beq.n	12d40 <_dtoa_r+0x2e8>
   12d18:	f8df 9284 	ldr.w	r9, [pc, #644]	; 12fa0 <_dtoa_r+0x548>
   12d1c:	f018 0f01 	tst.w	r8, #1
   12d20:	d009      	beq.n	12d36 <_dtoa_r+0x2de>
   12d22:	4630      	mov	r0, r6
   12d24:	4639      	mov	r1, r7
   12d26:	e9d9 2300 	ldrd	r2, r3, [r9]
   12d2a:	f002 fad5 	bl	152d8 <__aeabi_dmul>
   12d2e:	f10a 0a01 	add.w	sl, sl, #1
   12d32:	4606      	mov	r6, r0
   12d34:	460f      	mov	r7, r1
   12d36:	ea5f 0868 	movs.w	r8, r8, asr #1
   12d3a:	f109 0908 	add.w	r9, r9, #8
   12d3e:	d1ed      	bne.n	12d1c <_dtoa_r+0x2c4>
   12d40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   12d44:	4632      	mov	r2, r6
   12d46:	463b      	mov	r3, r7
   12d48:	f002 fbf0 	bl	1552c <__aeabi_ddiv>
   12d4c:	4680      	mov	r8, r0
   12d4e:	4689      	mov	r9, r1
   12d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12d52:	b143      	cbz	r3, 12d66 <_dtoa_r+0x30e>
   12d54:	4b93      	ldr	r3, [pc, #588]	; (12fa4 <_dtoa_r+0x54c>)
   12d56:	2200      	movs	r2, #0
   12d58:	4640      	mov	r0, r8
   12d5a:	4649      	mov	r1, r9
   12d5c:	f7fb fce4 	bl	e728 <__aeabi_dcmplt>
   12d60:	2800      	cmp	r0, #0
   12d62:	f040 852a 	bne.w	137ba <_dtoa_r+0xd62>
   12d66:	4650      	mov	r0, sl
   12d68:	f7fb fc14 	bl	e594 <__aeabi_i2d>
   12d6c:	4642      	mov	r2, r8
   12d6e:	464b      	mov	r3, r9
   12d70:	f002 fab2 	bl	152d8 <__aeabi_dmul>
   12d74:	4b8c      	ldr	r3, [pc, #560]	; (12fa8 <_dtoa_r+0x550>)
   12d76:	2200      	movs	r2, #0
   12d78:	f7fb fac0 	bl	e2fc <__adddf3>
   12d7c:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   12d80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   12d84:	9311      	str	r3, [sp, #68]	; 0x44
   12d86:	9b08      	ldr	r3, [sp, #32]
   12d88:	2b00      	cmp	r3, #0
   12d8a:	f000 8099 	beq.w	12ec0 <_dtoa_r+0x468>
   12d8e:	9b07      	ldr	r3, [sp, #28]
   12d90:	9314      	str	r3, [sp, #80]	; 0x50
   12d92:	9b08      	ldr	r3, [sp, #32]
   12d94:	9313      	str	r3, [sp, #76]	; 0x4c
   12d96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12d98:	2b00      	cmp	r3, #0
   12d9a:	f000 84a5 	beq.w	136e8 <_dtoa_r+0xc90>
   12d9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12da0:	4b7e      	ldr	r3, [pc, #504]	; (12f9c <_dtoa_r+0x544>)
   12da2:	4982      	ldr	r1, [pc, #520]	; (12fac <_dtoa_r+0x554>)
   12da4:	9e03      	ldr	r6, [sp, #12]
   12da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12daa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   12dae:	2000      	movs	r0, #0
   12db0:	f002 fbbc 	bl	1552c <__aeabi_ddiv>
   12db4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   12db8:	f7fb fa9e 	bl	e2f8 <__aeabi_dsub>
   12dbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   12dc0:	4649      	mov	r1, r9
   12dc2:	4640      	mov	r0, r8
   12dc4:	f002 fc9a 	bl	156fc <__aeabi_d2iz>
   12dc8:	4607      	mov	r7, r0
   12dca:	f7fb fbe3 	bl	e594 <__aeabi_i2d>
   12dce:	4602      	mov	r2, r0
   12dd0:	460b      	mov	r3, r1
   12dd2:	4640      	mov	r0, r8
   12dd4:	4649      	mov	r1, r9
   12dd6:	f7fb fa8f 	bl	e2f8 <__aeabi_dsub>
   12dda:	3730      	adds	r7, #48	; 0x30
   12ddc:	4680      	mov	r8, r0
   12dde:	4689      	mov	r9, r1
   12de0:	4602      	mov	r2, r0
   12de2:	460b      	mov	r3, r1
   12de4:	f806 7b01 	strb.w	r7, [r6], #1
   12de8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   12dec:	f7fb fcba 	bl	e764 <__aeabi_dcmpgt>
   12df0:	2800      	cmp	r0, #0
   12df2:	f040 8527 	bne.w	13844 <_dtoa_r+0xdec>
   12df6:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   12dfa:	2700      	movs	r7, #0
   12dfc:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   12e00:	9510      	str	r5, [sp, #64]	; 0x40
   12e02:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   12e04:	9413      	str	r4, [sp, #76]	; 0x4c
   12e06:	e02a      	b.n	12e5e <_dtoa_r+0x406>
   12e08:	3701      	adds	r7, #1
   12e0a:	42af      	cmp	r7, r5
   12e0c:	f280 852a 	bge.w	13864 <_dtoa_r+0xe0c>
   12e10:	4b67      	ldr	r3, [pc, #412]	; (12fb0 <_dtoa_r+0x558>)
   12e12:	4650      	mov	r0, sl
   12e14:	4659      	mov	r1, fp
   12e16:	2200      	movs	r2, #0
   12e18:	f002 fa5e 	bl	152d8 <__aeabi_dmul>
   12e1c:	4b64      	ldr	r3, [pc, #400]	; (12fb0 <_dtoa_r+0x558>)
   12e1e:	2200      	movs	r2, #0
   12e20:	4682      	mov	sl, r0
   12e22:	468b      	mov	fp, r1
   12e24:	4640      	mov	r0, r8
   12e26:	4649      	mov	r1, r9
   12e28:	f002 fa56 	bl	152d8 <__aeabi_dmul>
   12e2c:	4689      	mov	r9, r1
   12e2e:	4680      	mov	r8, r0
   12e30:	f002 fc64 	bl	156fc <__aeabi_d2iz>
   12e34:	4604      	mov	r4, r0
   12e36:	f7fb fbad 	bl	e594 <__aeabi_i2d>
   12e3a:	4602      	mov	r2, r0
   12e3c:	460b      	mov	r3, r1
   12e3e:	4640      	mov	r0, r8
   12e40:	4649      	mov	r1, r9
   12e42:	f7fb fa59 	bl	e2f8 <__aeabi_dsub>
   12e46:	3430      	adds	r4, #48	; 0x30
   12e48:	f806 4b01 	strb.w	r4, [r6], #1
   12e4c:	4652      	mov	r2, sl
   12e4e:	465b      	mov	r3, fp
   12e50:	4680      	mov	r8, r0
   12e52:	4689      	mov	r9, r1
   12e54:	f7fb fc68 	bl	e728 <__aeabi_dcmplt>
   12e58:	2800      	cmp	r0, #0
   12e5a:	f040 84f1 	bne.w	13840 <_dtoa_r+0xde8>
   12e5e:	4642      	mov	r2, r8
   12e60:	464b      	mov	r3, r9
   12e62:	4950      	ldr	r1, [pc, #320]	; (12fa4 <_dtoa_r+0x54c>)
   12e64:	2000      	movs	r0, #0
   12e66:	f7fb fa47 	bl	e2f8 <__aeabi_dsub>
   12e6a:	4652      	mov	r2, sl
   12e6c:	465b      	mov	r3, fp
   12e6e:	f7fb fc5b 	bl	e728 <__aeabi_dcmplt>
   12e72:	2800      	cmp	r0, #0
   12e74:	d0c8      	beq.n	12e08 <_dtoa_r+0x3b0>
   12e76:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   12e7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   12e7c:	9a03      	ldr	r2, [sp, #12]
   12e7e:	9307      	str	r3, [sp, #28]
   12e80:	e002      	b.n	12e88 <_dtoa_r+0x430>
   12e82:	42b2      	cmp	r2, r6
   12e84:	f000 84c6 	beq.w	13814 <_dtoa_r+0xdbc>
   12e88:	46b1      	mov	r9, r6
   12e8a:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   12e8e:	2b39      	cmp	r3, #57	; 0x39
   12e90:	d0f7      	beq.n	12e82 <_dtoa_r+0x42a>
   12e92:	3301      	adds	r3, #1
   12e94:	b2db      	uxtb	r3, r3
   12e96:	7033      	strb	r3, [r6, #0]
   12e98:	9b07      	ldr	r3, [sp, #28]
   12e9a:	3301      	adds	r3, #1
   12e9c:	9307      	str	r3, [sp, #28]
   12e9e:	e192      	b.n	131c6 <_dtoa_r+0x76e>
   12ea0:	4650      	mov	r0, sl
   12ea2:	f7fb fb77 	bl	e594 <__aeabi_i2d>
   12ea6:	4642      	mov	r2, r8
   12ea8:	464b      	mov	r3, r9
   12eaa:	f002 fa15 	bl	152d8 <__aeabi_dmul>
   12eae:	4b3e      	ldr	r3, [pc, #248]	; (12fa8 <_dtoa_r+0x550>)
   12eb0:	2200      	movs	r2, #0
   12eb2:	f7fb fa23 	bl	e2fc <__adddf3>
   12eb6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   12eba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   12ebe:	9311      	str	r3, [sp, #68]	; 0x44
   12ec0:	4b3c      	ldr	r3, [pc, #240]	; (12fb4 <_dtoa_r+0x55c>)
   12ec2:	4640      	mov	r0, r8
   12ec4:	4649      	mov	r1, r9
   12ec6:	2200      	movs	r2, #0
   12ec8:	f7fb fa16 	bl	e2f8 <__aeabi_dsub>
   12ecc:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   12ed0:	4642      	mov	r2, r8
   12ed2:	464b      	mov	r3, r9
   12ed4:	4606      	mov	r6, r0
   12ed6:	460f      	mov	r7, r1
   12ed8:	f7fb fc44 	bl	e764 <__aeabi_dcmpgt>
   12edc:	4682      	mov	sl, r0
   12ede:	2800      	cmp	r0, #0
   12ee0:	f040 84a8 	bne.w	13834 <_dtoa_r+0xddc>
   12ee4:	4642      	mov	r2, r8
   12ee6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   12eea:	4630      	mov	r0, r6
   12eec:	4639      	mov	r1, r7
   12eee:	f7fb fc1b 	bl	e728 <__aeabi_dcmplt>
   12ef2:	2800      	cmp	r0, #0
   12ef4:	f040 8345 	bne.w	13582 <_dtoa_r+0xb2a>
   12ef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12efa:	2b00      	cmp	r3, #0
   12efc:	f2c0 808c 	blt.w	13018 <_dtoa_r+0x5c0>
   12f00:	9a07      	ldr	r2, [sp, #28]
   12f02:	2a0e      	cmp	r2, #14
   12f04:	f300 8088 	bgt.w	13018 <_dtoa_r+0x5c0>
   12f08:	4b24      	ldr	r3, [pc, #144]	; (12f9c <_dtoa_r+0x544>)
   12f0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12f0e:	e9d3 ab00 	ldrd	sl, fp, [r3]
   12f12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12f14:	2b00      	cmp	r3, #0
   12f16:	da1b      	bge.n	12f50 <_dtoa_r+0x4f8>
   12f18:	9b08      	ldr	r3, [sp, #32]
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	dc18      	bgt.n	12f50 <_dtoa_r+0x4f8>
   12f1e:	f040 832e 	bne.w	1357e <_dtoa_r+0xb26>
   12f22:	4b24      	ldr	r3, [pc, #144]	; (12fb4 <_dtoa_r+0x55c>)
   12f24:	4650      	mov	r0, sl
   12f26:	2200      	movs	r2, #0
   12f28:	4659      	mov	r1, fp
   12f2a:	f002 f9d5 	bl	152d8 <__aeabi_dmul>
   12f2e:	4602      	mov	r2, r0
   12f30:	460b      	mov	r3, r1
   12f32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   12f36:	f7fb fc01 	bl	e73c <__aeabi_dcmple>
   12f3a:	f8dd a020 	ldr.w	sl, [sp, #32]
   12f3e:	4656      	mov	r6, sl
   12f40:	2800      	cmp	r0, #0
   12f42:	f000 82b9 	beq.w	134b8 <_dtoa_r+0xa60>
   12f46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12f48:	f8dd 800c 	ldr.w	r8, [sp, #12]
   12f4c:	43df      	mvns	r7, r3
   12f4e:	e2bb      	b.n	134c8 <_dtoa_r+0xa70>
   12f50:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   12f54:	4652      	mov	r2, sl
   12f56:	465b      	mov	r3, fp
   12f58:	4638      	mov	r0, r7
   12f5a:	4641      	mov	r1, r8
   12f5c:	f002 fae6 	bl	1552c <__aeabi_ddiv>
   12f60:	f002 fbcc 	bl	156fc <__aeabi_d2iz>
   12f64:	4681      	mov	r9, r0
   12f66:	9009      	str	r0, [sp, #36]	; 0x24
   12f68:	f7fb fb14 	bl	e594 <__aeabi_i2d>
   12f6c:	4652      	mov	r2, sl
   12f6e:	465b      	mov	r3, fp
   12f70:	f002 f9b2 	bl	152d8 <__aeabi_dmul>
   12f74:	9e03      	ldr	r6, [sp, #12]
   12f76:	460b      	mov	r3, r1
   12f78:	4602      	mov	r2, r0
   12f7a:	4641      	mov	r1, r8
   12f7c:	4638      	mov	r0, r7
   12f7e:	f7fb f9bb 	bl	e2f8 <__aeabi_dsub>
   12f82:	f109 0330 	add.w	r3, r9, #48	; 0x30
   12f86:	f806 3b01 	strb.w	r3, [r6], #1
   12f8a:	9b08      	ldr	r3, [sp, #32]
   12f8c:	2b01      	cmp	r3, #1
   12f8e:	f000 835c 	beq.w	1364a <_dtoa_r+0xbf2>
   12f92:	9406      	str	r4, [sp, #24]
   12f94:	2701      	movs	r7, #1
   12f96:	9504      	str	r5, [sp, #16]
   12f98:	461c      	mov	r4, r3
   12f9a:	e02a      	b.n	12ff2 <_dtoa_r+0x59a>
   12f9c:	000173a8 	.word	0x000173a8
   12fa0:	00017380 	.word	0x00017380
   12fa4:	3ff00000 	.word	0x3ff00000
   12fa8:	401c0000 	.word	0x401c0000
   12fac:	3fe00000 	.word	0x3fe00000
   12fb0:	40240000 	.word	0x40240000
   12fb4:	40140000 	.word	0x40140000
   12fb8:	4652      	mov	r2, sl
   12fba:	465b      	mov	r3, fp
   12fbc:	4640      	mov	r0, r8
   12fbe:	4649      	mov	r1, r9
   12fc0:	f002 fab4 	bl	1552c <__aeabi_ddiv>
   12fc4:	f002 fb9a 	bl	156fc <__aeabi_d2iz>
   12fc8:	4605      	mov	r5, r0
   12fca:	f7fb fae3 	bl	e594 <__aeabi_i2d>
   12fce:	4652      	mov	r2, sl
   12fd0:	465b      	mov	r3, fp
   12fd2:	f002 f981 	bl	152d8 <__aeabi_dmul>
   12fd6:	3701      	adds	r7, #1
   12fd8:	460b      	mov	r3, r1
   12fda:	4602      	mov	r2, r0
   12fdc:	4649      	mov	r1, r9
   12fde:	4640      	mov	r0, r8
   12fe0:	f7fb f98a 	bl	e2f8 <__aeabi_dsub>
   12fe4:	f105 0330 	add.w	r3, r5, #48	; 0x30
   12fe8:	42a7      	cmp	r7, r4
   12fea:	f806 3b01 	strb.w	r3, [r6], #1
   12fee:	f000 8329 	beq.w	13644 <_dtoa_r+0xbec>
   12ff2:	4ba5      	ldr	r3, [pc, #660]	; (13288 <_dtoa_r+0x830>)
   12ff4:	2200      	movs	r2, #0
   12ff6:	f002 f96f 	bl	152d8 <__aeabi_dmul>
   12ffa:	2200      	movs	r2, #0
   12ffc:	2300      	movs	r3, #0
   12ffe:	4680      	mov	r8, r0
   13000:	4689      	mov	r9, r1
   13002:	f7fb fb87 	bl	e714 <__aeabi_dcmpeq>
   13006:	2800      	cmp	r0, #0
   13008:	d0d6      	beq.n	12fb8 <_dtoa_r+0x560>
   1300a:	9d04      	ldr	r5, [sp, #16]
   1300c:	9c06      	ldr	r4, [sp, #24]
   1300e:	9b07      	ldr	r3, [sp, #28]
   13010:	3301      	adds	r3, #1
   13012:	9307      	str	r3, [sp, #28]
   13014:	46b1      	mov	r9, r6
   13016:	e0d6      	b.n	131c6 <_dtoa_r+0x76e>
   13018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1301a:	2a00      	cmp	r2, #0
   1301c:	f000 8107 	beq.w	1322e <_dtoa_r+0x7d6>
   13020:	9a22      	ldr	r2, [sp, #136]	; 0x88
   13022:	2a01      	cmp	r2, #1
   13024:	f340 8294 	ble.w	13550 <_dtoa_r+0xaf8>
   13028:	9b08      	ldr	r3, [sp, #32]
   1302a:	f103 38ff 	add.w	r8, r3, #4294967295
   1302e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13030:	4543      	cmp	r3, r8
   13032:	f280 825e 	bge.w	134f2 <_dtoa_r+0xa9a>
   13036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13038:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   1303c:	eba8 0303 	sub.w	r3, r8, r3
   13040:	449b      	add	fp, r3
   13042:	f04f 0800 	mov.w	r8, #0
   13046:	9b08      	ldr	r3, [sp, #32]
   13048:	2b00      	cmp	r3, #0
   1304a:	f2c0 832f 	blt.w	136ac <_dtoa_r+0xc54>
   1304e:	9a06      	ldr	r2, [sp, #24]
   13050:	441a      	add	r2, r3
   13052:	9206      	str	r2, [sp, #24]
   13054:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13056:	4617      	mov	r7, r2
   13058:	441a      	add	r2, r3
   1305a:	9209      	str	r2, [sp, #36]	; 0x24
   1305c:	2101      	movs	r1, #1
   1305e:	4620      	mov	r0, r4
   13060:	f7fd f948 	bl	102f4 <__i2b>
   13064:	4606      	mov	r6, r0
   13066:	b167      	cbz	r7, 13082 <_dtoa_r+0x62a>
   13068:	9906      	ldr	r1, [sp, #24]
   1306a:	2900      	cmp	r1, #0
   1306c:	460b      	mov	r3, r1
   1306e:	dd08      	ble.n	13082 <_dtoa_r+0x62a>
   13070:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13072:	42b9      	cmp	r1, r7
   13074:	bfa8      	it	ge
   13076:	463b      	movge	r3, r7
   13078:	1ad2      	subs	r2, r2, r3
   1307a:	1aff      	subs	r7, r7, r3
   1307c:	1acb      	subs	r3, r1, r3
   1307e:	9209      	str	r2, [sp, #36]	; 0x24
   13080:	9306      	str	r3, [sp, #24]
   13082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13084:	b163      	cbz	r3, 130a0 <_dtoa_r+0x648>
   13086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13088:	2b00      	cmp	r3, #0
   1308a:	f000 82b6 	beq.w	135fa <_dtoa_r+0xba2>
   1308e:	f1b8 0f00 	cmp.w	r8, #0
   13092:	f300 8231 	bgt.w	134f8 <_dtoa_r+0xaa0>
   13096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13098:	ebb3 0208 	subs.w	r2, r3, r8
   1309c:	f040 8316 	bne.w	136cc <_dtoa_r+0xc74>
   130a0:	2101      	movs	r1, #1
   130a2:	4620      	mov	r0, r4
   130a4:	f7fd f926 	bl	102f4 <__i2b>
   130a8:	f1bb 0f00 	cmp.w	fp, #0
   130ac:	4682      	mov	sl, r0
   130ae:	f300 80d4 	bgt.w	1325a <_dtoa_r+0x802>
   130b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   130b4:	2b01      	cmp	r3, #1
   130b6:	f340 81a7 	ble.w	13408 <_dtoa_r+0x9b0>
   130ba:	f04f 0900 	mov.w	r9, #0
   130be:	2001      	movs	r0, #1
   130c0:	f1bb 0f00 	cmp.w	fp, #0
   130c4:	f040 80d5 	bne.w	13272 <_dtoa_r+0x81a>
   130c8:	9b06      	ldr	r3, [sp, #24]
   130ca:	4418      	add	r0, r3
   130cc:	f010 001f 	ands.w	r0, r0, #31
   130d0:	f000 8198 	beq.w	13404 <_dtoa_r+0x9ac>
   130d4:	f1c0 0320 	rsb	r3, r0, #32
   130d8:	2b04      	cmp	r3, #4
   130da:	f300 80ad 	bgt.w	13238 <_dtoa_r+0x7e0>
   130de:	f040 8224 	bne.w	1352a <_dtoa_r+0xad2>
   130e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   130e4:	2b00      	cmp	r3, #0
   130e6:	dd05      	ble.n	130f4 <_dtoa_r+0x69c>
   130e8:	4629      	mov	r1, r5
   130ea:	461a      	mov	r2, r3
   130ec:	4620      	mov	r0, r4
   130ee:	f7fd fa3d 	bl	1056c <__lshift>
   130f2:	4605      	mov	r5, r0
   130f4:	9b06      	ldr	r3, [sp, #24]
   130f6:	2b00      	cmp	r3, #0
   130f8:	dd05      	ble.n	13106 <_dtoa_r+0x6ae>
   130fa:	4651      	mov	r1, sl
   130fc:	461a      	mov	r2, r3
   130fe:	4620      	mov	r0, r4
   13100:	f7fd fa34 	bl	1056c <__lshift>
   13104:	4682      	mov	sl, r0
   13106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13108:	2b00      	cmp	r3, #0
   1310a:	f040 815c 	bne.w	133c6 <_dtoa_r+0x96e>
   1310e:	9b08      	ldr	r3, [sp, #32]
   13110:	2b00      	cmp	r3, #0
   13112:	f340 8143 	ble.w	1339c <_dtoa_r+0x944>
   13116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13118:	2b00      	cmp	r3, #0
   1311a:	f040 80c6 	bne.w	132aa <_dtoa_r+0x852>
   1311e:	9b07      	ldr	r3, [sp, #28]
   13120:	3301      	adds	r3, #1
   13122:	9307      	str	r3, [sp, #28]
   13124:	f8dd 800c 	ldr.w	r8, [sp, #12]
   13128:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1312c:	2701      	movs	r7, #1
   1312e:	e007      	b.n	13140 <_dtoa_r+0x6e8>
   13130:	4629      	mov	r1, r5
   13132:	2300      	movs	r3, #0
   13134:	220a      	movs	r2, #10
   13136:	4620      	mov	r0, r4
   13138:	f7fd f83c 	bl	101b4 <__multadd>
   1313c:	3701      	adds	r7, #1
   1313e:	4605      	mov	r5, r0
   13140:	4651      	mov	r1, sl
   13142:	4628      	mov	r0, r5
   13144:	f7ff fbf4 	bl	12930 <quorem>
   13148:	45b9      	cmp	r9, r7
   1314a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1314e:	f808 3b01 	strb.w	r3, [r8], #1
   13152:	dced      	bgt.n	13130 <_dtoa_r+0x6d8>
   13154:	9a08      	ldr	r2, [sp, #32]
   13156:	2a00      	cmp	r2, #0
   13158:	bfc8      	it	gt
   1315a:	4693      	movgt	fp, r2
   1315c:	9a03      	ldr	r2, [sp, #12]
   1315e:	bfd8      	it	le
   13160:	f04f 0b01 	movle.w	fp, #1
   13164:	4493      	add	fp, r2
   13166:	2700      	movs	r7, #0
   13168:	4629      	mov	r1, r5
   1316a:	2201      	movs	r2, #1
   1316c:	4620      	mov	r0, r4
   1316e:	9304      	str	r3, [sp, #16]
   13170:	f7fd f9fc 	bl	1056c <__lshift>
   13174:	4651      	mov	r1, sl
   13176:	4605      	mov	r5, r0
   13178:	f7fd fa70 	bl	1065c <__mcmp>
   1317c:	2800      	cmp	r0, #0
   1317e:	f340 81dc 	ble.w	1353a <_dtoa_r+0xae2>
   13182:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   13186:	9a03      	ldr	r2, [sp, #12]
   13188:	f10b 3bff 	add.w	fp, fp, #4294967295
   1318c:	e004      	b.n	13198 <_dtoa_r+0x740>
   1318e:	455a      	cmp	r2, fp
   13190:	f000 81ee 	beq.w	13570 <_dtoa_r+0xb18>
   13194:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   13198:	2b39      	cmp	r3, #57	; 0x39
   1319a:	f10b 0901 	add.w	r9, fp, #1
   1319e:	d0f6      	beq.n	1318e <_dtoa_r+0x736>
   131a0:	3301      	adds	r3, #1
   131a2:	f88b 3000 	strb.w	r3, [fp]
   131a6:	4651      	mov	r1, sl
   131a8:	4620      	mov	r0, r4
   131aa:	f7fc fff9 	bl	101a0 <_Bfree>
   131ae:	b156      	cbz	r6, 131c6 <_dtoa_r+0x76e>
   131b0:	b12f      	cbz	r7, 131be <_dtoa_r+0x766>
   131b2:	42b7      	cmp	r7, r6
   131b4:	d003      	beq.n	131be <_dtoa_r+0x766>
   131b6:	4639      	mov	r1, r7
   131b8:	4620      	mov	r0, r4
   131ba:	f7fc fff1 	bl	101a0 <_Bfree>
   131be:	4631      	mov	r1, r6
   131c0:	4620      	mov	r0, r4
   131c2:	f7fc ffed 	bl	101a0 <_Bfree>
   131c6:	4629      	mov	r1, r5
   131c8:	4620      	mov	r0, r4
   131ca:	f7fc ffe9 	bl	101a0 <_Bfree>
   131ce:	2300      	movs	r3, #0
   131d0:	f889 3000 	strb.w	r3, [r9]
   131d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   131d6:	9a07      	ldr	r2, [sp, #28]
   131d8:	601a      	str	r2, [r3, #0]
   131da:	9b26      	ldr	r3, [sp, #152]	; 0x98
   131dc:	2b00      	cmp	r3, #0
   131de:	f43f ac77 	beq.w	12ad0 <_dtoa_r+0x78>
   131e2:	9803      	ldr	r0, [sp, #12]
   131e4:	f8c3 9000 	str.w	r9, [r3]
   131e8:	b019      	add	sp, #100	; 0x64
   131ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131ee:	2301      	movs	r3, #1
   131f0:	1bbf      	subs	r7, r7, r6
   131f2:	930e      	str	r3, [sp, #56]	; 0x38
   131f4:	1e7b      	subs	r3, r7, #1
   131f6:	9306      	str	r3, [sp, #24]
   131f8:	f57f acd9 	bpl.w	12bae <_dtoa_r+0x156>
   131fc:	f1c7 0301 	rsb	r3, r7, #1
   13200:	9309      	str	r3, [sp, #36]	; 0x24
   13202:	2300      	movs	r3, #0
   13204:	9306      	str	r3, [sp, #24]
   13206:	e4d4      	b.n	12bb2 <_dtoa_r+0x15a>
   13208:	4658      	mov	r0, fp
   1320a:	f7fb f9c3 	bl	e594 <__aeabi_i2d>
   1320e:	4642      	mov	r2, r8
   13210:	464b      	mov	r3, r9
   13212:	f7fb fa7f 	bl	e714 <__aeabi_dcmpeq>
   13216:	2800      	cmp	r0, #0
   13218:	f47f acb1 	bne.w	12b7e <_dtoa_r+0x126>
   1321c:	f10b 3bff 	add.w	fp, fp, #4294967295
   13220:	e4ad      	b.n	12b7e <_dtoa_r+0x126>
   13222:	4b1a      	ldr	r3, [pc, #104]	; (1328c <_dtoa_r+0x834>)
   13224:	9303      	str	r3, [sp, #12]
   13226:	9803      	ldr	r0, [sp, #12]
   13228:	b019      	add	sp, #100	; 0x64
   1322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1322e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   13232:	9f09      	ldr	r7, [sp, #36]	; 0x24
   13234:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13236:	e716      	b.n	13066 <_dtoa_r+0x60e>
   13238:	f1c0 001c 	rsb	r0, r0, #28
   1323c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1323e:	4403      	add	r3, r0
   13240:	9309      	str	r3, [sp, #36]	; 0x24
   13242:	9b06      	ldr	r3, [sp, #24]
   13244:	4403      	add	r3, r0
   13246:	4407      	add	r7, r0
   13248:	9306      	str	r3, [sp, #24]
   1324a:	e74a      	b.n	130e2 <_dtoa_r+0x68a>
   1324c:	2601      	movs	r6, #1
   1324e:	e4c7      	b.n	12be0 <_dtoa_r+0x188>
   13250:	f1c3 0320 	rsb	r3, r3, #32
   13254:	fa08 f003 	lsl.w	r0, r8, r3
   13258:	e45e      	b.n	12b18 <_dtoa_r+0xc0>
   1325a:	4601      	mov	r1, r0
   1325c:	465a      	mov	r2, fp
   1325e:	4620      	mov	r0, r4
   13260:	f7fd f924 	bl	104ac <__pow5mult>
   13264:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13266:	2b01      	cmp	r3, #1
   13268:	4682      	mov	sl, r0
   1326a:	f340 81ba 	ble.w	135e2 <_dtoa_r+0xb8a>
   1326e:	f04f 0900 	mov.w	r9, #0
   13272:	f8da 3010 	ldr.w	r3, [sl, #16]
   13276:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   1327a:	6918      	ldr	r0, [r3, #16]
   1327c:	f7fc ffea 	bl	10254 <__hi0bits>
   13280:	f1c0 0020 	rsb	r0, r0, #32
   13284:	e720      	b.n	130c8 <_dtoa_r+0x670>
   13286:	bf00      	nop
   13288:	40240000 	.word	0x40240000
   1328c:	00015bd0 	.word	0x00015bd0
   13290:	4631      	mov	r1, r6
   13292:	2300      	movs	r3, #0
   13294:	220a      	movs	r2, #10
   13296:	4620      	mov	r0, r4
   13298:	f7fc ff8c 	bl	101b4 <__multadd>
   1329c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1329e:	2b00      	cmp	r3, #0
   132a0:	4606      	mov	r6, r0
   132a2:	f340 82f3 	ble.w	1388c <_dtoa_r+0xe34>
   132a6:	e9cd 8307 	strd	r8, r3, [sp, #28]
   132aa:	2f00      	cmp	r7, #0
   132ac:	f300 811a 	bgt.w	134e4 <_dtoa_r+0xa8c>
   132b0:	f1b9 0f00 	cmp.w	r9, #0
   132b4:	f040 81e3 	bne.w	1367e <_dtoa_r+0xc26>
   132b8:	46b0      	mov	r8, r6
   132ba:	9b04      	ldr	r3, [sp, #16]
   132bc:	9f03      	ldr	r7, [sp, #12]
   132be:	9908      	ldr	r1, [sp, #32]
   132c0:	f003 0201 	and.w	r2, r3, #1
   132c4:	1e7b      	subs	r3, r7, #1
   132c6:	4419      	add	r1, r3
   132c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   132ca:	920c      	str	r2, [sp, #48]	; 0x30
   132cc:	4313      	orrs	r3, r2
   132ce:	9109      	str	r1, [sp, #36]	; 0x24
   132d0:	930a      	str	r3, [sp, #40]	; 0x28
   132d2:	4651      	mov	r1, sl
   132d4:	4628      	mov	r0, r5
   132d6:	f7ff fb2b 	bl	12930 <quorem>
   132da:	4631      	mov	r1, r6
   132dc:	4683      	mov	fp, r0
   132de:	4628      	mov	r0, r5
   132e0:	f7fd f9bc 	bl	1065c <__mcmp>
   132e4:	4642      	mov	r2, r8
   132e6:	4651      	mov	r1, sl
   132e8:	4681      	mov	r9, r0
   132ea:	4620      	mov	r0, r4
   132ec:	f7fd f9d6 	bl	1069c <__mdiff>
   132f0:	68c2      	ldr	r2, [r0, #12]
   132f2:	4601      	mov	r1, r0
   132f4:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   132f8:	2a00      	cmp	r2, #0
   132fa:	d142      	bne.n	13382 <_dtoa_r+0x92a>
   132fc:	9006      	str	r0, [sp, #24]
   132fe:	4628      	mov	r0, r5
   13300:	9308      	str	r3, [sp, #32]
   13302:	f7fd f9ab 	bl	1065c <__mcmp>
   13306:	9906      	ldr	r1, [sp, #24]
   13308:	9004      	str	r0, [sp, #16]
   1330a:	4620      	mov	r0, r4
   1330c:	f7fc ff48 	bl	101a0 <_Bfree>
   13310:	9a04      	ldr	r2, [sp, #16]
   13312:	9b08      	ldr	r3, [sp, #32]
   13314:	b91a      	cbnz	r2, 1331e <_dtoa_r+0x8c6>
   13316:	990a      	ldr	r1, [sp, #40]	; 0x28
   13318:	2900      	cmp	r1, #0
   1331a:	f000 82a9 	beq.w	13870 <_dtoa_r+0xe18>
   1331e:	f1b9 0f00 	cmp.w	r9, #0
   13322:	f2c0 8171 	blt.w	13608 <_dtoa_r+0xbb0>
   13326:	9922      	ldr	r1, [sp, #136]	; 0x88
   13328:	ea49 0901 	orr.w	r9, r9, r1
   1332c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1332e:	ea51 0909 	orrs.w	r9, r1, r9
   13332:	f000 8169 	beq.w	13608 <_dtoa_r+0xbb0>
   13336:	2a00      	cmp	r2, #0
   13338:	f300 81bc 	bgt.w	136b4 <_dtoa_r+0xc5c>
   1333c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1333e:	703b      	strb	r3, [r7, #0]
   13340:	f107 0901 	add.w	r9, r7, #1
   13344:	4297      	cmp	r7, r2
   13346:	46cb      	mov	fp, r9
   13348:	f000 81ba 	beq.w	136c0 <_dtoa_r+0xc68>
   1334c:	4629      	mov	r1, r5
   1334e:	2300      	movs	r3, #0
   13350:	220a      	movs	r2, #10
   13352:	4620      	mov	r0, r4
   13354:	f7fc ff2e 	bl	101b4 <__multadd>
   13358:	4546      	cmp	r6, r8
   1335a:	4605      	mov	r5, r0
   1335c:	4631      	mov	r1, r6
   1335e:	f04f 0300 	mov.w	r3, #0
   13362:	f04f 020a 	mov.w	r2, #10
   13366:	4620      	mov	r0, r4
   13368:	d012      	beq.n	13390 <_dtoa_r+0x938>
   1336a:	f7fc ff23 	bl	101b4 <__multadd>
   1336e:	4641      	mov	r1, r8
   13370:	4606      	mov	r6, r0
   13372:	2300      	movs	r3, #0
   13374:	220a      	movs	r2, #10
   13376:	4620      	mov	r0, r4
   13378:	f7fc ff1c 	bl	101b4 <__multadd>
   1337c:	464f      	mov	r7, r9
   1337e:	4680      	mov	r8, r0
   13380:	e7a7      	b.n	132d2 <_dtoa_r+0x87a>
   13382:	4620      	mov	r0, r4
   13384:	9304      	str	r3, [sp, #16]
   13386:	f7fc ff0b 	bl	101a0 <_Bfree>
   1338a:	9b04      	ldr	r3, [sp, #16]
   1338c:	2201      	movs	r2, #1
   1338e:	e7c6      	b.n	1331e <_dtoa_r+0x8c6>
   13390:	f7fc ff10 	bl	101b4 <__multadd>
   13394:	464f      	mov	r7, r9
   13396:	4606      	mov	r6, r0
   13398:	4680      	mov	r8, r0
   1339a:	e79a      	b.n	132d2 <_dtoa_r+0x87a>
   1339c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1339e:	2b02      	cmp	r3, #2
   133a0:	dc79      	bgt.n	13496 <_dtoa_r+0xa3e>
   133a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   133a4:	2b00      	cmp	r3, #0
   133a6:	d180      	bne.n	132aa <_dtoa_r+0x852>
   133a8:	9b07      	ldr	r3, [sp, #28]
   133aa:	4651      	mov	r1, sl
   133ac:	3301      	adds	r3, #1
   133ae:	4628      	mov	r0, r5
   133b0:	9307      	str	r3, [sp, #28]
   133b2:	f7ff fabd 	bl	12930 <quorem>
   133b6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   133ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
   133be:	f80b 3b01 	strb.w	r3, [fp], #1
   133c2:	2700      	movs	r7, #0
   133c4:	e6d0      	b.n	13168 <_dtoa_r+0x710>
   133c6:	4651      	mov	r1, sl
   133c8:	4628      	mov	r0, r5
   133ca:	f7fd f947 	bl	1065c <__mcmp>
   133ce:	2800      	cmp	r0, #0
   133d0:	f6bf ae9d 	bge.w	1310e <_dtoa_r+0x6b6>
   133d4:	4629      	mov	r1, r5
   133d6:	2300      	movs	r3, #0
   133d8:	220a      	movs	r2, #10
   133da:	4620      	mov	r0, r4
   133dc:	f7fc feea 	bl	101b4 <__multadd>
   133e0:	9b07      	ldr	r3, [sp, #28]
   133e2:	f103 38ff 	add.w	r8, r3, #4294967295
   133e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   133e8:	4605      	mov	r5, r0
   133ea:	2b00      	cmp	r3, #0
   133ec:	f47f af50 	bne.w	13290 <_dtoa_r+0x838>
   133f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   133f2:	2b00      	cmp	r3, #0
   133f4:	f340 8243 	ble.w	1387e <_dtoa_r+0xe26>
   133f8:	9308      	str	r3, [sp, #32]
   133fa:	e693      	b.n	13124 <_dtoa_r+0x6cc>
   133fc:	4bb6      	ldr	r3, [pc, #728]	; (136d8 <_dtoa_r+0xc80>)
   133fe:	9303      	str	r3, [sp, #12]
   13400:	3303      	adds	r3, #3
   13402:	e408      	b.n	12c16 <_dtoa_r+0x1be>
   13404:	201c      	movs	r0, #28
   13406:	e719      	b.n	1323c <_dtoa_r+0x7e4>
   13408:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1340c:	2900      	cmp	r1, #0
   1340e:	f47f ae54 	bne.w	130ba <_dtoa_r+0x662>
   13412:	f3c2 0313 	ubfx	r3, r2, #0, #20
   13416:	2b00      	cmp	r3, #0
   13418:	f47f ae4f 	bne.w	130ba <_dtoa_r+0x662>
   1341c:	4baf      	ldr	r3, [pc, #700]	; (136dc <_dtoa_r+0xc84>)
   1341e:	4013      	ands	r3, r2
   13420:	2b00      	cmp	r3, #0
   13422:	f000 820b 	beq.w	1383c <_dtoa_r+0xde4>
   13426:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13428:	3301      	adds	r3, #1
   1342a:	9309      	str	r3, [sp, #36]	; 0x24
   1342c:	9b06      	ldr	r3, [sp, #24]
   1342e:	3301      	adds	r3, #1
   13430:	9306      	str	r3, [sp, #24]
   13432:	f04f 0901 	mov.w	r9, #1
   13436:	e642      	b.n	130be <_dtoa_r+0x666>
   13438:	2301      	movs	r3, #1
   1343a:	930c      	str	r3, [sp, #48]	; 0x30
   1343c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1343e:	9a07      	ldr	r2, [sp, #28]
   13440:	4413      	add	r3, r2
   13442:	9312      	str	r3, [sp, #72]	; 0x48
   13444:	3301      	adds	r3, #1
   13446:	2b01      	cmp	r3, #1
   13448:	461f      	mov	r7, r3
   1344a:	9308      	str	r3, [sp, #32]
   1344c:	bfb8      	it	lt
   1344e:	2701      	movlt	r7, #1
   13450:	2100      	movs	r1, #0
   13452:	2f17      	cmp	r7, #23
   13454:	63e1      	str	r1, [r4, #60]	; 0x3c
   13456:	f77f ac2f 	ble.w	12cb8 <_dtoa_r+0x260>
   1345a:	2201      	movs	r2, #1
   1345c:	2304      	movs	r3, #4
   1345e:	005b      	lsls	r3, r3, #1
   13460:	f103 0014 	add.w	r0, r3, #20
   13464:	42b8      	cmp	r0, r7
   13466:	4611      	mov	r1, r2
   13468:	f102 0201 	add.w	r2, r2, #1
   1346c:	d9f7      	bls.n	1345e <_dtoa_r+0xa06>
   1346e:	63e1      	str	r1, [r4, #60]	; 0x3c
   13470:	e422      	b.n	12cb8 <_dtoa_r+0x260>
   13472:	2301      	movs	r3, #1
   13474:	930c      	str	r3, [sp, #48]	; 0x30
   13476:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13478:	2b00      	cmp	r3, #0
   1347a:	dd59      	ble.n	13530 <_dtoa_r+0xad8>
   1347c:	9312      	str	r3, [sp, #72]	; 0x48
   1347e:	9308      	str	r3, [sp, #32]
   13480:	461f      	mov	r7, r3
   13482:	e7e5      	b.n	13450 <_dtoa_r+0x9f8>
   13484:	2300      	movs	r3, #0
   13486:	930c      	str	r3, [sp, #48]	; 0x30
   13488:	e7d8      	b.n	1343c <_dtoa_r+0x9e4>
   1348a:	2300      	movs	r3, #0
   1348c:	930c      	str	r3, [sp, #48]	; 0x30
   1348e:	e7f2      	b.n	13476 <_dtoa_r+0xa1e>
   13490:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13492:	e9cd 8307 	strd	r8, r3, [sp, #28]
   13496:	9b08      	ldr	r3, [sp, #32]
   13498:	2b00      	cmp	r3, #0
   1349a:	f47f ad54 	bne.w	12f46 <_dtoa_r+0x4ee>
   1349e:	4651      	mov	r1, sl
   134a0:	2205      	movs	r2, #5
   134a2:	4620      	mov	r0, r4
   134a4:	f7fc fe86 	bl	101b4 <__multadd>
   134a8:	4601      	mov	r1, r0
   134aa:	4682      	mov	sl, r0
   134ac:	4628      	mov	r0, r5
   134ae:	f7fd f8d5 	bl	1065c <__mcmp>
   134b2:	2800      	cmp	r0, #0
   134b4:	f77f ad47 	ble.w	12f46 <_dtoa_r+0x4ee>
   134b8:	9b03      	ldr	r3, [sp, #12]
   134ba:	9f07      	ldr	r7, [sp, #28]
   134bc:	2231      	movs	r2, #49	; 0x31
   134be:	4698      	mov	r8, r3
   134c0:	f803 2b01 	strb.w	r2, [r3], #1
   134c4:	3701      	adds	r7, #1
   134c6:	9303      	str	r3, [sp, #12]
   134c8:	4651      	mov	r1, sl
   134ca:	4620      	mov	r0, r4
   134cc:	f7fc fe68 	bl	101a0 <_Bfree>
   134d0:	1c7b      	adds	r3, r7, #1
   134d2:	f8dd 900c 	ldr.w	r9, [sp, #12]
   134d6:	9307      	str	r3, [sp, #28]
   134d8:	f8cd 800c 	str.w	r8, [sp, #12]
   134dc:	2e00      	cmp	r6, #0
   134de:	f47f ae6e 	bne.w	131be <_dtoa_r+0x766>
   134e2:	e670      	b.n	131c6 <_dtoa_r+0x76e>
   134e4:	4631      	mov	r1, r6
   134e6:	463a      	mov	r2, r7
   134e8:	4620      	mov	r0, r4
   134ea:	f7fd f83f 	bl	1056c <__lshift>
   134ee:	4606      	mov	r6, r0
   134f0:	e6de      	b.n	132b0 <_dtoa_r+0x858>
   134f2:	eba3 0808 	sub.w	r8, r3, r8
   134f6:	e5a6      	b.n	13046 <_dtoa_r+0x5ee>
   134f8:	4631      	mov	r1, r6
   134fa:	4642      	mov	r2, r8
   134fc:	4620      	mov	r0, r4
   134fe:	f7fc ffd5 	bl	104ac <__pow5mult>
   13502:	462a      	mov	r2, r5
   13504:	4601      	mov	r1, r0
   13506:	4606      	mov	r6, r0
   13508:	4620      	mov	r0, r4
   1350a:	f7fc ff21 	bl	10350 <__multiply>
   1350e:	4629      	mov	r1, r5
   13510:	4605      	mov	r5, r0
   13512:	4620      	mov	r0, r4
   13514:	f7fc fe44 	bl	101a0 <_Bfree>
   13518:	e5bd      	b.n	13096 <_dtoa_r+0x63e>
   1351a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1351e:	f04f 0a02 	mov.w	sl, #2
   13522:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   13526:	f7ff bbf4 	b.w	12d12 <_dtoa_r+0x2ba>
   1352a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   1352e:	e685      	b.n	1323c <_dtoa_r+0x7e4>
   13530:	2301      	movs	r3, #1
   13532:	9323      	str	r3, [sp, #140]	; 0x8c
   13534:	9308      	str	r3, [sp, #32]
   13536:	f7ff bbbb 	b.w	12cb0 <_dtoa_r+0x258>
   1353a:	d103      	bne.n	13544 <_dtoa_r+0xaec>
   1353c:	9b04      	ldr	r3, [sp, #16]
   1353e:	07db      	lsls	r3, r3, #31
   13540:	f53f ae1f 	bmi.w	13182 <_dtoa_r+0x72a>
   13544:	46d9      	mov	r9, fp
   13546:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1354a:	2b30      	cmp	r3, #48	; 0x30
   1354c:	d0fa      	beq.n	13544 <_dtoa_r+0xaec>
   1354e:	e62a      	b.n	131a6 <_dtoa_r+0x74e>
   13550:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13552:	2a00      	cmp	r2, #0
   13554:	f000 812d 	beq.w	137b2 <_dtoa_r+0xd5a>
   13558:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1355c:	9a06      	ldr	r2, [sp, #24]
   1355e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   13562:	441a      	add	r2, r3
   13564:	9206      	str	r2, [sp, #24]
   13566:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13568:	4617      	mov	r7, r2
   1356a:	441a      	add	r2, r3
   1356c:	9209      	str	r2, [sp, #36]	; 0x24
   1356e:	e575      	b.n	1305c <_dtoa_r+0x604>
   13570:	9b07      	ldr	r3, [sp, #28]
   13572:	9a03      	ldr	r2, [sp, #12]
   13574:	3301      	adds	r3, #1
   13576:	9307      	str	r3, [sp, #28]
   13578:	2331      	movs	r3, #49	; 0x31
   1357a:	7013      	strb	r3, [r2, #0]
   1357c:	e613      	b.n	131a6 <_dtoa_r+0x74e>
   1357e:	f04f 0a00 	mov.w	sl, #0
   13582:	4656      	mov	r6, sl
   13584:	e4df      	b.n	12f46 <_dtoa_r+0x4ee>
   13586:	900e      	str	r0, [sp, #56]	; 0x38
   13588:	e638      	b.n	131fc <_dtoa_r+0x7a4>
   1358a:	f000 813d 	beq.w	13808 <_dtoa_r+0xdb0>
   1358e:	9a07      	ldr	r2, [sp, #28]
   13590:	4b53      	ldr	r3, [pc, #332]	; (136e0 <_dtoa_r+0xc88>)
   13592:	4256      	negs	r6, r2
   13594:	f006 020f 	and.w	r2, r6, #15
   13598:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1359c:	e9d3 2300 	ldrd	r2, r3, [r3]
   135a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   135a4:	f001 fe98 	bl	152d8 <__aeabi_dmul>
   135a8:	1136      	asrs	r6, r6, #4
   135aa:	4680      	mov	r8, r0
   135ac:	4689      	mov	r9, r1
   135ae:	f000 8178 	beq.w	138a2 <_dtoa_r+0xe4a>
   135b2:	4f4c      	ldr	r7, [pc, #304]	; (136e4 <_dtoa_r+0xc8c>)
   135b4:	2300      	movs	r3, #0
   135b6:	f04f 0a02 	mov.w	sl, #2
   135ba:	07f2      	lsls	r2, r6, #31
   135bc:	d506      	bpl.n	135cc <_dtoa_r+0xb74>
   135be:	e9d7 2300 	ldrd	r2, r3, [r7]
   135c2:	f001 fe89 	bl	152d8 <__aeabi_dmul>
   135c6:	f10a 0a01 	add.w	sl, sl, #1
   135ca:	2301      	movs	r3, #1
   135cc:	1076      	asrs	r6, r6, #1
   135ce:	f107 0708 	add.w	r7, r7, #8
   135d2:	d1f2      	bne.n	135ba <_dtoa_r+0xb62>
   135d4:	2b00      	cmp	r3, #0
   135d6:	f43f abbb 	beq.w	12d50 <_dtoa_r+0x2f8>
   135da:	4680      	mov	r8, r0
   135dc:	4689      	mov	r9, r1
   135de:	f7ff bbb7 	b.w	12d50 <_dtoa_r+0x2f8>
   135e2:	9b04      	ldr	r3, [sp, #16]
   135e4:	2b00      	cmp	r3, #0
   135e6:	f47f ae42 	bne.w	1326e <_dtoa_r+0x816>
   135ea:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   135ee:	f3c2 0313 	ubfx	r3, r2, #0, #20
   135f2:	2b00      	cmp	r3, #0
   135f4:	f43f af12 	beq.w	1341c <_dtoa_r+0x9c4>
   135f8:	e639      	b.n	1326e <_dtoa_r+0x816>
   135fa:	4629      	mov	r1, r5
   135fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   135fe:	4620      	mov	r0, r4
   13600:	f7fc ff54 	bl	104ac <__pow5mult>
   13604:	4605      	mov	r5, r0
   13606:	e54b      	b.n	130a0 <_dtoa_r+0x648>
   13608:	2a00      	cmp	r2, #0
   1360a:	dd12      	ble.n	13632 <_dtoa_r+0xbda>
   1360c:	4629      	mov	r1, r5
   1360e:	2201      	movs	r2, #1
   13610:	4620      	mov	r0, r4
   13612:	9304      	str	r3, [sp, #16]
   13614:	f7fc ffaa 	bl	1056c <__lshift>
   13618:	4651      	mov	r1, sl
   1361a:	4605      	mov	r5, r0
   1361c:	f7fd f81e 	bl	1065c <__mcmp>
   13620:	2800      	cmp	r0, #0
   13622:	9b04      	ldr	r3, [sp, #16]
   13624:	f340 8118 	ble.w	13858 <_dtoa_r+0xe00>
   13628:	2b39      	cmp	r3, #57	; 0x39
   1362a:	f000 80f9 	beq.w	13820 <_dtoa_r+0xdc8>
   1362e:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   13632:	46b9      	mov	r9, r7
   13634:	f809 3b01 	strb.w	r3, [r9], #1
   13638:	9b07      	ldr	r3, [sp, #28]
   1363a:	3301      	adds	r3, #1
   1363c:	4637      	mov	r7, r6
   1363e:	9307      	str	r3, [sp, #28]
   13640:	4646      	mov	r6, r8
   13642:	e5b0      	b.n	131a6 <_dtoa_r+0x74e>
   13644:	9509      	str	r5, [sp, #36]	; 0x24
   13646:	9c06      	ldr	r4, [sp, #24]
   13648:	9d04      	ldr	r5, [sp, #16]
   1364a:	4602      	mov	r2, r0
   1364c:	460b      	mov	r3, r1
   1364e:	f7fa fe55 	bl	e2fc <__adddf3>
   13652:	4652      	mov	r2, sl
   13654:	465b      	mov	r3, fp
   13656:	4680      	mov	r8, r0
   13658:	4689      	mov	r9, r1
   1365a:	f7fb f883 	bl	e764 <__aeabi_dcmpgt>
   1365e:	b960      	cbnz	r0, 1367a <_dtoa_r+0xc22>
   13660:	4652      	mov	r2, sl
   13662:	465b      	mov	r3, fp
   13664:	4640      	mov	r0, r8
   13666:	4649      	mov	r1, r9
   13668:	f7fb f854 	bl	e714 <__aeabi_dcmpeq>
   1366c:	2800      	cmp	r0, #0
   1366e:	f43f acce 	beq.w	1300e <_dtoa_r+0x5b6>
   13672:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13674:	07d9      	lsls	r1, r3, #31
   13676:	f57f acca 	bpl.w	1300e <_dtoa_r+0x5b6>
   1367a:	9a03      	ldr	r2, [sp, #12]
   1367c:	e404      	b.n	12e88 <_dtoa_r+0x430>
   1367e:	6871      	ldr	r1, [r6, #4]
   13680:	4620      	mov	r0, r4
   13682:	f7fc fd67 	bl	10154 <_Balloc>
   13686:	4607      	mov	r7, r0
   13688:	2800      	cmp	r0, #0
   1368a:	f000 810e 	beq.w	138aa <_dtoa_r+0xe52>
   1368e:	6933      	ldr	r3, [r6, #16]
   13690:	3302      	adds	r3, #2
   13692:	009a      	lsls	r2, r3, #2
   13694:	f106 010c 	add.w	r1, r6, #12
   13698:	300c      	adds	r0, #12
   1369a:	f7f7 fa0f 	bl	aabc <memcpy>
   1369e:	4639      	mov	r1, r7
   136a0:	2201      	movs	r2, #1
   136a2:	4620      	mov	r0, r4
   136a4:	f7fc ff62 	bl	1056c <__lshift>
   136a8:	4680      	mov	r8, r0
   136aa:	e606      	b.n	132ba <_dtoa_r+0x862>
   136ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   136b0:	1a9f      	subs	r7, r3, r2
   136b2:	e4d3      	b.n	1305c <_dtoa_r+0x604>
   136b4:	2b39      	cmp	r3, #57	; 0x39
   136b6:	f000 80b3 	beq.w	13820 <_dtoa_r+0xdc8>
   136ba:	46b9      	mov	r9, r7
   136bc:	3301      	adds	r3, #1
   136be:	e7b9      	b.n	13634 <_dtoa_r+0xbdc>
   136c0:	9a07      	ldr	r2, [sp, #28]
   136c2:	3201      	adds	r2, #1
   136c4:	4637      	mov	r7, r6
   136c6:	9207      	str	r2, [sp, #28]
   136c8:	4646      	mov	r6, r8
   136ca:	e54d      	b.n	13168 <_dtoa_r+0x710>
   136cc:	4629      	mov	r1, r5
   136ce:	4620      	mov	r0, r4
   136d0:	f7fc feec 	bl	104ac <__pow5mult>
   136d4:	4605      	mov	r5, r0
   136d6:	e4e3      	b.n	130a0 <_dtoa_r+0x648>
   136d8:	00017520 	.word	0x00017520
   136dc:	7ff00000 	.word	0x7ff00000
   136e0:	000173a8 	.word	0x000173a8
   136e4:	00017380 	.word	0x00017380
   136e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   136ec:	4981      	ldr	r1, [pc, #516]	; (138f4 <_dtoa_r+0xe9c>)
   136ee:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   136f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   136f6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   136fa:	f001 fded 	bl	152d8 <__aeabi_dmul>
   136fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   13702:	4649      	mov	r1, r9
   13704:	4640      	mov	r0, r8
   13706:	f001 fff9 	bl	156fc <__aeabi_d2iz>
   1370a:	4606      	mov	r6, r0
   1370c:	f7fa ff42 	bl	e594 <__aeabi_i2d>
   13710:	460b      	mov	r3, r1
   13712:	4602      	mov	r2, r0
   13714:	4649      	mov	r1, r9
   13716:	4640      	mov	r0, r8
   13718:	f7fa fdee 	bl	e2f8 <__aeabi_dsub>
   1371c:	9f03      	ldr	r7, [sp, #12]
   1371e:	4653      	mov	r3, sl
   13720:	3630      	adds	r6, #48	; 0x30
   13722:	2b01      	cmp	r3, #1
   13724:	f807 6b01 	strb.w	r6, [r7], #1
   13728:	4680      	mov	r8, r0
   1372a:	4689      	mov	r9, r1
   1372c:	f000 80b7 	beq.w	1389e <_dtoa_r+0xe46>
   13730:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   13732:	9b03      	ldr	r3, [sp, #12]
   13734:	441e      	add	r6, r3
   13736:	4b70      	ldr	r3, [pc, #448]	; (138f8 <_dtoa_r+0xea0>)
   13738:	2200      	movs	r2, #0
   1373a:	4640      	mov	r0, r8
   1373c:	4649      	mov	r1, r9
   1373e:	f001 fdcb 	bl	152d8 <__aeabi_dmul>
   13742:	4689      	mov	r9, r1
   13744:	4680      	mov	r8, r0
   13746:	f001 ffd9 	bl	156fc <__aeabi_d2iz>
   1374a:	4682      	mov	sl, r0
   1374c:	f7fa ff22 	bl	e594 <__aeabi_i2d>
   13750:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   13754:	4602      	mov	r2, r0
   13756:	460b      	mov	r3, r1
   13758:	4640      	mov	r0, r8
   1375a:	4649      	mov	r1, r9
   1375c:	f7fa fdcc 	bl	e2f8 <__aeabi_dsub>
   13760:	f807 ab01 	strb.w	sl, [r7], #1
   13764:	42be      	cmp	r6, r7
   13766:	4680      	mov	r8, r0
   13768:	4689      	mov	r9, r1
   1376a:	d1e4      	bne.n	13736 <_dtoa_r+0xcde>
   1376c:	4b63      	ldr	r3, [pc, #396]	; (138fc <_dtoa_r+0xea4>)
   1376e:	2200      	movs	r2, #0
   13770:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   13774:	f7fa fdc2 	bl	e2fc <__adddf3>
   13778:	4642      	mov	r2, r8
   1377a:	464b      	mov	r3, r9
   1377c:	f7fa ffd4 	bl	e728 <__aeabi_dcmplt>
   13780:	2800      	cmp	r0, #0
   13782:	d164      	bne.n	1384e <_dtoa_r+0xdf6>
   13784:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   13788:	495c      	ldr	r1, [pc, #368]	; (138fc <_dtoa_r+0xea4>)
   1378a:	2000      	movs	r0, #0
   1378c:	f7fa fdb4 	bl	e2f8 <__aeabi_dsub>
   13790:	4642      	mov	r2, r8
   13792:	464b      	mov	r3, r9
   13794:	f7fa ffe6 	bl	e764 <__aeabi_dcmpgt>
   13798:	2800      	cmp	r0, #0
   1379a:	f43f abad 	beq.w	12ef8 <_dtoa_r+0x4a0>
   1379e:	46b1      	mov	r9, r6
   137a0:	3e01      	subs	r6, #1
   137a2:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   137a6:	2b30      	cmp	r3, #48	; 0x30
   137a8:	d0f9      	beq.n	1379e <_dtoa_r+0xd46>
   137aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   137ac:	3301      	adds	r3, #1
   137ae:	9307      	str	r3, [sp, #28]
   137b0:	e509      	b.n	131c6 <_dtoa_r+0x76e>
   137b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   137b4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   137b8:	e6d0      	b.n	1355c <_dtoa_r+0xb04>
   137ba:	9b08      	ldr	r3, [sp, #32]
   137bc:	2b00      	cmp	r3, #0
   137be:	f43f ab6f 	beq.w	12ea0 <_dtoa_r+0x448>
   137c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   137c4:	2b00      	cmp	r3, #0
   137c6:	f77f ab97 	ble.w	12ef8 <_dtoa_r+0x4a0>
   137ca:	9a07      	ldr	r2, [sp, #28]
   137cc:	3a01      	subs	r2, #1
   137ce:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   137d2:	4640      	mov	r0, r8
   137d4:	4b48      	ldr	r3, [pc, #288]	; (138f8 <_dtoa_r+0xea0>)
   137d6:	2200      	movs	r2, #0
   137d8:	4649      	mov	r1, r9
   137da:	f001 fd7d 	bl	152d8 <__aeabi_dmul>
   137de:	4680      	mov	r8, r0
   137e0:	4689      	mov	r9, r1
   137e2:	f10a 0001 	add.w	r0, sl, #1
   137e6:	f7fa fed5 	bl	e594 <__aeabi_i2d>
   137ea:	4642      	mov	r2, r8
   137ec:	464b      	mov	r3, r9
   137ee:	f001 fd73 	bl	152d8 <__aeabi_dmul>
   137f2:	4b43      	ldr	r3, [pc, #268]	; (13900 <_dtoa_r+0xea8>)
   137f4:	2200      	movs	r2, #0
   137f6:	f7fa fd81 	bl	e2fc <__adddf3>
   137fa:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   137fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   13802:	9311      	str	r3, [sp, #68]	; 0x44
   13804:	f7ff bac7 	b.w	12d96 <_dtoa_r+0x33e>
   13808:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   1380c:	f04f 0a02 	mov.w	sl, #2
   13810:	f7ff ba9e 	b.w	12d50 <_dtoa_r+0x2f8>
   13814:	9b07      	ldr	r3, [sp, #28]
   13816:	3301      	adds	r3, #1
   13818:	9307      	str	r3, [sp, #28]
   1381a:	2331      	movs	r3, #49	; 0x31
   1381c:	f7ff bb3b 	b.w	12e96 <_dtoa_r+0x43e>
   13820:	9b07      	ldr	r3, [sp, #28]
   13822:	46bb      	mov	fp, r7
   13824:	3301      	adds	r3, #1
   13826:	9307      	str	r3, [sp, #28]
   13828:	2339      	movs	r3, #57	; 0x39
   1382a:	4637      	mov	r7, r6
   1382c:	f80b 3b01 	strb.w	r3, [fp], #1
   13830:	4646      	mov	r6, r8
   13832:	e4a8      	b.n	13186 <_dtoa_r+0x72e>
   13834:	f04f 0a00 	mov.w	sl, #0
   13838:	4656      	mov	r6, sl
   1383a:	e63d      	b.n	134b8 <_dtoa_r+0xa60>
   1383c:	4699      	mov	r9, r3
   1383e:	e43e      	b.n	130be <_dtoa_r+0x666>
   13840:	9d10      	ldr	r5, [sp, #64]	; 0x40
   13842:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   13844:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13846:	3301      	adds	r3, #1
   13848:	9307      	str	r3, [sp, #28]
   1384a:	46b1      	mov	r9, r6
   1384c:	e4bb      	b.n	131c6 <_dtoa_r+0x76e>
   1384e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13850:	9a03      	ldr	r2, [sp, #12]
   13852:	9307      	str	r3, [sp, #28]
   13854:	f7ff bb18 	b.w	12e88 <_dtoa_r+0x430>
   13858:	f47f aeeb 	bne.w	13632 <_dtoa_r+0xbda>
   1385c:	07da      	lsls	r2, r3, #31
   1385e:	f57f aee8 	bpl.w	13632 <_dtoa_r+0xbda>
   13862:	e6e1      	b.n	13628 <_dtoa_r+0xbd0>
   13864:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   13868:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1386a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1386c:	f7ff bb44 	b.w	12ef8 <_dtoa_r+0x4a0>
   13870:	2b39      	cmp	r3, #57	; 0x39
   13872:	d0d5      	beq.n	13820 <_dtoa_r+0xdc8>
   13874:	f1b9 0f00 	cmp.w	r9, #0
   13878:	f73f aed9 	bgt.w	1362e <_dtoa_r+0xbd6>
   1387c:	e6d9      	b.n	13632 <_dtoa_r+0xbda>
   1387e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13880:	2b02      	cmp	r3, #2
   13882:	f73f ae05 	bgt.w	13490 <_dtoa_r+0xa38>
   13886:	f8cd 801c 	str.w	r8, [sp, #28]
   1388a:	e58d      	b.n	133a8 <_dtoa_r+0x950>
   1388c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1388e:	2b02      	cmp	r3, #2
   13890:	f73f adfe 	bgt.w	13490 <_dtoa_r+0xa38>
   13894:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13896:	f8cd 801c 	str.w	r8, [sp, #28]
   1389a:	9308      	str	r3, [sp, #32]
   1389c:	e505      	b.n	132aa <_dtoa_r+0x852>
   1389e:	463e      	mov	r6, r7
   138a0:	e764      	b.n	1376c <_dtoa_r+0xd14>
   138a2:	f04f 0a02 	mov.w	sl, #2
   138a6:	f7ff ba53 	b.w	12d50 <_dtoa_r+0x2f8>
   138aa:	4b16      	ldr	r3, [pc, #88]	; (13904 <_dtoa_r+0xeac>)
   138ac:	4816      	ldr	r0, [pc, #88]	; (13908 <_dtoa_r+0xeb0>)
   138ae:	463a      	mov	r2, r7
   138b0:	f240 21ef 	movw	r1, #751	; 0x2ef
   138b4:	f7fe ffe0 	bl	12878 <__assert_func>
   138b8:	2600      	movs	r6, #0
   138ba:	63e6      	str	r6, [r4, #60]	; 0x3c
   138bc:	4631      	mov	r1, r6
   138be:	4620      	mov	r0, r4
   138c0:	f7fc fc48 	bl	10154 <_Balloc>
   138c4:	9003      	str	r0, [sp, #12]
   138c6:	b950      	cbnz	r0, 138de <_dtoa_r+0xe86>
   138c8:	4b0e      	ldr	r3, [pc, #56]	; (13904 <_dtoa_r+0xeac>)
   138ca:	480f      	ldr	r0, [pc, #60]	; (13908 <_dtoa_r+0xeb0>)
   138cc:	2200      	movs	r2, #0
   138ce:	f240 11af 	movw	r1, #431	; 0x1af
   138d2:	f7fe ffd1 	bl	12878 <__assert_func>
   138d6:	4b0d      	ldr	r3, [pc, #52]	; (1390c <_dtoa_r+0xeb4>)
   138d8:	9303      	str	r3, [sp, #12]
   138da:	f7ff b8f9 	b.w	12ad0 <_dtoa_r+0x78>
   138de:	9b03      	ldr	r3, [sp, #12]
   138e0:	63a3      	str	r3, [r4, #56]	; 0x38
   138e2:	f04f 33ff 	mov.w	r3, #4294967295
   138e6:	9312      	str	r3, [sp, #72]	; 0x48
   138e8:	9308      	str	r3, [sp, #32]
   138ea:	2301      	movs	r3, #1
   138ec:	9623      	str	r6, [sp, #140]	; 0x8c
   138ee:	930c      	str	r3, [sp, #48]	; 0x30
   138f0:	f7ff bb02 	b.w	12ef8 <_dtoa_r+0x4a0>
   138f4:	000173a8 	.word	0x000173a8
   138f8:	40240000 	.word	0x40240000
   138fc:	3fe00000 	.word	0x3fe00000
   13900:	401c0000 	.word	0x401c0000
   13904:	0001730c 	.word	0x0001730c
   13908:	00017524 	.word	0x00017524
   1390c:	00017514 	.word	0x00017514

00013910 <_wcrtomb_r>:
   13910:	b570      	push	{r4, r5, r6, lr}
   13912:	4605      	mov	r5, r0
   13914:	b084      	sub	sp, #16
   13916:	b15b      	cbz	r3, 13930 <_wcrtomb_r+0x20>
   13918:	461c      	mov	r4, r3
   1391a:	b169      	cbz	r1, 13938 <_wcrtomb_r+0x28>
   1391c:	4b0e      	ldr	r3, [pc, #56]	; (13958 <_wcrtomb_r+0x48>)
   1391e:	4628      	mov	r0, r5
   13920:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   13924:	4623      	mov	r3, r4
   13926:	47b0      	blx	r6
   13928:	1c43      	adds	r3, r0, #1
   1392a:	d00f      	beq.n	1394c <_wcrtomb_r+0x3c>
   1392c:	b004      	add	sp, #16
   1392e:	bd70      	pop	{r4, r5, r6, pc}
   13930:	f500 7482 	add.w	r4, r0, #260	; 0x104
   13934:	2900      	cmp	r1, #0
   13936:	d1f1      	bne.n	1391c <_wcrtomb_r+0xc>
   13938:	4a07      	ldr	r2, [pc, #28]	; (13958 <_wcrtomb_r+0x48>)
   1393a:	4623      	mov	r3, r4
   1393c:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   13940:	4628      	mov	r0, r5
   13942:	460a      	mov	r2, r1
   13944:	a901      	add	r1, sp, #4
   13946:	47b0      	blx	r6
   13948:	1c43      	adds	r3, r0, #1
   1394a:	d1ef      	bne.n	1392c <_wcrtomb_r+0x1c>
   1394c:	2200      	movs	r2, #0
   1394e:	238a      	movs	r3, #138	; 0x8a
   13950:	6022      	str	r2, [r4, #0]
   13952:	602b      	str	r3, [r5, #0]
   13954:	b004      	add	sp, #16
   13956:	bd70      	pop	{r4, r5, r6, pc}
   13958:	1fff8ed8 	.word	0x1fff8ed8

0001395c <_wcsrtombs_r>:
   1395c:	b500      	push	{lr}
   1395e:	b083      	sub	sp, #12
   13960:	f8dd c010 	ldr.w	ip, [sp, #16]
   13964:	e9cd 3c00 	strd	r3, ip, [sp]
   13968:	f04f 33ff 	mov.w	r3, #4294967295
   1396c:	f001 fbb6 	bl	150dc <_wcsnrtombs_r>
   13970:	b003      	add	sp, #12
   13972:	f85d fb04 	ldr.w	pc, [sp], #4
   13976:	bf00      	nop

00013978 <fiprintf>:
   13978:	b40e      	push	{r1, r2, r3}
   1397a:	b510      	push	{r4, lr}
   1397c:	b083      	sub	sp, #12
   1397e:	ab05      	add	r3, sp, #20
   13980:	4c06      	ldr	r4, [pc, #24]	; (1399c <fiprintf+0x24>)
   13982:	f853 2b04 	ldr.w	r2, [r3], #4
   13986:	9301      	str	r3, [sp, #4]
   13988:	4601      	mov	r1, r0
   1398a:	6820      	ldr	r0, [r4, #0]
   1398c:	f000 f8c4 	bl	13b18 <_vfiprintf_r>
   13990:	b003      	add	sp, #12
   13992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13996:	b003      	add	sp, #12
   13998:	4770      	bx	lr
   1399a:	bf00      	nop
   1399c:	1fff9168 	.word	0x1fff9168

000139a0 <__ssprint_r>:
   139a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139a4:	6893      	ldr	r3, [r2, #8]
   139a6:	6817      	ldr	r7, [r2, #0]
   139a8:	b083      	sub	sp, #12
   139aa:	4692      	mov	sl, r2
   139ac:	2b00      	cmp	r3, #0
   139ae:	d070      	beq.n	13a92 <__ssprint_r+0xf2>
   139b0:	4681      	mov	r9, r0
   139b2:	688a      	ldr	r2, [r1, #8]
   139b4:	6808      	ldr	r0, [r1, #0]
   139b6:	460c      	mov	r4, r1
   139b8:	3708      	adds	r7, #8
   139ba:	e043      	b.n	13a44 <__ssprint_r+0xa4>
   139bc:	89a3      	ldrh	r3, [r4, #12]
   139be:	f413 6f90 	tst.w	r3, #1152	; 0x480
   139c2:	d02e      	beq.n	13a22 <__ssprint_r+0x82>
   139c4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   139c8:	eba0 0801 	sub.w	r8, r0, r1
   139cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   139d0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   139d4:	f108 0001 	add.w	r0, r8, #1
   139d8:	1076      	asrs	r6, r6, #1
   139da:	4428      	add	r0, r5
   139dc:	42b0      	cmp	r0, r6
   139de:	4632      	mov	r2, r6
   139e0:	bf84      	itt	hi
   139e2:	4606      	movhi	r6, r0
   139e4:	4632      	movhi	r2, r6
   139e6:	055b      	lsls	r3, r3, #21
   139e8:	d537      	bpl.n	13a5a <__ssprint_r+0xba>
   139ea:	4611      	mov	r1, r2
   139ec:	4648      	mov	r0, r9
   139ee:	f7fb fa31 	bl	ee54 <_malloc_r>
   139f2:	9001      	str	r0, [sp, #4]
   139f4:	2800      	cmp	r0, #0
   139f6:	d03a      	beq.n	13a6e <__ssprint_r+0xce>
   139f8:	4642      	mov	r2, r8
   139fa:	6921      	ldr	r1, [r4, #16]
   139fc:	f7f7 f85e 	bl	aabc <memcpy>
   13a00:	89a2      	ldrh	r2, [r4, #12]
   13a02:	9b01      	ldr	r3, [sp, #4]
   13a04:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   13a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13a0c:	81a2      	strh	r2, [r4, #12]
   13a0e:	eba6 0208 	sub.w	r2, r6, r8
   13a12:	eb03 0008 	add.w	r0, r3, r8
   13a16:	6166      	str	r6, [r4, #20]
   13a18:	60a2      	str	r2, [r4, #8]
   13a1a:	6123      	str	r3, [r4, #16]
   13a1c:	6020      	str	r0, [r4, #0]
   13a1e:	462e      	mov	r6, r5
   13a20:	46a8      	mov	r8, r5
   13a22:	4642      	mov	r2, r8
   13a24:	4659      	mov	r1, fp
   13a26:	f7fc f807 	bl	fa38 <memmove>
   13a2a:	f8da 3008 	ldr.w	r3, [sl, #8]
   13a2e:	68a2      	ldr	r2, [r4, #8]
   13a30:	6820      	ldr	r0, [r4, #0]
   13a32:	1b92      	subs	r2, r2, r6
   13a34:	4440      	add	r0, r8
   13a36:	1b5b      	subs	r3, r3, r5
   13a38:	60a2      	str	r2, [r4, #8]
   13a3a:	6020      	str	r0, [r4, #0]
   13a3c:	f8ca 3008 	str.w	r3, [sl, #8]
   13a40:	b33b      	cbz	r3, 13a92 <__ssprint_r+0xf2>
   13a42:	3708      	adds	r7, #8
   13a44:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   13a48:	2d00      	cmp	r5, #0
   13a4a:	d0fa      	beq.n	13a42 <__ssprint_r+0xa2>
   13a4c:	42aa      	cmp	r2, r5
   13a4e:	4616      	mov	r6, r2
   13a50:	4690      	mov	r8, r2
   13a52:	d9b3      	bls.n	139bc <__ssprint_r+0x1c>
   13a54:	462e      	mov	r6, r5
   13a56:	46a8      	mov	r8, r5
   13a58:	e7e3      	b.n	13a22 <__ssprint_r+0x82>
   13a5a:	4648      	mov	r0, r9
   13a5c:	f7fb fcb6 	bl	f3cc <_realloc_r>
   13a60:	4603      	mov	r3, r0
   13a62:	2800      	cmp	r0, #0
   13a64:	d1d3      	bne.n	13a0e <__ssprint_r+0x6e>
   13a66:	6921      	ldr	r1, [r4, #16]
   13a68:	4648      	mov	r0, r9
   13a6a:	f7fc fa57 	bl	ff1c <_free_r>
   13a6e:	89a3      	ldrh	r3, [r4, #12]
   13a70:	220c      	movs	r2, #12
   13a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13a76:	f8c9 2000 	str.w	r2, [r9]
   13a7a:	f04f 30ff 	mov.w	r0, #4294967295
   13a7e:	81a3      	strh	r3, [r4, #12]
   13a80:	2200      	movs	r2, #0
   13a82:	2300      	movs	r3, #0
   13a84:	f8ca 2008 	str.w	r2, [sl, #8]
   13a88:	f8ca 3004 	str.w	r3, [sl, #4]
   13a8c:	b003      	add	sp, #12
   13a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a92:	2000      	movs	r0, #0
   13a94:	2300      	movs	r3, #0
   13a96:	f8ca 3004 	str.w	r3, [sl, #4]
   13a9a:	b003      	add	sp, #12
   13a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013aa0 <__sprint_r.part.0>:
   13aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13aa4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   13aa6:	049c      	lsls	r4, r3, #18
   13aa8:	4690      	mov	r8, r2
   13aaa:	d52d      	bpl.n	13b08 <__sprint_r.part.0+0x68>
   13aac:	6893      	ldr	r3, [r2, #8]
   13aae:	6812      	ldr	r2, [r2, #0]
   13ab0:	b343      	cbz	r3, 13b04 <__sprint_r.part.0+0x64>
   13ab2:	468b      	mov	fp, r1
   13ab4:	4606      	mov	r6, r0
   13ab6:	f102 0908 	add.w	r9, r2, #8
   13aba:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   13abe:	ea5f 079a 	movs.w	r7, sl, lsr #2
   13ac2:	d015      	beq.n	13af0 <__sprint_r.part.0+0x50>
   13ac4:	3d04      	subs	r5, #4
   13ac6:	2400      	movs	r4, #0
   13ac8:	e001      	b.n	13ace <__sprint_r.part.0+0x2e>
   13aca:	42a7      	cmp	r7, r4
   13acc:	d00e      	beq.n	13aec <__sprint_r.part.0+0x4c>
   13ace:	f855 1f04 	ldr.w	r1, [r5, #4]!
   13ad2:	465a      	mov	r2, fp
   13ad4:	4630      	mov	r0, r6
   13ad6:	f001 fa51 	bl	14f7c <_fputwc_r>
   13ada:	1c43      	adds	r3, r0, #1
   13adc:	f104 0401 	add.w	r4, r4, #1
   13ae0:	d1f3      	bne.n	13aca <__sprint_r.part.0+0x2a>
   13ae2:	2300      	movs	r3, #0
   13ae4:	e9c8 3301 	strd	r3, r3, [r8, #4]
   13ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13af0:	f02a 0a03 	bic.w	sl, sl, #3
   13af4:	eba3 030a 	sub.w	r3, r3, sl
   13af8:	f8c8 3008 	str.w	r3, [r8, #8]
   13afc:	f109 0908 	add.w	r9, r9, #8
   13b00:	2b00      	cmp	r3, #0
   13b02:	d1da      	bne.n	13aba <__sprint_r.part.0+0x1a>
   13b04:	2000      	movs	r0, #0
   13b06:	e7ec      	b.n	13ae2 <__sprint_r.part.0+0x42>
   13b08:	f001 f808 	bl	14b1c <__sfvwrite_r>
   13b0c:	2300      	movs	r3, #0
   13b0e:	e9c8 3301 	strd	r3, r3, [r8, #4]
   13b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b16:	bf00      	nop

00013b18 <_vfiprintf_r>:
   13b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b1c:	b0c5      	sub	sp, #276	; 0x114
   13b1e:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   13b22:	4683      	mov	fp, r0
   13b24:	9103      	str	r1, [sp, #12]
   13b26:	4616      	mov	r6, r2
   13b28:	2100      	movs	r1, #0
   13b2a:	2208      	movs	r2, #8
   13b2c:	4650      	mov	r0, sl
   13b2e:	461c      	mov	r4, r3
   13b30:	9307      	str	r3, [sp, #28]
   13b32:	f7fb fffd 	bl	fb30 <memset>
   13b36:	f1bb 0f00 	cmp.w	fp, #0
   13b3a:	d004      	beq.n	13b46 <_vfiprintf_r+0x2e>
   13b3c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   13b40:	2b00      	cmp	r3, #0
   13b42:	f000 86a1 	beq.w	14888 <_vfiprintf_r+0xd70>
   13b46:	9a03      	ldr	r2, [sp, #12]
   13b48:	6e53      	ldr	r3, [r2, #100]	; 0x64
   13b4a:	07db      	lsls	r3, r3, #31
   13b4c:	f140 851c 	bpl.w	14588 <_vfiprintf_r+0xa70>
   13b50:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   13b54:	b28a      	uxth	r2, r1
   13b56:	0495      	lsls	r5, r2, #18
   13b58:	d409      	bmi.n	13b6e <_vfiprintf_r+0x56>
   13b5a:	9b03      	ldr	r3, [sp, #12]
   13b5c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   13b60:	8199      	strh	r1, [r3, #12]
   13b62:	b28a      	uxth	r2, r1
   13b64:	4619      	mov	r1, r3
   13b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13b68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   13b6c:	664b      	str	r3, [r1, #100]	; 0x64
   13b6e:	0710      	lsls	r0, r2, #28
   13b70:	f140 8104 	bpl.w	13d7c <_vfiprintf_r+0x264>
   13b74:	9b03      	ldr	r3, [sp, #12]
   13b76:	691b      	ldr	r3, [r3, #16]
   13b78:	2b00      	cmp	r3, #0
   13b7a:	f000 80ff 	beq.w	13d7c <_vfiprintf_r+0x264>
   13b7e:	f002 031a 	and.w	r3, r2, #26
   13b82:	2b0a      	cmp	r3, #10
   13b84:	f000 8108 	beq.w	13d98 <_vfiprintf_r+0x280>
   13b88:	2300      	movs	r3, #0
   13b8a:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   13b8e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   13b92:	aa1b      	add	r2, sp, #108	; 0x6c
   13b94:	930b      	str	r3, [sp, #44]	; 0x2c
   13b96:	9218      	str	r2, [sp, #96]	; 0x60
   13b98:	4691      	mov	r9, r2
   13b9a:	930c      	str	r3, [sp, #48]	; 0x30
   13b9c:	9305      	str	r3, [sp, #20]
   13b9e:	46b0      	mov	r8, r6
   13ba0:	4644      	mov	r4, r8
   13ba2:	4ba6      	ldr	r3, [pc, #664]	; (13e3c <_vfiprintf_r+0x324>)
   13ba4:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   13ba8:	f7fc f846 	bl	fc38 <__locale_mb_cur_max>
   13bac:	4622      	mov	r2, r4
   13bae:	4603      	mov	r3, r0
   13bb0:	a912      	add	r1, sp, #72	; 0x48
   13bb2:	f8cd a000 	str.w	sl, [sp]
   13bb6:	4658      	mov	r0, fp
   13bb8:	47a8      	blx	r5
   13bba:	2800      	cmp	r0, #0
   13bbc:	f000 8140 	beq.w	13e40 <_vfiprintf_r+0x328>
   13bc0:	f2c0 8133 	blt.w	13e2a <_vfiprintf_r+0x312>
   13bc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13bc6:	2a25      	cmp	r2, #37	; 0x25
   13bc8:	4603      	mov	r3, r0
   13bca:	d001      	beq.n	13bd0 <_vfiprintf_r+0xb8>
   13bcc:	441c      	add	r4, r3
   13bce:	e7e8      	b.n	13ba2 <_vfiprintf_r+0x8a>
   13bd0:	ebb4 0608 	subs.w	r6, r4, r8
   13bd4:	4605      	mov	r5, r0
   13bd6:	f040 8137 	bne.w	13e48 <_vfiprintf_r+0x330>
   13bda:	2300      	movs	r3, #0
   13bdc:	7861      	ldrb	r1, [r4, #1]
   13bde:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13be2:	f104 0801 	add.w	r8, r4, #1
   13be6:	9306      	str	r3, [sp, #24]
   13be8:	f04f 37ff 	mov.w	r7, #4294967295
   13bec:	461e      	mov	r6, r3
   13bee:	242b      	movs	r4, #43	; 0x2b
   13bf0:	f108 0801 	add.w	r8, r8, #1
   13bf4:	f1a1 0320 	sub.w	r3, r1, #32
   13bf8:	2b5a      	cmp	r3, #90	; 0x5a
   13bfa:	f200 8165 	bhi.w	13ec8 <_vfiprintf_r+0x3b0>
   13bfe:	e8df f013 	tbh	[pc, r3, lsl #1]
   13c02:	029f      	.short	0x029f
   13c04:	01630163 	.word	0x01630163
   13c08:	0163029a 	.word	0x0163029a
   13c0c:	01630163 	.word	0x01630163
   13c10:	0163006a 	.word	0x0163006a
   13c14:	02670163 	.word	0x02670163
   13c18:	01630277 	.word	0x01630277
   13c1c:	02810272 	.word	0x02810272
   13c20:	027c0163 	.word	0x027c0163
   13c24:	005b005b 	.word	0x005b005b
   13c28:	005b005b 	.word	0x005b005b
   13c2c:	005b005b 	.word	0x005b005b
   13c30:	005b005b 	.word	0x005b005b
   13c34:	0163005b 	.word	0x0163005b
   13c38:	01630163 	.word	0x01630163
   13c3c:	01630163 	.word	0x01630163
   13c40:	01630163 	.word	0x01630163
   13c44:	01630163 	.word	0x01630163
   13c48:	00840246 	.word	0x00840246
   13c4c:	01630163 	.word	0x01630163
   13c50:	01630163 	.word	0x01630163
   13c54:	01630163 	.word	0x01630163
   13c58:	01630163 	.word	0x01630163
   13c5c:	01630163 	.word	0x01630163
   13c60:	016300e2 	.word	0x016300e2
   13c64:	01630163 	.word	0x01630163
   13c68:	0163021d 	.word	0x0163021d
   13c6c:	016302c4 	.word	0x016302c4
   13c70:	05940163 	.word	0x05940163
   13c74:	01630163 	.word	0x01630163
   13c78:	01630163 	.word	0x01630163
   13c7c:	01630163 	.word	0x01630163
   13c80:	01630163 	.word	0x01630163
   13c84:	01630163 	.word	0x01630163
   13c88:	00860246 	.word	0x00860246
   13c8c:	01630163 	.word	0x01630163
   13c90:	02b70163 	.word	0x02b70163
   13c94:	007f0086 	.word	0x007f0086
   13c98:	02aa0163 	.word	0x02aa0163
   13c9c:	02e70163 	.word	0x02e70163
   13ca0:	02d700e4 	.word	0x02d700e4
   13ca4:	0163007f 	.word	0x0163007f
   13ca8:	007c021d 	.word	0x007c021d
   13cac:	01630572 	.word	0x01630572
   13cb0:	05740163 	.word	0x05740163
   13cb4:	007c0163 	.word	0x007c0163
   13cb8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13cbc:	2200      	movs	r2, #0
   13cbe:	f818 1b01 	ldrb.w	r1, [r8], #1
   13cc2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   13cc6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   13cca:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13cce:	2b09      	cmp	r3, #9
   13cd0:	d9f5      	bls.n	13cbe <_vfiprintf_r+0x1a6>
   13cd2:	9206      	str	r2, [sp, #24]
   13cd4:	e78e      	b.n	13bf4 <_vfiprintf_r+0xdc>
   13cd6:	4658      	mov	r0, fp
   13cd8:	f7fe fce8 	bl	126ac <_localeconv_r>
   13cdc:	6843      	ldr	r3, [r0, #4]
   13cde:	930d      	str	r3, [sp, #52]	; 0x34
   13ce0:	4618      	mov	r0, r3
   13ce2:	f7fc f84d 	bl	fd80 <strlen>
   13ce6:	900e      	str	r0, [sp, #56]	; 0x38
   13ce8:	4605      	mov	r5, r0
   13cea:	4658      	mov	r0, fp
   13cec:	f7fe fcde 	bl	126ac <_localeconv_r>
   13cf0:	6883      	ldr	r3, [r0, #8]
   13cf2:	930c      	str	r3, [sp, #48]	; 0x30
   13cf4:	2d00      	cmp	r5, #0
   13cf6:	f040 84df 	bne.w	146b8 <_vfiprintf_r+0xba0>
   13cfa:	f898 1000 	ldrb.w	r1, [r8]
   13cfe:	e777      	b.n	13bf0 <_vfiprintf_r+0xd8>
   13d00:	f898 1000 	ldrb.w	r1, [r8]
   13d04:	f046 0620 	orr.w	r6, r6, #32
   13d08:	e772      	b.n	13bf0 <_vfiprintf_r+0xd8>
   13d0a:	f046 0610 	orr.w	r6, r6, #16
   13d0e:	06b4      	lsls	r4, r6, #26
   13d10:	f140 8178 	bpl.w	14004 <_vfiprintf_r+0x4ec>
   13d14:	9b07      	ldr	r3, [sp, #28]
   13d16:	3307      	adds	r3, #7
   13d18:	f023 0307 	bic.w	r3, r3, #7
   13d1c:	461a      	mov	r2, r3
   13d1e:	6859      	ldr	r1, [r3, #4]
   13d20:	f852 3b08 	ldr.w	r3, [r2], #8
   13d24:	9207      	str	r2, [sp, #28]
   13d26:	460a      	mov	r2, r1
   13d28:	2900      	cmp	r1, #0
   13d2a:	f2c0 847a 	blt.w	14622 <_vfiprintf_r+0xb0a>
   13d2e:	1c79      	adds	r1, r7, #1
   13d30:	f000 85a7 	beq.w	14882 <_vfiprintf_r+0xd6a>
   13d34:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   13d38:	9102      	str	r1, [sp, #8]
   13d3a:	ea53 0102 	orrs.w	r1, r3, r2
   13d3e:	f000 8448 	beq.w	145d2 <_vfiprintf_r+0xaba>
   13d42:	2b0a      	cmp	r3, #10
   13d44:	f172 0100 	sbcs.w	r1, r2, #0
   13d48:	f080 8549 	bcs.w	147de <_vfiprintf_r+0xcc6>
   13d4c:	3330      	adds	r3, #48	; 0x30
   13d4e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   13d52:	9e02      	ldr	r6, [sp, #8]
   13d54:	2301      	movs	r3, #1
   13d56:	9304      	str	r3, [sp, #16]
   13d58:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   13d5c:	9b04      	ldr	r3, [sp, #16]
   13d5e:	42bb      	cmp	r3, r7
   13d60:	bfb8      	it	lt
   13d62:	463b      	movlt	r3, r7
   13d64:	9302      	str	r3, [sp, #8]
   13d66:	2300      	movs	r3, #0
   13d68:	9308      	str	r3, [sp, #32]
   13d6a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   13d6e:	2b00      	cmp	r3, #0
   13d70:	f000 80b8 	beq.w	13ee4 <_vfiprintf_r+0x3cc>
   13d74:	9b02      	ldr	r3, [sp, #8]
   13d76:	3301      	adds	r3, #1
   13d78:	9302      	str	r3, [sp, #8]
   13d7a:	e0b3      	b.n	13ee4 <_vfiprintf_r+0x3cc>
   13d7c:	9d03      	ldr	r5, [sp, #12]
   13d7e:	4658      	mov	r0, fp
   13d80:	4629      	mov	r1, r5
   13d82:	f001 f83f 	bl	14e04 <__swsetup_r>
   13d86:	2800      	cmp	r0, #0
   13d88:	f040 8656 	bne.w	14a38 <_vfiprintf_r+0xf20>
   13d8c:	89aa      	ldrh	r2, [r5, #12]
   13d8e:	f002 031a 	and.w	r3, r2, #26
   13d92:	2b0a      	cmp	r3, #10
   13d94:	f47f aef8 	bne.w	13b88 <_vfiprintf_r+0x70>
   13d98:	9903      	ldr	r1, [sp, #12]
   13d9a:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   13d9e:	2b00      	cmp	r3, #0
   13da0:	f6ff aef2 	blt.w	13b88 <_vfiprintf_r+0x70>
   13da4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   13da6:	07db      	lsls	r3, r3, #31
   13da8:	d402      	bmi.n	13db0 <_vfiprintf_r+0x298>
   13daa:	0597      	lsls	r7, r2, #22
   13dac:	f140 8618 	bpl.w	149e0 <_vfiprintf_r+0xec8>
   13db0:	9903      	ldr	r1, [sp, #12]
   13db2:	4623      	mov	r3, r4
   13db4:	4632      	mov	r2, r6
   13db6:	4658      	mov	r0, fp
   13db8:	f000 fe70 	bl	14a9c <__sbprintf>
   13dbc:	9005      	str	r0, [sp, #20]
   13dbe:	9805      	ldr	r0, [sp, #20]
   13dc0:	b045      	add	sp, #276	; 0x114
   13dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dc6:	f046 0610 	orr.w	r6, r6, #16
   13dca:	f016 0220 	ands.w	r2, r6, #32
   13dce:	f000 8126 	beq.w	1401e <_vfiprintf_r+0x506>
   13dd2:	9b07      	ldr	r3, [sp, #28]
   13dd4:	3307      	adds	r3, #7
   13dd6:	f023 0307 	bic.w	r3, r3, #7
   13dda:	4619      	mov	r1, r3
   13ddc:	685a      	ldr	r2, [r3, #4]
   13dde:	f851 3b08 	ldr.w	r3, [r1], #8
   13de2:	9107      	str	r1, [sp, #28]
   13de4:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   13de8:	9102      	str	r1, [sp, #8]
   13dea:	2100      	movs	r1, #0
   13dec:	2000      	movs	r0, #0
   13dee:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   13df2:	1c78      	adds	r0, r7, #1
   13df4:	f000 8200 	beq.w	141f8 <_vfiprintf_r+0x6e0>
   13df8:	9802      	ldr	r0, [sp, #8]
   13dfa:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   13dfe:	ea53 0002 	orrs.w	r0, r3, r2
   13e02:	f040 81f8 	bne.w	141f6 <_vfiprintf_r+0x6de>
   13e06:	2f00      	cmp	r7, #0
   13e08:	f040 8543 	bne.w	14892 <_vfiprintf_r+0xd7a>
   13e0c:	2900      	cmp	r1, #0
   13e0e:	f040 83e4 	bne.w	145da <_vfiprintf_r+0xac2>
   13e12:	9b02      	ldr	r3, [sp, #8]
   13e14:	f013 0301 	ands.w	r3, r3, #1
   13e18:	9304      	str	r3, [sp, #16]
   13e1a:	f000 8420 	beq.w	1465e <_vfiprintf_r+0xb46>
   13e1e:	2330      	movs	r3, #48	; 0x30
   13e20:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   13e24:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   13e28:	e798      	b.n	13d5c <_vfiprintf_r+0x244>
   13e2a:	2208      	movs	r2, #8
   13e2c:	2100      	movs	r1, #0
   13e2e:	4650      	mov	r0, sl
   13e30:	f7fb fe7e 	bl	fb30 <memset>
   13e34:	2301      	movs	r3, #1
   13e36:	441c      	add	r4, r3
   13e38:	e6b3      	b.n	13ba2 <_vfiprintf_r+0x8a>
   13e3a:	bf00      	nop
   13e3c:	1fff8ed8 	.word	0x1fff8ed8
   13e40:	ebb4 0608 	subs.w	r6, r4, r8
   13e44:	4605      	mov	r5, r0
   13e46:	d01a      	beq.n	13e7e <_vfiprintf_r+0x366>
   13e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
   13e4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13e4c:	3301      	adds	r3, #1
   13e4e:	4432      	add	r2, r6
   13e50:	2b07      	cmp	r3, #7
   13e52:	e9c9 8600 	strd	r8, r6, [r9]
   13e56:	921a      	str	r2, [sp, #104]	; 0x68
   13e58:	9319      	str	r3, [sp, #100]	; 0x64
   13e5a:	dd1a      	ble.n	13e92 <_vfiprintf_r+0x37a>
   13e5c:	2a00      	cmp	r2, #0
   13e5e:	f000 83b4 	beq.w	145ca <_vfiprintf_r+0xab2>
   13e62:	9903      	ldr	r1, [sp, #12]
   13e64:	aa18      	add	r2, sp, #96	; 0x60
   13e66:	4658      	mov	r0, fp
   13e68:	f7ff fe1a 	bl	13aa0 <__sprint_r.part.0>
   13e6c:	b9d8      	cbnz	r0, 13ea6 <_vfiprintf_r+0x38e>
   13e6e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13e72:	9b05      	ldr	r3, [sp, #20]
   13e74:	4433      	add	r3, r6
   13e76:	9305      	str	r3, [sp, #20]
   13e78:	2d00      	cmp	r5, #0
   13e7a:	f47f aeae 	bne.w	13bda <_vfiprintf_r+0xc2>
   13e7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13e80:	2b00      	cmp	r3, #0
   13e82:	f040 85ca 	bne.w	14a1a <_vfiprintf_r+0xf02>
   13e86:	9b03      	ldr	r3, [sp, #12]
   13e88:	2200      	movs	r2, #0
   13e8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13e8e:	9219      	str	r2, [sp, #100]	; 0x64
   13e90:	e00c      	b.n	13eac <_vfiprintf_r+0x394>
   13e92:	f109 0908 	add.w	r9, r9, #8
   13e96:	e7ec      	b.n	13e72 <_vfiprintf_r+0x35a>
   13e98:	46b3      	mov	fp, r6
   13e9a:	9b08      	ldr	r3, [sp, #32]
   13e9c:	b11b      	cbz	r3, 13ea6 <_vfiprintf_r+0x38e>
   13e9e:	9908      	ldr	r1, [sp, #32]
   13ea0:	4658      	mov	r0, fp
   13ea2:	f7fc f83b 	bl	ff1c <_free_r>
   13ea6:	9b03      	ldr	r3, [sp, #12]
   13ea8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13eac:	9a03      	ldr	r2, [sp, #12]
   13eae:	6e52      	ldr	r2, [r2, #100]	; 0x64
   13eb0:	f012 0f01 	tst.w	r2, #1
   13eb4:	b29a      	uxth	r2, r3
   13eb6:	f000 809c 	beq.w	13ff2 <_vfiprintf_r+0x4da>
   13eba:	0650      	lsls	r0, r2, #25
   13ebc:	f100 85c8 	bmi.w	14a50 <_vfiprintf_r+0xf38>
   13ec0:	9805      	ldr	r0, [sp, #20]
   13ec2:	b045      	add	sp, #276	; 0x114
   13ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec8:	2900      	cmp	r1, #0
   13eca:	d0d8      	beq.n	13e7e <_vfiprintf_r+0x366>
   13ecc:	2300      	movs	r3, #0
   13ece:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13ed2:	2301      	movs	r3, #1
   13ed4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   13ed8:	9302      	str	r3, [sp, #8]
   13eda:	9304      	str	r3, [sp, #16]
   13edc:	ac2b      	add	r4, sp, #172	; 0xac
   13ede:	2300      	movs	r3, #0
   13ee0:	9308      	str	r3, [sp, #32]
   13ee2:	461f      	mov	r7, r3
   13ee4:	f016 0302 	ands.w	r3, r6, #2
   13ee8:	9309      	str	r3, [sp, #36]	; 0x24
   13eea:	d002      	beq.n	13ef2 <_vfiprintf_r+0x3da>
   13eec:	9b02      	ldr	r3, [sp, #8]
   13eee:	3302      	adds	r3, #2
   13ef0:	9302      	str	r3, [sp, #8]
   13ef2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   13ef6:	930a      	str	r3, [sp, #40]	; 0x28
   13ef8:	d105      	bne.n	13f06 <_vfiprintf_r+0x3ee>
   13efa:	9b06      	ldr	r3, [sp, #24]
   13efc:	9a02      	ldr	r2, [sp, #8]
   13efe:	1a9d      	subs	r5, r3, r2
   13f00:	2d00      	cmp	r5, #0
   13f02:	f300 8294 	bgt.w	1442e <_vfiprintf_r+0x916>
   13f06:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13f0a:	1c41      	adds	r1, r0, #1
   13f0c:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   13f10:	b182      	cbz	r2, 13f34 <_vfiprintf_r+0x41c>
   13f12:	2201      	movs	r2, #1
   13f14:	3301      	adds	r3, #1
   13f16:	f8c9 2004 	str.w	r2, [r9, #4]
   13f1a:	2907      	cmp	r1, #7
   13f1c:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   13f20:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13f24:	f8c9 2000 	str.w	r2, [r9]
   13f28:	f300 8264 	bgt.w	143f4 <_vfiprintf_r+0x8dc>
   13f2c:	4608      	mov	r0, r1
   13f2e:	f109 0908 	add.w	r9, r9, #8
   13f32:	3101      	adds	r1, #1
   13f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13f36:	b1da      	cbz	r2, 13f70 <_vfiprintf_r+0x458>
   13f38:	aa11      	add	r2, sp, #68	; 0x44
   13f3a:	3302      	adds	r3, #2
   13f3c:	f8c9 2000 	str.w	r2, [r9]
   13f40:	2907      	cmp	r1, #7
   13f42:	f04f 0202 	mov.w	r2, #2
   13f46:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13f4a:	f8c9 2004 	str.w	r2, [r9, #4]
   13f4e:	f340 8269 	ble.w	14424 <_vfiprintf_r+0x90c>
   13f52:	2b00      	cmp	r3, #0
   13f54:	f000 8358 	beq.w	14608 <_vfiprintf_r+0xaf0>
   13f58:	9903      	ldr	r1, [sp, #12]
   13f5a:	aa18      	add	r2, sp, #96	; 0x60
   13f5c:	4658      	mov	r0, fp
   13f5e:	f7ff fd9f 	bl	13aa0 <__sprint_r.part.0>
   13f62:	2800      	cmp	r0, #0
   13f64:	d199      	bne.n	13e9a <_vfiprintf_r+0x382>
   13f66:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13f6a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13f6e:	1c41      	adds	r1, r0, #1
   13f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13f72:	2a80      	cmp	r2, #128	; 0x80
   13f74:	f000 8182 	beq.w	1427c <_vfiprintf_r+0x764>
   13f78:	9a04      	ldr	r2, [sp, #16]
   13f7a:	1abd      	subs	r5, r7, r2
   13f7c:	2d00      	cmp	r5, #0
   13f7e:	f300 81e0 	bgt.w	14342 <_vfiprintf_r+0x82a>
   13f82:	9a04      	ldr	r2, [sp, #16]
   13f84:	f8c9 4000 	str.w	r4, [r9]
   13f88:	4413      	add	r3, r2
   13f8a:	2907      	cmp	r1, #7
   13f8c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13f90:	f8c9 2004 	str.w	r2, [r9, #4]
   13f94:	f340 816c 	ble.w	14270 <_vfiprintf_r+0x758>
   13f98:	2b00      	cmp	r3, #0
   13f9a:	f000 829e 	beq.w	144da <_vfiprintf_r+0x9c2>
   13f9e:	9903      	ldr	r1, [sp, #12]
   13fa0:	aa18      	add	r2, sp, #96	; 0x60
   13fa2:	4658      	mov	r0, fp
   13fa4:	f7ff fd7c 	bl	13aa0 <__sprint_r.part.0>
   13fa8:	2800      	cmp	r0, #0
   13faa:	f47f af76 	bne.w	13e9a <_vfiprintf_r+0x382>
   13fae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13fb0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13fb4:	0775      	lsls	r5, r6, #29
   13fb6:	d505      	bpl.n	13fc4 <_vfiprintf_r+0x4ac>
   13fb8:	9a06      	ldr	r2, [sp, #24]
   13fba:	9902      	ldr	r1, [sp, #8]
   13fbc:	1a54      	subs	r4, r2, r1
   13fbe:	2c00      	cmp	r4, #0
   13fc0:	f300 8295 	bgt.w	144ee <_vfiprintf_r+0x9d6>
   13fc4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   13fc8:	9802      	ldr	r0, [sp, #8]
   13fca:	4281      	cmp	r1, r0
   13fcc:	bfac      	ite	ge
   13fce:	1852      	addge	r2, r2, r1
   13fd0:	1812      	addlt	r2, r2, r0
   13fd2:	9205      	str	r2, [sp, #20]
   13fd4:	2b00      	cmp	r3, #0
   13fd6:	f040 81fe 	bne.w	143d6 <_vfiprintf_r+0x8be>
   13fda:	9908      	ldr	r1, [sp, #32]
   13fdc:	2300      	movs	r3, #0
   13fde:	9319      	str	r3, [sp, #100]	; 0x64
   13fe0:	2900      	cmp	r1, #0
   13fe2:	f000 8148 	beq.w	14276 <_vfiprintf_r+0x75e>
   13fe6:	4658      	mov	r0, fp
   13fe8:	f7fb ff98 	bl	ff1c <_free_r>
   13fec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13ff0:	e5d6      	b.n	13ba0 <_vfiprintf_r+0x88>
   13ff2:	059c      	lsls	r4, r3, #22
   13ff4:	f53f af61 	bmi.w	13eba <_vfiprintf_r+0x3a2>
   13ff8:	9c03      	ldr	r4, [sp, #12]
   13ffa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13ffc:	f7fb feb8 	bl	fd70 <__retarget_lock_release_recursive>
   14000:	89a2      	ldrh	r2, [r4, #12]
   14002:	e75a      	b.n	13eba <_vfiprintf_r+0x3a2>
   14004:	06f0      	lsls	r0, r6, #27
   14006:	9a07      	ldr	r2, [sp, #28]
   14008:	f100 833e 	bmi.w	14688 <_vfiprintf_r+0xb70>
   1400c:	0671      	lsls	r1, r6, #25
   1400e:	f140 8338 	bpl.w	14682 <_vfiprintf_r+0xb6a>
   14012:	f932 3b04 	ldrsh.w	r3, [r2], #4
   14016:	9207      	str	r2, [sp, #28]
   14018:	17da      	asrs	r2, r3, #31
   1401a:	4611      	mov	r1, r2
   1401c:	e684      	b.n	13d28 <_vfiprintf_r+0x210>
   1401e:	f016 0310 	ands.w	r3, r6, #16
   14022:	9907      	ldr	r1, [sp, #28]
   14024:	f040 8328 	bne.w	14678 <_vfiprintf_r+0xb60>
   14028:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   1402c:	f000 8320 	beq.w	14670 <_vfiprintf_r+0xb58>
   14030:	461a      	mov	r2, r3
   14032:	f851 3b04 	ldr.w	r3, [r1], #4
   14036:	9107      	str	r1, [sp, #28]
   14038:	b29b      	uxth	r3, r3
   1403a:	e6d3      	b.n	13de4 <_vfiprintf_r+0x2cc>
   1403c:	9b07      	ldr	r3, [sp, #28]
   1403e:	461a      	mov	r2, r3
   14040:	2300      	movs	r3, #0
   14042:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   14046:	4613      	mov	r3, r2
   14048:	f853 4b04 	ldr.w	r4, [r3], #4
   1404c:	9302      	str	r3, [sp, #8]
   1404e:	2c00      	cmp	r4, #0
   14050:	f000 842d 	beq.w	148ae <_vfiprintf_r+0xd96>
   14054:	2953      	cmp	r1, #83	; 0x53
   14056:	f000 838a 	beq.w	1476e <_vfiprintf_r+0xc56>
   1405a:	f016 0510 	ands.w	r5, r6, #16
   1405e:	f040 8386 	bne.w	1476e <_vfiprintf_r+0xc56>
   14062:	1c7b      	adds	r3, r7, #1
   14064:	f000 84cc 	beq.w	14a00 <_vfiprintf_r+0xee8>
   14068:	463a      	mov	r2, r7
   1406a:	4629      	mov	r1, r5
   1406c:	4620      	mov	r0, r4
   1406e:	f7fe fb37 	bl	126e0 <memchr>
   14072:	9008      	str	r0, [sp, #32]
   14074:	2800      	cmp	r0, #0
   14076:	f000 84b8 	beq.w	149ea <_vfiprintf_r+0xed2>
   1407a:	1b03      	subs	r3, r0, r4
   1407c:	9a02      	ldr	r2, [sp, #8]
   1407e:	9304      	str	r3, [sp, #16]
   14080:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14084:	462f      	mov	r7, r5
   14086:	9207      	str	r2, [sp, #28]
   14088:	9302      	str	r3, [sp, #8]
   1408a:	9508      	str	r5, [sp, #32]
   1408c:	e66d      	b.n	13d6a <_vfiprintf_r+0x252>
   1408e:	2943      	cmp	r1, #67	; 0x43
   14090:	d002      	beq.n	14098 <_vfiprintf_r+0x580>
   14092:	06f5      	lsls	r5, r6, #27
   14094:	f140 8352 	bpl.w	1473c <_vfiprintf_r+0xc24>
   14098:	9d07      	ldr	r5, [sp, #28]
   1409a:	2208      	movs	r2, #8
   1409c:	2100      	movs	r1, #0
   1409e:	a816      	add	r0, sp, #88	; 0x58
   140a0:	ac2b      	add	r4, sp, #172	; 0xac
   140a2:	f7fb fd45 	bl	fb30 <memset>
   140a6:	ab16      	add	r3, sp, #88	; 0x58
   140a8:	f855 2b04 	ldr.w	r2, [r5], #4
   140ac:	4621      	mov	r1, r4
   140ae:	4658      	mov	r0, fp
   140b0:	f7ff fc2e 	bl	13910 <_wcrtomb_r>
   140b4:	4603      	mov	r3, r0
   140b6:	3301      	adds	r3, #1
   140b8:	9004      	str	r0, [sp, #16]
   140ba:	f000 84ce 	beq.w	14a5a <_vfiprintf_r+0xf42>
   140be:	9b04      	ldr	r3, [sp, #16]
   140c0:	9507      	str	r5, [sp, #28]
   140c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   140c6:	9302      	str	r3, [sp, #8]
   140c8:	2300      	movs	r3, #0
   140ca:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   140ce:	e706      	b.n	13ede <_vfiprintf_r+0x3c6>
   140d0:	9b07      	ldr	r3, [sp, #28]
   140d2:	f853 2b04 	ldr.w	r2, [r3], #4
   140d6:	9206      	str	r2, [sp, #24]
   140d8:	2a00      	cmp	r2, #0
   140da:	f280 82bb 	bge.w	14654 <_vfiprintf_r+0xb3c>
   140de:	9a06      	ldr	r2, [sp, #24]
   140e0:	4252      	negs	r2, r2
   140e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   140e6:	f898 1000 	ldrb.w	r1, [r8]
   140ea:	f046 0604 	orr.w	r6, r6, #4
   140ee:	e57f      	b.n	13bf0 <_vfiprintf_r+0xd8>
   140f0:	f898 1000 	ldrb.w	r1, [r8]
   140f4:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   140f8:	e57a      	b.n	13bf0 <_vfiprintf_r+0xd8>
   140fa:	f898 1000 	ldrb.w	r1, [r8]
   140fe:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   14102:	e575      	b.n	13bf0 <_vfiprintf_r+0xd8>
   14104:	4642      	mov	r2, r8
   14106:	f812 1b01 	ldrb.w	r1, [r2], #1
   1410a:	292a      	cmp	r1, #42	; 0x2a
   1410c:	f000 84b0 	beq.w	14a70 <_vfiprintf_r+0xf58>
   14110:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   14114:	2b09      	cmp	r3, #9
   14116:	4690      	mov	r8, r2
   14118:	f04f 0700 	mov.w	r7, #0
   1411c:	f63f ad6a 	bhi.w	13bf4 <_vfiprintf_r+0xdc>
   14120:	f818 1b01 	ldrb.w	r1, [r8], #1
   14124:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   14128:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   1412c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   14130:	2b09      	cmp	r3, #9
   14132:	d9f5      	bls.n	14120 <_vfiprintf_r+0x608>
   14134:	e55e      	b.n	13bf4 <_vfiprintf_r+0xdc>
   14136:	f898 1000 	ldrb.w	r1, [r8]
   1413a:	f046 0601 	orr.w	r6, r6, #1
   1413e:	e557      	b.n	13bf0 <_vfiprintf_r+0xd8>
   14140:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   14144:	2b00      	cmp	r3, #0
   14146:	f47f add8 	bne.w	13cfa <_vfiprintf_r+0x1e2>
   1414a:	2320      	movs	r3, #32
   1414c:	f898 1000 	ldrb.w	r1, [r8]
   14150:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   14154:	e54c      	b.n	13bf0 <_vfiprintf_r+0xd8>
   14156:	f898 1000 	ldrb.w	r1, [r8]
   1415a:	296c      	cmp	r1, #108	; 0x6c
   1415c:	bf03      	ittte	eq
   1415e:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   14162:	f046 0620 	orreq.w	r6, r6, #32
   14166:	f108 0801 	addeq.w	r8, r8, #1
   1416a:	f046 0610 	orrne.w	r6, r6, #16
   1416e:	e53f      	b.n	13bf0 <_vfiprintf_r+0xd8>
   14170:	f898 1000 	ldrb.w	r1, [r8]
   14174:	2968      	cmp	r1, #104	; 0x68
   14176:	bf03      	ittte	eq
   14178:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1417c:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   14180:	f108 0801 	addeq.w	r8, r8, #1
   14184:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   14188:	e532      	b.n	13bf0 <_vfiprintf_r+0xd8>
   1418a:	f046 0310 	orr.w	r3, r6, #16
   1418e:	9302      	str	r3, [sp, #8]
   14190:	9b02      	ldr	r3, [sp, #8]
   14192:	f013 0220 	ands.w	r2, r3, #32
   14196:	f000 8225 	beq.w	145e4 <_vfiprintf_r+0xacc>
   1419a:	9b07      	ldr	r3, [sp, #28]
   1419c:	3307      	adds	r3, #7
   1419e:	f023 0307 	bic.w	r3, r3, #7
   141a2:	4619      	mov	r1, r3
   141a4:	685a      	ldr	r2, [r3, #4]
   141a6:	f851 3b08 	ldr.w	r3, [r1], #8
   141aa:	9107      	str	r1, [sp, #28]
   141ac:	2101      	movs	r1, #1
   141ae:	e61d      	b.n	13dec <_vfiprintf_r+0x2d4>
   141b0:	9a07      	ldr	r2, [sp, #28]
   141b2:	f046 0302 	orr.w	r3, r6, #2
   141b6:	9302      	str	r3, [sp, #8]
   141b8:	f852 3b04 	ldr.w	r3, [r2], #4
   141bc:	9207      	str	r2, [sp, #28]
   141be:	f647 0230 	movw	r2, #30768	; 0x7830
   141c2:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   141c6:	4aa1      	ldr	r2, [pc, #644]	; (1444c <_vfiprintf_r+0x934>)
   141c8:	920b      	str	r2, [sp, #44]	; 0x2c
   141ca:	2102      	movs	r1, #2
   141cc:	2200      	movs	r2, #0
   141ce:	e60d      	b.n	13dec <_vfiprintf_r+0x2d4>
   141d0:	06b7      	lsls	r7, r6, #26
   141d2:	f100 8267 	bmi.w	146a4 <_vfiprintf_r+0xb8c>
   141d6:	06f5      	lsls	r5, r6, #27
   141d8:	f100 8361 	bmi.w	1489e <_vfiprintf_r+0xd86>
   141dc:	0674      	lsls	r4, r6, #25
   141de:	f100 83ee 	bmi.w	149be <_vfiprintf_r+0xea6>
   141e2:	05b0      	lsls	r0, r6, #22
   141e4:	f140 835b 	bpl.w	1489e <_vfiprintf_r+0xd86>
   141e8:	9b07      	ldr	r3, [sp, #28]
   141ea:	9905      	ldr	r1, [sp, #20]
   141ec:	f853 2b04 	ldr.w	r2, [r3], #4
   141f0:	9307      	str	r3, [sp, #28]
   141f2:	7011      	strb	r1, [r2, #0]
   141f4:	e4d4      	b.n	13ba0 <_vfiprintf_r+0x88>
   141f6:	9602      	str	r6, [sp, #8]
   141f8:	2901      	cmp	r1, #1
   141fa:	f43f ada2 	beq.w	13d42 <_vfiprintf_r+0x22a>
   141fe:	2902      	cmp	r1, #2
   14200:	ac44      	add	r4, sp, #272	; 0x110
   14202:	d111      	bne.n	14228 <_vfiprintf_r+0x710>
   14204:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14206:	f003 010f 	and.w	r1, r3, #15
   1420a:	091b      	lsrs	r3, r3, #4
   1420c:	5c41      	ldrb	r1, [r0, r1]
   1420e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   14212:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   14216:	0912      	lsrs	r2, r2, #4
   14218:	ea53 0102 	orrs.w	r1, r3, r2
   1421c:	d1f3      	bne.n	14206 <_vfiprintf_r+0x6ee>
   1421e:	9e02      	ldr	r6, [sp, #8]
   14220:	ab44      	add	r3, sp, #272	; 0x110
   14222:	1b1b      	subs	r3, r3, r4
   14224:	9304      	str	r3, [sp, #16]
   14226:	e599      	b.n	13d5c <_vfiprintf_r+0x244>
   14228:	f003 0107 	and.w	r1, r3, #7
   1422c:	08db      	lsrs	r3, r3, #3
   1422e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   14232:	08d2      	lsrs	r2, r2, #3
   14234:	3130      	adds	r1, #48	; 0x30
   14236:	ea53 0502 	orrs.w	r5, r3, r2
   1423a:	4620      	mov	r0, r4
   1423c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   14240:	d1f2      	bne.n	14228 <_vfiprintf_r+0x710>
   14242:	9e02      	ldr	r6, [sp, #8]
   14244:	07f3      	lsls	r3, r6, #31
   14246:	d5eb      	bpl.n	14220 <_vfiprintf_r+0x708>
   14248:	2930      	cmp	r1, #48	; 0x30
   1424a:	d0e8      	beq.n	1421e <_vfiprintf_r+0x706>
   1424c:	2330      	movs	r3, #48	; 0x30
   1424e:	3802      	subs	r0, #2
   14250:	f804 3c01 	strb.w	r3, [r4, #-1]
   14254:	ab44      	add	r3, sp, #272	; 0x110
   14256:	1a1b      	subs	r3, r3, r0
   14258:	9e02      	ldr	r6, [sp, #8]
   1425a:	9304      	str	r3, [sp, #16]
   1425c:	4604      	mov	r4, r0
   1425e:	e57d      	b.n	13d5c <_vfiprintf_r+0x244>
   14260:	9b04      	ldr	r3, [sp, #16]
   14262:	941b      	str	r4, [sp, #108]	; 0x6c
   14264:	2201      	movs	r2, #1
   14266:	931c      	str	r3, [sp, #112]	; 0x70
   14268:	931a      	str	r3, [sp, #104]	; 0x68
   1426a:	9219      	str	r2, [sp, #100]	; 0x64
   1426c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14270:	f109 0908 	add.w	r9, r9, #8
   14274:	e69e      	b.n	13fb4 <_vfiprintf_r+0x49c>
   14276:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1427a:	e491      	b.n	13ba0 <_vfiprintf_r+0x88>
   1427c:	9a06      	ldr	r2, [sp, #24]
   1427e:	9d02      	ldr	r5, [sp, #8]
   14280:	1b55      	subs	r5, r2, r5
   14282:	2d00      	cmp	r5, #0
   14284:	f77f ae78 	ble.w	13f78 <_vfiprintf_r+0x460>
   14288:	2d10      	cmp	r5, #16
   1428a:	f340 83d3 	ble.w	14a34 <_vfiprintf_r+0xf1c>
   1428e:	4619      	mov	r1, r3
   14290:	4643      	mov	r3, r8
   14292:	9409      	str	r4, [sp, #36]	; 0x24
   14294:	46b8      	mov	r8, r7
   14296:	9c03      	ldr	r4, [sp, #12]
   14298:	4637      	mov	r7, r6
   1429a:	465e      	mov	r6, fp
   1429c:	469b      	mov	fp, r3
   1429e:	e007      	b.n	142b0 <_vfiprintf_r+0x798>
   142a0:	f100 0c02 	add.w	ip, r0, #2
   142a4:	f109 0908 	add.w	r9, r9, #8
   142a8:	4610      	mov	r0, r2
   142aa:	3d10      	subs	r5, #16
   142ac:	2d10      	cmp	r5, #16
   142ae:	dd1f      	ble.n	142f0 <_vfiprintf_r+0x7d8>
   142b0:	4b67      	ldr	r3, [pc, #412]	; (14450 <_vfiprintf_r+0x938>)
   142b2:	f8c9 3000 	str.w	r3, [r9]
   142b6:	1c42      	adds	r2, r0, #1
   142b8:	3110      	adds	r1, #16
   142ba:	2310      	movs	r3, #16
   142bc:	2a07      	cmp	r2, #7
   142be:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   142c2:	f8c9 3004 	str.w	r3, [r9, #4]
   142c6:	ddeb      	ble.n	142a0 <_vfiprintf_r+0x788>
   142c8:	aa18      	add	r2, sp, #96	; 0x60
   142ca:	2900      	cmp	r1, #0
   142cc:	f000 808c 	beq.w	143e8 <_vfiprintf_r+0x8d0>
   142d0:	4621      	mov	r1, r4
   142d2:	4630      	mov	r0, r6
   142d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   142d8:	f7ff fbe2 	bl	13aa0 <__sprint_r.part.0>
   142dc:	2800      	cmp	r0, #0
   142de:	f47f addb 	bne.w	13e98 <_vfiprintf_r+0x380>
   142e2:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   142e6:	3d10      	subs	r5, #16
   142e8:	2d10      	cmp	r5, #16
   142ea:	f100 0c01 	add.w	ip, r0, #1
   142ee:	dcdf      	bgt.n	142b0 <_vfiprintf_r+0x798>
   142f0:	465a      	mov	r2, fp
   142f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   142f4:	46b3      	mov	fp, r6
   142f6:	460b      	mov	r3, r1
   142f8:	463e      	mov	r6, r7
   142fa:	4647      	mov	r7, r8
   142fc:	4690      	mov	r8, r2
   142fe:	4a54      	ldr	r2, [pc, #336]	; (14450 <_vfiprintf_r+0x938>)
   14300:	f8c9 5004 	str.w	r5, [r9, #4]
   14304:	442b      	add	r3, r5
   14306:	f1bc 0f07 	cmp.w	ip, #7
   1430a:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   1430e:	f8c9 2000 	str.w	r2, [r9]
   14312:	f340 81a7 	ble.w	14664 <_vfiprintf_r+0xb4c>
   14316:	2b00      	cmp	r3, #0
   14318:	f000 832c 	beq.w	14974 <_vfiprintf_r+0xe5c>
   1431c:	9903      	ldr	r1, [sp, #12]
   1431e:	aa18      	add	r2, sp, #96	; 0x60
   14320:	4658      	mov	r0, fp
   14322:	f7ff fbbd 	bl	13aa0 <__sprint_r.part.0>
   14326:	2800      	cmp	r0, #0
   14328:	f47f adb7 	bne.w	13e9a <_vfiprintf_r+0x382>
   1432c:	9a04      	ldr	r2, [sp, #16]
   1432e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   14332:	1abd      	subs	r5, r7, r2
   14334:	2d00      	cmp	r5, #0
   14336:	f100 0101 	add.w	r1, r0, #1
   1433a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1433e:	f77f ae20 	ble.w	13f82 <_vfiprintf_r+0x46a>
   14342:	2d10      	cmp	r5, #16
   14344:	dd32      	ble.n	143ac <_vfiprintf_r+0x894>
   14346:	4619      	mov	r1, r3
   14348:	4643      	mov	r3, r8
   1434a:	9409      	str	r4, [sp, #36]	; 0x24
   1434c:	46b0      	mov	r8, r6
   1434e:	9c03      	ldr	r4, [sp, #12]
   14350:	465e      	mov	r6, fp
   14352:	2710      	movs	r7, #16
   14354:	469b      	mov	fp, r3
   14356:	e007      	b.n	14368 <_vfiprintf_r+0x850>
   14358:	f100 0c02 	add.w	ip, r0, #2
   1435c:	f109 0908 	add.w	r9, r9, #8
   14360:	4610      	mov	r0, r2
   14362:	3d10      	subs	r5, #16
   14364:	2d10      	cmp	r5, #16
   14366:	dd1a      	ble.n	1439e <_vfiprintf_r+0x886>
   14368:	1c42      	adds	r2, r0, #1
   1436a:	4b39      	ldr	r3, [pc, #228]	; (14450 <_vfiprintf_r+0x938>)
   1436c:	3110      	adds	r1, #16
   1436e:	2a07      	cmp	r2, #7
   14370:	e9c9 3700 	strd	r3, r7, [r9]
   14374:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   14378:	ddee      	ble.n	14358 <_vfiprintf_r+0x840>
   1437a:	aa18      	add	r2, sp, #96	; 0x60
   1437c:	b329      	cbz	r1, 143ca <_vfiprintf_r+0x8b2>
   1437e:	4621      	mov	r1, r4
   14380:	4630      	mov	r0, r6
   14382:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14386:	f7ff fb8b 	bl	13aa0 <__sprint_r.part.0>
   1438a:	2800      	cmp	r0, #0
   1438c:	f47f ad84 	bne.w	13e98 <_vfiprintf_r+0x380>
   14390:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   14394:	3d10      	subs	r5, #16
   14396:	2d10      	cmp	r5, #16
   14398:	f100 0c01 	add.w	ip, r0, #1
   1439c:	dce4      	bgt.n	14368 <_vfiprintf_r+0x850>
   1439e:	465a      	mov	r2, fp
   143a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   143a2:	460b      	mov	r3, r1
   143a4:	46b3      	mov	fp, r6
   143a6:	4661      	mov	r1, ip
   143a8:	4646      	mov	r6, r8
   143aa:	4690      	mov	r8, r2
   143ac:	4a28      	ldr	r2, [pc, #160]	; (14450 <_vfiprintf_r+0x938>)
   143ae:	f8c9 5004 	str.w	r5, [r9, #4]
   143b2:	442b      	add	r3, r5
   143b4:	2907      	cmp	r1, #7
   143b6:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   143ba:	f8c9 2000 	str.w	r2, [r9]
   143be:	f300 80f3 	bgt.w	145a8 <_vfiprintf_r+0xa90>
   143c2:	f109 0908 	add.w	r9, r9, #8
   143c6:	3101      	adds	r1, #1
   143c8:	e5db      	b.n	13f82 <_vfiprintf_r+0x46a>
   143ca:	f04f 0c01 	mov.w	ip, #1
   143ce:	4608      	mov	r0, r1
   143d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   143d4:	e7c5      	b.n	14362 <_vfiprintf_r+0x84a>
   143d6:	9903      	ldr	r1, [sp, #12]
   143d8:	aa18      	add	r2, sp, #96	; 0x60
   143da:	4658      	mov	r0, fp
   143dc:	f7ff fb60 	bl	13aa0 <__sprint_r.part.0>
   143e0:	2800      	cmp	r0, #0
   143e2:	f43f adfa 	beq.w	13fda <_vfiprintf_r+0x4c2>
   143e6:	e558      	b.n	13e9a <_vfiprintf_r+0x382>
   143e8:	f04f 0c01 	mov.w	ip, #1
   143ec:	4608      	mov	r0, r1
   143ee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   143f2:	e75a      	b.n	142aa <_vfiprintf_r+0x792>
   143f4:	2b00      	cmp	r3, #0
   143f6:	f000 810c 	beq.w	14612 <_vfiprintf_r+0xafa>
   143fa:	9903      	ldr	r1, [sp, #12]
   143fc:	aa18      	add	r2, sp, #96	; 0x60
   143fe:	4658      	mov	r0, fp
   14400:	f7ff fb4e 	bl	13aa0 <__sprint_r.part.0>
   14404:	2800      	cmp	r0, #0
   14406:	f47f ad48 	bne.w	13e9a <_vfiprintf_r+0x382>
   1440a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1440e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14412:	1c41      	adds	r1, r0, #1
   14414:	e58e      	b.n	13f34 <_vfiprintf_r+0x41c>
   14416:	2302      	movs	r3, #2
   14418:	aa11      	add	r2, sp, #68	; 0x44
   1441a:	931c      	str	r3, [sp, #112]	; 0x70
   1441c:	921b      	str	r2, [sp, #108]	; 0x6c
   1441e:	2101      	movs	r1, #1
   14420:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14424:	4608      	mov	r0, r1
   14426:	f109 0908 	add.w	r9, r9, #8
   1442a:	1c41      	adds	r1, r0, #1
   1442c:	e5a0      	b.n	13f70 <_vfiprintf_r+0x458>
   1442e:	2d10      	cmp	r5, #16
   14430:	f340 82e2 	ble.w	149f8 <_vfiprintf_r+0xee0>
   14434:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   14438:	4618      	mov	r0, r3
   1443a:	4643      	mov	r3, r8
   1443c:	940f      	str	r4, [sp, #60]	; 0x3c
   1443e:	46b8      	mov	r8, r7
   14440:	9c03      	ldr	r4, [sp, #12]
   14442:	4637      	mov	r7, r6
   14444:	465e      	mov	r6, fp
   14446:	469b      	mov	fp, r3
   14448:	e00c      	b.n	14464 <_vfiprintf_r+0x94c>
   1444a:	bf00      	nop
   1444c:	00017484 	.word	0x00017484
   14450:	00017590 	.word	0x00017590
   14454:	f101 0c02 	add.w	ip, r1, #2
   14458:	f109 0908 	add.w	r9, r9, #8
   1445c:	4611      	mov	r1, r2
   1445e:	3d10      	subs	r5, #16
   14460:	2d10      	cmp	r5, #16
   14462:	dd1d      	ble.n	144a0 <_vfiprintf_r+0x988>
   14464:	4bb2      	ldr	r3, [pc, #712]	; (14730 <_vfiprintf_r+0xc18>)
   14466:	f8c9 3000 	str.w	r3, [r9]
   1446a:	1c4a      	adds	r2, r1, #1
   1446c:	3010      	adds	r0, #16
   1446e:	2310      	movs	r3, #16
   14470:	2a07      	cmp	r2, #7
   14472:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   14476:	f8c9 3004 	str.w	r3, [r9, #4]
   1447a:	ddeb      	ble.n	14454 <_vfiprintf_r+0x93c>
   1447c:	aa18      	add	r2, sp, #96	; 0x60
   1447e:	b330      	cbz	r0, 144ce <_vfiprintf_r+0x9b6>
   14480:	4621      	mov	r1, r4
   14482:	4630      	mov	r0, r6
   14484:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14488:	f7ff fb0a 	bl	13aa0 <__sprint_r.part.0>
   1448c:	2800      	cmp	r0, #0
   1448e:	f47f ad03 	bne.w	13e98 <_vfiprintf_r+0x380>
   14492:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
   14496:	3d10      	subs	r5, #16
   14498:	2d10      	cmp	r5, #16
   1449a:	f101 0c01 	add.w	ip, r1, #1
   1449e:	dce1      	bgt.n	14464 <_vfiprintf_r+0x94c>
   144a0:	465a      	mov	r2, fp
   144a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   144a4:	4603      	mov	r3, r0
   144a6:	46b3      	mov	fp, r6
   144a8:	4660      	mov	r0, ip
   144aa:	463e      	mov	r6, r7
   144ac:	4647      	mov	r7, r8
   144ae:	4690      	mov	r8, r2
   144b0:	4a9f      	ldr	r2, [pc, #636]	; (14730 <_vfiprintf_r+0xc18>)
   144b2:	f8c9 5004 	str.w	r5, [r9, #4]
   144b6:	442b      	add	r3, r5
   144b8:	2807      	cmp	r0, #7
   144ba:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   144be:	f8c9 2000 	str.w	r2, [r9]
   144c2:	f300 80b6 	bgt.w	14632 <_vfiprintf_r+0xb1a>
   144c6:	f109 0908 	add.w	r9, r9, #8
   144ca:	1c41      	adds	r1, r0, #1
   144cc:	e51e      	b.n	13f0c <_vfiprintf_r+0x3f4>
   144ce:	4601      	mov	r1, r0
   144d0:	f04f 0c01 	mov.w	ip, #1
   144d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   144d8:	e7c1      	b.n	1445e <_vfiprintf_r+0x946>
   144da:	0776      	lsls	r6, r6, #29
   144dc:	9319      	str	r3, [sp, #100]	; 0x64
   144de:	d54a      	bpl.n	14576 <_vfiprintf_r+0xa5e>
   144e0:	9a06      	ldr	r2, [sp, #24]
   144e2:	9902      	ldr	r1, [sp, #8]
   144e4:	1a54      	subs	r4, r2, r1
   144e6:	2c00      	cmp	r4, #0
   144e8:	dd45      	ble.n	14576 <_vfiprintf_r+0xa5e>
   144ea:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   144ee:	2c10      	cmp	r4, #16
   144f0:	f340 829d 	ble.w	14a2e <_vfiprintf_r+0xf16>
   144f4:	9919      	ldr	r1, [sp, #100]	; 0x64
   144f6:	9e03      	ldr	r6, [sp, #12]
   144f8:	2510      	movs	r5, #16
   144fa:	e006      	b.n	1450a <_vfiprintf_r+0x9f2>
   144fc:	1c88      	adds	r0, r1, #2
   144fe:	f109 0908 	add.w	r9, r9, #8
   14502:	4611      	mov	r1, r2
   14504:	3c10      	subs	r4, #16
   14506:	2c10      	cmp	r4, #16
   14508:	dd1a      	ble.n	14540 <_vfiprintf_r+0xa28>
   1450a:	1c4a      	adds	r2, r1, #1
   1450c:	4888      	ldr	r0, [pc, #544]	; (14730 <_vfiprintf_r+0xc18>)
   1450e:	3310      	adds	r3, #16
   14510:	2a07      	cmp	r2, #7
   14512:	e9c9 0500 	strd	r0, r5, [r9]
   14516:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1451a:	ddef      	ble.n	144fc <_vfiprintf_r+0x9e4>
   1451c:	aa18      	add	r2, sp, #96	; 0x60
   1451e:	b32b      	cbz	r3, 1456c <_vfiprintf_r+0xa54>
   14520:	4631      	mov	r1, r6
   14522:	4658      	mov	r0, fp
   14524:	f7ff fabc 	bl	13aa0 <__sprint_r.part.0>
   14528:	2800      	cmp	r0, #0
   1452a:	f47f acb6 	bne.w	13e9a <_vfiprintf_r+0x382>
   1452e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   14532:	3c10      	subs	r4, #16
   14534:	2c10      	cmp	r4, #16
   14536:	f101 0001 	add.w	r0, r1, #1
   1453a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1453e:	dce4      	bgt.n	1450a <_vfiprintf_r+0x9f2>
   14540:	4a7b      	ldr	r2, [pc, #492]	; (14730 <_vfiprintf_r+0xc18>)
   14542:	f8c9 4004 	str.w	r4, [r9, #4]
   14546:	4423      	add	r3, r4
   14548:	2807      	cmp	r0, #7
   1454a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1454e:	f8c9 2000 	str.w	r2, [r9]
   14552:	f77f ad37 	ble.w	13fc4 <_vfiprintf_r+0x4ac>
   14556:	b173      	cbz	r3, 14576 <_vfiprintf_r+0xa5e>
   14558:	9903      	ldr	r1, [sp, #12]
   1455a:	aa18      	add	r2, sp, #96	; 0x60
   1455c:	4658      	mov	r0, fp
   1455e:	f7ff fa9f 	bl	13aa0 <__sprint_r.part.0>
   14562:	2800      	cmp	r0, #0
   14564:	f47f ac99 	bne.w	13e9a <_vfiprintf_r+0x382>
   14568:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1456a:	e52b      	b.n	13fc4 <_vfiprintf_r+0x4ac>
   1456c:	2001      	movs	r0, #1
   1456e:	4619      	mov	r1, r3
   14570:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14574:	e7c6      	b.n	14504 <_vfiprintf_r+0x9ec>
   14576:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   1457a:	9902      	ldr	r1, [sp, #8]
   1457c:	428a      	cmp	r2, r1
   1457e:	bfac      	ite	ge
   14580:	189b      	addge	r3, r3, r2
   14582:	185b      	addlt	r3, r3, r1
   14584:	9305      	str	r3, [sp, #20]
   14586:	e528      	b.n	13fda <_vfiprintf_r+0x4c2>
   14588:	9b03      	ldr	r3, [sp, #12]
   1458a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   1458e:	058f      	lsls	r7, r1, #22
   14590:	b28a      	uxth	r2, r1
   14592:	f53f aae0 	bmi.w	13b56 <_vfiprintf_r+0x3e>
   14596:	461d      	mov	r5, r3
   14598:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1459a:	f7fb fbe7 	bl	fd6c <__retarget_lock_acquire_recursive>
   1459e:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   145a2:	b28a      	uxth	r2, r1
   145a4:	f7ff bad7 	b.w	13b56 <_vfiprintf_r+0x3e>
   145a8:	2b00      	cmp	r3, #0
   145aa:	f43f ae59 	beq.w	14260 <_vfiprintf_r+0x748>
   145ae:	9903      	ldr	r1, [sp, #12]
   145b0:	aa18      	add	r2, sp, #96	; 0x60
   145b2:	4658      	mov	r0, fp
   145b4:	f7ff fa74 	bl	13aa0 <__sprint_r.part.0>
   145b8:	2800      	cmp	r0, #0
   145ba:	f47f ac6e 	bne.w	13e9a <_vfiprintf_r+0x382>
   145be:	9919      	ldr	r1, [sp, #100]	; 0x64
   145c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   145c2:	3101      	adds	r1, #1
   145c4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   145c8:	e4db      	b.n	13f82 <_vfiprintf_r+0x46a>
   145ca:	9219      	str	r2, [sp, #100]	; 0x64
   145cc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   145d0:	e44f      	b.n	13e72 <_vfiprintf_r+0x35a>
   145d2:	2f00      	cmp	r7, #0
   145d4:	f47f abba 	bne.w	13d4c <_vfiprintf_r+0x234>
   145d8:	9e02      	ldr	r6, [sp, #8]
   145da:	2700      	movs	r7, #0
   145dc:	9704      	str	r7, [sp, #16]
   145de:	ac44      	add	r4, sp, #272	; 0x110
   145e0:	f7ff bbbc 	b.w	13d5c <_vfiprintf_r+0x244>
   145e4:	9b02      	ldr	r3, [sp, #8]
   145e6:	f013 0310 	ands.w	r3, r3, #16
   145ea:	d154      	bne.n	14696 <_vfiprintf_r+0xb7e>
   145ec:	9a02      	ldr	r2, [sp, #8]
   145ee:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   145f2:	f000 8167 	beq.w	148c4 <_vfiprintf_r+0xdac>
   145f6:	9907      	ldr	r1, [sp, #28]
   145f8:	461a      	mov	r2, r3
   145fa:	f851 3b04 	ldr.w	r3, [r1], #4
   145fe:	9107      	str	r1, [sp, #28]
   14600:	b29b      	uxth	r3, r3
   14602:	2101      	movs	r1, #1
   14604:	f7ff bbf2 	b.w	13dec <_vfiprintf_r+0x2d4>
   14608:	2101      	movs	r1, #1
   1460a:	4618      	mov	r0, r3
   1460c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14610:	e4ae      	b.n	13f70 <_vfiprintf_r+0x458>
   14612:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14614:	2a00      	cmp	r2, #0
   14616:	d15e      	bne.n	146d6 <_vfiprintf_r+0xbbe>
   14618:	4618      	mov	r0, r3
   1461a:	2101      	movs	r1, #1
   1461c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14620:	e4a6      	b.n	13f70 <_vfiprintf_r+0x458>
   14622:	425b      	negs	r3, r3
   14624:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   14628:	9602      	str	r6, [sp, #8]
   1462a:	202d      	movs	r0, #45	; 0x2d
   1462c:	2101      	movs	r1, #1
   1462e:	f7ff bbde 	b.w	13dee <_vfiprintf_r+0x2d6>
   14632:	2b00      	cmp	r3, #0
   14634:	f000 808d 	beq.w	14752 <_vfiprintf_r+0xc3a>
   14638:	9903      	ldr	r1, [sp, #12]
   1463a:	aa18      	add	r2, sp, #96	; 0x60
   1463c:	4658      	mov	r0, fp
   1463e:	f7ff fa2f 	bl	13aa0 <__sprint_r.part.0>
   14642:	2800      	cmp	r0, #0
   14644:	f47f ac29 	bne.w	13e9a <_vfiprintf_r+0x382>
   14648:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1464c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14650:	1c41      	adds	r1, r0, #1
   14652:	e45b      	b.n	13f0c <_vfiprintf_r+0x3f4>
   14654:	f898 1000 	ldrb.w	r1, [r8]
   14658:	9307      	str	r3, [sp, #28]
   1465a:	f7ff bac9 	b.w	13bf0 <_vfiprintf_r+0xd8>
   1465e:	ac44      	add	r4, sp, #272	; 0x110
   14660:	f7ff bb7c 	b.w	13d5c <_vfiprintf_r+0x244>
   14664:	f109 0908 	add.w	r9, r9, #8
   14668:	f10c 0101 	add.w	r1, ip, #1
   1466c:	4660      	mov	r0, ip
   1466e:	e483      	b.n	13f78 <_vfiprintf_r+0x460>
   14670:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   14674:	f040 8191 	bne.w	1499a <_vfiprintf_r+0xe82>
   14678:	f851 3b04 	ldr.w	r3, [r1], #4
   1467c:	9107      	str	r1, [sp, #28]
   1467e:	f7ff bbb1 	b.w	13de4 <_vfiprintf_r+0x2cc>
   14682:	05b3      	lsls	r3, r6, #22
   14684:	f100 8182 	bmi.w	1498c <_vfiprintf_r+0xe74>
   14688:	f852 3b04 	ldr.w	r3, [r2], #4
   1468c:	9207      	str	r2, [sp, #28]
   1468e:	17da      	asrs	r2, r3, #31
   14690:	4611      	mov	r1, r2
   14692:	f7ff bb49 	b.w	13d28 <_vfiprintf_r+0x210>
   14696:	9907      	ldr	r1, [sp, #28]
   14698:	f851 3b04 	ldr.w	r3, [r1], #4
   1469c:	9107      	str	r1, [sp, #28]
   1469e:	2101      	movs	r1, #1
   146a0:	f7ff bba4 	b.w	13dec <_vfiprintf_r+0x2d4>
   146a4:	9b07      	ldr	r3, [sp, #28]
   146a6:	9805      	ldr	r0, [sp, #20]
   146a8:	f853 1b04 	ldr.w	r1, [r3], #4
   146ac:	9307      	str	r3, [sp, #28]
   146ae:	17c2      	asrs	r2, r0, #31
   146b0:	e9c1 0200 	strd	r0, r2, [r1]
   146b4:	f7ff ba74 	b.w	13ba0 <_vfiprintf_r+0x88>
   146b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   146ba:	2b00      	cmp	r3, #0
   146bc:	f43f ab1d 	beq.w	13cfa <_vfiprintf_r+0x1e2>
   146c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   146c2:	781b      	ldrb	r3, [r3, #0]
   146c4:	2b00      	cmp	r3, #0
   146c6:	f43f ab18 	beq.w	13cfa <_vfiprintf_r+0x1e2>
   146ca:	f898 1000 	ldrb.w	r1, [r8]
   146ce:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   146d2:	f7ff ba8d 	b.w	13bf0 <_vfiprintf_r+0xd8>
   146d6:	2302      	movs	r3, #2
   146d8:	aa11      	add	r2, sp, #68	; 0x44
   146da:	931c      	str	r3, [sp, #112]	; 0x70
   146dc:	921b      	str	r2, [sp, #108]	; 0x6c
   146de:	2001      	movs	r0, #1
   146e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   146e4:	e69f      	b.n	14426 <_vfiprintf_r+0x90e>
   146e6:	9602      	str	r6, [sp, #8]
   146e8:	e552      	b.n	14190 <_vfiprintf_r+0x678>
   146ea:	4b12      	ldr	r3, [pc, #72]	; (14734 <_vfiprintf_r+0xc1c>)
   146ec:	930b      	str	r3, [sp, #44]	; 0x2c
   146ee:	f016 0220 	ands.w	r2, r6, #32
   146f2:	d05f      	beq.n	147b4 <_vfiprintf_r+0xc9c>
   146f4:	9b07      	ldr	r3, [sp, #28]
   146f6:	3307      	adds	r3, #7
   146f8:	f023 0307 	bic.w	r3, r3, #7
   146fc:	4618      	mov	r0, r3
   146fe:	685a      	ldr	r2, [r3, #4]
   14700:	f850 3b08 	ldr.w	r3, [r0], #8
   14704:	9007      	str	r0, [sp, #28]
   14706:	07f4      	lsls	r4, r6, #31
   14708:	d509      	bpl.n	1471e <_vfiprintf_r+0xc06>
   1470a:	ea53 0002 	orrs.w	r0, r3, r2
   1470e:	d006      	beq.n	1471e <_vfiprintf_r+0xc06>
   14710:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   14714:	2130      	movs	r1, #48	; 0x30
   14716:	f046 0602 	orr.w	r6, r6, #2
   1471a:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   1471e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   14722:	9102      	str	r1, [sp, #8]
   14724:	2102      	movs	r1, #2
   14726:	f7ff bb61 	b.w	13dec <_vfiprintf_r+0x2d4>
   1472a:	4b03      	ldr	r3, [pc, #12]	; (14738 <_vfiprintf_r+0xc20>)
   1472c:	930b      	str	r3, [sp, #44]	; 0x2c
   1472e:	e7de      	b.n	146ee <_vfiprintf_r+0xbd6>
   14730:	00017580 	.word	0x00017580
   14734:	00017484 	.word	0x00017484
   14738:	00017498 	.word	0x00017498
   1473c:	9b07      	ldr	r3, [sp, #28]
   1473e:	2101      	movs	r1, #1
   14740:	f853 2b04 	ldr.w	r2, [r3], #4
   14744:	9102      	str	r1, [sp, #8]
   14746:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   1474a:	9307      	str	r3, [sp, #28]
   1474c:	9104      	str	r1, [sp, #16]
   1474e:	ac2b      	add	r4, sp, #172	; 0xac
   14750:	e4ba      	b.n	140c8 <_vfiprintf_r+0x5b0>
   14752:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   14756:	2a00      	cmp	r2, #0
   14758:	f040 8126 	bne.w	149a8 <_vfiprintf_r+0xe90>
   1475c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1475e:	2a00      	cmp	r2, #0
   14760:	f47f ae59 	bne.w	14416 <_vfiprintf_r+0x8fe>
   14764:	4618      	mov	r0, r3
   14766:	2101      	movs	r1, #1
   14768:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1476c:	e404      	b.n	13f78 <_vfiprintf_r+0x460>
   1476e:	2100      	movs	r1, #0
   14770:	2208      	movs	r2, #8
   14772:	a816      	add	r0, sp, #88	; 0x58
   14774:	9413      	str	r4, [sp, #76]	; 0x4c
   14776:	f7fb f9db 	bl	fb30 <memset>
   1477a:	1c79      	adds	r1, r7, #1
   1477c:	f000 80b2 	beq.w	148e4 <_vfiprintf_r+0xdcc>
   14780:	2500      	movs	r5, #0
   14782:	9407      	str	r4, [sp, #28]
   14784:	462c      	mov	r4, r5
   14786:	e00c      	b.n	147a2 <_vfiprintf_r+0xc8a>
   14788:	a92b      	add	r1, sp, #172	; 0xac
   1478a:	4658      	mov	r0, fp
   1478c:	f7ff f8c0 	bl	13910 <_wcrtomb_r>
   14790:	1c42      	adds	r2, r0, #1
   14792:	4420      	add	r0, r4
   14794:	f000 8161 	beq.w	14a5a <_vfiprintf_r+0xf42>
   14798:	42b8      	cmp	r0, r7
   1479a:	dc08      	bgt.n	147ae <_vfiprintf_r+0xc96>
   1479c:	f000 8165 	beq.w	14a6a <_vfiprintf_r+0xf52>
   147a0:	4604      	mov	r4, r0
   147a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   147a4:	5952      	ldr	r2, [r2, r5]
   147a6:	ab16      	add	r3, sp, #88	; 0x58
   147a8:	3504      	adds	r5, #4
   147aa:	2a00      	cmp	r2, #0
   147ac:	d1ec      	bne.n	14788 <_vfiprintf_r+0xc70>
   147ae:	9404      	str	r4, [sp, #16]
   147b0:	9c07      	ldr	r4, [sp, #28]
   147b2:	e0a5      	b.n	14900 <_vfiprintf_r+0xde8>
   147b4:	f016 0310 	ands.w	r3, r6, #16
   147b8:	9807      	ldr	r0, [sp, #28]
   147ba:	d10c      	bne.n	147d6 <_vfiprintf_r+0xcbe>
   147bc:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   147c0:	d005      	beq.n	147ce <_vfiprintf_r+0xcb6>
   147c2:	461a      	mov	r2, r3
   147c4:	f850 3b04 	ldr.w	r3, [r0], #4
   147c8:	9007      	str	r0, [sp, #28]
   147ca:	b29b      	uxth	r3, r3
   147cc:	e79b      	b.n	14706 <_vfiprintf_r+0xbee>
   147ce:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   147d2:	f040 80d5 	bne.w	14980 <_vfiprintf_r+0xe68>
   147d6:	f850 3b04 	ldr.w	r3, [r0], #4
   147da:	9007      	str	r0, [sp, #28]
   147dc:	e793      	b.n	14706 <_vfiprintf_r+0xbee>
   147de:	9902      	ldr	r1, [sp, #8]
   147e0:	f8cd 8020 	str.w	r8, [sp, #32]
   147e4:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   147e8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   147ec:	9704      	str	r7, [sp, #16]
   147ee:	f04f 0c00 	mov.w	ip, #0
   147f2:	ac44      	add	r4, sp, #272	; 0x110
   147f4:	e005      	b.n	14802 <_vfiprintf_r+0xcea>
   147f6:	2b0a      	cmp	r3, #10
   147f8:	f172 0200 	sbcs.w	r2, r2, #0
   147fc:	d336      	bcc.n	1486c <_vfiprintf_r+0xd54>
   147fe:	463b      	mov	r3, r7
   14800:	462a      	mov	r2, r5
   14802:	f8df e290 	ldr.w	lr, [pc, #656]	; 14a94 <_vfiprintf_r+0xf7c>
   14806:	1899      	adds	r1, r3, r2
   14808:	f141 0100 	adc.w	r1, r1, #0
   1480c:	fbae 0501 	umull	r0, r5, lr, r1
   14810:	f025 0003 	bic.w	r0, r5, #3
   14814:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   14818:	1a09      	subs	r1, r1, r0
   1481a:	1a58      	subs	r0, r3, r1
   1481c:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   14820:	f162 0700 	sbc.w	r7, r2, #0
   14824:	fb05 f500 	mul.w	r5, r5, r0
   14828:	fb0e 5507 	mla	r5, lr, r7, r5
   1482c:	fba0 700e 	umull	r7, r0, r0, lr
   14830:	4405      	add	r5, r0
   14832:	f007 0e01 	and.w	lr, r7, #1
   14836:	2005      	movs	r0, #5
   14838:	fbae 0e00 	umull	r0, lr, lr, r0
   1483c:	1840      	adds	r0, r0, r1
   1483e:	087f      	lsrs	r7, r7, #1
   14840:	3030      	adds	r0, #48	; 0x30
   14842:	f804 0c01 	strb.w	r0, [r4, #-1]
   14846:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   1484a:	f10c 0c01 	add.w	ip, ip, #1
   1484e:	3c01      	subs	r4, #1
   14850:	086d      	lsrs	r5, r5, #1
   14852:	2e00      	cmp	r6, #0
   14854:	d0cf      	beq.n	147f6 <_vfiprintf_r+0xcde>
   14856:	f898 1000 	ldrb.w	r1, [r8]
   1485a:	4561      	cmp	r1, ip
   1485c:	d1cb      	bne.n	147f6 <_vfiprintf_r+0xcde>
   1485e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   14862:	d0c8      	beq.n	147f6 <_vfiprintf_r+0xcde>
   14864:	2b0a      	cmp	r3, #10
   14866:	f172 0200 	sbcs.w	r2, r2, #0
   1486a:	d26c      	bcs.n	14946 <_vfiprintf_r+0xe2e>
   1486c:	ab44      	add	r3, sp, #272	; 0x110
   1486e:	1b1b      	subs	r3, r3, r4
   14870:	9f04      	ldr	r7, [sp, #16]
   14872:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   14876:	9e02      	ldr	r6, [sp, #8]
   14878:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1487c:	9304      	str	r3, [sp, #16]
   1487e:	f7ff ba6d 	b.w	13d5c <_vfiprintf_r+0x244>
   14882:	9602      	str	r6, [sp, #8]
   14884:	f7ff ba5d 	b.w	13d42 <_vfiprintf_r+0x22a>
   14888:	4658      	mov	r0, fp
   1488a:	f7fb f821 	bl	f8d0 <__sinit>
   1488e:	f7ff b95a 	b.w	13b46 <_vfiprintf_r+0x2e>
   14892:	2901      	cmp	r1, #1
   14894:	9602      	str	r6, [sp, #8]
   14896:	f47f acb2 	bne.w	141fe <_vfiprintf_r+0x6e6>
   1489a:	f7ff ba57 	b.w	13d4c <_vfiprintf_r+0x234>
   1489e:	9b07      	ldr	r3, [sp, #28]
   148a0:	9905      	ldr	r1, [sp, #20]
   148a2:	f853 2b04 	ldr.w	r2, [r3], #4
   148a6:	6011      	str	r1, [r2, #0]
   148a8:	9307      	str	r3, [sp, #28]
   148aa:	f7ff b979 	b.w	13ba0 <_vfiprintf_r+0x88>
   148ae:	2f06      	cmp	r7, #6
   148b0:	463b      	mov	r3, r7
   148b2:	9a02      	ldr	r2, [sp, #8]
   148b4:	4c78      	ldr	r4, [pc, #480]	; (14a98 <_vfiprintf_r+0xf80>)
   148b6:	9207      	str	r2, [sp, #28]
   148b8:	bf28      	it	cs
   148ba:	2306      	movcs	r3, #6
   148bc:	9304      	str	r3, [sp, #16]
   148be:	9302      	str	r3, [sp, #8]
   148c0:	f7ff bb0d 	b.w	13ede <_vfiprintf_r+0x3c6>
   148c4:	9b02      	ldr	r3, [sp, #8]
   148c6:	9907      	ldr	r1, [sp, #28]
   148c8:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   148cc:	bf14      	ite	ne
   148ce:	f851 3b04 	ldrne.w	r3, [r1], #4
   148d2:	f851 3b04 	ldreq.w	r3, [r1], #4
   148d6:	9107      	str	r1, [sp, #28]
   148d8:	bf1c      	itt	ne
   148da:	4602      	movne	r2, r0
   148dc:	b2db      	uxtbne	r3, r3
   148de:	2101      	movs	r1, #1
   148e0:	f7ff ba84 	b.w	13dec <_vfiprintf_r+0x2d4>
   148e4:	ab16      	add	r3, sp, #88	; 0x58
   148e6:	9300      	str	r3, [sp, #0]
   148e8:	2300      	movs	r3, #0
   148ea:	4619      	mov	r1, r3
   148ec:	aa13      	add	r2, sp, #76	; 0x4c
   148ee:	4658      	mov	r0, fp
   148f0:	f7ff f834 	bl	1395c <_wcsrtombs_r>
   148f4:	4603      	mov	r3, r0
   148f6:	3301      	adds	r3, #1
   148f8:	9004      	str	r0, [sp, #16]
   148fa:	f000 80ae 	beq.w	14a5a <_vfiprintf_r+0xf42>
   148fe:	9413      	str	r4, [sp, #76]	; 0x4c
   14900:	9b04      	ldr	r3, [sp, #16]
   14902:	b37b      	cbz	r3, 14964 <_vfiprintf_r+0xe4c>
   14904:	2b63      	cmp	r3, #99	; 0x63
   14906:	dc62      	bgt.n	149ce <_vfiprintf_r+0xeb6>
   14908:	2300      	movs	r3, #0
   1490a:	9308      	str	r3, [sp, #32]
   1490c:	ac2b      	add	r4, sp, #172	; 0xac
   1490e:	2208      	movs	r2, #8
   14910:	2100      	movs	r1, #0
   14912:	a816      	add	r0, sp, #88	; 0x58
   14914:	f7fb f90c 	bl	fb30 <memset>
   14918:	9d04      	ldr	r5, [sp, #16]
   1491a:	ab16      	add	r3, sp, #88	; 0x58
   1491c:	9300      	str	r3, [sp, #0]
   1491e:	aa13      	add	r2, sp, #76	; 0x4c
   14920:	462b      	mov	r3, r5
   14922:	4621      	mov	r1, r4
   14924:	4658      	mov	r0, fp
   14926:	f7ff f819 	bl	1395c <_wcsrtombs_r>
   1492a:	4285      	cmp	r5, r0
   1492c:	f040 80ab 	bne.w	14a86 <_vfiprintf_r+0xf6e>
   14930:	9b02      	ldr	r3, [sp, #8]
   14932:	9a04      	ldr	r2, [sp, #16]
   14934:	9307      	str	r3, [sp, #28]
   14936:	2300      	movs	r3, #0
   14938:	54a3      	strb	r3, [r4, r2]
   1493a:	461f      	mov	r7, r3
   1493c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   14940:	9302      	str	r3, [sp, #8]
   14942:	f7ff ba12 	b.w	13d6a <_vfiprintf_r+0x252>
   14946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14948:	990d      	ldr	r1, [sp, #52]	; 0x34
   1494a:	1ae4      	subs	r4, r4, r3
   1494c:	461a      	mov	r2, r3
   1494e:	4620      	mov	r0, r4
   14950:	f7fb f940 	bl	fbd4 <strncpy>
   14954:	f898 3001 	ldrb.w	r3, [r8, #1]
   14958:	b10b      	cbz	r3, 1495e <_vfiprintf_r+0xe46>
   1495a:	f108 0801 	add.w	r8, r8, #1
   1495e:	f04f 0c00 	mov.w	ip, #0
   14962:	e74c      	b.n	147fe <_vfiprintf_r+0xce6>
   14964:	9b02      	ldr	r3, [sp, #8]
   14966:	9307      	str	r3, [sp, #28]
   14968:	9b04      	ldr	r3, [sp, #16]
   1496a:	9302      	str	r3, [sp, #8]
   1496c:	461f      	mov	r7, r3
   1496e:	9308      	str	r3, [sp, #32]
   14970:	f7ff b9fb 	b.w	13d6a <_vfiprintf_r+0x252>
   14974:	2101      	movs	r1, #1
   14976:	4618      	mov	r0, r3
   14978:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1497c:	f7ff bafc 	b.w	13f78 <_vfiprintf_r+0x460>
   14980:	f850 3b04 	ldr.w	r3, [r0], #4
   14984:	9007      	str	r0, [sp, #28]
   14986:	4622      	mov	r2, r4
   14988:	b2db      	uxtb	r3, r3
   1498a:	e6bc      	b.n	14706 <_vfiprintf_r+0xbee>
   1498c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   14990:	9207      	str	r2, [sp, #28]
   14992:	17da      	asrs	r2, r3, #31
   14994:	4611      	mov	r1, r2
   14996:	f7ff b9c7 	b.w	13d28 <_vfiprintf_r+0x210>
   1499a:	f851 3b04 	ldr.w	r3, [r1], #4
   1499e:	9107      	str	r1, [sp, #28]
   149a0:	4602      	mov	r2, r0
   149a2:	b2db      	uxtb	r3, r3
   149a4:	f7ff ba1e 	b.w	13de4 <_vfiprintf_r+0x2cc>
   149a8:	2301      	movs	r3, #1
   149aa:	931c      	str	r3, [sp, #112]	; 0x70
   149ac:	2101      	movs	r1, #1
   149ae:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   149b2:	931b      	str	r3, [sp, #108]	; 0x6c
   149b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   149b8:	460b      	mov	r3, r1
   149ba:	f7ff bab7 	b.w	13f2c <_vfiprintf_r+0x414>
   149be:	9b07      	ldr	r3, [sp, #28]
   149c0:	9905      	ldr	r1, [sp, #20]
   149c2:	f853 2b04 	ldr.w	r2, [r3], #4
   149c6:	9307      	str	r3, [sp, #28]
   149c8:	8011      	strh	r1, [r2, #0]
   149ca:	f7ff b8e9 	b.w	13ba0 <_vfiprintf_r+0x88>
   149ce:	1c59      	adds	r1, r3, #1
   149d0:	4658      	mov	r0, fp
   149d2:	f7fa fa3f 	bl	ee54 <_malloc_r>
   149d6:	4604      	mov	r4, r0
   149d8:	2800      	cmp	r0, #0
   149da:	d03e      	beq.n	14a5a <_vfiprintf_r+0xf42>
   149dc:	9008      	str	r0, [sp, #32]
   149de:	e796      	b.n	1490e <_vfiprintf_r+0xdf6>
   149e0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   149e2:	f7fb f9c5 	bl	fd70 <__retarget_lock_release_recursive>
   149e6:	f7ff b9e3 	b.w	13db0 <_vfiprintf_r+0x298>
   149ea:	9b02      	ldr	r3, [sp, #8]
   149ec:	9704      	str	r7, [sp, #16]
   149ee:	9702      	str	r7, [sp, #8]
   149f0:	9307      	str	r3, [sp, #28]
   149f2:	9f08      	ldr	r7, [sp, #32]
   149f4:	f7ff b9b9 	b.w	13d6a <_vfiprintf_r+0x252>
   149f8:	9819      	ldr	r0, [sp, #100]	; 0x64
   149fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   149fc:	3001      	adds	r0, #1
   149fe:	e557      	b.n	144b0 <_vfiprintf_r+0x998>
   14a00:	9b02      	ldr	r3, [sp, #8]
   14a02:	9307      	str	r3, [sp, #28]
   14a04:	4620      	mov	r0, r4
   14a06:	f7fb f9bb 	bl	fd80 <strlen>
   14a0a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   14a0e:	462f      	mov	r7, r5
   14a10:	9004      	str	r0, [sp, #16]
   14a12:	9302      	str	r3, [sp, #8]
   14a14:	9508      	str	r5, [sp, #32]
   14a16:	f7ff b9a8 	b.w	13d6a <_vfiprintf_r+0x252>
   14a1a:	9903      	ldr	r1, [sp, #12]
   14a1c:	aa18      	add	r2, sp, #96	; 0x60
   14a1e:	4658      	mov	r0, fp
   14a20:	f7ff f83e 	bl	13aa0 <__sprint_r.part.0>
   14a24:	2800      	cmp	r0, #0
   14a26:	f43f aa2e 	beq.w	13e86 <_vfiprintf_r+0x36e>
   14a2a:	f7ff ba3c 	b.w	13ea6 <_vfiprintf_r+0x38e>
   14a2e:	9819      	ldr	r0, [sp, #100]	; 0x64
   14a30:	3001      	adds	r0, #1
   14a32:	e585      	b.n	14540 <_vfiprintf_r+0xa28>
   14a34:	468c      	mov	ip, r1
   14a36:	e462      	b.n	142fe <_vfiprintf_r+0x7e6>
   14a38:	9b03      	ldr	r3, [sp, #12]
   14a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   14a3c:	07d9      	lsls	r1, r3, #31
   14a3e:	d407      	bmi.n	14a50 <_vfiprintf_r+0xf38>
   14a40:	9b03      	ldr	r3, [sp, #12]
   14a42:	899b      	ldrh	r3, [r3, #12]
   14a44:	059a      	lsls	r2, r3, #22
   14a46:	d403      	bmi.n	14a50 <_vfiprintf_r+0xf38>
   14a48:	9b03      	ldr	r3, [sp, #12]
   14a4a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   14a4c:	f7fb f990 	bl	fd70 <__retarget_lock_release_recursive>
   14a50:	f04f 33ff 	mov.w	r3, #4294967295
   14a54:	9305      	str	r3, [sp, #20]
   14a56:	f7ff ba33 	b.w	13ec0 <_vfiprintf_r+0x3a8>
   14a5a:	9a03      	ldr	r2, [sp, #12]
   14a5c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   14a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14a64:	8193      	strh	r3, [r2, #12]
   14a66:	f7ff ba21 	b.w	13eac <_vfiprintf_r+0x394>
   14a6a:	9c07      	ldr	r4, [sp, #28]
   14a6c:	9704      	str	r7, [sp, #16]
   14a6e:	e747      	b.n	14900 <_vfiprintf_r+0xde8>
   14a70:	9b07      	ldr	r3, [sp, #28]
   14a72:	f898 1001 	ldrb.w	r1, [r8, #1]
   14a76:	f853 7b04 	ldr.w	r7, [r3], #4
   14a7a:	9307      	str	r3, [sp, #28]
   14a7c:	4690      	mov	r8, r2
   14a7e:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   14a82:	f7ff b8b5 	b.w	13bf0 <_vfiprintf_r+0xd8>
   14a86:	9a03      	ldr	r2, [sp, #12]
   14a88:	8993      	ldrh	r3, [r2, #12]
   14a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14a8e:	8193      	strh	r3, [r2, #12]
   14a90:	f7ff ba03 	b.w	13e9a <_vfiprintf_r+0x382>
   14a94:	cccccccd 	.word	0xcccccccd
   14a98:	000174ac 	.word	0x000174ac

00014a9c <__sbprintf>:
   14a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a9e:	461f      	mov	r7, r3
   14aa0:	898b      	ldrh	r3, [r1, #12]
   14aa2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   14aa6:	f023 0302 	bic.w	r3, r3, #2
   14aaa:	f8ad 300c 	strh.w	r3, [sp, #12]
   14aae:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   14ab0:	9319      	str	r3, [sp, #100]	; 0x64
   14ab2:	89cb      	ldrh	r3, [r1, #14]
   14ab4:	f8ad 300e 	strh.w	r3, [sp, #14]
   14ab8:	69cb      	ldr	r3, [r1, #28]
   14aba:	9307      	str	r3, [sp, #28]
   14abc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   14abe:	9309      	str	r3, [sp, #36]	; 0x24
   14ac0:	ab1a      	add	r3, sp, #104	; 0x68
   14ac2:	9300      	str	r3, [sp, #0]
   14ac4:	9304      	str	r3, [sp, #16]
   14ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   14aca:	4615      	mov	r5, r2
   14acc:	4606      	mov	r6, r0
   14ace:	9302      	str	r3, [sp, #8]
   14ad0:	9305      	str	r3, [sp, #20]
   14ad2:	a816      	add	r0, sp, #88	; 0x58
   14ad4:	2300      	movs	r3, #0
   14ad6:	460c      	mov	r4, r1
   14ad8:	9306      	str	r3, [sp, #24]
   14ada:	f7fb f943 	bl	fd64 <__retarget_lock_init_recursive>
   14ade:	462a      	mov	r2, r5
   14ae0:	463b      	mov	r3, r7
   14ae2:	4669      	mov	r1, sp
   14ae4:	4630      	mov	r0, r6
   14ae6:	f7ff f817 	bl	13b18 <_vfiprintf_r>
   14aea:	1e05      	subs	r5, r0, #0
   14aec:	db07      	blt.n	14afe <__sbprintf+0x62>
   14aee:	4669      	mov	r1, sp
   14af0:	4630      	mov	r0, r6
   14af2:	f7fd fdb1 	bl	12658 <_fflush_r>
   14af6:	2800      	cmp	r0, #0
   14af8:	bf18      	it	ne
   14afa:	f04f 35ff 	movne.w	r5, #4294967295
   14afe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   14b02:	065b      	lsls	r3, r3, #25
   14b04:	d503      	bpl.n	14b0e <__sbprintf+0x72>
   14b06:	89a3      	ldrh	r3, [r4, #12]
   14b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14b0c:	81a3      	strh	r3, [r4, #12]
   14b0e:	9816      	ldr	r0, [sp, #88]	; 0x58
   14b10:	f7fb f92a 	bl	fd68 <__retarget_lock_close_recursive>
   14b14:	4628      	mov	r0, r5
   14b16:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   14b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014b1c <__sfvwrite_r>:
   14b1c:	6893      	ldr	r3, [r2, #8]
   14b1e:	2b00      	cmp	r3, #0
   14b20:	f000 8081 	beq.w	14c26 <__sfvwrite_r+0x10a>
   14b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b28:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   14b2c:	460c      	mov	r4, r1
   14b2e:	0719      	lsls	r1, r3, #28
   14b30:	4680      	mov	r8, r0
   14b32:	b083      	sub	sp, #12
   14b34:	4617      	mov	r7, r2
   14b36:	b298      	uxth	r0, r3
   14b38:	d523      	bpl.n	14b82 <__sfvwrite_r+0x66>
   14b3a:	6923      	ldr	r3, [r4, #16]
   14b3c:	b30b      	cbz	r3, 14b82 <__sfvwrite_r+0x66>
   14b3e:	f010 0302 	ands.w	r3, r0, #2
   14b42:	683d      	ldr	r5, [r7, #0]
   14b44:	d02b      	beq.n	14b9e <__sfvwrite_r+0x82>
   14b46:	f04f 0a00 	mov.w	sl, #0
   14b4a:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 14e00 <__sfvwrite_r+0x2e4>
   14b4e:	4656      	mov	r6, sl
   14b50:	455e      	cmp	r6, fp
   14b52:	4633      	mov	r3, r6
   14b54:	4652      	mov	r2, sl
   14b56:	bf28      	it	cs
   14b58:	465b      	movcs	r3, fp
   14b5a:	4640      	mov	r0, r8
   14b5c:	2e00      	cmp	r6, #0
   14b5e:	d04f      	beq.n	14c00 <__sfvwrite_r+0xe4>
   14b60:	69e1      	ldr	r1, [r4, #28]
   14b62:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   14b66:	47e0      	blx	ip
   14b68:	2800      	cmp	r0, #0
   14b6a:	dd52      	ble.n	14c12 <__sfvwrite_r+0xf6>
   14b6c:	68bb      	ldr	r3, [r7, #8]
   14b6e:	1a1b      	subs	r3, r3, r0
   14b70:	4482      	add	sl, r0
   14b72:	1a36      	subs	r6, r6, r0
   14b74:	60bb      	str	r3, [r7, #8]
   14b76:	2b00      	cmp	r3, #0
   14b78:	d1ea      	bne.n	14b50 <__sfvwrite_r+0x34>
   14b7a:	2000      	movs	r0, #0
   14b7c:	b003      	add	sp, #12
   14b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b82:	4621      	mov	r1, r4
   14b84:	4640      	mov	r0, r8
   14b86:	f000 f93d 	bl	14e04 <__swsetup_r>
   14b8a:	2800      	cmp	r0, #0
   14b8c:	f040 8134 	bne.w	14df8 <__sfvwrite_r+0x2dc>
   14b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14b94:	683d      	ldr	r5, [r7, #0]
   14b96:	b298      	uxth	r0, r3
   14b98:	f010 0302 	ands.w	r3, r0, #2
   14b9c:	d1d3      	bne.n	14b46 <__sfvwrite_r+0x2a>
   14b9e:	f010 0901 	ands.w	r9, r0, #1
   14ba2:	d142      	bne.n	14c2a <__sfvwrite_r+0x10e>
   14ba4:	464e      	mov	r6, r9
   14ba6:	b33e      	cbz	r6, 14bf8 <__sfvwrite_r+0xdc>
   14ba8:	0582      	lsls	r2, r0, #22
   14baa:	f8d4 b008 	ldr.w	fp, [r4, #8]
   14bae:	f140 8081 	bpl.w	14cb4 <__sfvwrite_r+0x198>
   14bb2:	45b3      	cmp	fp, r6
   14bb4:	465a      	mov	r2, fp
   14bb6:	f200 80b1 	bhi.w	14d1c <__sfvwrite_r+0x200>
   14bba:	f410 6f90 	tst.w	r0, #1152	; 0x480
   14bbe:	f040 80be 	bne.w	14d3e <__sfvwrite_r+0x222>
   14bc2:	6820      	ldr	r0, [r4, #0]
   14bc4:	9201      	str	r2, [sp, #4]
   14bc6:	4649      	mov	r1, r9
   14bc8:	f7fa ff36 	bl	fa38 <memmove>
   14bcc:	68a3      	ldr	r3, [r4, #8]
   14bce:	9a01      	ldr	r2, [sp, #4]
   14bd0:	eba3 010b 	sub.w	r1, r3, fp
   14bd4:	6823      	ldr	r3, [r4, #0]
   14bd6:	60a1      	str	r1, [r4, #8]
   14bd8:	4413      	add	r3, r2
   14bda:	46b2      	mov	sl, r6
   14bdc:	6023      	str	r3, [r4, #0]
   14bde:	2600      	movs	r6, #0
   14be0:	68bb      	ldr	r3, [r7, #8]
   14be2:	eba3 030a 	sub.w	r3, r3, sl
   14be6:	44d1      	add	r9, sl
   14be8:	60bb      	str	r3, [r7, #8]
   14bea:	2b00      	cmp	r3, #0
   14bec:	d0c5      	beq.n	14b7a <__sfvwrite_r+0x5e>
   14bee:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   14bf2:	b280      	uxth	r0, r0
   14bf4:	2e00      	cmp	r6, #0
   14bf6:	d1d7      	bne.n	14ba8 <__sfvwrite_r+0x8c>
   14bf8:	e9d5 9600 	ldrd	r9, r6, [r5]
   14bfc:	3508      	adds	r5, #8
   14bfe:	e7d2      	b.n	14ba6 <__sfvwrite_r+0x8a>
   14c00:	e9d5 a600 	ldrd	sl, r6, [r5]
   14c04:	3508      	adds	r5, #8
   14c06:	e7a3      	b.n	14b50 <__sfvwrite_r+0x34>
   14c08:	4621      	mov	r1, r4
   14c0a:	4640      	mov	r0, r8
   14c0c:	f7fd fd24 	bl	12658 <_fflush_r>
   14c10:	b380      	cbz	r0, 14c74 <__sfvwrite_r+0x158>
   14c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14c1a:	f04f 30ff 	mov.w	r0, #4294967295
   14c1e:	81a3      	strh	r3, [r4, #12]
   14c20:	b003      	add	sp, #12
   14c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c26:	2000      	movs	r0, #0
   14c28:	4770      	bx	lr
   14c2a:	461e      	mov	r6, r3
   14c2c:	46ba      	mov	sl, r7
   14c2e:	4699      	mov	r9, r3
   14c30:	4618      	mov	r0, r3
   14c32:	461f      	mov	r7, r3
   14c34:	b366      	cbz	r6, 14c90 <__sfvwrite_r+0x174>
   14c36:	b388      	cbz	r0, 14c9c <__sfvwrite_r+0x180>
   14c38:	464a      	mov	r2, r9
   14c3a:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
   14c3e:	6820      	ldr	r0, [r4, #0]
   14c40:	68a1      	ldr	r1, [r4, #8]
   14c42:	42b2      	cmp	r2, r6
   14c44:	bf28      	it	cs
   14c46:	4632      	movcs	r2, r6
   14c48:	4560      	cmp	r0, ip
   14c4a:	d904      	bls.n	14c56 <__sfvwrite_r+0x13a>
   14c4c:	eb01 0b03 	add.w	fp, r1, r3
   14c50:	455a      	cmp	r2, fp
   14c52:	f300 80a7 	bgt.w	14da4 <__sfvwrite_r+0x288>
   14c56:	4293      	cmp	r3, r2
   14c58:	dc64      	bgt.n	14d24 <__sfvwrite_r+0x208>
   14c5a:	69e1      	ldr	r1, [r4, #28]
   14c5c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   14c60:	463a      	mov	r2, r7
   14c62:	4640      	mov	r0, r8
   14c64:	47e0      	blx	ip
   14c66:	f1b0 0b00 	subs.w	fp, r0, #0
   14c6a:	ddd2      	ble.n	14c12 <__sfvwrite_r+0xf6>
   14c6c:	ebb9 090b 	subs.w	r9, r9, fp
   14c70:	d0ca      	beq.n	14c08 <__sfvwrite_r+0xec>
   14c72:	2001      	movs	r0, #1
   14c74:	f8da 3008 	ldr.w	r3, [sl, #8]
   14c78:	eba3 030b 	sub.w	r3, r3, fp
   14c7c:	445f      	add	r7, fp
   14c7e:	eba6 060b 	sub.w	r6, r6, fp
   14c82:	f8ca 3008 	str.w	r3, [sl, #8]
   14c86:	2b00      	cmp	r3, #0
   14c88:	f43f af77 	beq.w	14b7a <__sfvwrite_r+0x5e>
   14c8c:	2e00      	cmp	r6, #0
   14c8e:	d1d2      	bne.n	14c36 <__sfvwrite_r+0x11a>
   14c90:	686e      	ldr	r6, [r5, #4]
   14c92:	462b      	mov	r3, r5
   14c94:	3508      	adds	r5, #8
   14c96:	2e00      	cmp	r6, #0
   14c98:	d0fa      	beq.n	14c90 <__sfvwrite_r+0x174>
   14c9a:	681f      	ldr	r7, [r3, #0]
   14c9c:	4632      	mov	r2, r6
   14c9e:	210a      	movs	r1, #10
   14ca0:	4638      	mov	r0, r7
   14ca2:	f7fd fd1d 	bl	126e0 <memchr>
   14ca6:	2800      	cmp	r0, #0
   14ca8:	f000 809d 	beq.w	14de6 <__sfvwrite_r+0x2ca>
   14cac:	3001      	adds	r0, #1
   14cae:	eba0 0907 	sub.w	r9, r0, r7
   14cb2:	e7c1      	b.n	14c38 <__sfvwrite_r+0x11c>
   14cb4:	6820      	ldr	r0, [r4, #0]
   14cb6:	6923      	ldr	r3, [r4, #16]
   14cb8:	4298      	cmp	r0, r3
   14cba:	d817      	bhi.n	14cec <__sfvwrite_r+0x1d0>
   14cbc:	6962      	ldr	r2, [r4, #20]
   14cbe:	42b2      	cmp	r2, r6
   14cc0:	d814      	bhi.n	14cec <__sfvwrite_r+0x1d0>
   14cc2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14cc6:	42b3      	cmp	r3, r6
   14cc8:	bf28      	it	cs
   14cca:	4633      	movcs	r3, r6
   14ccc:	69e1      	ldr	r1, [r4, #28]
   14cce:	fb93 f3f2 	sdiv	r3, r3, r2
   14cd2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   14cd6:	fb02 f303 	mul.w	r3, r2, r3
   14cda:	4640      	mov	r0, r8
   14cdc:	464a      	mov	r2, r9
   14cde:	47e0      	blx	ip
   14ce0:	f1b0 0a00 	subs.w	sl, r0, #0
   14ce4:	dd95      	ble.n	14c12 <__sfvwrite_r+0xf6>
   14ce6:	eba6 060a 	sub.w	r6, r6, sl
   14cea:	e779      	b.n	14be0 <__sfvwrite_r+0xc4>
   14cec:	45b3      	cmp	fp, r6
   14cee:	46da      	mov	sl, fp
   14cf0:	bf28      	it	cs
   14cf2:	46b2      	movcs	sl, r6
   14cf4:	4652      	mov	r2, sl
   14cf6:	4649      	mov	r1, r9
   14cf8:	f7fa fe9e 	bl	fa38 <memmove>
   14cfc:	68a3      	ldr	r3, [r4, #8]
   14cfe:	6822      	ldr	r2, [r4, #0]
   14d00:	eba3 030a 	sub.w	r3, r3, sl
   14d04:	4452      	add	r2, sl
   14d06:	60a3      	str	r3, [r4, #8]
   14d08:	6022      	str	r2, [r4, #0]
   14d0a:	2b00      	cmp	r3, #0
   14d0c:	d1eb      	bne.n	14ce6 <__sfvwrite_r+0x1ca>
   14d0e:	4621      	mov	r1, r4
   14d10:	4640      	mov	r0, r8
   14d12:	f7fd fca1 	bl	12658 <_fflush_r>
   14d16:	2800      	cmp	r0, #0
   14d18:	d0e5      	beq.n	14ce6 <__sfvwrite_r+0x1ca>
   14d1a:	e77a      	b.n	14c12 <__sfvwrite_r+0xf6>
   14d1c:	6820      	ldr	r0, [r4, #0]
   14d1e:	46b3      	mov	fp, r6
   14d20:	4632      	mov	r2, r6
   14d22:	e74f      	b.n	14bc4 <__sfvwrite_r+0xa8>
   14d24:	4639      	mov	r1, r7
   14d26:	9201      	str	r2, [sp, #4]
   14d28:	f7fa fe86 	bl	fa38 <memmove>
   14d2c:	9a01      	ldr	r2, [sp, #4]
   14d2e:	68a3      	ldr	r3, [r4, #8]
   14d30:	1a9b      	subs	r3, r3, r2
   14d32:	60a3      	str	r3, [r4, #8]
   14d34:	6823      	ldr	r3, [r4, #0]
   14d36:	4413      	add	r3, r2
   14d38:	6023      	str	r3, [r4, #0]
   14d3a:	4693      	mov	fp, r2
   14d3c:	e796      	b.n	14c6c <__sfvwrite_r+0x150>
   14d3e:	6823      	ldr	r3, [r4, #0]
   14d40:	6921      	ldr	r1, [r4, #16]
   14d42:	eba3 0b01 	sub.w	fp, r3, r1
   14d46:	6963      	ldr	r3, [r4, #20]
   14d48:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   14d4c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   14d50:	f10b 0301 	add.w	r3, fp, #1
   14d54:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   14d58:	4433      	add	r3, r6
   14d5a:	4553      	cmp	r3, sl
   14d5c:	4652      	mov	r2, sl
   14d5e:	bf84      	itt	hi
   14d60:	469a      	movhi	sl, r3
   14d62:	4652      	movhi	r2, sl
   14d64:	0543      	lsls	r3, r0, #21
   14d66:	d52c      	bpl.n	14dc2 <__sfvwrite_r+0x2a6>
   14d68:	4611      	mov	r1, r2
   14d6a:	4640      	mov	r0, r8
   14d6c:	f7fa f872 	bl	ee54 <_malloc_r>
   14d70:	2800      	cmp	r0, #0
   14d72:	d03b      	beq.n	14dec <__sfvwrite_r+0x2d0>
   14d74:	465a      	mov	r2, fp
   14d76:	6921      	ldr	r1, [r4, #16]
   14d78:	9001      	str	r0, [sp, #4]
   14d7a:	f7f5 fe9f 	bl	aabc <memcpy>
   14d7e:	89a2      	ldrh	r2, [r4, #12]
   14d80:	9b01      	ldr	r3, [sp, #4]
   14d82:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   14d86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14d8a:	81a2      	strh	r2, [r4, #12]
   14d8c:	eb03 000b 	add.w	r0, r3, fp
   14d90:	6123      	str	r3, [r4, #16]
   14d92:	ebaa 030b 	sub.w	r3, sl, fp
   14d96:	f8c4 a014 	str.w	sl, [r4, #20]
   14d9a:	60a3      	str	r3, [r4, #8]
   14d9c:	6020      	str	r0, [r4, #0]
   14d9e:	46b3      	mov	fp, r6
   14da0:	4632      	mov	r2, r6
   14da2:	e70f      	b.n	14bc4 <__sfvwrite_r+0xa8>
   14da4:	4639      	mov	r1, r7
   14da6:	465a      	mov	r2, fp
   14da8:	f7fa fe46 	bl	fa38 <memmove>
   14dac:	6823      	ldr	r3, [r4, #0]
   14dae:	445b      	add	r3, fp
   14db0:	6023      	str	r3, [r4, #0]
   14db2:	4621      	mov	r1, r4
   14db4:	4640      	mov	r0, r8
   14db6:	f7fd fc4f 	bl	12658 <_fflush_r>
   14dba:	2800      	cmp	r0, #0
   14dbc:	f43f af56 	beq.w	14c6c <__sfvwrite_r+0x150>
   14dc0:	e727      	b.n	14c12 <__sfvwrite_r+0xf6>
   14dc2:	4640      	mov	r0, r8
   14dc4:	f7fa fb02 	bl	f3cc <_realloc_r>
   14dc8:	4603      	mov	r3, r0
   14dca:	2800      	cmp	r0, #0
   14dcc:	d1de      	bne.n	14d8c <__sfvwrite_r+0x270>
   14dce:	6921      	ldr	r1, [r4, #16]
   14dd0:	4640      	mov	r0, r8
   14dd2:	f7fb f8a3 	bl	ff1c <_free_r>
   14dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14dda:	220c      	movs	r2, #12
   14ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14de0:	f8c8 2000 	str.w	r2, [r8]
   14de4:	e717      	b.n	14c16 <__sfvwrite_r+0xfa>
   14de6:	1c72      	adds	r2, r6, #1
   14de8:	4691      	mov	r9, r2
   14dea:	e726      	b.n	14c3a <__sfvwrite_r+0x11e>
   14dec:	220c      	movs	r2, #12
   14dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14df2:	f8c8 2000 	str.w	r2, [r8]
   14df6:	e70e      	b.n	14c16 <__sfvwrite_r+0xfa>
   14df8:	f04f 30ff 	mov.w	r0, #4294967295
   14dfc:	e6be      	b.n	14b7c <__sfvwrite_r+0x60>
   14dfe:	bf00      	nop
   14e00:	7ffffc00 	.word	0x7ffffc00

00014e04 <__swsetup_r>:
   14e04:	b538      	push	{r3, r4, r5, lr}
   14e06:	4b31      	ldr	r3, [pc, #196]	; (14ecc <__swsetup_r+0xc8>)
   14e08:	681b      	ldr	r3, [r3, #0]
   14e0a:	4605      	mov	r5, r0
   14e0c:	460c      	mov	r4, r1
   14e0e:	b113      	cbz	r3, 14e16 <__swsetup_r+0x12>
   14e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   14e12:	2a00      	cmp	r2, #0
   14e14:	d04e      	beq.n	14eb4 <__swsetup_r+0xb0>
   14e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14e1a:	0718      	lsls	r0, r3, #28
   14e1c:	b29a      	uxth	r2, r3
   14e1e:	d51c      	bpl.n	14e5a <__swsetup_r+0x56>
   14e20:	6921      	ldr	r1, [r4, #16]
   14e22:	b329      	cbz	r1, 14e70 <__swsetup_r+0x6c>
   14e24:	f012 0001 	ands.w	r0, r2, #1
   14e28:	d007      	beq.n	14e3a <__swsetup_r+0x36>
   14e2a:	2000      	movs	r0, #0
   14e2c:	60a0      	str	r0, [r4, #8]
   14e2e:	6960      	ldr	r0, [r4, #20]
   14e30:	4240      	negs	r0, r0
   14e32:	61a0      	str	r0, [r4, #24]
   14e34:	b139      	cbz	r1, 14e46 <__swsetup_r+0x42>
   14e36:	2000      	movs	r0, #0
   14e38:	bd38      	pop	{r3, r4, r5, pc}
   14e3a:	0795      	lsls	r5, r2, #30
   14e3c:	bf58      	it	pl
   14e3e:	6960      	ldrpl	r0, [r4, #20]
   14e40:	60a0      	str	r0, [r4, #8]
   14e42:	2900      	cmp	r1, #0
   14e44:	d1f7      	bne.n	14e36 <__swsetup_r+0x32>
   14e46:	0612      	lsls	r2, r2, #24
   14e48:	bf58      	it	pl
   14e4a:	4608      	movpl	r0, r1
   14e4c:	d5f4      	bpl.n	14e38 <__swsetup_r+0x34>
   14e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14e52:	81a3      	strh	r3, [r4, #12]
   14e54:	f04f 30ff 	mov.w	r0, #4294967295
   14e58:	bd38      	pop	{r3, r4, r5, pc}
   14e5a:	06d1      	lsls	r1, r2, #27
   14e5c:	d52e      	bpl.n	14ebc <__swsetup_r+0xb8>
   14e5e:	0752      	lsls	r2, r2, #29
   14e60:	d414      	bmi.n	14e8c <__swsetup_r+0x88>
   14e62:	6921      	ldr	r1, [r4, #16]
   14e64:	f043 0308 	orr.w	r3, r3, #8
   14e68:	81a3      	strh	r3, [r4, #12]
   14e6a:	b29a      	uxth	r2, r3
   14e6c:	2900      	cmp	r1, #0
   14e6e:	d1d9      	bne.n	14e24 <__swsetup_r+0x20>
   14e70:	f402 7020 	and.w	r0, r2, #640	; 0x280
   14e74:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   14e78:	d0d4      	beq.n	14e24 <__swsetup_r+0x20>
   14e7a:	4621      	mov	r1, r4
   14e7c:	4628      	mov	r0, r5
   14e7e:	f000 f93f 	bl	15100 <__smakebuf_r>
   14e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14e86:	6921      	ldr	r1, [r4, #16]
   14e88:	b29a      	uxth	r2, r3
   14e8a:	e7cb      	b.n	14e24 <__swsetup_r+0x20>
   14e8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14e8e:	b151      	cbz	r1, 14ea6 <__swsetup_r+0xa2>
   14e90:	f104 0240 	add.w	r2, r4, #64	; 0x40
   14e94:	4291      	cmp	r1, r2
   14e96:	d004      	beq.n	14ea2 <__swsetup_r+0x9e>
   14e98:	4628      	mov	r0, r5
   14e9a:	f7fb f83f 	bl	ff1c <_free_r>
   14e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14ea2:	2200      	movs	r2, #0
   14ea4:	6322      	str	r2, [r4, #48]	; 0x30
   14ea6:	6921      	ldr	r1, [r4, #16]
   14ea8:	2200      	movs	r2, #0
   14eaa:	e9c4 1200 	strd	r1, r2, [r4]
   14eae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   14eb2:	e7d7      	b.n	14e64 <__swsetup_r+0x60>
   14eb4:	4618      	mov	r0, r3
   14eb6:	f7fa fd0b 	bl	f8d0 <__sinit>
   14eba:	e7ac      	b.n	14e16 <__swsetup_r+0x12>
   14ebc:	2209      	movs	r2, #9
   14ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14ec2:	602a      	str	r2, [r5, #0]
   14ec4:	f04f 30ff 	mov.w	r0, #4294967295
   14ec8:	81a3      	strh	r3, [r4, #12]
   14eca:	bd38      	pop	{r3, r4, r5, pc}
   14ecc:	1fff9168 	.word	0x1fff9168

00014ed0 <__fputwc>:
   14ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14ed4:	b083      	sub	sp, #12
   14ed6:	4607      	mov	r7, r0
   14ed8:	4688      	mov	r8, r1
   14eda:	4614      	mov	r4, r2
   14edc:	f7fa feac 	bl	fc38 <__locale_mb_cur_max>
   14ee0:	2801      	cmp	r0, #1
   14ee2:	d103      	bne.n	14eec <__fputwc+0x1c>
   14ee4:	f108 33ff 	add.w	r3, r8, #4294967295
   14ee8:	2bfe      	cmp	r3, #254	; 0xfe
   14eea:	d937      	bls.n	14f5c <__fputwc+0x8c>
   14eec:	f10d 0904 	add.w	r9, sp, #4
   14ef0:	4642      	mov	r2, r8
   14ef2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   14ef6:	4649      	mov	r1, r9
   14ef8:	4638      	mov	r0, r7
   14efa:	f7fe fd09 	bl	13910 <_wcrtomb_r>
   14efe:	1c42      	adds	r2, r0, #1
   14f00:	4606      	mov	r6, r0
   14f02:	d033      	beq.n	14f6c <__fputwc+0x9c>
   14f04:	b328      	cbz	r0, 14f52 <__fputwc+0x82>
   14f06:	f89d c004 	ldrb.w	ip, [sp, #4]
   14f0a:	2500      	movs	r5, #0
   14f0c:	e009      	b.n	14f22 <__fputwc+0x52>
   14f0e:	6823      	ldr	r3, [r4, #0]
   14f10:	1c5a      	adds	r2, r3, #1
   14f12:	6022      	str	r2, [r4, #0]
   14f14:	f883 c000 	strb.w	ip, [r3]
   14f18:	3501      	adds	r5, #1
   14f1a:	42b5      	cmp	r5, r6
   14f1c:	d219      	bcs.n	14f52 <__fputwc+0x82>
   14f1e:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   14f22:	68a3      	ldr	r3, [r4, #8]
   14f24:	3b01      	subs	r3, #1
   14f26:	2b00      	cmp	r3, #0
   14f28:	60a3      	str	r3, [r4, #8]
   14f2a:	daf0      	bge.n	14f0e <__fputwc+0x3e>
   14f2c:	f8d4 e018 	ldr.w	lr, [r4, #24]
   14f30:	4573      	cmp	r3, lr
   14f32:	4661      	mov	r1, ip
   14f34:	4622      	mov	r2, r4
   14f36:	4638      	mov	r0, r7
   14f38:	db02      	blt.n	14f40 <__fputwc+0x70>
   14f3a:	f1bc 0f0a 	cmp.w	ip, #10
   14f3e:	d1e6      	bne.n	14f0e <__fputwc+0x3e>
   14f40:	f000 f94a 	bl	151d8 <__swbuf_r>
   14f44:	1c43      	adds	r3, r0, #1
   14f46:	d1e7      	bne.n	14f18 <__fputwc+0x48>
   14f48:	4606      	mov	r6, r0
   14f4a:	4630      	mov	r0, r6
   14f4c:	b003      	add	sp, #12
   14f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14f52:	4646      	mov	r6, r8
   14f54:	4630      	mov	r0, r6
   14f56:	b003      	add	sp, #12
   14f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14f5c:	fa5f fc88 	uxtb.w	ip, r8
   14f60:	f88d c004 	strb.w	ip, [sp, #4]
   14f64:	4606      	mov	r6, r0
   14f66:	f10d 0904 	add.w	r9, sp, #4
   14f6a:	e7ce      	b.n	14f0a <__fputwc+0x3a>
   14f6c:	89a3      	ldrh	r3, [r4, #12]
   14f6e:	4630      	mov	r0, r6
   14f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14f74:	81a3      	strh	r3, [r4, #12]
   14f76:	b003      	add	sp, #12
   14f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00014f7c <_fputwc_r>:
   14f7c:	b530      	push	{r4, r5, lr}
   14f7e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   14f80:	f013 0f01 	tst.w	r3, #1
   14f84:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   14f88:	4614      	mov	r4, r2
   14f8a:	b083      	sub	sp, #12
   14f8c:	4605      	mov	r5, r0
   14f8e:	b29a      	uxth	r2, r3
   14f90:	d101      	bne.n	14f96 <_fputwc_r+0x1a>
   14f92:	0598      	lsls	r0, r3, #22
   14f94:	d51c      	bpl.n	14fd0 <_fputwc_r+0x54>
   14f96:	0490      	lsls	r0, r2, #18
   14f98:	d406      	bmi.n	14fa8 <_fputwc_r+0x2c>
   14f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14f9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   14fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14fa4:	81a3      	strh	r3, [r4, #12]
   14fa6:	6662      	str	r2, [r4, #100]	; 0x64
   14fa8:	4622      	mov	r2, r4
   14faa:	4628      	mov	r0, r5
   14fac:	f7ff ff90 	bl	14ed0 <__fputwc>
   14fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14fb2:	07da      	lsls	r2, r3, #31
   14fb4:	4605      	mov	r5, r0
   14fb6:	d402      	bmi.n	14fbe <_fputwc_r+0x42>
   14fb8:	89a3      	ldrh	r3, [r4, #12]
   14fba:	059b      	lsls	r3, r3, #22
   14fbc:	d502      	bpl.n	14fc4 <_fputwc_r+0x48>
   14fbe:	4628      	mov	r0, r5
   14fc0:	b003      	add	sp, #12
   14fc2:	bd30      	pop	{r4, r5, pc}
   14fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14fc6:	f7fa fed3 	bl	fd70 <__retarget_lock_release_recursive>
   14fca:	4628      	mov	r0, r5
   14fcc:	b003      	add	sp, #12
   14fce:	bd30      	pop	{r4, r5, pc}
   14fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14fd2:	9101      	str	r1, [sp, #4]
   14fd4:	f7fa feca 	bl	fd6c <__retarget_lock_acquire_recursive>
   14fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14fdc:	9901      	ldr	r1, [sp, #4]
   14fde:	b29a      	uxth	r2, r3
   14fe0:	e7d9      	b.n	14f96 <_fputwc_r+0x1a>
   14fe2:	bf00      	nop

00014fe4 <_wcsnrtombs_l>:
   14fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fe8:	b089      	sub	sp, #36	; 0x24
   14fea:	e9dd 8a13 	ldrd	r8, sl, [sp, #76]	; 0x4c
   14fee:	9f12      	ldr	r7, [sp, #72]	; 0x48
   14ff0:	9101      	str	r1, [sp, #4]
   14ff2:	4681      	mov	r9, r0
   14ff4:	9203      	str	r2, [sp, #12]
   14ff6:	461e      	mov	r6, r3
   14ff8:	f1b8 0f00 	cmp.w	r8, #0
   14ffc:	d055      	beq.n	150aa <_wcsnrtombs_l+0xc6>
   14ffe:	9b01      	ldr	r3, [sp, #4]
   15000:	2b00      	cmp	r3, #0
   15002:	d057      	beq.n	150b4 <_wcsnrtombs_l+0xd0>
   15004:	9b03      	ldr	r3, [sp, #12]
   15006:	681d      	ldr	r5, [r3, #0]
   15008:	2f00      	cmp	r7, #0
   1500a:	d063      	beq.n	150d4 <_wcsnrtombs_l+0xf0>
   1500c:	1e74      	subs	r4, r6, #1
   1500e:	b32e      	cbz	r6, 1505c <_wcsnrtombs_l+0x78>
   15010:	9b01      	ldr	r3, [sp, #4]
   15012:	9302      	str	r3, [sp, #8]
   15014:	3d04      	subs	r5, #4
   15016:	2600      	movs	r6, #0
   15018:	e00a      	b.n	15030 <_wcsnrtombs_l+0x4c>
   1501a:	9b01      	ldr	r3, [sp, #4]
   1501c:	bb13      	cbnz	r3, 15064 <_wcsnrtombs_l+0x80>
   1501e:	682a      	ldr	r2, [r5, #0]
   15020:	2a00      	cmp	r2, #0
   15022:	d035      	beq.n	15090 <_wcsnrtombs_l+0xac>
   15024:	45bc      	cmp	ip, r7
   15026:	d257      	bcs.n	150d8 <_wcsnrtombs_l+0xf4>
   15028:	3c01      	subs	r4, #1
   1502a:	1c63      	adds	r3, r4, #1
   1502c:	4666      	mov	r6, ip
   1502e:	d015      	beq.n	1505c <_wcsnrtombs_l+0x78>
   15030:	f8d8 3000 	ldr.w	r3, [r8]
   15034:	f855 2f04 	ldr.w	r2, [r5, #4]!
   15038:	9300      	str	r3, [sp, #0]
   1503a:	f8da c0e0 	ldr.w	ip, [sl, #224]	; 0xe0
   1503e:	f8d8 b004 	ldr.w	fp, [r8, #4]
   15042:	4643      	mov	r3, r8
   15044:	a905      	add	r1, sp, #20
   15046:	4648      	mov	r0, r9
   15048:	47e0      	blx	ip
   1504a:	1c42      	adds	r2, r0, #1
   1504c:	d037      	beq.n	150be <_wcsnrtombs_l+0xda>
   1504e:	eb00 0c06 	add.w	ip, r0, r6
   15052:	45bc      	cmp	ip, r7
   15054:	d9e1      	bls.n	1501a <_wcsnrtombs_l+0x36>
   15056:	9b00      	ldr	r3, [sp, #0]
   15058:	e9c8 3b00 	strd	r3, fp, [r8]
   1505c:	4630      	mov	r0, r6
   1505e:	b009      	add	sp, #36	; 0x24
   15060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15064:	2800      	cmp	r0, #0
   15066:	dd0c      	ble.n	15082 <_wcsnrtombs_l+0x9e>
   15068:	9b02      	ldr	r3, [sp, #8]
   1506a:	4418      	add	r0, r3
   1506c:	1e5a      	subs	r2, r3, #1
   1506e:	a905      	add	r1, sp, #20
   15070:	f100 3eff 	add.w	lr, r0, #4294967295
   15074:	f811 3b01 	ldrb.w	r3, [r1], #1
   15078:	f802 3f01 	strb.w	r3, [r2, #1]!
   1507c:	4572      	cmp	r2, lr
   1507e:	d1f9      	bne.n	15074 <_wcsnrtombs_l+0x90>
   15080:	9002      	str	r0, [sp, #8]
   15082:	9b03      	ldr	r3, [sp, #12]
   15084:	681a      	ldr	r2, [r3, #0]
   15086:	3204      	adds	r2, #4
   15088:	601a      	str	r2, [r3, #0]
   1508a:	682a      	ldr	r2, [r5, #0]
   1508c:	2a00      	cmp	r2, #0
   1508e:	d1c9      	bne.n	15024 <_wcsnrtombs_l+0x40>
   15090:	9b01      	ldr	r3, [sp, #4]
   15092:	b10b      	cbz	r3, 15098 <_wcsnrtombs_l+0xb4>
   15094:	9b03      	ldr	r3, [sp, #12]
   15096:	601a      	str	r2, [r3, #0]
   15098:	f10c 36ff 	add.w	r6, ip, #4294967295
   1509c:	2200      	movs	r2, #0
   1509e:	4630      	mov	r0, r6
   150a0:	f8c8 2000 	str.w	r2, [r8]
   150a4:	b009      	add	sp, #36	; 0x24
   150a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150aa:	9b01      	ldr	r3, [sp, #4]
   150ac:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   150b0:	2b00      	cmp	r3, #0
   150b2:	d1a7      	bne.n	15004 <_wcsnrtombs_l+0x20>
   150b4:	9b03      	ldr	r3, [sp, #12]
   150b6:	f04f 37ff 	mov.w	r7, #4294967295
   150ba:	681d      	ldr	r5, [r3, #0]
   150bc:	e7a6      	b.n	1500c <_wcsnrtombs_l+0x28>
   150be:	4606      	mov	r6, r0
   150c0:	218a      	movs	r1, #138	; 0x8a
   150c2:	2200      	movs	r2, #0
   150c4:	4630      	mov	r0, r6
   150c6:	f8c9 1000 	str.w	r1, [r9]
   150ca:	f8c8 2000 	str.w	r2, [r8]
   150ce:	b009      	add	sp, #36	; 0x24
   150d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150d4:	463e      	mov	r6, r7
   150d6:	e7c1      	b.n	1505c <_wcsnrtombs_l+0x78>
   150d8:	4666      	mov	r6, ip
   150da:	e7bf      	b.n	1505c <_wcsnrtombs_l+0x78>

000150dc <_wcsnrtombs_r>:
   150dc:	b510      	push	{r4, lr}
   150de:	b084      	sub	sp, #16
   150e0:	4c05      	ldr	r4, [pc, #20]	; (150f8 <_wcsnrtombs_r+0x1c>)
   150e2:	9806      	ldr	r0, [sp, #24]
   150e4:	9000      	str	r0, [sp, #0]
   150e6:	9807      	ldr	r0, [sp, #28]
   150e8:	9001      	str	r0, [sp, #4]
   150ea:	4804      	ldr	r0, [pc, #16]	; (150fc <_wcsnrtombs_r+0x20>)
   150ec:	6800      	ldr	r0, [r0, #0]
   150ee:	9402      	str	r4, [sp, #8]
   150f0:	f7ff ff78 	bl	14fe4 <_wcsnrtombs_l>
   150f4:	b004      	add	sp, #16
   150f6:	bd10      	pop	{r4, pc}
   150f8:	1fff8ed8 	.word	0x1fff8ed8
   150fc:	1fff9168 	.word	0x1fff9168

00015100 <__smakebuf_r>:
   15100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15104:	898b      	ldrh	r3, [r1, #12]
   15106:	460c      	mov	r4, r1
   15108:	0799      	lsls	r1, r3, #30
   1510a:	b096      	sub	sp, #88	; 0x58
   1510c:	d508      	bpl.n	15120 <__smakebuf_r+0x20>
   1510e:	f104 0343 	add.w	r3, r4, #67	; 0x43
   15112:	2201      	movs	r2, #1
   15114:	e9c4 3204 	strd	r3, r2, [r4, #16]
   15118:	6023      	str	r3, [r4, #0]
   1511a:	b016      	add	sp, #88	; 0x58
   1511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   15124:	2900      	cmp	r1, #0
   15126:	4606      	mov	r6, r0
   15128:	db25      	blt.n	15176 <__smakebuf_r+0x76>
   1512a:	466a      	mov	r2, sp
   1512c:	f000 f8ac 	bl	15288 <_fstat_r>
   15130:	2800      	cmp	r0, #0
   15132:	db1f      	blt.n	15174 <__smakebuf_r+0x74>
   15134:	9d01      	ldr	r5, [sp, #4]
   15136:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1513a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1513e:	fab5 f585 	clz	r5, r5
   15142:	f44f 6880 	mov.w	r8, #1024	; 0x400
   15146:	096d      	lsrs	r5, r5, #5
   15148:	f44f 6700 	mov.w	r7, #2048	; 0x800
   1514c:	4641      	mov	r1, r8
   1514e:	4630      	mov	r0, r6
   15150:	f7f9 fe80 	bl	ee54 <_malloc_r>
   15154:	b1e0      	cbz	r0, 15190 <__smakebuf_r+0x90>
   15156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1515a:	f8c4 8014 	str.w	r8, [r4, #20]
   1515e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15162:	6020      	str	r0, [r4, #0]
   15164:	6120      	str	r0, [r4, #16]
   15166:	81a3      	strh	r3, [r4, #12]
   15168:	bb35      	cbnz	r5, 151b8 <__smakebuf_r+0xb8>
   1516a:	433b      	orrs	r3, r7
   1516c:	81a3      	strh	r3, [r4, #12]
   1516e:	b016      	add	sp, #88	; 0x58
   15170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15174:	89a3      	ldrh	r3, [r4, #12]
   15176:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1517a:	d019      	beq.n	151b0 <__smakebuf_r+0xb0>
   1517c:	f04f 0840 	mov.w	r8, #64	; 0x40
   15180:	2500      	movs	r5, #0
   15182:	4641      	mov	r1, r8
   15184:	4630      	mov	r0, r6
   15186:	462f      	mov	r7, r5
   15188:	f7f9 fe64 	bl	ee54 <_malloc_r>
   1518c:	2800      	cmp	r0, #0
   1518e:	d1e2      	bne.n	15156 <__smakebuf_r+0x56>
   15190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15194:	059a      	lsls	r2, r3, #22
   15196:	d4c0      	bmi.n	1511a <__smakebuf_r+0x1a>
   15198:	f023 0303 	bic.w	r3, r3, #3
   1519c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   151a0:	f043 0302 	orr.w	r3, r3, #2
   151a4:	2101      	movs	r1, #1
   151a6:	e9c4 2104 	strd	r2, r1, [r4, #16]
   151aa:	81a3      	strh	r3, [r4, #12]
   151ac:	6022      	str	r2, [r4, #0]
   151ae:	e7b4      	b.n	1511a <__smakebuf_r+0x1a>
   151b0:	f44f 6880 	mov.w	r8, #1024	; 0x400
   151b4:	462f      	mov	r7, r5
   151b6:	e7c9      	b.n	1514c <__smakebuf_r+0x4c>
   151b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   151bc:	4630      	mov	r0, r6
   151be:	f000 f879 	bl	152b4 <_isatty_r>
   151c2:	b910      	cbnz	r0, 151ca <__smakebuf_r+0xca>
   151c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   151c8:	e7cf      	b.n	1516a <__smakebuf_r+0x6a>
   151ca:	89a3      	ldrh	r3, [r4, #12]
   151cc:	f023 0303 	bic.w	r3, r3, #3
   151d0:	f043 0301 	orr.w	r3, r3, #1
   151d4:	b21b      	sxth	r3, r3
   151d6:	e7c8      	b.n	1516a <__smakebuf_r+0x6a>

000151d8 <__swbuf_r>:
   151d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151da:	460d      	mov	r5, r1
   151dc:	4614      	mov	r4, r2
   151de:	4606      	mov	r6, r0
   151e0:	b110      	cbz	r0, 151e8 <__swbuf_r+0x10>
   151e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   151e4:	2b00      	cmp	r3, #0
   151e6:	d04c      	beq.n	15282 <__swbuf_r+0xaa>
   151e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   151ec:	69a3      	ldr	r3, [r4, #24]
   151ee:	60a3      	str	r3, [r4, #8]
   151f0:	0717      	lsls	r7, r2, #28
   151f2:	b290      	uxth	r0, r2
   151f4:	d51b      	bpl.n	1522e <__swbuf_r+0x56>
   151f6:	6923      	ldr	r3, [r4, #16]
   151f8:	b1cb      	cbz	r3, 1522e <__swbuf_r+0x56>
   151fa:	b2ed      	uxtb	r5, r5
   151fc:	0481      	lsls	r1, r0, #18
   151fe:	462f      	mov	r7, r5
   15200:	d522      	bpl.n	15248 <__swbuf_r+0x70>
   15202:	6822      	ldr	r2, [r4, #0]
   15204:	6961      	ldr	r1, [r4, #20]
   15206:	1ad3      	subs	r3, r2, r3
   15208:	4299      	cmp	r1, r3
   1520a:	dd29      	ble.n	15260 <__swbuf_r+0x88>
   1520c:	3301      	adds	r3, #1
   1520e:	68a1      	ldr	r1, [r4, #8]
   15210:	3901      	subs	r1, #1
   15212:	60a1      	str	r1, [r4, #8]
   15214:	1c51      	adds	r1, r2, #1
   15216:	6021      	str	r1, [r4, #0]
   15218:	7015      	strb	r5, [r2, #0]
   1521a:	6962      	ldr	r2, [r4, #20]
   1521c:	429a      	cmp	r2, r3
   1521e:	d027      	beq.n	15270 <__swbuf_r+0x98>
   15220:	89a3      	ldrh	r3, [r4, #12]
   15222:	07db      	lsls	r3, r3, #31
   15224:	d501      	bpl.n	1522a <__swbuf_r+0x52>
   15226:	2d0a      	cmp	r5, #10
   15228:	d022      	beq.n	15270 <__swbuf_r+0x98>
   1522a:	4638      	mov	r0, r7
   1522c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1522e:	4621      	mov	r1, r4
   15230:	4630      	mov	r0, r6
   15232:	f7ff fde7 	bl	14e04 <__swsetup_r>
   15236:	bb08      	cbnz	r0, 1527c <__swbuf_r+0xa4>
   15238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1523c:	6923      	ldr	r3, [r4, #16]
   1523e:	b290      	uxth	r0, r2
   15240:	b2ed      	uxtb	r5, r5
   15242:	0481      	lsls	r1, r0, #18
   15244:	462f      	mov	r7, r5
   15246:	d4dc      	bmi.n	15202 <__swbuf_r+0x2a>
   15248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1524c:	81a2      	strh	r2, [r4, #12]
   1524e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15250:	6961      	ldr	r1, [r4, #20]
   15252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   15256:	6662      	str	r2, [r4, #100]	; 0x64
   15258:	6822      	ldr	r2, [r4, #0]
   1525a:	1ad3      	subs	r3, r2, r3
   1525c:	4299      	cmp	r1, r3
   1525e:	dcd5      	bgt.n	1520c <__swbuf_r+0x34>
   15260:	4621      	mov	r1, r4
   15262:	4630      	mov	r0, r6
   15264:	f7fd f9f8 	bl	12658 <_fflush_r>
   15268:	b940      	cbnz	r0, 1527c <__swbuf_r+0xa4>
   1526a:	6822      	ldr	r2, [r4, #0]
   1526c:	2301      	movs	r3, #1
   1526e:	e7ce      	b.n	1520e <__swbuf_r+0x36>
   15270:	4621      	mov	r1, r4
   15272:	4630      	mov	r0, r6
   15274:	f7fd f9f0 	bl	12658 <_fflush_r>
   15278:	2800      	cmp	r0, #0
   1527a:	d0d6      	beq.n	1522a <__swbuf_r+0x52>
   1527c:	f04f 37ff 	mov.w	r7, #4294967295
   15280:	e7d3      	b.n	1522a <__swbuf_r+0x52>
   15282:	f7fa fb25 	bl	f8d0 <__sinit>
   15286:	e7af      	b.n	151e8 <__swbuf_r+0x10>

00015288 <_fstat_r>:
   15288:	b570      	push	{r4, r5, r6, lr}
   1528a:	460c      	mov	r4, r1
   1528c:	4d08      	ldr	r5, [pc, #32]	; (152b0 <_fstat_r+0x28>)
   1528e:	4603      	mov	r3, r0
   15290:	2600      	movs	r6, #0
   15292:	4620      	mov	r0, r4
   15294:	4611      	mov	r1, r2
   15296:	461c      	mov	r4, r3
   15298:	602e      	str	r6, [r5, #0]
   1529a:	f7f5 fd2d 	bl	acf8 <_fstat>
   1529e:	1c43      	adds	r3, r0, #1
   152a0:	d000      	beq.n	152a4 <_fstat_r+0x1c>
   152a2:	bd70      	pop	{r4, r5, r6, pc}
   152a4:	682b      	ldr	r3, [r5, #0]
   152a6:	2b00      	cmp	r3, #0
   152a8:	d0fb      	beq.n	152a2 <_fstat_r+0x1a>
   152aa:	6023      	str	r3, [r4, #0]
   152ac:	bd70      	pop	{r4, r5, r6, pc}
   152ae:	bf00      	nop
   152b0:	1fffbde0 	.word	0x1fffbde0

000152b4 <_isatty_r>:
   152b4:	b538      	push	{r3, r4, r5, lr}
   152b6:	4d07      	ldr	r5, [pc, #28]	; (152d4 <_isatty_r+0x20>)
   152b8:	2200      	movs	r2, #0
   152ba:	4604      	mov	r4, r0
   152bc:	4608      	mov	r0, r1
   152be:	602a      	str	r2, [r5, #0]
   152c0:	f7f5 fd20 	bl	ad04 <_isatty>
   152c4:	1c43      	adds	r3, r0, #1
   152c6:	d000      	beq.n	152ca <_isatty_r+0x16>
   152c8:	bd38      	pop	{r3, r4, r5, pc}
   152ca:	682b      	ldr	r3, [r5, #0]
   152cc:	2b00      	cmp	r3, #0
   152ce:	d0fb      	beq.n	152c8 <_isatty_r+0x14>
   152d0:	6023      	str	r3, [r4, #0]
   152d2:	bd38      	pop	{r3, r4, r5, pc}
   152d4:	1fffbde0 	.word	0x1fffbde0

000152d8 <__aeabi_dmul>:
   152d8:	b570      	push	{r4, r5, r6, lr}
   152da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   152de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   152e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   152e6:	bf1d      	ittte	ne
   152e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   152ec:	ea94 0f0c 	teqne	r4, ip
   152f0:	ea95 0f0c 	teqne	r5, ip
   152f4:	f000 f8de 	bleq	154b4 <__aeabi_dmul+0x1dc>
   152f8:	442c      	add	r4, r5
   152fa:	ea81 0603 	eor.w	r6, r1, r3
   152fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   15302:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   15306:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1530a:	bf18      	it	ne
   1530c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   15310:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   15318:	d038      	beq.n	1538c <__aeabi_dmul+0xb4>
   1531a:	fba0 ce02 	umull	ip, lr, r0, r2
   1531e:	f04f 0500 	mov.w	r5, #0
   15322:	fbe1 e502 	umlal	lr, r5, r1, r2
   15326:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1532a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1532e:	f04f 0600 	mov.w	r6, #0
   15332:	fbe1 5603 	umlal	r5, r6, r1, r3
   15336:	f09c 0f00 	teq	ip, #0
   1533a:	bf18      	it	ne
   1533c:	f04e 0e01 	orrne.w	lr, lr, #1
   15340:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   15344:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   15348:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1534c:	d204      	bcs.n	15358 <__aeabi_dmul+0x80>
   1534e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   15352:	416d      	adcs	r5, r5
   15354:	eb46 0606 	adc.w	r6, r6, r6
   15358:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1535c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   15360:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   15364:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   15368:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1536c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   15370:	bf88      	it	hi
   15372:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   15376:	d81e      	bhi.n	153b6 <__aeabi_dmul+0xde>
   15378:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1537c:	bf08      	it	eq
   1537e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   15382:	f150 0000 	adcs.w	r0, r0, #0
   15386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1538a:	bd70      	pop	{r4, r5, r6, pc}
   1538c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   15390:	ea46 0101 	orr.w	r1, r6, r1
   15394:	ea40 0002 	orr.w	r0, r0, r2
   15398:	ea81 0103 	eor.w	r1, r1, r3
   1539c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   153a0:	bfc2      	ittt	gt
   153a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   153a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   153aa:	bd70      	popgt	{r4, r5, r6, pc}
   153ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   153b0:	f04f 0e00 	mov.w	lr, #0
   153b4:	3c01      	subs	r4, #1
   153b6:	f300 80ab 	bgt.w	15510 <__aeabi_dmul+0x238>
   153ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   153be:	bfde      	ittt	le
   153c0:	2000      	movle	r0, #0
   153c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   153c6:	bd70      	pople	{r4, r5, r6, pc}
   153c8:	f1c4 0400 	rsb	r4, r4, #0
   153cc:	3c20      	subs	r4, #32
   153ce:	da35      	bge.n	1543c <__aeabi_dmul+0x164>
   153d0:	340c      	adds	r4, #12
   153d2:	dc1b      	bgt.n	1540c <__aeabi_dmul+0x134>
   153d4:	f104 0414 	add.w	r4, r4, #20
   153d8:	f1c4 0520 	rsb	r5, r4, #32
   153dc:	fa00 f305 	lsl.w	r3, r0, r5
   153e0:	fa20 f004 	lsr.w	r0, r0, r4
   153e4:	fa01 f205 	lsl.w	r2, r1, r5
   153e8:	ea40 0002 	orr.w	r0, r0, r2
   153ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   153f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   153f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   153f8:	fa21 f604 	lsr.w	r6, r1, r4
   153fc:	eb42 0106 	adc.w	r1, r2, r6
   15400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   15404:	bf08      	it	eq
   15406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1540a:	bd70      	pop	{r4, r5, r6, pc}
   1540c:	f1c4 040c 	rsb	r4, r4, #12
   15410:	f1c4 0520 	rsb	r5, r4, #32
   15414:	fa00 f304 	lsl.w	r3, r0, r4
   15418:	fa20 f005 	lsr.w	r0, r0, r5
   1541c:	fa01 f204 	lsl.w	r2, r1, r4
   15420:	ea40 0002 	orr.w	r0, r0, r2
   15424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   15428:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1542c:	f141 0100 	adc.w	r1, r1, #0
   15430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   15434:	bf08      	it	eq
   15436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1543a:	bd70      	pop	{r4, r5, r6, pc}
   1543c:	f1c4 0520 	rsb	r5, r4, #32
   15440:	fa00 f205 	lsl.w	r2, r0, r5
   15444:	ea4e 0e02 	orr.w	lr, lr, r2
   15448:	fa20 f304 	lsr.w	r3, r0, r4
   1544c:	fa01 f205 	lsl.w	r2, r1, r5
   15450:	ea43 0302 	orr.w	r3, r3, r2
   15454:	fa21 f004 	lsr.w	r0, r1, r4
   15458:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1545c:	fa21 f204 	lsr.w	r2, r1, r4
   15460:	ea20 0002 	bic.w	r0, r0, r2
   15464:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   15468:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1546c:	bf08      	it	eq
   1546e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   15472:	bd70      	pop	{r4, r5, r6, pc}
   15474:	f094 0f00 	teq	r4, #0
   15478:	d10f      	bne.n	1549a <__aeabi_dmul+0x1c2>
   1547a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1547e:	0040      	lsls	r0, r0, #1
   15480:	eb41 0101 	adc.w	r1, r1, r1
   15484:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15488:	bf08      	it	eq
   1548a:	3c01      	subeq	r4, #1
   1548c:	d0f7      	beq.n	1547e <__aeabi_dmul+0x1a6>
   1548e:	ea41 0106 	orr.w	r1, r1, r6
   15492:	f095 0f00 	teq	r5, #0
   15496:	bf18      	it	ne
   15498:	4770      	bxne	lr
   1549a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1549e:	0052      	lsls	r2, r2, #1
   154a0:	eb43 0303 	adc.w	r3, r3, r3
   154a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   154a8:	bf08      	it	eq
   154aa:	3d01      	subeq	r5, #1
   154ac:	d0f7      	beq.n	1549e <__aeabi_dmul+0x1c6>
   154ae:	ea43 0306 	orr.w	r3, r3, r6
   154b2:	4770      	bx	lr
   154b4:	ea94 0f0c 	teq	r4, ip
   154b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   154bc:	bf18      	it	ne
   154be:	ea95 0f0c 	teqne	r5, ip
   154c2:	d00c      	beq.n	154de <__aeabi_dmul+0x206>
   154c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   154c8:	bf18      	it	ne
   154ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   154ce:	d1d1      	bne.n	15474 <__aeabi_dmul+0x19c>
   154d0:	ea81 0103 	eor.w	r1, r1, r3
   154d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   154d8:	f04f 0000 	mov.w	r0, #0
   154dc:	bd70      	pop	{r4, r5, r6, pc}
   154de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   154e2:	bf06      	itte	eq
   154e4:	4610      	moveq	r0, r2
   154e6:	4619      	moveq	r1, r3
   154e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   154ec:	d019      	beq.n	15522 <__aeabi_dmul+0x24a>
   154ee:	ea94 0f0c 	teq	r4, ip
   154f2:	d102      	bne.n	154fa <__aeabi_dmul+0x222>
   154f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   154f8:	d113      	bne.n	15522 <__aeabi_dmul+0x24a>
   154fa:	ea95 0f0c 	teq	r5, ip
   154fe:	d105      	bne.n	1550c <__aeabi_dmul+0x234>
   15500:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   15504:	bf1c      	itt	ne
   15506:	4610      	movne	r0, r2
   15508:	4619      	movne	r1, r3
   1550a:	d10a      	bne.n	15522 <__aeabi_dmul+0x24a>
   1550c:	ea81 0103 	eor.w	r1, r1, r3
   15510:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   15514:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   15518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1551c:	f04f 0000 	mov.w	r0, #0
   15520:	bd70      	pop	{r4, r5, r6, pc}
   15522:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   15526:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1552a:	bd70      	pop	{r4, r5, r6, pc}

0001552c <__aeabi_ddiv>:
   1552c:	b570      	push	{r4, r5, r6, lr}
   1552e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   15532:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   15536:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1553a:	bf1d      	ittte	ne
   1553c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   15540:	ea94 0f0c 	teqne	r4, ip
   15544:	ea95 0f0c 	teqne	r5, ip
   15548:	f000 f8a7 	bleq	1569a <__aeabi_ddiv+0x16e>
   1554c:	eba4 0405 	sub.w	r4, r4, r5
   15550:	ea81 0e03 	eor.w	lr, r1, r3
   15554:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   15558:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1555c:	f000 8088 	beq.w	15670 <__aeabi_ddiv+0x144>
   15560:	ea4f 3303 	mov.w	r3, r3, lsl #12
   15564:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   15568:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1556c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   15570:	ea4f 2202 	mov.w	r2, r2, lsl #8
   15574:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   15578:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1557c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   15580:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   15584:	429d      	cmp	r5, r3
   15586:	bf08      	it	eq
   15588:	4296      	cmpeq	r6, r2
   1558a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1558e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   15592:	d202      	bcs.n	1559a <__aeabi_ddiv+0x6e>
   15594:	085b      	lsrs	r3, r3, #1
   15596:	ea4f 0232 	mov.w	r2, r2, rrx
   1559a:	1ab6      	subs	r6, r6, r2
   1559c:	eb65 0503 	sbc.w	r5, r5, r3
   155a0:	085b      	lsrs	r3, r3, #1
   155a2:	ea4f 0232 	mov.w	r2, r2, rrx
   155a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   155aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   155ae:	ebb6 0e02 	subs.w	lr, r6, r2
   155b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   155b6:	bf22      	ittt	cs
   155b8:	1ab6      	subcs	r6, r6, r2
   155ba:	4675      	movcs	r5, lr
   155bc:	ea40 000c 	orrcs.w	r0, r0, ip
   155c0:	085b      	lsrs	r3, r3, #1
   155c2:	ea4f 0232 	mov.w	r2, r2, rrx
   155c6:	ebb6 0e02 	subs.w	lr, r6, r2
   155ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   155ce:	bf22      	ittt	cs
   155d0:	1ab6      	subcs	r6, r6, r2
   155d2:	4675      	movcs	r5, lr
   155d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   155d8:	085b      	lsrs	r3, r3, #1
   155da:	ea4f 0232 	mov.w	r2, r2, rrx
   155de:	ebb6 0e02 	subs.w	lr, r6, r2
   155e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   155e6:	bf22      	ittt	cs
   155e8:	1ab6      	subcs	r6, r6, r2
   155ea:	4675      	movcs	r5, lr
   155ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   155f0:	085b      	lsrs	r3, r3, #1
   155f2:	ea4f 0232 	mov.w	r2, r2, rrx
   155f6:	ebb6 0e02 	subs.w	lr, r6, r2
   155fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   155fe:	bf22      	ittt	cs
   15600:	1ab6      	subcs	r6, r6, r2
   15602:	4675      	movcs	r5, lr
   15604:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   15608:	ea55 0e06 	orrs.w	lr, r5, r6
   1560c:	d018      	beq.n	15640 <__aeabi_ddiv+0x114>
   1560e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   15612:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   15616:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1561a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1561e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   15622:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   15626:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1562a:	d1c0      	bne.n	155ae <__aeabi_ddiv+0x82>
   1562c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15630:	d10b      	bne.n	1564a <__aeabi_ddiv+0x11e>
   15632:	ea41 0100 	orr.w	r1, r1, r0
   15636:	f04f 0000 	mov.w	r0, #0
   1563a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1563e:	e7b6      	b.n	155ae <__aeabi_ddiv+0x82>
   15640:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15644:	bf04      	itt	eq
   15646:	4301      	orreq	r1, r0
   15648:	2000      	moveq	r0, #0
   1564a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1564e:	bf88      	it	hi
   15650:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   15654:	f63f aeaf 	bhi.w	153b6 <__aeabi_dmul+0xde>
   15658:	ebb5 0c03 	subs.w	ip, r5, r3
   1565c:	bf04      	itt	eq
   1565e:	ebb6 0c02 	subseq.w	ip, r6, r2
   15662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   15666:	f150 0000 	adcs.w	r0, r0, #0
   1566a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1566e:	bd70      	pop	{r4, r5, r6, pc}
   15670:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   15674:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   15678:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1567c:	bfc2      	ittt	gt
   1567e:	ebd4 050c 	rsbsgt	r5, r4, ip
   15682:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   15686:	bd70      	popgt	{r4, r5, r6, pc}
   15688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1568c:	f04f 0e00 	mov.w	lr, #0
   15690:	3c01      	subs	r4, #1
   15692:	e690      	b.n	153b6 <__aeabi_dmul+0xde>
   15694:	ea45 0e06 	orr.w	lr, r5, r6
   15698:	e68d      	b.n	153b6 <__aeabi_dmul+0xde>
   1569a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1569e:	ea94 0f0c 	teq	r4, ip
   156a2:	bf08      	it	eq
   156a4:	ea95 0f0c 	teqeq	r5, ip
   156a8:	f43f af3b 	beq.w	15522 <__aeabi_dmul+0x24a>
   156ac:	ea94 0f0c 	teq	r4, ip
   156b0:	d10a      	bne.n	156c8 <__aeabi_ddiv+0x19c>
   156b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   156b6:	f47f af34 	bne.w	15522 <__aeabi_dmul+0x24a>
   156ba:	ea95 0f0c 	teq	r5, ip
   156be:	f47f af25 	bne.w	1550c <__aeabi_dmul+0x234>
   156c2:	4610      	mov	r0, r2
   156c4:	4619      	mov	r1, r3
   156c6:	e72c      	b.n	15522 <__aeabi_dmul+0x24a>
   156c8:	ea95 0f0c 	teq	r5, ip
   156cc:	d106      	bne.n	156dc <__aeabi_ddiv+0x1b0>
   156ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   156d2:	f43f aefd 	beq.w	154d0 <__aeabi_dmul+0x1f8>
   156d6:	4610      	mov	r0, r2
   156d8:	4619      	mov	r1, r3
   156da:	e722      	b.n	15522 <__aeabi_dmul+0x24a>
   156dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   156e0:	bf18      	it	ne
   156e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   156e6:	f47f aec5 	bne.w	15474 <__aeabi_dmul+0x19c>
   156ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   156ee:	f47f af0d 	bne.w	1550c <__aeabi_dmul+0x234>
   156f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   156f6:	f47f aeeb 	bne.w	154d0 <__aeabi_dmul+0x1f8>
   156fa:	e712      	b.n	15522 <__aeabi_dmul+0x24a>

000156fc <__aeabi_d2iz>:
   156fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   15700:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   15704:	d215      	bcs.n	15732 <__aeabi_d2iz+0x36>
   15706:	d511      	bpl.n	1572c <__aeabi_d2iz+0x30>
   15708:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1570c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   15710:	d912      	bls.n	15738 <__aeabi_d2iz+0x3c>
   15712:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   15716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1571a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1571e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   15722:	fa23 f002 	lsr.w	r0, r3, r2
   15726:	bf18      	it	ne
   15728:	4240      	negne	r0, r0
   1572a:	4770      	bx	lr
   1572c:	f04f 0000 	mov.w	r0, #0
   15730:	4770      	bx	lr
   15732:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   15736:	d105      	bne.n	15744 <__aeabi_d2iz+0x48>
   15738:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1573c:	bf08      	it	eq
   1573e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   15742:	4770      	bx	lr
   15744:	f04f 0000 	mov.w	r0, #0
   15748:	4770      	bx	lr
   1574a:	bf00      	nop
   1574c:	646e6553 	.word	0x646e6553
   15750:	3a676e69 	.word	0x3a676e69
   15754:	00000020 	.word	0x00000020
   15758:	6c706552 	.word	0x6c706552
   1575c:	00203a79 	.word	0x00203a79
   15760:	75646f4d 	.word	0x75646f4d
   15764:	2520656c 	.word	0x2520656c
   15768:	20202069 	.word	0x20202069
   1576c:	72656c61 	.word	0x72656c61
   15770:	253d7374 	.word	0x253d7374
   15774:	20202058 	.word	0x20202058
   15778:	6c756166 	.word	0x6c756166
   1577c:	253d7374 	.word	0x253d7374
   15780:	20202058 	.word	0x20202058
   15784:	3d564f43 	.word	0x3d564f43
   15788:	20205825 	.word	0x20205825
   1578c:	56554320 	.word	0x56554320
   15790:	0058253d 	.word	0x0058253d
   15794:	746e6553 	.word	0x746e6553
   15798:	43524320 	.word	0x43524320
   1579c:	7825203a 	.word	0x7825203a
   157a0:	20202020 	.word	0x20202020
   157a4:	6c614320 	.word	0x6c614320
   157a8:	616c7563 	.word	0x616c7563
   157ac:	20646574 	.word	0x20646574
   157b0:	3a435243 	.word	0x3a435243
   157b4:	00782520 	.word	0x00782520
   157b8:	20746f47 	.word	0x20746f47
   157bc:	746c6f76 	.word	0x746c6f76
   157c0:	20656761 	.word	0x20656761
   157c4:	20646e61 	.word	0x20646e61
   157c8:	706d6574 	.word	0x706d6574
   157cc:	74617265 	.word	0x74617265
   157d0:	20657275 	.word	0x20657275
   157d4:	64616572 	.word	0x64616572
   157d8:	73676e69 	.word	0x73676e69
   157dc:	00000000 	.word	0x00000000
   157e0:	61766e49 	.word	0x61766e49
   157e4:	2064696c 	.word	0x2064696c
   157e8:	75646f6d 	.word	0x75646f6d
   157ec:	7220656c 	.word	0x7220656c
   157f0:	6f707365 	.word	0x6f707365
   157f4:	2065736e 	.word	0x2065736e
   157f8:	65636572 	.word	0x65636572
   157fc:	64657669 	.word	0x64657669
   15800:	726f6620 	.word	0x726f6620
   15804:	646f6d20 	.word	0x646f6d20
   15808:	20656c75 	.word	0x20656c75
   1580c:	20206925 	.word	0x20206925
   15810:	3a6e656c 	.word	0x3a6e656c
   15814:	20692520 	.word	0x20692520
   15818:	72632020 	.word	0x72632020
   1581c:	25203a63 	.word	0x25203a63
   15820:	20202069 	.word	0x20202069
   15824:	636c6163 	.word	0x636c6163
   15828:	6925203a 	.word	0x6925203a
   1582c:	ffffff00 	.word	0xffffff00
   15830:	00202d20 	.word	0x00202d20
   15834:	00207c20 	.word	0x00207c20
   15838:	ffff002d 	.word	0xffff002d
   1583c:	66203030 	.word	0x66203030
   15840:	646e756f 	.word	0x646e756f
   15844:	00000000 	.word	0x00000000
   15848:	72646441 	.word	0x72646441
   1584c:	20737365 	.word	0x20737365
   15850:	69737361 	.word	0x69737361
   15854:	64656e67 	.word	0x64656e67
   15858:	ffffff00 	.word	0xffffff00
   1585c:	75646f4d 	.word	0x75646f4d
   15860:	2520656c 	.word	0x2520656c
   15864:	78652069 	.word	0x78652069
   15868:	73747369 	.word	0x73747369
   1586c:	6552202e 	.word	0x6552202e
   15870:	6e696461 	.word	0x6e696461
   15874:	6f762067 	.word	0x6f762067
   15878:	6761746c 	.word	0x6761746c
   1587c:	6e612065 	.word	0x6e612065
   15880:	65742064 	.word	0x65742064
   15884:	7265706d 	.word	0x7265706d
   15888:	72757461 	.word	0x72757461
   1588c:	61762065 	.word	0x61762065
   15890:	7365756c 	.word	0x7365756c
   15894:	00000000 	.word	0x00000000
   15898:	75646f4d 	.word	0x75646f4d
   1589c:	7620656c 	.word	0x7620656c
   158a0:	61746c6f 	.word	0x61746c6f
   158a4:	203a6567 	.word	0x203a6567
   158a8:	00006625 	.word	0x00006625
   158ac:	65776f4c 	.word	0x65776f4c
   158b0:	43207473 	.word	0x43207473
   158b4:	206c6c65 	.word	0x206c6c65
   158b8:	25203a56 	.word	0x25203a56
   158bc:	20202066 	.word	0x20202066
   158c0:	69482020 	.word	0x69482020
   158c4:	73656867 	.word	0x73656867
   158c8:	65432074 	.word	0x65432074
   158cc:	56206c6c 	.word	0x56206c6c
   158d0:	6625203a 	.word	0x6625203a
   158d4:	00000000 	.word	0x00000000
   158d8:	706d6554 	.word	0x706d6554
   158dc:	25203a31 	.word	0x25203a31
   158e0:	20202066 	.word	0x20202066
   158e4:	20202020 	.word	0x20202020
   158e8:	706d6554 	.word	0x706d6554
   158ec:	25203a32 	.word	0x25203a32
   158f0:	00000066 	.word	0x00000066
   158f4:	20656e4f 	.word	0x20656e4f
   158f8:	6d20726f 	.word	0x6d20726f
   158fc:	2065726f 	.word	0x2065726f
   15900:	20534d42 	.word	0x20534d42
   15904:	75646f6d 	.word	0x75646f6d
   15908:	2073656c 	.word	0x2073656c
   1590c:	65766168 	.word	0x65766168
   15910:	746e6520 	.word	0x746e6520
   15914:	64657265 	.word	0x64657265
   15918:	65687420 	.word	0x65687420
   1591c:	75616620 	.word	0x75616620
   15920:	7320746c 	.word	0x7320746c
   15924:	65746174 	.word	0x65746174
   15928:	00000021 	.word	0x00000021
   1592c:	206c6c41 	.word	0x206c6c41
   15930:	75646f6d 	.word	0x75646f6d
   15934:	2073656c 	.word	0x2073656c
   15938:	65766168 	.word	0x65766168
   1593c:	69786520 	.word	0x69786520
   15940:	20646574 	.word	0x20646574
   15944:	61662061 	.word	0x61662061
   15948:	65746c75 	.word	0x65746c75
   1594c:	74732064 	.word	0x74732064
   15950:	00657461 	.word	0x00657461
   15954:	75646f4d 	.word	0x75646f4d
   15958:	3a73656c 	.word	0x3a73656c
   1595c:	20692520 	.word	0x20692520
   15960:	6c6c6543 	.word	0x6c6c6543
   15964:	25203a73 	.word	0x25203a73
   15968:	74532069 	.word	0x74532069
   1596c:	676e6972 	.word	0x676e6972
   15970:	25203a73 	.word	0x25203a73
   15974:	56202069 	.word	0x56202069
   15978:	61746c6f 	.word	0x61746c6f
   1597c:	203a6567 	.word	0x203a6567
   15980:	20566625 	.word	0x20566625
   15984:	76412020 	.word	0x76412020
   15988:	65432067 	.word	0x65432067
   1598c:	56206c6c 	.word	0x56206c6c
   15990:	61746c6f 	.word	0x61746c6f
   15994:	203a6567 	.word	0x203a6567
   15998:	20566625 	.word	0x20566625
   1599c:	776f4c20 	.word	0x776f4c20
   159a0:	6c654320 	.word	0x6c654320
   159a4:	6f56206c 	.word	0x6f56206c
   159a8:	6761746c 	.word	0x6761746c
   159ac:	25203a65 	.word	0x25203a65
   159b0:	20205666 	.word	0x20205666
   159b4:	67694820 	.word	0x67694820
   159b8:	65432068 	.word	0x65432068
   159bc:	56206c6c 	.word	0x56206c6c
   159c0:	61746c6f 	.word	0x61746c6f
   159c4:	203a6567 	.word	0x203a6567
   159c8:	20566625 	.word	0x20566625
   159cc:	746c6544 	.word	0x746c6544
   159d0:	6f562061 	.word	0x6f562061
   159d4:	6761746c 	.word	0x6761746c
   159d8:	25203a65 	.word	0x25203a65
   159dc:	20566d7a 	.word	0x20566d7a
   159e0:	76412020 	.word	0x76412020
   159e4:	65542067 	.word	0x65542067
   159e8:	203a706d 	.word	0x203a706d
   159ec:	20436625 	.word	0x20436625
   159f0:	00000000 	.word	0x00000000
   159f4:	75646f4d 	.word	0x75646f4d
   159f8:	2320656c 	.word	0x2320656c
   159fc:	00000000 	.word	0x00000000
   15a00:	00000056 	.word	0x00000056
   15a04:	65432020 	.word	0x65432020
   15a08:	00006c6c 	.word	0x00006c6c
   15a0c:	654e2020 	.word	0x654e2020
   15a10:	65542067 	.word	0x65542067
   15a14:	54206d72 	.word	0x54206d72
   15a18:	3a706d65 	.word	0x3a706d65
   15a1c:	00000020 	.word	0x00000020
   15a20:	50202043 	.word	0x50202043
   15a24:	5420736f 	.word	0x5420736f
   15a28:	206d7265 	.word	0x206d7265
   15a2c:	706d6554 	.word	0x706d6554
   15a30:	0000203a 	.word	0x0000203a
   15a34:	ffff0043 	.word	0xffff0043
   15a38:	ffff002c 	.word	0xffff002c
   15a3c:	00007830 	.word	0x00007830
   15a40:	00006230 	.word	0x00006230
   15a44:	00000054 	.word	0x00000054
   15a48:	00000046 	.word	0x00000046
   15a4c:	45555254 	.word	0x45555254
   15a50:	00000000 	.word	0x00000000
   15a54:	534c4146 	.word	0x534c4146
   15a58:	ffff0045 	.word	0xffff0045
   15a5c:	55424544 	.word	0x55424544
   15a60:	00000047 	.word	0x00000047
   15a64:	4f464e49 	.word	0x4f464e49
   15a68:	00000000 	.word	0x00000000
   15a6c:	4e524157 	.word	0x4e524157
   15a70:	00474e49 	.word	0x00474e49
   15a74:	4f525245 	.word	0x4f525245
   15a78:	ffff0052 	.word	0xffff0052
   15a7c:	65736552 	.word	0x65736552
   15a80:	6e697474 	.word	0x6e697474
   15a84:	6f742067 	.word	0x6f742067
   15a88:	63616620 	.word	0x63616620
   15a8c:	79726f74 	.word	0x79726f74
   15a90:	66656420 	.word	0x66656420
   15a94:	746c7561 	.word	0x746c7561
   15a98:	ffff0073 	.word	0xffff0073
   15a9c:	20434f53 	.word	0x20434f53
   15aa0:	0000203a 	.word	0x0000203a
   15aa4:	75662020 	.word	0x75662020
   15aa8:	70206c65 	.word	0x70206c65
   15aac:	3a206d77 	.word	0x3a206d77
   15ab0:	ffff0020 	.word	0xffff0020
   15ab4:	20534d42 	.word	0x20534d42
   15ab8:	74617453 	.word	0x74617453
   15abc:	3a207375 	.word	0x3a207375
   15ac0:	00000020 	.word	0x00000020
   15ac4:	20535345 	.word	0x20535345
   15ac8:	65646f4d 	.word	0x65646f4d
   15acc:	00000020 	.word	0x00000020
   15ad0:	6e55203a 	.word	0x6e55203a
   15ad4:	56726564 	.word	0x56726564
   15ad8:	61746c6f 	.word	0x61746c6f
   15adc:	00206567 	.word	0x00206567
   15ae0:	764f203a 	.word	0x764f203a
   15ae4:	6f567265 	.word	0x6f567265
   15ae8:	6761746c 	.word	0x6761746c
   15aec:	00002065 	.word	0x00002065
   15af0:	6543203a 	.word	0x6543203a
   15af4:	49206c6c 	.word	0x49206c6c
   15af8:	6c61626d 	.word	0x6c61626d
   15afc:	65636e61 	.word	0x65636e61
   15b00:	00000020 	.word	0x00000020
   15b04:	764f203a 	.word	0x764f203a
   15b08:	54207265 	.word	0x54207265
   15b0c:	20706d65 	.word	0x20706d65
   15b10:	00000000 	.word	0x00000000
   15b14:	6e55203a 	.word	0x6e55203a
   15b18:	20726564 	.word	0x20726564
   15b1c:	706d6554 	.word	0x706d6554
   15b20:	00000020 	.word	0x00000020
   15b24:	764f203a 	.word	0x764f203a
   15b28:	6f567265 	.word	0x6f567265
   15b2c:	6761746c 	.word	0x6761746c
   15b30:	74532065 	.word	0x74532065
   15b34:	6761726f 	.word	0x6761726f
   15b38:	00002065 	.word	0x00002065
   15b3c:	4e55203a 	.word	0x4e55203a
   15b40:	70706168 	.word	0x70706168
   15b44:	00003a79 	.word	0x00003a79
   15b48:	6148203a 	.word	0x6148203a
   15b4c:	20797070 	.word	0x20797070
   15b50:	00000000 	.word	0x00000000
   15b54:	6f6f4220 	.word	0x6f6f4220
   15b58:	00002074 	.word	0x00002074
   15b5c:	61655220 	.word	0x61655220
   15b60:	00207964 	.word	0x00207964
   15b64:	65725020 	.word	0x65725020
   15b68:	72616863 	.word	0x72616863
   15b6c:	00206567 	.word	0x00206567
   15b70:	69724420 	.word	0x69724420
   15b74:	00206576 	.word	0x00206576
   15b78:	61684320 	.word	0x61684320
   15b7c:	20656772 	.word	0x20656772
   15b80:	00000000 	.word	0x00000000
   15b84:	72724520 	.word	0x72724520
   15b88:	0020726f 	.word	0x0020726f
   15b8c:	4341207c 	.word	0x4341207c
   15b90:	65725020 	.word	0x65725020
   15b94:	746e6573 	.word	0x746e6573
   15b98:	00007c20 	.word	0x00007c20
   15b9c:	654b207c 	.word	0x654b207c
   15ba0:	4e4f2079 	.word	0x4e4f2079
   15ba4:	00007c20 	.word	0x00007c20
   15ba8:	6c61427c 	.word	0x6c61427c
   15bac:	69636e61 	.word	0x69636e61
   15bb0:	4120676e 	.word	0x4120676e
   15bb4:	76697463 	.word	0x76697463
   15bb8:	00000065 	.word	0x00000065
   15bbc:	3a74754f 	.word	0x3a74754f
   15bc0:	00000000 	.word	0x00000000
   15bc4:	6e6f4320 	.word	0x6e6f4320
   15bc8:	00003a74 	.word	0x00003a74
   15bcc:	00000031 	.word	0x00000031
   15bd0:	00000030 	.word	0x00000030
   15bd4:	3a6e4920 	.word	0x3a6e4920
   15bd8:	00000000 	.word	0x00000000
   15bdc:	61684320 	.word	0x61684320
   15be0:	20656772 	.word	0x20656772
   15be4:	72727543 	.word	0x72727543
   15be8:	20746e65 	.word	0x20746e65
   15bec:	696d694c 	.word	0x696d694c
   15bf0:	203a2074 	.word	0x203a2074
   15bf4:	00000000 	.word	0x00000000
   15bf8:	44204120 	.word	0x44204120
   15bfc:	68437369 	.word	0x68437369
   15c00:	65677261 	.word	0x65677261
   15c04:	72754320 	.word	0x72754320
   15c08:	746e6572 	.word	0x746e6572
   15c0c:	6d694c20 	.word	0x6d694c20
   15c10:	3a207469 	.word	0x3a207469
   15c14:	00000020 	.word	0x00000020
   15c18:	00004120 	.word	0x00004120
   15c1c:	50432020 	.word	0x50432020
   15c20:	20434120 	.word	0x20434120
   15c24:	72727543 	.word	0x72727543
   15c28:	20746e65 	.word	0x20746e65
   15c2c:	696d694c 	.word	0x696d694c
   15c30:	00203a74 	.word	0x00203a74
   15c34:	43202041 	.word	0x43202041
   15c38:	75442050 	.word	0x75442050
   15c3c:	00203a72 	.word	0x00203a72
   15c40:	68432020 	.word	0x68432020
   15c44:	65677261 	.word	0x65677261
   15c48:	776f5020 	.word	0x776f5020
   15c4c:	3a207265 	.word	0x3a207265
   15c50:	00000020 	.word	0x00000020
   15c54:	6f4e2020 	.word	0x6f4e2020
   15c58:	61684320 	.word	0x61684320
   15c5c:	20656772 	.word	0x20656772
   15c60:	72727543 	.word	0x72727543
   15c64:	20746e65 	.word	0x20746e65
   15c68:	696d694c 	.word	0x696d694c
   15c6c:	00000074 	.word	0x00000074
   15c70:	68432020 	.word	0x68432020
   15c74:	65677261 	.word	0x65677261
   15c78:	72754320 	.word	0x72754320
   15c7c:	746e6572 	.word	0x746e6572
   15c80:	6d694c20 	.word	0x6d694c20
   15c84:	41207469 	.word	0x41207469
   15c88:	76697463 	.word	0x76697463
   15c8c:	ffff0065 	.word	0xffff0065
   15c90:	20776f4c 	.word	0x20776f4c
   15c94:	676e6152 	.word	0x676e6152
   15c98:	00203a65 	.word	0x00203a65
   15c9c:	676e6953 	.word	0x676e6953
   15ca0:	4920656c 	.word	0x4920656c
   15ca4:	00203a6e 	.word	0x00203a6e
   15ca8:	756c6156 	.word	0x756c6156
   15cac:	44412065 	.word	0x44412065
   15cb0:	203a3043 	.word	0x203a3043
   15cb4:	00000000 	.word	0x00000000
   15cb8:	00416d20 	.word	0x00416d20
   15cbc:	68676948 	.word	0x68676948
   15cc0:	6e615220 	.word	0x6e615220
   15cc4:	203a6567 	.word	0x203a6567
   15cc8:	00000000 	.word	0x00000000
   15ccc:	0000416d 	.word	0x0000416d
   15cd0:	2020416d 	.word	0x2020416d
   15cd4:	ffffff00 	.word	0xffffff00
   15cd8:	52454820 	.word	0x52454820
   15cdc:	00002045 	.word	0x00002045
   15ce0:	2f2f2f2f 	.word	0x2f2f2f2f
   15ce4:	2f2f2f2f 	.word	0x2f2f2f2f
   15ce8:	2f2f2f2f 	.word	0x2f2f2f2f
   15cec:	2f2f2f2f 	.word	0x2f2f2f2f
   15cf0:	2f2f2f2f 	.word	0x2f2f2f2f
   15cf4:	2f2f2f2f 	.word	0x2f2f2f2f
   15cf8:	2f2f2f2f 	.word	0x2f2f2f2f
   15cfc:	2f2f2f2f 	.word	0x2f2f2f2f
   15d00:	2f2f2f2f 	.word	0x2f2f2f2f
   15d04:	2f2f2f2f 	.word	0x2f2f2f2f
   15d08:	434f5320 	.word	0x434f5320
   15d0c:	54455320 	.word	0x54455320
   15d10:	2f2f2f20 	.word	0x2f2f2f20
   15d14:	2f2f2f2f 	.word	0x2f2f2f2f
   15d18:	2f2f2f2f 	.word	0x2f2f2f2f
   15d1c:	2f2f2f2f 	.word	0x2f2f2f2f
   15d20:	2f2f2f2f 	.word	0x2f2f2f2f
   15d24:	2f2f2f2f 	.word	0x2f2f2f2f
   15d28:	2f2f2f2f 	.word	0x2f2f2f2f
   15d2c:	2f2f2f2f 	.word	0x2f2f2f2f
   15d30:	2f2f2f2f 	.word	0x2f2f2f2f
   15d34:	2f2f2f2f 	.word	0x2f2f2f2f
   15d38:	0000002f 	.word	0x0000002f
   15d3c:	20776f4c 	.word	0x20776f4c
   15d40:	676e6152 	.word	0x676e6152
   15d44:	00002065 	.word	0x00002065
   15d48:	68676948 	.word	0x68676948
   15d4c:	6e615220 	.word	0x6e615220
   15d50:	00006567 	.word	0x00006567
   15d54:	6c616e41 	.word	0x6c616e41
   15d58:	6575676f 	.word	0x6575676f
   15d5c:	6e695320 	.word	0x6e695320
   15d60:	20656c67 	.word	0x20656c67
   15d64:	00000000 	.word	0x00000000
   15d68:	624e4143 	.word	0x624e4143
   15d6c:	00207375 	.word	0x00207375
   15d70:	4f532025 	.word	0x4f532025
   15d74:	00002043 	.word	0x00002043
   15d78:	0068416d 	.word	0x0068416d
   15d7c:	6c6c7570 	.word	0x6c6c7570
   15d80:	206e6920 	.word	0x206e6920
   15d84:	3654554f 	.word	0x3654554f
   15d88:	00000000 	.word	0x00000000
   15d8c:	6c6c7570 	.word	0x6c6c7570
   15d90:	206e6920 	.word	0x206e6920
   15d94:	3754554f 	.word	0x3754554f
   15d98:	ffffff00 	.word	0xffffff00
   15d9c:	6c614320 	.word	0x6c614320
   15da0:	61726269 	.word	0x61726269
   15da4:	676e6974 	.word	0x676e6974
   15da8:	72754320 	.word	0x72754320
   15dac:	746e6572 	.word	0x746e6572
   15db0:	66664f20 	.word	0x66664f20
   15db4:	20746573 	.word	0x20746573
   15db8:	3a3a3a3a 	.word	0x3a3a3a3a
   15dbc:	0000203a 	.word	0x0000203a
   15dc0:	0000002e 	.word	0x0000002e
   15dc4:	72756320 	.word	0x72756320
   15dc8:	746e6572 	.word	0x746e6572
   15dcc:	66666f20 	.word	0x66666f20
   15dd0:	20746573 	.word	0x20746573
   15dd4:	61632031 	.word	0x61632031
   15dd8:	7262696c 	.word	0x7262696c
   15ddc:	64657461 	.word	0x64657461
   15de0:	00000020 	.word	0x00000020
   15de4:	72756320 	.word	0x72756320
   15de8:	746e6572 	.word	0x746e6572
   15dec:	66666f20 	.word	0x66666f20
   15df0:	20746573 	.word	0x20746573
   15df4:	61632032 	.word	0x61632032
   15df8:	7262696c 	.word	0x7262696c
   15dfc:	64657461 	.word	0x64657461
   15e00:	ffff0020 	.word	0xffff0020
   15e04:	646f4320 	.word	0x646f4320
   15e08:	53206465 	.word	0x53206465
   15e0c:	69747465 	.word	0x69747465
   15e10:	2073676e 	.word	0x2073676e
   15e14:	64616f4c 	.word	0x64616f4c
   15e18:	00206465 	.word	0x00206465
   15e1c:	68416d20 	.word	0x68416d20
   15e20:	73655220 	.word	0x73655220
   15e24:	00207465 	.word	0x00207465
   15e28:	6e206f44 	.word	0x6e206f44
   15e2c:	7520746f 	.word	0x7520746f
   15e30:	75206573 	.word	0x75206573
   15e34:	73656c6e 	.word	0x73656c6e
   15e38:	6f792073 	.word	0x6f792073
   15e3c:	6e6b2075 	.word	0x6e6b2075
   15e40:	7720776f 	.word	0x7720776f
   15e44:	20746168 	.word	0x20746168
   15e48:	64207469 	.word	0x64207469
   15e4c:	2173656f 	.word	0x2173656f
   15e50:	21212121 	.word	0x21212121
   15e54:	00000000 	.word	0x00000000
   15e58:	202d2031 	.word	0x202d2031
   15e5c:	646e6553 	.word	0x646e6553
   15e60:	20676e69 	.word	0x20676e69
   15e64:	65707845 	.word	0x65707845
   15e68:	656d6972 	.word	0x656d6972
   15e6c:	6c61746e 	.word	0x6c61746e
   15e70:	63695620 	.word	0x63695620
   15e74:	6e6f7274 	.word	0x6e6f7274
   15e78:	4e414320 	.word	0x4e414320
   15e7c:	0000003a 	.word	0x0000003a
   15e80:	202d2071 	.word	0x202d2071
   15e84:	62206f47 	.word	0x62206f47
   15e88:	206b6361 	.word	0x206b6361
   15e8c:	6d206f74 	.word	0x6d206f74
   15e90:	00756e65 	.word	0x00756e65
   15e94:	202d2031 	.word	0x202d2031
   15e98:	706d6554 	.word	0x706d6554
   15e9c:	6e655320 	.word	0x6e655320
   15ea0:	20726f73 	.word	0x20726f73
   15ea4:	74746553 	.word	0x74746553
   15ea8:	3a676e69 	.word	0x3a676e69
   15eac:	00000000 	.word	0x00000000
   15eb0:	202d2032 	.word	0x202d2032
   15eb4:	746c6f56 	.word	0x746c6f56
   15eb8:	20656761 	.word	0x20656761
   15ebc:	65646e55 	.word	0x65646e55
   15ec0:	68572072 	.word	0x68572072
   15ec4:	20686369 	.word	0x20686369
   15ec8:	49206f54 	.word	0x49206f54
   15ecc:	726f6e67 	.word	0x726f6e67
   15ed0:	65432065 	.word	0x65432065
   15ed4:	3a736c6c 	.word	0x3a736c6c
   15ed8:	00000000 	.word	0x00000000
   15edc:	0000566d 	.word	0x0000566d
   15ee0:	202d2031 	.word	0x202d2031
   15ee4:	6c6c6543 	.word	0x6c6c6543
   15ee8:	61684320 	.word	0x61684320
   15eec:	20656772 	.word	0x20656772
   15ef0:	746c6f56 	.word	0x746c6f56
   15ef4:	20656761 	.word	0x20656761
   15ef8:	696d694c 	.word	0x696d694c
   15efc:	65532074 	.word	0x65532074
   15f00:	696f7074 	.word	0x696f7074
   15f04:	203a746e 	.word	0x203a746e
   15f08:	00000000 	.word	0x00000000
   15f0c:	202d2032 	.word	0x202d2032
   15f10:	72616843 	.word	0x72616843
   15f14:	48206567 	.word	0x48206567
   15f18:	65747379 	.word	0x65747379
   15f1c:	73697372 	.word	0x73697372
   15f20:	0000203a 	.word	0x0000203a
   15f24:	202d2033 	.word	0x202d2033
   15f28:	6b636150 	.word	0x6b636150
   15f2c:	78614d20 	.word	0x78614d20
   15f30:	61684320 	.word	0x61684320
   15f34:	20656772 	.word	0x20656772
   15f38:	72727543 	.word	0x72727543
   15f3c:	3a746e65 	.word	0x3a746e65
   15f40:	00000020 	.word	0x00000020
   15f44:	00000041 	.word	0x00000041
   15f48:	50202d34 	.word	0x50202d34
   15f4c:	206b6361 	.word	0x206b6361
   15f50:	20646e45 	.word	0x20646e45
   15f54:	4320666f 	.word	0x4320666f
   15f58:	67726168 	.word	0x67726168
   15f5c:	75432065 	.word	0x75432065
   15f60:	6e657272 	.word	0x6e657272
   15f64:	00203a74 	.word	0x00203a74
   15f68:	43202d35 	.word	0x43202d35
   15f6c:	67726168 	.word	0x67726168
   15f70:	54207265 	.word	0x54207265
   15f74:	3a657079 	.word	0x3a657079
   15f78:	00000020 	.word	0x00000020
   15f7c:	616c6552 	.word	0x616c6552
   15f80:	6f432079 	.word	0x6f432079
   15f84:	6f72746e 	.word	0x6f72746e
   15f88:	0000006c 	.word	0x0000006c
   15f8c:	73757242 	.word	0x73757242
   15f90:	4c4e2061 	.word	0x4c4e2061
   15f94:	78783547 	.word	0x78783547
   15f98:	00000000 	.word	0x00000000
   15f9c:	746c6f56 	.word	0x746c6f56
   15fa0:	61684320 	.word	0x61684320
   15fa4:	72656772 	.word	0x72656772
   15fa8:	00000000 	.word	0x00000000
   15fac:	65746c45 	.word	0x65746c45
   15fb0:	6843206b 	.word	0x6843206b
   15fb4:	65677261 	.word	0x65677261
   15fb8:	00000072 	.word	0x00000072
   15fbc:	6f636c45 	.word	0x6f636c45
   15fc0:	6843206e 	.word	0x6843206e
   15fc4:	65677261 	.word	0x65677261
   15fc8:	00000072 	.word	0x00000072
   15fcc:	74636956 	.word	0x74636956
   15fd0:	2f6e6f72 	.word	0x2f6e6f72
   15fd4:	00414d53 	.word	0x00414d53
   15fd8:	61646f43 	.word	0x61646f43
   15fdc:	00000000 	.word	0x00000000
   15fe0:	74636956 	.word	0x74636956
   15fe4:	206e6f72 	.word	0x206e6f72
   15fe8:	53205648 	.word	0x53205648
   15fec:	00636570 	.word	0x00636570
   15ff0:	43202d36 	.word	0x43202d36
   15ff4:	67726168 	.word	0x67726168
   15ff8:	43207265 	.word	0x43207265
   15ffc:	4d206e61 	.word	0x4d206e61
   16000:	53206773 	.word	0x53206773
   16004:	203a6470 	.word	0x203a6470
   16008:	00000000 	.word	0x00000000
   1600c:	0000536d 	.word	0x0000536d
   16010:	43202d37 	.word	0x43202d37
   16014:	42206e61 	.word	0x42206e61
   16018:	72647561 	.word	0x72647561
   1601c:	3a657461 	.word	0x3a657461
   16020:	00000020 	.word	0x00000020
   16024:	7370626b 	.word	0x7370626b
   16028:	00000000 	.word	0x00000000
   1602c:	202d2038 	.word	0x202d2038
   16030:	72616843 	.word	0x72616843
   16034:	20726567 	.word	0x20726567
   16038:	43205648 	.word	0x43205648
   1603c:	656e6e6f 	.word	0x656e6e6f
   16040:	6f697463 	.word	0x6f697463
   16044:	00203a6e 	.word	0x00203a6e
   16048:	68654220 	.word	0x68654220
   1604c:	20646e69 	.word	0x20646e69
   16050:	746e6f43 	.word	0x746e6f43
   16054:	6f746361 	.word	0x6f746361
   16058:	00007372 	.word	0x00007372
   1605c:	65726944 	.word	0x65726944
   16060:	54207463 	.word	0x54207463
   16064:	6142206f 	.word	0x6142206f
   16068:	72657474 	.word	0x72657474
   1606c:	56482079 	.word	0x56482079
   16070:	00000000 	.word	0x00000000
   16074:	202d2039 	.word	0x202d2039
   16078:	72616843 	.word	0x72616843
   1607c:	43206567 	.word	0x43206567
   16080:	65727275 	.word	0x65727275
   16084:	6420746e 	.word	0x6420746e
   16088:	74617265 	.word	0x74617265
   1608c:	6f4c2065 	.word	0x6f4c2065
   16090:	00203a77 	.word	0x00203a77
   16094:	00004320 	.word	0x00004320
   16098:	202d2061 	.word	0x202d2061
   1609c:	65746c41 	.word	0x65746c41
   160a0:	74616e72 	.word	0x74616e72
   160a4:	61502065 	.word	0x61502065
   160a8:	4d206b63 	.word	0x4d206b63
   160ac:	43207861 	.word	0x43207861
   160b0:	67726168 	.word	0x67726168
   160b4:	75432065 	.word	0x75432065
   160b8:	6e657272 	.word	0x6e657272
   160bc:	00203a74 	.word	0x00203a74
   160c0:	202d2062 	.word	0x202d2062
   160c4:	72616843 	.word	0x72616843
   160c8:	20726567 	.word	0x20726567
   160cc:	74204341 	.word	0x74204341
   160d0:	4344206f 	.word	0x4344206f
   160d4:	66666520 	.word	0x66666520
   160d8:	65636569 	.word	0x65636569
   160dc:	3a79636e 	.word	0x3a79636e
   160e0:	00000020 	.word	0x00000020
   160e4:	00000025 	.word	0x00000025
   160e8:	202d2063 	.word	0x202d2063
   160ec:	72616843 	.word	0x72616843
   160f0:	20726567 	.word	0x20726567
   160f4:	56204341 	.word	0x56204341
   160f8:	61746c6f 	.word	0x61746c6f
   160fc:	203a6567 	.word	0x203a6567
   16100:	00000000 	.word	0x00000000
   16104:	00434156 	.word	0x00434156
   16108:	202d2064 	.word	0x202d2064
   1610c:	6e617453 	.word	0x6e617453
   16110:	64726164 	.word	0x64726164
   16114:	6e614320 	.word	0x6e614320
   16118:	6c6f5620 	.word	0x6c6f5620
   1611c:	65676174 	.word	0x65676174
   16120:	61635320 	.word	0x61635320
   16124:	203a656c 	.word	0x203a656c
   16128:	00000000 	.word	0x00000000
   1612c:	31302e30 	.word	0x31302e30
   16130:	00000000 	.word	0x00000000
   16134:	00312e30 	.word	0x00312e30
   16138:	72616c41 	.word	0x72616c41
   1613c:	6e61206d 	.word	0x6e61206d
   16140:	61572064 	.word	0x61572064
   16144:	6e696e72 	.word	0x6e696e72
   16148:	65532067 	.word	0x65532067
   1614c:	6e697474 	.word	0x6e697474
   16150:	4d207367 	.word	0x4d207367
   16154:	00756e65 	.word	0x00756e65
   16158:	202d2031 	.word	0x202d2031
   1615c:	746c6f56 	.word	0x746c6f56
   16160:	20656761 	.word	0x20656761
   16164:	6e726157 	.word	0x6e726157
   16168:	20676e69 	.word	0x20676e69
   1616c:	7366664f 	.word	0x7366664f
   16170:	203a7465 	.word	0x203a7465
   16174:	00000000 	.word	0x00000000
   16178:	202d2032 	.word	0x202d2032
   1617c:	6c6c6543 	.word	0x6c6c6543
   16180:	6c6f5620 	.word	0x6c6f5620
   16184:	65676174 	.word	0x65676174
   16188:	66694420 	.word	0x66694420
   1618c:	65726566 	.word	0x65726566
   16190:	2065636e 	.word	0x2065636e
   16194:	72616c41 	.word	0x72616c41
   16198:	00203a6d 	.word	0x00203a6d
   1619c:	202d2033 	.word	0x202d2033
   161a0:	706d6554 	.word	0x706d6554
   161a4:	72615720 	.word	0x72615720
   161a8:	676e696e 	.word	0x676e696e
   161ac:	66664f20 	.word	0x66664f20
   161b0:	3a746573 	.word	0x3a746573
   161b4:	00000020 	.word	0x00000020
   161b8:	202d2034 	.word	0x202d2034
   161bc:	7265764f 	.word	0x7265764f
   161c0:	646e6120 	.word	0x646e6120
   161c4:	646e5520 	.word	0x646e5520
   161c8:	56207265 	.word	0x56207265
   161cc:	61746c6f 	.word	0x61746c6f
   161d0:	44206567 	.word	0x44206567
   161d4:	79616c65 	.word	0x79616c65
   161d8:	0000203a 	.word	0x0000203a
   161dc:	00536d20 	.word	0x00536d20
   161e0:	746e6f43 	.word	0x746e6f43
   161e4:	6f746361 	.word	0x6f746361
   161e8:	6e612072 	.word	0x6e612072
   161ec:	61472064 	.word	0x61472064
   161f0:	20656775 	.word	0x20656775
   161f4:	74746553 	.word	0x74746553
   161f8:	73676e69 	.word	0x73676e69
   161fc:	6e654d20 	.word	0x6e654d20
   16200:	00000075 	.word	0x00000075
   16204:	202d2031 	.word	0x202d2031
   16208:	43657250 	.word	0x43657250
   1620c:	67726168 	.word	0x67726168
   16210:	69542065 	.word	0x69542065
   16214:	3a72656d 	.word	0x3a72656d
   16218:	00000020 	.word	0x00000020
   1621c:	202d2032 	.word	0x202d2032
   16220:	43657250 	.word	0x43657250
   16224:	67726168 	.word	0x67726168
   16228:	69462065 	.word	0x69462065
   1622c:	6873696e 	.word	0x6873696e
   16230:	72754320 	.word	0x72754320
   16234:	746e6572 	.word	0x746e6572
   16238:	0000203a 	.word	0x0000203a
   1623c:	202d2033 	.word	0x202d2033
   16240:	204d5750 	.word	0x204d5750
   16244:	746e6f63 	.word	0x746e6f63
   16248:	6f746361 	.word	0x6f746361
   1624c:	6f482072 	.word	0x6f482072
   16250:	3020646c 	.word	0x3020646c
   16254:	32202d20 	.word	0x32202d20
   16258:	3a203535 	.word	0x3a203535
   1625c:	00000020 	.word	0x00000020
   16260:	202d2034 	.word	0x202d2034
   16264:	204d5750 	.word	0x204d5750
   16268:	20726f66 	.word	0x20726f66
   1626c:	67756147 	.word	0x67756147
   16270:	6f4c2065 	.word	0x6f4c2065
   16274:	20302077 	.word	0x20302077
   16278:	3532202d 	.word	0x3532202d
   1627c:	203a2035 	.word	0x203a2035
   16280:	00000000 	.word	0x00000000
   16284:	202d2035 	.word	0x202d2035
   16288:	204d5750 	.word	0x204d5750
   1628c:	20726f66 	.word	0x20726f66
   16290:	67756147 	.word	0x67756147
   16294:	69482065 	.word	0x69482065
   16298:	30206867 	.word	0x30206867
   1629c:	32202d20 	.word	0x32202d20
   162a0:	3a203535 	.word	0x3a203535
   162a4:	00000020 	.word	0x00000020
   162a8:	202d2036 	.word	0x202d2036
   162ac:	20535345 	.word	0x20535345
   162b0:	6e69614d 	.word	0x6e69614d
   162b4:	6e6f4320 	.word	0x6e6f4320
   162b8:	74636174 	.word	0x74636174
   162bc:	6f20726f 	.word	0x6f20726f
   162c0:	72542072 	.word	0x72542072
   162c4:	3a207069 	.word	0x3a207069
   162c8:	00000020 	.word	0x00000020
   162cc:	70697254 	.word	0x70697254
   162d0:	75685320 	.word	0x75685320
   162d4:	0000746e 	.word	0x0000746e
   162d8:	6e69614d 	.word	0x6e69614d
   162dc:	6e6f4320 	.word	0x6e6f4320
   162e0:	74636174 	.word	0x74636174
   162e4:	6120726f 	.word	0x6120726f
   162e8:	5020646e 	.word	0x5020646e
   162ec:	68636572 	.word	0x68636572
   162f0:	65677261 	.word	0x65677261
   162f4:	00000000 	.word	0x00000000
   162f8:	202d2037 	.word	0x202d2037
   162fc:	65747845 	.word	0x65747845
   16300:	6c616e72 	.word	0x6c616e72
   16304:	74614220 	.word	0x74614220
   16308:	79726574 	.word	0x79726574
   1630c:	616e4520 	.word	0x616e4520
   16310:	20656c62 	.word	0x20656c62
   16314:	0000203a 	.word	0x0000203a
   16318:	616e4520 	.word	0x616e4520
   1631c:	20656c62 	.word	0x20656c62
   16320:	00326e49 	.word	0x00326e49
   16324:	6f747541 	.word	0x6f747541
   16328:	61745320 	.word	0x61745320
   1632c:	00007472 	.word	0x00007472
   16330:	554e454d 	.word	0x554e454d
   16334:	00000000 	.word	0x00000000
   16338:	75626544 	.word	0x75626544
   1633c:	6e696767 	.word	0x6e696767
   16340:	61502067 	.word	0x61502067
   16344:	64657375 	.word	0x64657375
   16348:	00000000 	.word	0x00000000
   1634c:	6d726946 	.word	0x6d726946
   16350:	65726177 	.word	0x65726177
   16354:	72655620 	.word	0x72655620
   16358:	6e6f6973 	.word	0x6e6f6973
   1635c:	00203a20 	.word	0x00203a20
   16360:	202d2062 	.word	0x202d2062
   16364:	74746142 	.word	0x74746142
   16368:	20797265 	.word	0x20797265
   1636c:	74746553 	.word	0x74746553
   16370:	73676e69 	.word	0x73676e69
   16374:	00000000 	.word	0x00000000
   16378:	202d2061 	.word	0x202d2061
   1637c:	72616c41 	.word	0x72616c41
   16380:	6e61206d 	.word	0x6e61206d
   16384:	61572064 	.word	0x61572064
   16388:	6e696e72 	.word	0x6e696e72
   1638c:	65532067 	.word	0x65532067
   16390:	6e697474 	.word	0x6e697474
   16394:	00007367 	.word	0x00007367
   16398:	202d2065 	.word	0x202d2065
   1639c:	72616843 	.word	0x72616843
   163a0:	676e6967 	.word	0x676e6967
   163a4:	74655320 	.word	0x74655320
   163a8:	676e6974 	.word	0x676e6974
   163ac:	00000073 	.word	0x00000073
   163b0:	202d2063 	.word	0x202d2063
   163b4:	72727543 	.word	0x72727543
   163b8:	20746e65 	.word	0x20746e65
   163bc:	736e6553 	.word	0x736e6553
   163c0:	4320726f 	.word	0x4320726f
   163c4:	62696c61 	.word	0x62696c61
   163c8:	69746172 	.word	0x69746172
   163cc:	00006e6f 	.word	0x00006e6f
   163d0:	202d206b 	.word	0x202d206b
   163d4:	746e6f43 	.word	0x746e6f43
   163d8:	6f746361 	.word	0x6f746361
   163dc:	6e612072 	.word	0x6e612072
   163e0:	61472064 	.word	0x61472064
   163e4:	20656775 	.word	0x20656775
   163e8:	74746553 	.word	0x74746553
   163ec:	73676e69 	.word	0x73676e69
   163f0:	00000000 	.word	0x00000000
   163f4:	202d2069 	.word	0x202d2069
   163f8:	6f6e6749 	.word	0x6f6e6749
   163fc:	56206572 	.word	0x56206572
   16400:	65756c61 	.word	0x65756c61
   16404:	74655320 	.word	0x74655320
   16408:	676e6974 	.word	0x676e6974
   1640c:	00000073 	.word	0x00000073
   16410:	202d2064 	.word	0x202d2064
   16414:	75626544 	.word	0x75626544
   16418:	65532067 	.word	0x65532067
   1641c:	6e697474 	.word	0x6e697474
   16420:	00007367 	.word	0x00007367
   16424:	202d2078 	.word	0x202d2078
   16428:	65707845 	.word	0x65707845
   1642c:	656d6972 	.word	0x656d6972
   16430:	6c61746e 	.word	0x6c61746e
   16434:	74655320 	.word	0x74655320
   16438:	676e6974 	.word	0x676e6974
   1643c:	00000073 	.word	0x00000073
   16440:	202d2052 	.word	0x202d2052
   16444:	74736552 	.word	0x74736552
   16448:	20747261 	.word	0x20747261
   1644c:	00534d42 	.word	0x00534d42
   16450:	202d2071 	.word	0x202d2071
   16454:	74697865 	.word	0x74697865
   16458:	6e656d20 	.word	0x6e656d20
   1645c:	00000075 	.word	0x00000075
   16460:	75626544 	.word	0x75626544
   16464:	65532067 	.word	0x65532067
   16468:	6e697474 	.word	0x6e697474
   1646c:	4d207367 	.word	0x4d207367
   16470:	00756e65 	.word	0x00756e65
   16474:	67676f54 	.word	0x67676f54
   16478:	6f20656c 	.word	0x6f20656c
   1647c:	202f206e 	.word	0x202f206e
   16480:	0066666f 	.word	0x0066666f
   16484:	202d2031 	.word	0x202d2031
   16488:	206e6143 	.word	0x206e6143
   1648c:	75626544 	.word	0x75626544
   16490:	203a2067 	.word	0x203a2067
   16494:	00000000 	.word	0x00000000
   16498:	202d2032 	.word	0x202d2032
   1649c:	72727543 	.word	0x72727543
   164a0:	20746e65 	.word	0x20746e65
   164a4:	75626544 	.word	0x75626544
   164a8:	203a2067 	.word	0x203a2067
   164ac:	00000000 	.word	0x00000000
   164b0:	202d2033 	.word	0x202d2033
   164b4:	7074754f 	.word	0x7074754f
   164b8:	43207475 	.word	0x43207475
   164bc:	6b636568 	.word	0x6b636568
   164c0:	00203a20 	.word	0x00203a20
   164c4:	202d2034 	.word	0x202d2034
   164c8:	75706e49 	.word	0x75706e49
   164cc:	68432074 	.word	0x68432074
   164d0:	206b6365 	.word	0x206b6365
   164d4:	0000203a 	.word	0x0000203a
   164d8:	202d2035 	.word	0x202d2035
   164dc:	20535345 	.word	0x20535345
   164e0:	65646f6d 	.word	0x65646f6d
   164e4:	00203a20 	.word	0x00203a20
   164e8:	202d2036 	.word	0x202d2036
   164ec:	6c6c6543 	.word	0x6c6c6543
   164f0:	72502073 	.word	0x72502073
   164f4:	6e657365 	.word	0x6e657365
   164f8:	65522074 	.word	0x65522074
   164fc:	20746573 	.word	0x20746573
   16500:	0000203a 	.word	0x0000203a
   16504:	202d2037 	.word	0x202d2037
   16508:	67756147 	.word	0x67756147
   1650c:	65442065 	.word	0x65442065
   16510:	20677562 	.word	0x20677562
   16514:	0000203a 	.word	0x0000203a
   16518:	202d2038 	.word	0x202d2038
   1651c:	20565343 	.word	0x20565343
   16520:	7074754f 	.word	0x7074754f
   16524:	3a207475 	.word	0x3a207475
   16528:	00000020 	.word	0x00000020
   1652c:	202d2039 	.word	0x202d2039
   16530:	69636544 	.word	0x69636544
   16534:	206c616d 	.word	0x206c616d
   16538:	63616c50 	.word	0x63616c50
   1653c:	74207365 	.word	0x74207365
   16540:	6853206f 	.word	0x6853206f
   16544:	3a20776f 	.word	0x3a20776f
   16548:	00000020 	.word	0x00000020
   1654c:	202d2064 	.word	0x202d2064
   16550:	20565343 	.word	0x20565343
   16554:	696c6544 	.word	0x696c6544
   16558:	6574696d 	.word	0x6574696d
   1655c:	203a2072 	.word	0x203a2072
   16560:	00000000 	.word	0x00000000
   16564:	63617053 	.word	0x63617053
   16568:	00000065 	.word	0x00000065
   1656c:	6d6d6f43 	.word	0x6d6d6f43
   16570:	00000061 	.word	0x00000061
   16574:	72727543 	.word	0x72727543
   16578:	20746e65 	.word	0x20746e65
   1657c:	736e6553 	.word	0x736e6553
   16580:	4320726f 	.word	0x4320726f
   16584:	62696c61 	.word	0x62696c61
   16588:	69746172 	.word	0x69746172
   1658c:	4d206e6f 	.word	0x4d206e6f
   16590:	00756e65 	.word	0x00756e65
   16594:	202d2063 	.word	0x202d2063
   16598:	63206f54 	.word	0x63206f54
   1659c:	62696c61 	.word	0x62696c61
   165a0:	65746172 	.word	0x65746172
   165a4:	6e657320 	.word	0x6e657320
   165a8:	20726f73 	.word	0x20726f73
   165ac:	7366666f 	.word	0x7366666f
   165b0:	00007465 	.word	0x00007465
   165b4:	202d2073 	.word	0x202d2073
   165b8:	72727543 	.word	0x72727543
   165bc:	20746e65 	.word	0x20746e65
   165c0:	736e6553 	.word	0x736e6553
   165c4:	5420726f 	.word	0x5420726f
   165c8:	20657079 	.word	0x20657079
   165cc:	0000203a 	.word	0x0000203a
   165d0:	616e4120 	.word	0x616e4120
   165d4:	75676f6c 	.word	0x75676f6c
   165d8:	75442065 	.word	0x75442065
   165dc:	43206c61 	.word	0x43206c61
   165e0:	65727275 	.word	0x65727275
   165e4:	5320746e 	.word	0x5320746e
   165e8:	6f736e65 	.word	0x6f736e65
   165ec:	00002072 	.word	0x00002072
   165f0:	616e4120 	.word	0x616e4120
   165f4:	75676f6c 	.word	0x75676f6c
   165f8:	69532065 	.word	0x69532065
   165fc:	656c676e 	.word	0x656c676e
   16600:	72754320 	.word	0x72754320
   16604:	746e6572 	.word	0x746e6572
   16608:	6e655320 	.word	0x6e655320
   1660c:	20726f73 	.word	0x20726f73
   16610:	00000000 	.word	0x00000000
   16614:	6e614320 	.word	0x6e614320
   16618:	20737562 	.word	0x20737562
   1661c:	72727543 	.word	0x72727543
   16620:	20746e65 	.word	0x20746e65
   16624:	736e6553 	.word	0x736e6553
   16628:	0020726f 	.word	0x0020726f
   1662c:	65646e55 	.word	0x65646e55
   16630:	656e6966 	.word	0x656e6966
   16634:	00000064 	.word	0x00000064
   16638:	202d2031 	.word	0x202d2031
   1663c:	65766e69 	.word	0x65766e69
   16640:	63207472 	.word	0x63207472
   16644:	65727275 	.word	0x65727275
   16648:	3a20746e 	.word	0x3a20746e
   1664c:	00000020 	.word	0x00000020
   16650:	202d2032 	.word	0x202d2032
   16654:	65727550 	.word	0x65727550
   16658:	6c6f5620 	.word	0x6c6f5620
   1665c:	65676174 	.word	0x65676174
   16660:	73616220 	.word	0x73616220
   16664:	53206465 	.word	0x53206465
   16668:	3a20434f 	.word	0x3a20434f
   1666c:	00000020 	.word	0x00000020
   16670:	202d2033 	.word	0x202d2033
   16674:	72727543 	.word	0x72727543
   16678:	20746e65 	.word	0x20746e65
   1667c:	746c754d 	.word	0x746c754d
   16680:	696c7069 	.word	0x696c7069
   16684:	69746163 	.word	0x69746163
   16688:	3a206e6f 	.word	0x3a206e6f
   1668c:	00000020 	.word	0x00000020
   16690:	202d2034 	.word	0x202d2034
   16694:	6c616e41 	.word	0x6c616e41
   16698:	6575676f 	.word	0x6575676f
   1669c:	776f4c20 	.word	0x776f4c20
   166a0:	6e615220 	.word	0x6e615220
   166a4:	43206567 	.word	0x43206567
   166a8:	20766e6f 	.word	0x20766e6f
   166ac:	0000203a 	.word	0x0000203a
   166b0:	20566d20 	.word	0x20566d20
   166b4:	0041202f 	.word	0x0041202f
   166b8:	202d2035 	.word	0x202d2035
   166bc:	6c616e41 	.word	0x6c616e41
   166c0:	6575676f 	.word	0x6575676f
   166c4:	67694820 	.word	0x67694820
   166c8:	61522068 	.word	0x61522068
   166cc:	2065676e 	.word	0x2065676e
   166d0:	766e6f43 	.word	0x766e6f43
   166d4:	00203a20 	.word	0x00203a20
   166d8:	202d2036 	.word	0x202d2036
   166dc:	72727543 	.word	0x72727543
   166e0:	20746e65 	.word	0x20746e65
   166e4:	736e6553 	.word	0x736e6553
   166e8:	4420726f 	.word	0x4420726f
   166ec:	62646165 	.word	0x62646165
   166f0:	20646e61 	.word	0x20646e61
   166f4:	0000203a 	.word	0x0000203a
   166f8:	00566d20 	.word	0x00566d20
   166fc:	202d2038 	.word	0x202d2038
   16700:	72727543 	.word	0x72727543
   16704:	20746e65 	.word	0x20746e65
   16708:	6e616843 	.word	0x6e616843
   1670c:	206c656e 	.word	0x206c656e
   16710:	6e616843 	.word	0x6e616843
   16714:	764f6567 	.word	0x764f6567
   16718:	3a207265 	.word	0x3a207265
   1671c:	00000020 	.word	0x00000020
   16720:	202d2037 	.word	0x202d2037
   16724:	206e6143 	.word	0x206e6143
   16728:	72727543 	.word	0x72727543
   1672c:	20746e65 	.word	0x20746e65
   16730:	736e6553 	.word	0x736e6553
   16734:	3a20726f 	.word	0x3a20726f
   16738:	00000020 	.word	0x00000020
   1673c:	4d454c20 	.word	0x4d454c20
   16740:	42414320 	.word	0x42414320
   16744:	20303033 	.word	0x20303033
   16748:	3035202f 	.word	0x3035202f
   1674c:	65732030 	.word	0x65732030
   16750:	73656972 	.word	0x73656972
   16754:	00000020 	.word	0x00000020
   16758:	4d454c20 	.word	0x4d454c20
   1675c:	42414320 	.word	0x42414320
   16760:	20303035 	.word	0x20303035
   16764:	63657053 	.word	0x63657053
   16768:	206c6169 	.word	0x206c6169
   1676c:	00000000 	.word	0x00000000
   16770:	61734920 	.word	0x61734920
   16774:	6c616353 	.word	0x6c616353
   16778:	56492065 	.word	0x56492065
   1677c:	202d2054 	.word	0x202d2054
   16780:	00002053 	.word	0x00002053
   16784:	63695620 	.word	0x63695620
   16788:	6e6f7274 	.word	0x6e6f7274
   1678c:	6e794c20 	.word	0x6e794c20
   16790:	45562078 	.word	0x45562078
   16794:	4e41432e 	.word	0x4e41432e
   16798:	75685320 	.word	0x75685320
   1679c:	0000746e 	.word	0x0000746e
   167a0:	74746142 	.word	0x74746142
   167a4:	20797265 	.word	0x20797265
   167a8:	74746553 	.word	0x74746553
   167ac:	73676e69 	.word	0x73676e69
   167b0:	6e654d20 	.word	0x6e654d20
   167b4:	00000075 	.word	0x00000075
   167b8:	202d2072 	.word	0x202d2072
   167bc:	65736552 	.word	0x65736552
   167c0:	48412074 	.word	0x48412074
   167c4:	756f6320 	.word	0x756f6320
   167c8:	7265746e 	.word	0x7265746e
   167cc:	00000000 	.word	0x00000000
   167d0:	202d2066 	.word	0x202d2066
   167d4:	65736552 	.word	0x65736552
   167d8:	6f742074 	.word	0x6f742074
   167dc:	646f4320 	.word	0x646f4320
   167e0:	53206465 	.word	0x53206465
   167e4:	69747465 	.word	0x69747465
   167e8:	0073676e 	.word	0x0073676e
   167ec:	202d2031 	.word	0x202d2031
   167f0:	6c6c6543 	.word	0x6c6c6543
   167f4:	65764f20 	.word	0x65764f20
   167f8:	6f562072 	.word	0x6f562072
   167fc:	6761746c 	.word	0x6761746c
   16800:	65532065 	.word	0x65532065
   16804:	696f7074 	.word	0x696f7074
   16808:	3a20746e 	.word	0x3a20746e
   1680c:	00000020 	.word	0x00000020
   16810:	202d2032 	.word	0x202d2032
   16814:	6c6c6543 	.word	0x6c6c6543
   16818:	646e5520 	.word	0x646e5520
   1681c:	56207265 	.word	0x56207265
   16820:	61746c6f 	.word	0x61746c6f
   16824:	53206567 	.word	0x53206567
   16828:	6f707465 	.word	0x6f707465
   1682c:	20746e69 	.word	0x20746e69
   16830:	0000203a 	.word	0x0000203a
   16834:	202d2033 	.word	0x202d2033
   16838:	7265764f 	.word	0x7265764f
   1683c:	6d655420 	.word	0x6d655420
   16840:	61726570 	.word	0x61726570
   16844:	65727574 	.word	0x65727574
   16848:	74655320 	.word	0x74655320
   1684c:	6e696f70 	.word	0x6e696f70
   16850:	203a2074 	.word	0x203a2074
   16854:	00000000 	.word	0x00000000
   16858:	202d2034 	.word	0x202d2034
   1685c:	65646e55 	.word	0x65646e55
   16860:	65542072 	.word	0x65542072
   16864:	7265706d 	.word	0x7265706d
   16868:	72757461 	.word	0x72757461
   1686c:	65532065 	.word	0x65532065
   16870:	696f7074 	.word	0x696f7074
   16874:	3a20746e 	.word	0x3a20746e
   16878:	00000020 	.word	0x00000020
   1687c:	202d2035 	.word	0x202d2035
   16880:	6c6c6543 	.word	0x6c6c6543
   16884:	6c614220 	.word	0x6c614220
   16888:	65636e61 	.word	0x65636e61
   1688c:	6c6f5620 	.word	0x6c6f5620
   16890:	65676174 	.word	0x65676174
   16894:	74655320 	.word	0x74655320
   16898:	6e696f70 	.word	0x6e696f70
   1689c:	203a2074 	.word	0x203a2074
   168a0:	00000000 	.word	0x00000000
   168a4:	202d2036 	.word	0x202d2036
   168a8:	616c6142 	.word	0x616c6142
   168ac:	2065636e 	.word	0x2065636e
   168b0:	746c6f56 	.word	0x746c6f56
   168b4:	20656761 	.word	0x20656761
   168b8:	74737948 	.word	0x74737948
   168bc:	69737265 	.word	0x69737265
   168c0:	203a2073 	.word	0x203a2073
   168c4:	00000000 	.word	0x00000000
   168c8:	202d2037 	.word	0x202d2037
   168cc:	42206841 	.word	0x42206841
   168d0:	65747461 	.word	0x65747461
   168d4:	43207972 	.word	0x43207972
   168d8:	63617061 	.word	0x63617061
   168dc:	20797469 	.word	0x20797469
   168e0:	0000203a 	.word	0x0000203a
   168e4:	00006841 	.word	0x00006841
   168e8:	202d2038 	.word	0x202d2038
   168ec:	6b636150 	.word	0x6b636150
   168f0:	78614d20 	.word	0x78614d20
   168f4:	73694420 	.word	0x73694420
   168f8:	72616863 	.word	0x72616863
   168fc:	3a206567 	.word	0x3a206567
   16900:	00000020 	.word	0x00000020
   16904:	202d2039 	.word	0x202d2039
   16908:	6c6c6543 	.word	0x6c6c6543
   1690c:	73694420 	.word	0x73694420
   16910:	72616863 	.word	0x72616863
   16914:	56206567 	.word	0x56206567
   16918:	61746c6f 	.word	0x61746c6f
   1691c:	4c206567 	.word	0x4c206567
   16920:	74696d69 	.word	0x74696d69
   16924:	74655320 	.word	0x74655320
   16928:	6e696f70 	.word	0x6e696f70
   1692c:	203a2074 	.word	0x203a2074
   16930:	00000000 	.word	0x00000000
   16934:	202d2030 	.word	0x202d2030
   16938:	76616c53 	.word	0x76616c53
   1693c:	74732065 	.word	0x74732065
   16940:	676e6972 	.word	0x676e6972
   16944:	6e692073 	.word	0x6e692073
   16948:	72617020 	.word	0x72617020
   1694c:	656c6c61 	.word	0x656c6c61
   16950:	203a206c 	.word	0x203a206c
   16954:	00000000 	.word	0x00000000
   16958:	202d2061 	.word	0x202d2061
   1695c:	6c6c6543 	.word	0x6c6c6543
   16960:	6e692073 	.word	0x6e692073
   16964:	72655320 	.word	0x72655320
   16968:	20736569 	.word	0x20736569
   1696c:	20726570 	.word	0x20726570
   16970:	69727453 	.word	0x69727453
   16974:	3a20676e 	.word	0x3a20676e
   16978:	00000020 	.word	0x00000020
   1697c:	202d2062 	.word	0x202d2062
   16980:	70746573 	.word	0x70746573
   16984:	746e696f 	.word	0x746e696f
   16988:	3a203120 	.word	0x3a203120
   1698c:	00000020 	.word	0x00000020
   16990:	202d2063 	.word	0x202d2063
   16994:	20434f53 	.word	0x20434f53
   16998:	70746573 	.word	0x70746573
   1699c:	746e696f 	.word	0x746e696f
   169a0:	3a203120 	.word	0x3a203120
   169a4:	00000020 	.word	0x00000020
   169a8:	00202520 	.word	0x00202520
   169ac:	202d2064 	.word	0x202d2064
   169b0:	70746573 	.word	0x70746573
   169b4:	746e696f 	.word	0x746e696f
   169b8:	3a203220 	.word	0x3a203220
   169bc:	00000020 	.word	0x00000020
   169c0:	202d2065 	.word	0x202d2065
   169c4:	20434f53 	.word	0x20434f53
   169c8:	70746573 	.word	0x70746573
   169cc:	746e696f 	.word	0x746e696f
   169d0:	3a203220 	.word	0x3a203220
   169d4:	00000020 	.word	0x00000020
   169d8:	202d2067 	.word	0x202d2067
   169dc:	726f7453 	.word	0x726f7453
   169e0:	20656761 	.word	0x20656761
   169e4:	70746553 	.word	0x70746553
   169e8:	746e696f 	.word	0x746e696f
   169ec:	00203a20 	.word	0x00203a20
   169f0:	202d2068 	.word	0x202d2068
   169f4:	63736944 	.word	0x63736944
   169f8:	67726168 	.word	0x67726168
   169fc:	75432065 	.word	0x75432065
   16a00:	6e657272 	.word	0x6e657272
   16a04:	61542074 	.word	0x61542074
   16a08:	20726570 	.word	0x20726570
   16a0c:	7366664f 	.word	0x7366664f
   16a10:	3a207465 	.word	0x3a207465
   16a14:	00000020 	.word	0x00000020
   16a18:	202d206a 	.word	0x202d206a
   16a1c:	63736944 	.word	0x63736944
   16a20:	67726168 	.word	0x67726168
   16a24:	75432065 	.word	0x75432065
   16a28:	6e657272 	.word	0x6e657272
   16a2c:	65542074 	.word	0x65542074
   16a30:	7265706d 	.word	0x7265706d
   16a34:	72757461 	.word	0x72757461
   16a38:	65442065 	.word	0x65442065
   16a3c:	65746172 	.word	0x65746172
   16a40:	00203a20 	.word	0x00203a20
   16a44:	202d206b 	.word	0x202d206b
   16a48:	6c6c6543 	.word	0x6c6c6543
   16a4c:	73694420 	.word	0x73694420
   16a50:	72616863 	.word	0x72616863
   16a54:	56206567 	.word	0x56206567
   16a58:	61746c6f 	.word	0x61746c6f
   16a5c:	48206567 	.word	0x48206567
   16a60:	65747379 	.word	0x65747379
   16a64:	69736572 	.word	0x69736572
   16a68:	203a2073 	.word	0x203a2073
   16a6c:	ffffff00 	.word	0xffffff00
   16a70:	0020416d 	.word	0x0020416d
   16a74:	65747845 	.word	0x65747845
   16a78:	6465646e 	.word	0x6465646e
   16a7c:	20444920 	.word	0x20444920
   16a80:	7830203a 	.word	0x7830203a
   16a84:	2e202520 	.word	0x2e202520
   16a88:	20586c38 	.word	0x20586c38
   16a8c:	434c4420 	.word	0x434c4420
   16a90:	25203a20 	.word	0x25203a20
   16a94:	20643120 	.word	0x20643120
   16a98:	74614420 	.word	0x74614420
   16a9c:	203a2061 	.word	0x203a2061
   16aa0:	00000000 	.word	0x00000000
   16aa4:	7830202c 	.word	0x7830202c
   16aa8:	2e202520 	.word	0x2e202520
   16aac:	2c586c33 	.word	0x2c586c33
   16ab0:	6c616620 	.word	0x6c616620
   16ab4:	202c6573 	.word	0x202c6573
   16ab8:	64312025 	.word	0x64312025
   16abc:	00000000 	.word	0x00000000
   16ac0:	4d455220 	.word	0x4d455220
   16ac4:	2045544f 	.word	0x2045544f
   16ac8:	55514552 	.word	0x55514552
   16acc:	20545345 	.word	0x20545345
   16ad0:	4d415246 	.word	0x4d415246
   16ad4:	00000045 	.word	0x00000045
   16ad8:	7830202c 	.word	0x7830202c
   16adc:	2e202520 	.word	0x2e202520
   16ae0:	ff005832 	.word	0xff005832
   16ae4:	75706e49 	.word	0x75706e49
   16ae8:	203a2074 	.word	0x203a2074
   16aec:	00000000 	.word	0x00000000
   16af0:	4e4f2031 	.word	0x4e4f2031
   16af4:	00002020 	.word	0x00002020
   16af8:	464f2031 	.word	0x464f2031
   16afc:	00002046 	.word	0x00002046
   16b00:	4e4f2032 	.word	0x4e4f2032
   16b04:	00002020 	.word	0x00002020
   16b08:	464f2032 	.word	0x464f2032
   16b0c:	00002046 	.word	0x00002046
   16b10:	4e4f2033 	.word	0x4e4f2033
   16b14:	00002020 	.word	0x00002020
   16b18:	464f2033 	.word	0x464f2033
   16b1c:	00002046 	.word	0x00002046
   16b20:	4e4f2034 	.word	0x4e4f2034
   16b24:	00002020 	.word	0x00002020
   16b28:	464f2034 	.word	0x464f2034
   16b2c:	ff002046 	.word	0xff002046
   16b30:	74617473 	.word	0x74617473
   16b34:	7478742e 	.word	0x7478742e
   16b38:	0000003d 	.word	0x0000003d
   16b3c:	74634120 	.word	0x74634120
   16b40:	20657669 	.word	0x20657669
   16b44:	00000000 	.word	0x00000000
   16b48:	2e636f73 	.word	0x2e636f73
   16b4c:	3d6c6176 	.word	0x3d6c6176
   16b50:	00000000 	.word	0x00000000
   16b54:	31636f73 	.word	0x31636f73
   16b58:	6c61762e 	.word	0x6c61762e
   16b5c:	0000003d 	.word	0x0000003d
   16b60:	72727563 	.word	0x72727563
   16b64:	2e746e65 	.word	0x2e746e65
   16b68:	3d6c6176 	.word	0x3d6c6176
   16b6c:	00000000 	.word	0x00000000
   16b70:	706d6574 	.word	0x706d6574
   16b74:	6c61762e 	.word	0x6c61762e
   16b78:	0000003d 	.word	0x0000003d
   16b7c:	706d6574 	.word	0x706d6574
   16b80:	2e776f6c 	.word	0x2e776f6c
   16b84:	3d6c6176 	.word	0x3d6c6176
   16b88:	00000000 	.word	0x00000000
   16b8c:	706d6574 	.word	0x706d6574
   16b90:	68676968 	.word	0x68676968
   16b94:	6c61762e 	.word	0x6c61762e
   16b98:	0000003d 	.word	0x0000003d
   16b9c:	746c6f76 	.word	0x746c6f76
   16ba0:	6c61762e 	.word	0x6c61762e
   16ba4:	0000003d 	.word	0x0000003d
   16ba8:	63776f6c 	.word	0x63776f6c
   16bac:	2e6c6c65 	.word	0x2e6c6c65
   16bb0:	3d6c6176 	.word	0x3d6c6176
   16bb4:	00000000 	.word	0x00000000
   16bb8:	68676968 	.word	0x68676968
   16bbc:	6c6c6563 	.word	0x6c6c6563
   16bc0:	6c61762e 	.word	0x6c61762e
   16bc4:	0000003d 	.word	0x0000003d
   16bc8:	6d726966 	.word	0x6d726966
   16bcc:	6c61762e 	.word	0x6c61762e
   16bd0:	0000003d 	.word	0x0000003d
   16bd4:	6c6c6563 	.word	0x6c6c6563
   16bd8:	746c6564 	.word	0x746c6564
   16bdc:	61762e61 	.word	0x61762e61
   16be0:	00003d6c 	.word	0x00003d6c
   16be4:	6c6c6563 	.word	0x6c6c6563
   16be8:	2e6c6162 	.word	0x2e6c6162
   16bec:	3d6c6176 	.word	0x3d6c6176
   16bf0:	ffffff00 	.word	0xffffff00
   16bf4:	63657250 	.word	0x63657250
   16bf8:	67726168 	.word	0x67726168
   16bfc:	21212165 	.word	0x21212165
   16c00:	00000000 	.word	0x00000000
   16c04:	6e69614d 	.word	0x6e69614d
   16c08:	216e4f20 	.word	0x216e4f20
   16c0c:	00002121 	.word	0x00002121
   16c10:	7265764f 	.word	0x7265764f
   16c14:	6c6f5620 	.word	0x6c6f5620
   16c18:	65676174 	.word	0x65676174
   16c1c:	69725420 	.word	0x69725420
   16c20:	00000070 	.word	0x00000070
   16c24:	65736552 	.word	0x65736552
   16c28:	764f2074 	.word	0x764f2074
   16c2c:	56207265 	.word	0x56207265
   16c30:	61746c6f 	.word	0x61746c6f
   16c34:	54206567 	.word	0x54206567
   16c38:	20706972 	.word	0x20706972
   16c3c:	20746f4e 	.word	0x20746f4e
   16c40:	72616843 	.word	0x72616843
   16c44:	00646567 	.word	0x00646567
   16c48:	65646e55 	.word	0x65646e55
   16c4c:	6f562072 	.word	0x6f562072
   16c50:	6761746c 	.word	0x6761746c
   16c54:	72542065 	.word	0x72542065
   16c58:	00007069 	.word	0x00007069
   16c5c:	65736552 	.word	0x65736552
   16c60:	6e552074 	.word	0x6e552074
   16c64:	20726564 	.word	0x20726564
   16c68:	746c6f56 	.word	0x746c6f56
   16c6c:	20656761 	.word	0x20656761
   16c70:	70697254 	.word	0x70697254
   16c74:	00000000 	.word	0x00000000
   16c78:	30337830 	.word	0x30337830
   16c7c:	61432039 	.word	0x61432039
   16c80:	6e4f206e 	.word	0x6e4f206e
   16c84:	71655220 	.word	0x71655220
   16c88:	74736575 	.word	0x74736575
   16c8c:	73694d20 	.word	0x73694d20
   16c90:	676e6973 	.word	0x676e6973
   16c94:	00000000 	.word	0x00000000
   16c98:	21202020 	.word	0x21202020
   16c9c:	53202121 	.word	0x53202121
   16ca0:	65697265 	.word	0x65697265
   16ca4:	65432073 	.word	0x65432073
   16ca8:	20736c6c 	.word	0x20736c6c
   16cac:	6c756146 	.word	0x6c756146
   16cb0:	21212074 	.word	0x21212074
   16cb4:	ffff0021 	.word	0xffff0021
   16cb8:	72617453 	.word	0x72617453
   16cbc:	676e6974 	.word	0x676e6974
   16cc0:	21707520 	.word	0x21707520
   16cc4:	00000000 	.word	0x00000000
   16cc8:	706d6953 	.word	0x706d6953
   16ccc:	20534d42 	.word	0x20534d42
   16cd0:	54203256 	.word	0x54203256
   16cd4:	616c7365 	.word	0x616c7365
   16cd8:	00000000 	.word	0x00000000
   16cdc:	73616552 	.word	0x73616552
   16ce0:	66206e6f 	.word	0x66206e6f
   16ce4:	6c20726f 	.word	0x6c20726f
   16ce8:	20747361 	.word	0x20747361
   16cec:	65736552 	.word	0x65736552
   16cf0:	00203a74 	.word	0x00203a74
   16cf4:	706f7453 	.word	0x706f7453
   16cf8:	646f4d20 	.word	0x646f4d20
   16cfc:	63412065 	.word	0x63412065
   16d00:	776f6e6b 	.word	0x776f6e6b
   16d04:	6764656c 	.word	0x6764656c
   16d08:	72452065 	.word	0x72452065
   16d0c:	20726f72 	.word	0x20726f72
   16d10:	65736552 	.word	0x65736552
   16d14:	00000074 	.word	0x00000074
   16d18:	2d4d444d 	.word	0x2d4d444d
   16d1c:	52205041 	.word	0x52205041
   16d20:	74657365 	.word	0x74657365
   16d24:	00000000 	.word	0x00000000
   16d28:	74666f53 	.word	0x74666f53
   16d2c:	65726177 	.word	0x65726177
   16d30:	73655220 	.word	0x73655220
   16d34:	00007465 	.word	0x00007465
   16d38:	65726f43 	.word	0x65726f43
   16d3c:	636f4c20 	.word	0x636f4c20
   16d40:	2070756b 	.word	0x2070756b
   16d44:	6e657645 	.word	0x6e657645
   16d48:	65522074 	.word	0x65522074
   16d4c:	00746573 	.word	0x00746573
   16d50:	65776f50 	.word	0x65776f50
   16d54:	6e6f2d72 	.word	0x6e6f2d72
   16d58:	73655220 	.word	0x73655220
   16d5c:	00007465 	.word	0x00007465
   16d60:	65747845 	.word	0x65747845
   16d64:	6c616e72 	.word	0x6c616e72
   16d68:	6e695020 	.word	0x6e695020
   16d6c:	73655220 	.word	0x73655220
   16d70:	00007465 	.word	0x00007465
   16d74:	63746157 	.word	0x63746157
   16d78:	676f6468 	.word	0x676f6468
   16d7c:	504f4328 	.word	0x504f4328
   16d80:	65522029 	.word	0x65522029
   16d84:	00746573 	.word	0x00746573
   16d88:	73736f4c 	.word	0x73736f4c
   16d8c:	20666f20 	.word	0x20666f20
   16d90:	65747845 	.word	0x65747845
   16d94:	6c616e72 	.word	0x6c616e72
   16d98:	6f6c4320 	.word	0x6f6c4320
   16d9c:	52206b63 	.word	0x52206b63
   16da0:	74657365 	.word	0x74657365
   16da4:	00000000 	.word	0x00000000
   16da8:	73736f4c 	.word	0x73736f4c
   16dac:	20666f20 	.word	0x20666f20
   16db0:	6b636f4c 	.word	0x6b636f4c
   16db4:	206e6920 	.word	0x206e6920
   16db8:	204c4c50 	.word	0x204c4c50
   16dbc:	65736552 	.word	0x65736552
   16dc0:	00000074 	.word	0x00000074
   16dc4:	2d776f4c 	.word	0x2d776f4c
   16dc8:	746c6f76 	.word	0x746c6f76
   16dcc:	20656761 	.word	0x20656761
   16dd0:	65746544 	.word	0x65746544
   16dd4:	52207463 	.word	0x52207463
   16dd8:	74657365 	.word	0x74657365
   16ddc:	00000000 	.word	0x00000000
   16de0:	72617453 	.word	0x72617453
   16de4:	20646574 	.word	0x20646574
   16de8:	69726573 	.word	0x69726573
   16dec:	69206c61 	.word	0x69206c61
   16df0:	7265746e 	.word	0x7265746e
   16df4:	65636166 	.word	0x65636166
   16df8:	206f7420 	.word	0x206f7420
   16dfc:	2e534d42 	.word	0x2e534d42
   16e00:	ffffff00 	.word	0xffffff00

00016e04 <ADC::diff_table_ADC0>:
   16e04:	03248022                                ".$.

00016e08 <ADC::diff_table_ADC1>:
   16e08:	80240322                                ".$.

00016e0c <ADC::channel2sc1aADC0>:
   16e0c:	09080e05 07060c0d 1300040f 0e051f03     ................
   16e1c:	0c0d0908 040f0706 1f1f1f1f 1f1f1f1f     ................
   16e2c:	53401f1f 161a5f43 1e1d1b17              ..@SC_......

00016e38 <ADC::channel2sc1aADC1>:
   16e38:	09081f1f 1f1f1f1f 1f031f1f 1f1f1300     ................
   16e48:	1f1f0908 1f1f1f1f 05851f1f 84070604     ................
   16e58:	5f431f1f 121a5340 1e1d1b1f 726f6241     ..C_@S......Abor
   16e68:	6e692074 4e414320 67656220 202e6e69     t in CAN begin. 
   16e78:	6c756f43 74276e64 6e696620 20612064     Couldn't find a 
   16e88:	74697573 656c6261 75616220 6f632064     suitable baud co
   16e98:	6769666e ffff0021                       nfig!...

00016ea0 <SPIClass::spi0_hardware>:
   16ea0:	4004803c 00001000 00001a04 00007fff     <..@............
   16eb0:	00001011 00009f65 0000080c 00000200     ....e...........
   16ec0:	00000200 0000070b 00000240 00000200     ........@.......
   16ed0:	00000e0d 00000240 00000200 0609020a     ....@...........
   16ee0:	16151714 0000000f 00000200 00000200     ................
   16ef0:	00000200 00000200 00000200 00000200     ................
   16f00:	00000200 00000200 00000200 02020101     ................
   16f10:	08080404 00000010                       ........

00016f18 <_serialEvent_default>:
   16f18:	ffffff00                                ....

00016f1c <vtable for HardwareSerial2>:
	...
   16f24:	0000a1bd 0000a1e1 0000a271 0000a26d     ........q...m...
   16f34:	0000a269 0000a265 0000a261 0000a185     i...e...a.......
   16f44:	0000a241 0000a23d 0000a235 0000a22d     A...=...5...-...
   16f54:	0000a225 0000a215 0000a205 0000a201     %...............
   16f64:	0000a1f9 0000a1f1 0000a295 0000a2b5     ................
   16f74:	0000a2d5 0000a275 0000a1c9 0000a1b1     ....u...........

00016f84 <vtable for HardwareSerial3>:
	...
   16f8c:	0000a32d 0000a351 0000a3e1 0000a3dd     -...Q...........
   16f9c:	0000a3d9 0000a3d5 0000a3d1 0000a2f5     ................
   16fac:	0000a3b1 0000a3ad 0000a3a5 0000a39d     ................
   16fbc:	0000a395 0000a385 0000a375 0000a371     ........u...q...
   16fcc:	0000a369 0000a361 0000a405 0000a425     i...a.......%...
   16fdc:	0000a445 0000a3e5 0000a339 0000a321     E.......9...!...
   16fec:	006e616e 00666e69 0066766f 037ff06f     nan.inf.ovf.o...
   16ffc:	78037003 0f80f013 4770d0fb              .p.x......pG

00017008 <CSWTCH.39>:
   17008:	00000008 0000000c 0000000a 00000009     ................
   17018:	0000000b                                ....

0001701c <digital_pin_to_info_PGM>:
   1701c:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
   1702c:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
   1703c:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
   1704c:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
   1705c:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
   1706c:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
   1707c:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
   1708c:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
   1709c:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
   170ac:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
   170bc:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
   170cc:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
   170dc:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
   170ec:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
   170fc:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
   1710c:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
   1711c:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@

0001712c <vtable for usb_serial_class>:
	...
   17134:	0000ce11 0000ce09 0000ce05 0000ce01     ................
   17144:	0000cdfd 0000cdf9 0000cdf5 0000cdf1     ................

00017154 <usb_descriptor_list>:
   17154:	00000100 1fff8a54 00000012 00000200     ....T...........
   17164:	1fff8a10 00000043 00000300 1fff8a68     ....C.......h...
   17174:	00000000 04090301 1fff8a6c 00000000     ........l.......
   17184:	04090302 1fff8a84 00000000 04090303     ................
   17194:	1fff8a9c 00000000 00000000 00000000     ................
   171a4:	00000000                                ....

000171a8 <usb_endpoint_config_table>:
   171a8:	15191500 3f000000 bf000000 3f317180     .......?.....q1?
   171b8:	bf317180 3717f7d1 b717f7d1              .q1....7....

000171c4 <_ctype_>:
   171c4:	20202000 20202020 28282020 20282828     .         ((((( 
   171d4:	20202020 20202020 20202020 20202020                     
   171e4:	10108820 10101010 10101010 10101010      ...............
   171f4:	04040410 04040404 10040404 10101010     ................
   17204:	41411010 41414141 01010101 01010101     ..AAAAAA........
   17214:	01010101 01010101 01010101 10101010     ................
   17224:	42421010 42424242 02020202 02020202     ..BBBBBB........
   17234:	02020202 02020202 02020202 10101010     ................
   17244:	00000020 00000000 00000000 00000000      ...............
	...
   172c4:	ffffff00 435f434c 414c4c4f 00004554     ....LC_COLLATE..
   172d4:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
   172e4:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
   172f4:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
   17304:	41535345 00534547 6c6c6142 7320636f     ESSAGES.Balloc s
   17314:	65636375 64656465 00000000 7461642f     ucceeded..../dat
   17324:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   17334:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   17344:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   17354:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   17364:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
   17374:	2e636572 ffff0063 ffffffff              rec.c.......

00017380 <__mprec_bigtens>:
   17380:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   17390:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   173a0:	7f73bf3c 75154fdd                       <.s..O.u

000173a8 <__mprec_tens>:
   173a8:	00000000 3ff00000 00000000 40240000     .......?......$@
   173b8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   173c8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   173d8:	00000000 412e8480 00000000 416312d0     .......A......cA
   173e8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   173f8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   17408:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   17418:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   17428:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   17438:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   17448:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   17458:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   17468:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
   17478:	0000007d 00464e49 004e414e 33323130     }...INF.NAN.0123
   17488:	37363534 62613938 66656463 00000000     456789abcdef....
   17498:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   174a8:	00000000 6c756e28 ff00296c 20202020     ....(null)..    
   174b8:	20202020 20202020 20202020 30303030                 0000
   174c8:	30303030 30303030 30303030 7566202c     000000000000, fu
   174d8:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   174e8:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   174f8:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   17508:	2520656e 25732564 ff000a73 69666e49     ne %d%s%s...Infi
   17518:	7974696e 00000000 004e614e 7461642f     nity....NaN./dat
   17528:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   17538:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   17548:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   17558:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   17568:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
   17578:	632e616f ffffff00 20202020 20202020     oa.c....        
   17588:	20202020 20202020 30303030 30303030             00000000
   17598:	30303030 30303030                       00000000

000175a0 <_init>:
   175a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175a2:	bf00      	nop
   175a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   175a6:	bc08      	pop	{r3}
   175a8:	469e      	mov	lr, r3
   175aa:	4770      	bx	lr

000175ac <__init_array_start>:
   175ac:	0000fe5d 	.word	0x0000fe5d

000175b0 <__frame_dummy_init_array_entry>:
   175b0:	00000435 000087fd 00009e05 00009f75     5...........u...

Disassembly of section .fini:

000175c0 <_fini>:
   175c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175c2:	bf00      	nop

Disassembly of section .data:

1fff8720 <port_E_isr>:
PORT_ISR_FUNCTION_CLZ(E)
1fff8720:	b538      	push	{r3, r4, r5, lr}
1fff8722:	4b0a      	ldr	r3, [pc, #40]	; (1fff874c <port_E_isr+0x2c>)
1fff8724:	4d0a      	ldr	r5, [pc, #40]	; (1fff8750 <port_E_isr+0x30>)
1fff8726:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff872a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff872e:	e005      	b.n	1fff873c <port_E_isr+0x1c>
1fff8730:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8734:	4798      	blx	r3
1fff8736:	1e63      	subs	r3, r4, #1
1fff8738:	401c      	ands	r4, r3
1fff873a:	d005      	beq.n	1fff8748 <port_E_isr+0x28>
1fff873c:	fa94 f3a4 	rbit	r3, r4
1fff8740:	fab3 f383 	clz	r3, r3
1fff8744:	2c00      	cmp	r4, #0
1fff8746:	d1f3      	bne.n	1fff8730 <port_E_isr+0x10>
1fff8748:	bd38      	pop	{r3, r4, r5, pc}
1fff874a:	bf00      	nop
1fff874c:	4004d000 	.word	0x4004d000
1fff8750:	1fff89c4 	.word	0x1fff89c4

1fff8754 <port_D_isr>:
PORT_ISR_FUNCTION_CLZ(D)
1fff8754:	b538      	push	{r3, r4, r5, lr}
1fff8756:	4b0a      	ldr	r3, [pc, #40]	; (1fff8780 <port_D_isr+0x2c>)
1fff8758:	4d0a      	ldr	r5, [pc, #40]	; (1fff8784 <port_D_isr+0x30>)
1fff875a:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff875e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8762:	e005      	b.n	1fff8770 <port_D_isr+0x1c>
1fff8764:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8768:	4798      	blx	r3
1fff876a:	1e63      	subs	r3, r4, #1
1fff876c:	401c      	ands	r4, r3
1fff876e:	d005      	beq.n	1fff877c <port_D_isr+0x28>
1fff8770:	fa94 f3a4 	rbit	r3, r4
1fff8774:	fab3 f383 	clz	r3, r3
1fff8778:	2c00      	cmp	r4, #0
1fff877a:	d1f3      	bne.n	1fff8764 <port_D_isr+0x10>
1fff877c:	bd38      	pop	{r3, r4, r5, pc}
1fff877e:	bf00      	nop
1fff8780:	4004c000 	.word	0x4004c000
1fff8784:	1fff89a4 	.word	0x1fff89a4

1fff8788 <port_C_isr>:
PORT_ISR_FUNCTION_CLZ(C)
1fff8788:	b538      	push	{r3, r4, r5, lr}
1fff878a:	4b0a      	ldr	r3, [pc, #40]	; (1fff87b4 <port_C_isr+0x2c>)
1fff878c:	4d0a      	ldr	r5, [pc, #40]	; (1fff87b8 <port_C_isr+0x30>)
1fff878e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff8792:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8796:	e005      	b.n	1fff87a4 <port_C_isr+0x1c>
1fff8798:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff879c:	4798      	blx	r3
1fff879e:	1e63      	subs	r3, r4, #1
1fff87a0:	401c      	ands	r4, r3
1fff87a2:	d005      	beq.n	1fff87b0 <port_C_isr+0x28>
1fff87a4:	fa94 f3a4 	rbit	r3, r4
1fff87a8:	fab3 f383 	clz	r3, r3
1fff87ac:	2c00      	cmp	r4, #0
1fff87ae:	d1f3      	bne.n	1fff8798 <port_C_isr+0x10>
1fff87b0:	bd38      	pop	{r3, r4, r5, pc}
1fff87b2:	bf00      	nop
1fff87b4:	4004b000 	.word	0x4004b000
1fff87b8:	1fff8974 	.word	0x1fff8974

1fff87bc <port_B_isr>:
PORT_ISR_FUNCTION_CLZ(B)
1fff87bc:	b538      	push	{r3, r4, r5, lr}
1fff87be:	4b0a      	ldr	r3, [pc, #40]	; (1fff87e8 <port_B_isr+0x2c>)
1fff87c0:	4d0a      	ldr	r5, [pc, #40]	; (1fff87ec <port_B_isr+0x30>)
1fff87c2:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff87c6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff87ca:	e005      	b.n	1fff87d8 <port_B_isr+0x1c>
1fff87cc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff87d0:	4798      	blx	r3
1fff87d2:	1e63      	subs	r3, r4, #1
1fff87d4:	401c      	ands	r4, r3
1fff87d6:	d005      	beq.n	1fff87e4 <port_B_isr+0x28>
1fff87d8:	fa94 f3a4 	rbit	r3, r4
1fff87dc:	fab3 f383 	clz	r3, r3
1fff87e0:	2c00      	cmp	r4, #0
1fff87e2:	d1f3      	bne.n	1fff87cc <port_B_isr+0x10>
1fff87e4:	bd38      	pop	{r3, r4, r5, pc}
1fff87e6:	bf00      	nop
1fff87e8:	4004a000 	.word	0x4004a000
1fff87ec:	1fff8924 	.word	0x1fff8924

1fff87f0 <port_A_isr>:
PORT_ISR_FUNCTION_CLZ(A)
1fff87f0:	b538      	push	{r3, r4, r5, lr}
1fff87f2:	4b0a      	ldr	r3, [pc, #40]	; (1fff881c <port_A_isr+0x2c>)
1fff87f4:	4d0a      	ldr	r5, [pc, #40]	; (1fff8820 <port_A_isr+0x30>)
1fff87f6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff87fa:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff87fe:	e005      	b.n	1fff880c <port_A_isr+0x1c>
1fff8800:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8804:	4798      	blx	r3
1fff8806:	1e63      	subs	r3, r4, #1
1fff8808:	401c      	ands	r4, r3
1fff880a:	d005      	beq.n	1fff8818 <port_A_isr+0x28>
1fff880c:	fa94 f3a4 	rbit	r3, r4
1fff8810:	fab3 f383 	clz	r3, r3
1fff8814:	2c00      	cmp	r4, #0
1fff8816:	d1f3      	bne.n	1fff8800 <port_A_isr+0x10>
1fff8818:	bd38      	pop	{r3, r4, r5, pc}
1fff881a:	bf00      	nop
1fff881c:	40049000 	.word	0x40049000
1fff8820:	1fff88ec 	.word	0x1fff88ec

1fff8824 <Logger::logLevel>:
1fff8824:	00000001                                ....

1fff8828 <SOC>:
1fff8828:	00000064                                d...

1fff882c <SOH>:
1fff882c:	00000064                                d...

1fff8830 <bmsmanu>:
1fff8830:	504d4953 4f434520                       SIMP ECO

1fff8838 <bmsname>:
1fff8838:	504d4953 534d4220                       SIMP BMS

1fff8840 <chargerid1>:
1fff8840:	00000618                                ....

1fff8844 <chargerid2>:
1fff8844:	00000638                                8...

1fff8848 <debug>:
1fff8848:	00000001                                ....

1fff884c <debugdigits>:
1fff884c:	00000002                                ....

1fff8850 <filterFrequency>:
1fff8850:	40a00000                                ...@

1fff8854 <firmver>:
1fff8854:	0003846c                                l...

1fff8858 <maxac1>:
1fff8858:	00000010                                ....

1fff885c <maxac2>:
1fff885c:	0000000a                                ....

1fff8860 <ncharger>:
1fff8860:	00000001                                ....

1fff8864 <pulltime>:
1fff8864:	00000064                                d...

1fff8868 <pwmcurmax>:
1fff8868:	00000032                                2...

1fff886c <pwmcurmid>:
1fff886c:	00000032                                2...

1fff8870 <pwmfreq>:
1fff8870:	00004650                                PF..

1fff8874 <sensor>:
1fff8874:	00000001                                ....

1fff8878 <bitTimingTable>:
1fff8878:	01010000 01010100 01010201 02010202     ................
1fff8888:	03020103 02040202 02020502 06020305     ................
1fff8898:	03070203 03040702 07030407 05070405     ................
1fff88a8:	05060704 07060607 07070606 00070707     ................

1fff88b8 <Serial2>:
1fff88b8:	00016f24 00000000 000003e8 00000000     $o..............
1fff88c8:	0000c475                                u...

1fff88cc <Serial3>:
1fff88cc:	00016f8c 00000000 000003e8 00000000     .o..............
1fff88dc:	0000c479                                y...

1fff88e0 <analog_config_bits>:
1fff88e0:	                                         .

1fff88e1 <analog_num_average>:
1fff88e1:	                                         ...

1fff88e4 <__brkval>:
1fff88e4:	1fffbf84                                ....

1fff88e8 <analog_write_res>:
1fff88e8:	00000008                                ....

1fff88ec <isr_table_portA>:
1fff88ec:	0000adbd 0000adbd 0000adbd 0000adbd     ................
1fff88fc:	0000adbd 0000adbd 0000adbd 0000adbd     ................
1fff890c:	0000adbd 0000adbd 0000adbd 0000adbd     ................
1fff891c:	0000adbd 0000adbd                       ........

1fff8924 <isr_table_portB>:
1fff8924:	0000adbd 0000adbd 0000adbd 0000adbd     ................
1fff8934:	0000adbd 0000adbd 0000adbd 0000adbd     ................
1fff8944:	0000adbd 0000adbd 0000adbd 0000adbd     ................
1fff8954:	0000adbd 0000adbd 0000adbd 0000adbd     ................
1fff8964:	0000adbd 0000adbd 0000adbd 0000adbd     ................

1fff8974 <isr_table_portC>:
1fff8974:	0000adbd 0000adbd 0000adbd 0000adbd     ................
1fff8984:	0000adbd 0000adbd 0000adbd 0000adbd     ................
1fff8994:	0000adbd 0000adbd 0000adbd 0000adbd     ................

1fff89a4 <isr_table_portD>:
1fff89a4:	0000adbd 0000adbd 0000adbd 0000adbd     ................
1fff89b4:	0000adbd 0000adbd 0000adbd 0000adbd     ................

1fff89c4 <isr_table_portE>:
1fff89c4:	0000adbd 0000adbd                       ........

1fff89cc <rts_high_watermark_>:
1fff89cc:	00000028                                (...

1fff89d0 <rts_low_watermark_>:
1fff89d0:	0000001a                                ....

1fff89d4 <rx_buffer_total_size_>:
1fff89d4:	00000040                                @...

1fff89d8 <rx_pin_num>:
1fff89d8:	00000009                                ....

1fff89dc <tx_buffer_total_size_>:
1fff89dc:	00000028                                (...

1fff89e0 <tx_pin_num>:
1fff89e0:	0000000a                                ....

1fff89e4 <rts_high_watermark_>:
1fff89e4:	00000028                                (...

1fff89e8 <rts_low_watermark_>:
1fff89e8:	0000001a                                ....

1fff89ec <rx_buffer_total_size_>:
1fff89ec:	00000040                                @...

1fff89f0 <tx_buffer_total_size_>:
1fff89f0:	00000028                                (...

1fff89f4 <tx_pin_num>:
1fff89f4:	                                         .

1fff89f5 <_serialEvent2_default>:
1fff89f5:	                                         .

1fff89f6 <_serialEvent3_default>:
1fff89f6:	                                         ..

1fff89f8 <Serial>:
1fff89f8:	00017134 00000000 000003e8 00000000     4q..............

1fff8a08 <usb_buffer_available>:
1fff8a08:	ffffffff                                ....

1fff8a0c <yield_active_check_flags>:
1fff8a0c:	00000001                                ....

1fff8a10 <config_descriptor>:
1fff8a10:	00430209 c0000102 00040932 02020100     ..C.....2.......
1fff8a20:	24050001 05011000 01010124 06022404     ...$....$....$..
1fff8a30:	00062405 82050701 40001003 00010409     .$.........@....
1fff8a40:	00000a02 03050700 00004002 02840507     .........@......
1fff8a50:	00000040                                @...

1fff8a54 <device_descriptor>:
1fff8a54:	01100112 40000002 048316c0 02010275     .......@....u...
1fff8a64:	00000103                                ....

1fff8a68 <string0>:
1fff8a68:	04090304                                ....

1fff8a6c <usb_string_manufacturer_name_default>:
1fff8a6c:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
1fff8a7c:	00690075 006f006e                       u.i.n.o.

1fff8a84 <usb_string_product_name_default>:
1fff8a84:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
1fff8a94:	00610069 0000006c                       i.a.l...

1fff8a9c <usb_string_serial_number_default>:
1fff8a9c:	0000030c 00000000 00000000 00000000     ................
	...
1fff8ab4:	3f800000 0da24260                       ...?`B..

1fff8abc <__malloc_av_>:
	...
1fff8ac4:	1fff8abc 1fff8abc 1fff8ac4 1fff8ac4     ................
1fff8ad4:	1fff8acc 1fff8acc 1fff8ad4 1fff8ad4     ................
1fff8ae4:	1fff8adc 1fff8adc 1fff8ae4 1fff8ae4     ................
1fff8af4:	1fff8aec 1fff8aec 1fff8af4 1fff8af4     ................
1fff8b04:	1fff8afc 1fff8afc 1fff8b04 1fff8b04     ................
1fff8b14:	1fff8b0c 1fff8b0c 1fff8b14 1fff8b14     ................
1fff8b24:	1fff8b1c 1fff8b1c 1fff8b24 1fff8b24     ........$...$...
1fff8b34:	1fff8b2c 1fff8b2c 1fff8b34 1fff8b34     ,...,...4...4...
1fff8b44:	1fff8b3c 1fff8b3c 1fff8b44 1fff8b44     <...<...D...D...
1fff8b54:	1fff8b4c 1fff8b4c 1fff8b54 1fff8b54     L...L...T...T...
1fff8b64:	1fff8b5c 1fff8b5c 1fff8b64 1fff8b64     \...\...d...d...
1fff8b74:	1fff8b6c 1fff8b6c 1fff8b74 1fff8b74     l...l...t...t...
1fff8b84:	1fff8b7c 1fff8b7c 1fff8b84 1fff8b84     |...|...........
1fff8b94:	1fff8b8c 1fff8b8c 1fff8b94 1fff8b94     ................
1fff8ba4:	1fff8b9c 1fff8b9c 1fff8ba4 1fff8ba4     ................
1fff8bb4:	1fff8bac 1fff8bac 1fff8bb4 1fff8bb4     ................
1fff8bc4:	1fff8bbc 1fff8bbc 1fff8bc4 1fff8bc4     ................
1fff8bd4:	1fff8bcc 1fff8bcc 1fff8bd4 1fff8bd4     ................
1fff8be4:	1fff8bdc 1fff8bdc 1fff8be4 1fff8be4     ................
1fff8bf4:	1fff8bec 1fff8bec 1fff8bf4 1fff8bf4     ................
1fff8c04:	1fff8bfc 1fff8bfc 1fff8c04 1fff8c04     ................
1fff8c14:	1fff8c0c 1fff8c0c 1fff8c14 1fff8c14     ................
1fff8c24:	1fff8c1c 1fff8c1c 1fff8c24 1fff8c24     ........$...$...
1fff8c34:	1fff8c2c 1fff8c2c 1fff8c34 1fff8c34     ,...,...4...4...
1fff8c44:	1fff8c3c 1fff8c3c 1fff8c44 1fff8c44     <...<...D...D...
1fff8c54:	1fff8c4c 1fff8c4c 1fff8c54 1fff8c54     L...L...T...T...
1fff8c64:	1fff8c5c 1fff8c5c 1fff8c64 1fff8c64     \...\...d...d...
1fff8c74:	1fff8c6c 1fff8c6c 1fff8c74 1fff8c74     l...l...t...t...
1fff8c84:	1fff8c7c 1fff8c7c 1fff8c84 1fff8c84     |...|...........
1fff8c94:	1fff8c8c 1fff8c8c 1fff8c94 1fff8c94     ................
1fff8ca4:	1fff8c9c 1fff8c9c 1fff8ca4 1fff8ca4     ................
1fff8cb4:	1fff8cac 1fff8cac 1fff8cb4 1fff8cb4     ................
1fff8cc4:	1fff8cbc 1fff8cbc 1fff8cc4 1fff8cc4     ................
1fff8cd4:	1fff8ccc 1fff8ccc 1fff8cd4 1fff8cd4     ................
1fff8ce4:	1fff8cdc 1fff8cdc 1fff8ce4 1fff8ce4     ................
1fff8cf4:	1fff8cec 1fff8cec 1fff8cf4 1fff8cf4     ................
1fff8d04:	1fff8cfc 1fff8cfc 1fff8d04 1fff8d04     ................
1fff8d14:	1fff8d0c 1fff8d0c 1fff8d14 1fff8d14     ................
1fff8d24:	1fff8d1c 1fff8d1c 1fff8d24 1fff8d24     ........$...$...
1fff8d34:	1fff8d2c 1fff8d2c 1fff8d34 1fff8d34     ,...,...4...4...
1fff8d44:	1fff8d3c 1fff8d3c 1fff8d44 1fff8d44     <...<...D...D...
1fff8d54:	1fff8d4c 1fff8d4c 1fff8d54 1fff8d54     L...L...T...T...
1fff8d64:	1fff8d5c 1fff8d5c 1fff8d64 1fff8d64     \...\...d...d...
1fff8d74:	1fff8d6c 1fff8d6c 1fff8d74 1fff8d74     l...l...t...t...
1fff8d84:	1fff8d7c 1fff8d7c 1fff8d84 1fff8d84     |...|...........
1fff8d94:	1fff8d8c 1fff8d8c 1fff8d94 1fff8d94     ................
1fff8da4:	1fff8d9c 1fff8d9c 1fff8da4 1fff8da4     ................
1fff8db4:	1fff8dac 1fff8dac 1fff8db4 1fff8db4     ................
1fff8dc4:	1fff8dbc 1fff8dbc 1fff8dc4 1fff8dc4     ................
1fff8dd4:	1fff8dcc 1fff8dcc 1fff8dd4 1fff8dd4     ................
1fff8de4:	1fff8ddc 1fff8ddc 1fff8de4 1fff8de4     ................
1fff8df4:	1fff8dec 1fff8dec 1fff8df4 1fff8df4     ................
1fff8e04:	1fff8dfc 1fff8dfc 1fff8e04 1fff8e04     ................
1fff8e14:	1fff8e0c 1fff8e0c 1fff8e14 1fff8e14     ................
1fff8e24:	1fff8e1c 1fff8e1c 1fff8e24 1fff8e24     ........$...$...
1fff8e34:	1fff8e2c 1fff8e2c 1fff8e34 1fff8e34     ,...,...4...4...
1fff8e44:	1fff8e3c 1fff8e3c 1fff8e44 1fff8e44     <...<...D...D...
1fff8e54:	1fff8e4c 1fff8e4c 1fff8e54 1fff8e54     L...L...T...T...
1fff8e64:	1fff8e5c 1fff8e5c 1fff8e64 1fff8e64     \...\...d...d...
1fff8e74:	1fff8e6c 1fff8e6c 1fff8e74 1fff8e74     l...l...t...t...
1fff8e84:	1fff8e7c 1fff8e7c 1fff8e84 1fff8e84     |...|...........
1fff8e94:	1fff8e8c 1fff8e8c 1fff8e94 1fff8e94     ................
1fff8ea4:	1fff8e9c 1fff8e9c 1fff8ea4 1fff8ea4     ................
1fff8eb4:	1fff8eac 1fff8eac 1fff8eb4 1fff8eb4     ................

1fff8ec4 <__malloc_sbrk_base>:
1fff8ec4:	ffffffff                                ....

1fff8ec8 <__malloc_trim_threshold>:
1fff8ec8:	00020000                                ....

1fff8ecc <__sglue>:
1fff8ecc:	00000000 00000003 1fffbca4              ............

1fff8ed8 <__global_locale>:
1fff8ed8:	00000043 00000000 00000000 00000000     C...............
	...
1fff8ef8:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f18:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f38:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f58:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f78:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f98:	00000043 00000000 00000000 00000000     C...............
	...
1fff8fb8:	000108b1 00010129 00000000 000171c4     ....)........q..
1fff8fc8:	00015dc0 00015cd4 00015cd4 00015cd4     .]...\...\...\..
1fff8fd8:	00015cd4 00015cd4 00015cd4 00015cd4     .\...\...\...\..
1fff8fe8:	00015cd4 00015cd4 ffffffff ffffffff     .\...\..........
1fff8ff8:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
1fff9020:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

1fff9048 <_impure_data>:
1fff9048:	00000000 1fffbca4 1fffbd0c 1fffbd74     ............t...
	...
1fff90e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
1fff90f0:	0005deec 0000000b 00000000 00000000     ................
	...

1fff9168 <_impure_ptr>:
1fff9168:	1fff9048                                H...

1fff916c <__atexit_recursive_mutex>:
1fff916c:	1fffbde4                                ....
